
Bad_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc98  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  0800ce24  0800ce24  0001ce24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf98  0800cf98  00020240  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf98  0800cf98  0001cf98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cfa0  0800cfa0  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cfa0  0800cfa0  0001cfa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cfa4  0800cfa4  0001cfa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800cfa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cd4  20000240  0800d1e8  00020240  2**2
                  ALLOC
 10 ._user_heap_stack 00001604  20001f14  0800d1e8  00021f14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020847  00000000  00000000  000202b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000537e  00000000  00000000  00040afa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b18  00000000  00000000  00045e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014ad  00000000  00000000  00047990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000265e5  00000000  00000000  00048e3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025a1f  00000000  00000000  0006f422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2365  00000000  00000000  00094e41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006ed0  00000000  00000000  001671a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0016e078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000240 	.word	0x20000240
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800ce0c 	.word	0x0800ce0c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000244 	.word	0x20000244
 80001c8:	0800ce0c 	.word	0x0800ce0c

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295
 80001f0:	f000 b970 	b.w	80004d4 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9e08      	ldr	r6, [sp, #32]
 8000212:	460d      	mov	r5, r1
 8000214:	4604      	mov	r4, r0
 8000216:	460f      	mov	r7, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14a      	bne.n	80002b2 <__udivmoddi4+0xa6>
 800021c:	428a      	cmp	r2, r1
 800021e:	4694      	mov	ip, r2
 8000220:	d965      	bls.n	80002ee <__udivmoddi4+0xe2>
 8000222:	fab2 f382 	clz	r3, r2
 8000226:	b143      	cbz	r3, 800023a <__udivmoddi4+0x2e>
 8000228:	fa02 fc03 	lsl.w	ip, r2, r3
 800022c:	f1c3 0220 	rsb	r2, r3, #32
 8000230:	409f      	lsls	r7, r3
 8000232:	fa20 f202 	lsr.w	r2, r0, r2
 8000236:	4317      	orrs	r7, r2
 8000238:	409c      	lsls	r4, r3
 800023a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023e:	fa1f f58c 	uxth.w	r5, ip
 8000242:	fbb7 f1fe 	udiv	r1, r7, lr
 8000246:	0c22      	lsrs	r2, r4, #16
 8000248:	fb0e 7711 	mls	r7, lr, r1, r7
 800024c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000250:	fb01 f005 	mul.w	r0, r1, r5
 8000254:	4290      	cmp	r0, r2
 8000256:	d90a      	bls.n	800026e <__udivmoddi4+0x62>
 8000258:	eb1c 0202 	adds.w	r2, ip, r2
 800025c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000260:	f080 811c 	bcs.w	800049c <__udivmoddi4+0x290>
 8000264:	4290      	cmp	r0, r2
 8000266:	f240 8119 	bls.w	800049c <__udivmoddi4+0x290>
 800026a:	3902      	subs	r1, #2
 800026c:	4462      	add	r2, ip
 800026e:	1a12      	subs	r2, r2, r0
 8000270:	b2a4      	uxth	r4, r4
 8000272:	fbb2 f0fe 	udiv	r0, r2, lr
 8000276:	fb0e 2210 	mls	r2, lr, r0, r2
 800027a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027e:	fb00 f505 	mul.w	r5, r0, r5
 8000282:	42a5      	cmp	r5, r4
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x90>
 8000286:	eb1c 0404 	adds.w	r4, ip, r4
 800028a:	f100 32ff 	add.w	r2, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x294>
 8000292:	42a5      	cmp	r5, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x294>
 8000298:	4464      	add	r4, ip
 800029a:	3802      	subs	r0, #2
 800029c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a0:	1b64      	subs	r4, r4, r5
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11e      	cbz	r6, 80002ae <__udivmoddi4+0xa2>
 80002a6:	40dc      	lsrs	r4, r3
 80002a8:	2300      	movs	r3, #0
 80002aa:	e9c6 4300 	strd	r4, r3, [r6]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0xbc>
 80002b6:	2e00      	cmp	r6, #0
 80002b8:	f000 80ed 	beq.w	8000496 <__udivmoddi4+0x28a>
 80002bc:	2100      	movs	r1, #0
 80002be:	e9c6 0500 	strd	r0, r5, [r6]
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	d149      	bne.n	8000364 <__udivmoddi4+0x158>
 80002d0:	42ab      	cmp	r3, r5
 80002d2:	d302      	bcc.n	80002da <__udivmoddi4+0xce>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	f200 80f8 	bhi.w	80004ca <__udivmoddi4+0x2be>
 80002da:	1a84      	subs	r4, r0, r2
 80002dc:	eb65 0203 	sbc.w	r2, r5, r3
 80002e0:	2001      	movs	r0, #1
 80002e2:	4617      	mov	r7, r2
 80002e4:	2e00      	cmp	r6, #0
 80002e6:	d0e2      	beq.n	80002ae <__udivmoddi4+0xa2>
 80002e8:	e9c6 4700 	strd	r4, r7, [r6]
 80002ec:	e7df      	b.n	80002ae <__udivmoddi4+0xa2>
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xe6>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f382 	clz	r3, r2
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x210>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2101      	movs	r1, #1
 8000308:	fbb2 f5f7 	udiv	r5, r2, r7
 800030c:	fb07 2015 	mls	r0, r7, r5, r2
 8000310:	0c22      	lsrs	r2, r4, #16
 8000312:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000316:	fb0e f005 	mul.w	r0, lr, r5
 800031a:	4290      	cmp	r0, r2
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x124>
 800031e:	eb1c 0202 	adds.w	r2, ip, r2
 8000322:	f105 38ff 	add.w	r8, r5, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x122>
 8000328:	4290      	cmp	r0, r2
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2b8>
 800032e:	4645      	mov	r5, r8
 8000330:	1a12      	subs	r2, r2, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb2 f0f7 	udiv	r0, r2, r7
 8000338:	fb07 2210 	mls	r2, r7, r0, r2
 800033c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x14e>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x14c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2c2>
 8000358:	4610      	mov	r0, r2
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000362:	e79f      	b.n	80002a4 <__udivmoddi4+0x98>
 8000364:	f1c1 0720 	rsb	r7, r1, #32
 8000368:	408b      	lsls	r3, r1
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa05 f401 	lsl.w	r4, r5, r1
 8000376:	fa20 f307 	lsr.w	r3, r0, r7
 800037a:	40fd      	lsrs	r5, r7
 800037c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000380:	4323      	orrs	r3, r4
 8000382:	fbb5 f8f9 	udiv	r8, r5, r9
 8000386:	fa1f fe8c 	uxth.w	lr, ip
 800038a:	fb09 5518 	mls	r5, r9, r8, r5
 800038e:	0c1c      	lsrs	r4, r3, #16
 8000390:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000394:	fb08 f50e 	mul.w	r5, r8, lr
 8000398:	42a5      	cmp	r5, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	fa00 f001 	lsl.w	r0, r0, r1
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b0>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2b4>
 80003b0:	42a5      	cmp	r5, r4
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2b4>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4464      	add	r4, ip
 80003bc:	1b64      	subs	r4, r4, r5
 80003be:	b29d      	uxth	r5, r3
 80003c0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c4:	fb09 4413 	mls	r4, r9, r3, r4
 80003c8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003cc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d0:	45a6      	cmp	lr, r4
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1da>
 80003d4:	eb1c 0404 	adds.w	r4, ip, r4
 80003d8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2ac>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2ac>
 80003e2:	3b02      	subs	r3, #2
 80003e4:	4464      	add	r4, ip
 80003e6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ea:	fba3 9502 	umull	r9, r5, r3, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	42ac      	cmp	r4, r5
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46ae      	mov	lr, r5
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x29c>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x298>
 80003fc:	b156      	cbz	r6, 8000414 <__udivmoddi4+0x208>
 80003fe:	ebb0 0208 	subs.w	r2, r0, r8
 8000402:	eb64 040e 	sbc.w	r4, r4, lr
 8000406:	fa04 f707 	lsl.w	r7, r4, r7
 800040a:	40ca      	lsrs	r2, r1
 800040c:	40cc      	lsrs	r4, r1
 800040e:	4317      	orrs	r7, r2
 8000410:	e9c6 7400 	strd	r7, r4, [r6]
 8000414:	4618      	mov	r0, r3
 8000416:	2100      	movs	r1, #0
 8000418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041c:	f1c3 0120 	rsb	r1, r3, #32
 8000420:	fa02 fc03 	lsl.w	ip, r2, r3
 8000424:	fa20 f201 	lsr.w	r2, r0, r1
 8000428:	fa25 f101 	lsr.w	r1, r5, r1
 800042c:	409d      	lsls	r5, r3
 800042e:	432a      	orrs	r2, r5
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1510 	mls	r5, r7, r0, r1
 8000440:	0c11      	lsrs	r1, r2, #16
 8000442:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000446:	fb00 f50e 	mul.w	r5, r0, lr
 800044a:	428d      	cmp	r5, r1
 800044c:	fa04 f403 	lsl.w	r4, r4, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x258>
 8000452:	eb1c 0101 	adds.w	r1, ip, r1
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b0>
 800045c:	428d      	cmp	r5, r1
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b0>
 8000460:	3802      	subs	r0, #2
 8000462:	4461      	add	r1, ip
 8000464:	1b49      	subs	r1, r1, r5
 8000466:	b292      	uxth	r2, r2
 8000468:	fbb1 f5f7 	udiv	r5, r1, r7
 800046c:	fb07 1115 	mls	r1, r7, r5, r1
 8000470:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000474:	fb05 f10e 	mul.w	r1, r5, lr
 8000478:	4291      	cmp	r1, r2
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x282>
 800047c:	eb1c 0202 	adds.w	r2, ip, r2
 8000480:	f105 38ff 	add.w	r8, r5, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2a8>
 8000486:	4291      	cmp	r1, r2
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2a8>
 800048a:	3d02      	subs	r5, #2
 800048c:	4462      	add	r2, ip
 800048e:	1a52      	subs	r2, r2, r1
 8000490:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0xfc>
 8000496:	4631      	mov	r1, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e708      	b.n	80002ae <__udivmoddi4+0xa2>
 800049c:	4639      	mov	r1, r7
 800049e:	e6e6      	b.n	800026e <__udivmoddi4+0x62>
 80004a0:	4610      	mov	r0, r2
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x90>
 80004a4:	4548      	cmp	r0, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f0>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b0:	3b01      	subs	r3, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f0>
 80004b4:	4645      	mov	r5, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x282>
 80004b8:	462b      	mov	r3, r5
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1da>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x258>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b0>
 80004c4:	3d02      	subs	r5, #2
 80004c6:	4462      	add	r2, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x124>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e70a      	b.n	80002e4 <__udivmoddi4+0xd8>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x14e>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 030c 	add.w	r3, r7, #12
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ee:	4b24      	ldr	r3, [pc, #144]	; (8000580 <MX_GPIO_Init+0xa8>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	4a23      	ldr	r2, [pc, #140]	; (8000580 <MX_GPIO_Init+0xa8>)
 80004f4:	f043 0304 	orr.w	r3, r3, #4
 80004f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fa:	4b21      	ldr	r3, [pc, #132]	; (8000580 <MX_GPIO_Init+0xa8>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	f003 0304 	and.w	r3, r3, #4
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	4b1e      	ldr	r3, [pc, #120]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	4a1d      	ldr	r2, [pc, #116]	; (8000580 <MX_GPIO_Init+0xa8>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000512:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051e:	4b18      	ldr	r3, [pc, #96]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	4a17      	ldr	r2, [pc, #92]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000524:	f043 0302 	orr.w	r3, r3, #2
 8000528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052a:	4b15      	ldr	r3, [pc, #84]	; (8000580 <MX_GPIO_Init+0xa8>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	f003 0302 	and.w	r3, r3, #2
 8000532:	603b      	str	r3, [r7, #0]
 8000534:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin|LD3_Pin, GPIO_PIN_SET);
 8000536:	2201      	movs	r2, #1
 8000538:	2109      	movs	r1, #9
 800053a:	4812      	ldr	r0, [pc, #72]	; (8000584 <MX_GPIO_Init+0xac>)
 800053c:	f001 fa3a 	bl	80019b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000540:	2301      	movs	r3, #1
 8000542:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000544:	2301      	movs	r3, #1
 8000546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000548:	2301      	movs	r3, #1
 800054a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054c:	2300      	movs	r3, #0
 800054e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	4619      	mov	r1, r3
 8000556:	480b      	ldr	r0, [pc, #44]	; (8000584 <MX_GPIO_Init+0xac>)
 8000558:	f001 f8c2 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800055c:	2308      	movs	r3, #8
 800055e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000560:	2301      	movs	r3, #1
 8000562:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000568:	2300      	movs	r3, #0
 800056a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	4619      	mov	r1, r3
 8000572:	4804      	ldr	r0, [pc, #16]	; (8000584 <MX_GPIO_Init+0xac>)
 8000574:	f001 f8b4 	bl	80016e0 <HAL_GPIO_Init>

}
 8000578:	bf00      	nop
 800057a:	3720      	adds	r7, #32
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40021000 	.word	0x40021000
 8000584:	48000400 	.word	0x48000400

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b0e2      	sub	sp, #392	; 0x188
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 fc84 	bl	8000e9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f855 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f7ff ff9f 	bl	80004d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059a:	f000 fbbb 	bl	8000d14 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800059e:	f000 fa53 	bl	8000a48 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  int flag = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
  isMSC = 1;
 80005a8:	4b1f      	ldr	r3, [pc, #124]	; (8000628 <main+0xa0>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	601a      	str	r2, [r3, #0]
  MX_USB_DEVICE_Init_MSC();
 80005ae:	f00b fdeb 	bl	800c188 <MX_USB_DEVICE_Init_MSC>

  uint8_t Map[MapLen] = Map_Init;
 80005b2:	4a1e      	ldr	r2, [pc, #120]	; (800062c <main+0xa4>)
 80005b4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80005b8:	4611      	mov	r1, r2
 80005ba:	2282      	movs	r2, #130	; 0x82
 80005bc:	4618      	mov	r0, r3
 80005be:	f00c fc17 	bl	800cdf0 <memcpy>
  memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80005c2:	220f      	movs	r2, #15
 80005c4:	2100      	movs	r1, #0
 80005c6:	481a      	ldr	r0, [pc, #104]	; (8000630 <main+0xa8>)
 80005c8:	f00c fbe6 	bl	800cd98 <memset>
  Convert2CapsMap(Map);
 80005cc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 f99d 	bl	8000910 <Convert2CapsMap>

  flag = 1;
 80005d6:	2301      	movs	r3, #1
 80005d8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1){
	  InterruptTrap(&InterruptFlag);
 80005dc:	4815      	ldr	r0, [pc, #84]	; (8000634 <main+0xac>)
 80005de:	f000 f9c3 	bl	8000968 <InterruptTrap>

	  if(flag == 1){
 80005e2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d1f8      	bne.n	80005dc <main+0x54>
		  HAL_Delay(30000);
 80005ea:	f247 5030 	movw	r0, #30000	; 0x7530
 80005ee:	f000 fcc9 	bl	8000f84 <HAL_Delay>
		  SwitchToHID();
 80005f2:	f000 f89d 	bl	8000730 <SwitchToHID>
		  char AttackStr[256];
		  strcpy(AttackStr, "!@#$%^&*()_+1234567890~`{}|:\"<>?[];',./ashdahskdhasjdeuwhuASDJDHJAJKDHBSXAHE\n");
 80005f6:	463b      	mov	r3, r7
 80005f8:	4a0f      	ldr	r2, [pc, #60]	; (8000638 <main+0xb0>)
 80005fa:	4618      	mov	r0, r3
 80005fc:	4611      	mov	r1, r2
 80005fe:	234e      	movs	r3, #78	; 0x4e
 8000600:	461a      	mov	r2, r3
 8000602:	f00c fbf5 	bl	800cdf0 <memcpy>
		  SimulateKeyStrokes(AttackStr, strlen(AttackStr), &PrintCnt);
 8000606:	463b      	mov	r3, r7
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff fddf 	bl	80001cc <strlen>
 800060e:	4603      	mov	r3, r0
 8000610:	4619      	mov	r1, r3
 8000612:	463b      	mov	r3, r7
 8000614:	4a09      	ldr	r2, [pc, #36]	; (800063c <main+0xb4>)
 8000616:	4618      	mov	r0, r3
 8000618:	f000 f93e 	bl	8000898 <SimulateKeyStrokes>
		  flag = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184

		  SwitchToMSC();
 8000622:	f000 f89d 	bl	8000760 <SwitchToMSC>
	  InterruptTrap(&InterruptFlag);
 8000626:	e7d9      	b.n	80005dc <main+0x54>
 8000628:	20000978 	.word	0x20000978
 800062c:	0800ce74 	.word	0x0800ce74
 8000630:	2000025c 	.word	0x2000025c
 8000634:	20000270 	.word	0x20000270
 8000638:	0800ce24 	.word	0x0800ce24
 800063c:	20000278 	.word	0x20000278

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b096      	sub	sp, #88	; 0x58
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	2244      	movs	r2, #68	; 0x44
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f00c fba2 	bl	800cd98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	463b      	mov	r3, r7
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000662:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000666:	f002 ff9f 	bl	80035a8 <HAL_PWREx_ControlVoltageScaling>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000670:	f000 f9e4 	bl	8000a3c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000674:	f002 ff7a 	bl	800356c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000678:	4b21      	ldr	r3, [pc, #132]	; (8000700 <SystemClock_Config+0xc0>)
 800067a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800067e:	4a20      	ldr	r2, [pc, #128]	; (8000700 <SystemClock_Config+0xc0>)
 8000680:	f023 0318 	bic.w	r3, r3, #24
 8000684:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000688:	2314      	movs	r3, #20
 800068a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000690:	2301      	movs	r3, #1
 8000692:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000698:	2360      	movs	r3, #96	; 0x60
 800069a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069c:	2302      	movs	r3, #2
 800069e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006a0:	2301      	movs	r3, #1
 80006a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006a4:	2301      	movs	r3, #1
 80006a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 24;
 80006a8:	2318      	movs	r3, #24
 80006aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006ac:	2307      	movs	r3, #7
 80006ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	4618      	mov	r0, r3
 80006be:	f002 ffd9 	bl	8003674 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006c8:	f000 f9b8 	bl	8000a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2303      	movs	r3, #3
 80006d2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e0:	463b      	mov	r3, r7
 80006e2:	2102      	movs	r1, #2
 80006e4:	4618      	mov	r0, r3
 80006e6:	f003 fbd9 	bl	8003e9c <HAL_RCC_ClockConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006f0:	f000 f9a4 	bl	8000a3c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006f4:	f003 ffec 	bl	80046d0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006f8:	bf00      	nop
 80006fa:	3758      	adds	r7, #88	; 0x58
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40021000 	.word	0x40021000

08000704 <SimulateUSB_unplug>:

/* USER CODE BEGIN 4 */
void SimulateUSB_unplug(){
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800070e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000712:	f001 f94f 	bl	80019b4 <HAL_GPIO_WritePin>
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}

0800071a <SimulateUSB_plugin>:

void SimulateUSB_plugin(){
 800071a:	b580      	push	{r7, lr}
 800071c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800071e:	2201      	movs	r2, #1
 8000720:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000724:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000728:	f001 f944 	bl	80019b4 <HAL_GPIO_WritePin>
}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}

08000730 <SwitchToHID>:

void SwitchToHID(){
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	SimulateUSB_unplug();
 8000734:	f7ff ffe6 	bl	8000704 <SimulateUSB_unplug>
	isMSC = 0;
 8000738:	4b08      	ldr	r3, [pc, #32]	; (800075c <SwitchToHID+0x2c>)
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
	HAL_Delay(PlugSlot);
 800073e:	2032      	movs	r0, #50	; 0x32
 8000740:	f000 fc20 	bl	8000f84 <HAL_Delay>
	SimulateUSB_plugin();
 8000744:	f7ff ffe9 	bl	800071a <SimulateUSB_plugin>
	MX_TIM2_Init();
 8000748:	f000 fa72 	bl	8000c30 <MX_TIM2_Init>
	MX_USB_DEVICE_Init();
 800074c:	f00b fcec 	bl	800c128 <MX_USB_DEVICE_Init>
	HAL_Delay(PlugSlot*10);
 8000750:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000754:	f000 fc16 	bl	8000f84 <HAL_Delay>
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000978 	.word	0x20000978

08000760 <SwitchToMSC>:

void SwitchToMSC(){
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	SimulateUSB_unplug();
 8000764:	f7ff ffce 	bl	8000704 <SimulateUSB_unplug>
	isMSC = 1;
 8000768:	4b07      	ldr	r3, [pc, #28]	; (8000788 <SwitchToMSC+0x28>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
	HAL_Delay(PlugSlot);
 800076e:	2032      	movs	r0, #50	; 0x32
 8000770:	f000 fc08 	bl	8000f84 <HAL_Delay>
	SimulateUSB_plugin();
 8000774:	f7ff ffd1 	bl	800071a <SimulateUSB_plugin>
	MX_USB_DEVICE_Init_MSC();
 8000778:	f00b fd06 	bl	800c188 <MX_USB_DEVICE_Init_MSC>
	HAL_Delay(PlugSlot*10);
 800077c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000780:	f000 fc00 	bl	8000f84 <HAL_Delay>
}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000978 	.word	0x20000978

0800078c <Get_Descriptor>:

void Get_Descriptor(uint8_t ascii){
 800078c:	b580      	push	{r7, lr}
 800078e:	b0a4      	sub	sp, #144	; 0x90
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8000796:	220f      	movs	r2, #15
 8000798:	2100      	movs	r1, #0
 800079a:	481e      	ldr	r0, [pc, #120]	; (8000814 <Get_Descriptor+0x88>)
 800079c:	f00c fafc 	bl	800cd98 <memset>
	uint8_t Map[MapLen] = Map_Init;
 80007a0:	4a1d      	ldr	r2, [pc, #116]	; (8000818 <Get_Descriptor+0x8c>)
 80007a2:	f107 030c 	add.w	r3, r7, #12
 80007a6:	4611      	mov	r1, r2
 80007a8:	2282      	movs	r2, #130	; 0x82
 80007aa:	4618      	mov	r0, r3
 80007ac:	f00c fb20 	bl	800cdf0 <memcpy>
	uint8_t pos = Map[ascii];
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	3390      	adds	r3, #144	; 0x90
 80007b4:	443b      	add	r3, r7
 80007b6:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 80007ba:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	sent_buffer[(uint8_t)(pos>>4)] |= (1<<((uint8_t)(pos&0x07)));
 80007be:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80007c2:	091b      	lsrs	r3, r3, #4
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	461a      	mov	r2, r3
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <Get_Descriptor+0x88>)
 80007ca:	5c9b      	ldrb	r3, [r3, r2]
 80007cc:	b25a      	sxtb	r2, r3
 80007ce:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80007d2:	f003 0307 	and.w	r3, r3, #7
 80007d6:	2101      	movs	r1, #1
 80007d8:	fa01 f303 	lsl.w	r3, r1, r3
 80007dc:	b25b      	sxtb	r3, r3
 80007de:	4313      	orrs	r3, r2
 80007e0:	b259      	sxtb	r1, r3
 80007e2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80007e6:	091b      	lsrs	r3, r3, #4
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	461a      	mov	r2, r3
 80007ec:	b2c9      	uxtb	r1, r1
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <Get_Descriptor+0x88>)
 80007f0:	5499      	strb	r1, [r3, r2]
	if((pos&0x08) == 8)
 80007f2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80007f6:	f003 0308 	and.w	r3, r3, #8
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d006      	beq.n	800080c <Get_Descriptor+0x80>
		sent_buffer[0] |= 0x02;
 80007fe:	4b05      	ldr	r3, [pc, #20]	; (8000814 <Get_Descriptor+0x88>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	f043 0302 	orr.w	r3, r3, #2
 8000806:	b2da      	uxtb	r2, r3
 8000808:	4b02      	ldr	r3, [pc, #8]	; (8000814 <Get_Descriptor+0x88>)
 800080a:	701a      	strb	r2, [r3, #0]
}
 800080c:	bf00      	nop
 800080e:	3790      	adds	r7, #144	; 0x90
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	2000025c 	.word	0x2000025c
 8000818:	0800ce74 	.word	0x0800ce74

0800081c <SimulateKeyPress>:

void SimulateKeyPress(uint8_t ascii){
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
    //get key:ascii Descriptor
    Get_Descriptor(ascii);
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff ffaf 	bl	800078c <Get_Descriptor>
    //Ensure that this instruction is executed in uppercase environment.
//    while((recv_buffer[0]&0x02) != 0x02)
//    	HAL_Delay(1);
    //Sent Descriptor report
    USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800082e:	220f      	movs	r2, #15
 8000830:	4903      	ldr	r1, [pc, #12]	; (8000840 <SimulateKeyPress+0x24>)
 8000832:	4804      	ldr	r0, [pc, #16]	; (8000844 <SimulateKeyPress+0x28>)
 8000834:	f007 ffb6 	bl	80087a4 <USBD_CUSTOM_HID_SendReport>
//    if((recv_buffer[0]&0x02) != 0x02)
//    	NeedRollBack = 1;
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	2000025c 	.word	0x2000025c
 8000844:	200003c0 	.word	0x200003c0

08000848 <SimulateKeyRelease>:

void SimulateKeyRelease(){
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
    //set 0
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800084c:	220f      	movs	r2, #15
 800084e:	2100      	movs	r1, #0
 8000850:	4804      	ldr	r0, [pc, #16]	; (8000864 <SimulateKeyRelease+0x1c>)
 8000852:	f00c faa1 	bl	800cd98 <memset>
    //Sent Descriptor report
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8000856:	220f      	movs	r2, #15
 8000858:	4902      	ldr	r1, [pc, #8]	; (8000864 <SimulateKeyRelease+0x1c>)
 800085a:	4803      	ldr	r0, [pc, #12]	; (8000868 <SimulateKeyRelease+0x20>)
 800085c:	f007 ffa2 	bl	80087a4 <USBD_CUSTOM_HID_SendReport>
}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	2000025c 	.word	0x2000025c
 8000868:	200003c0 	.word	0x200003c0

0800086c <SimulateKeyStroke>:

void SimulateKeyStroke(uint8_t ascii){
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
	SimulateKeyPress(ascii);
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff ffcf 	bl	800081c <SimulateKeyPress>
    HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 800087e:	2023      	movs	r0, #35	; 0x23
 8000880:	f000 fb80 	bl	8000f84 <HAL_Delay>
    SimulateKeyRelease();
 8000884:	f7ff ffe0 	bl	8000848 <SimulateKeyRelease>
    HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 8000888:	2023      	movs	r0, #35	; 0x23
 800088a:	f000 fb7b 	bl	8000f84 <HAL_Delay>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <SimulateKeyStrokes>:

void SimulateKeyStrokes(char *str, int len, int *cntNow){
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
    for(; *cntNow < len; (*cntNow)++){
 80008a4:	e025      	b.n	80008f2 <SimulateKeyStrokes+0x5a>
    	//Ensure func SimulateKeyStroke is executed in uppercase environment.
    	if((recv_buffer[0]&0x02) != 0x02){
 80008a6:	4b18      	ldr	r3, [pc, #96]	; (8000908 <SimulateKeyStrokes+0x70>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	f003 0302 	and.w	r3, r3, #2
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d102      	bne.n	80008b8 <SimulateKeyStrokes+0x20>
    		SimulateKeyStroke(128);
 80008b2:	2080      	movs	r0, #128	; 0x80
 80008b4:	f7ff ffda 	bl	800086c <SimulateKeyStroke>
    	}
    	SimulateKeyStroke(str[*cntNow]);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	461a      	mov	r2, r3
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	4413      	add	r3, r2
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff ffd1 	bl	800086c <SimulateKeyStroke>
    	//Determine if RollBack is necessary
    	if(NeedRollBack == 1){
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <SimulateKeyStrokes+0x74>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d10a      	bne.n	80008e8 <SimulateKeyStrokes+0x50>
    		NeedRollBack = 0;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <SimulateKeyStrokes+0x74>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
    		(*cntNow)--;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	1e5a      	subs	r2, r3, #1
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	601a      	str	r2, [r3, #0]
    		SimulateKeyStroke(129);
 80008e2:	2081      	movs	r0, #129	; 0x81
 80008e4:	f7ff ffc2 	bl	800086c <SimulateKeyStroke>
    for(; *cntNow < len; (*cntNow)++){
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	1c5a      	adds	r2, r3, #1
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	68ba      	ldr	r2, [r7, #8]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	dcd4      	bgt.n	80008a6 <SimulateKeyStrokes+0xe>
    	}
    }
}
 80008fc:	bf00      	nop
 80008fe:	bf00      	nop
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	2000026c 	.word	0x2000026c
 800090c:	2000027c 	.word	0x2000027c

08000910 <Convert2CapsMap>:
		SimulateKeyStroke(128);
		PrintRecvBuf(recv_buffer);  //print Keyboard LED Status
	}
}

void Convert2CapsMap(uint8_t LowerCaseMap[MapLen]){
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	for(uint8_t cnt = 'A'; cnt <= 'Z'; cnt++){
 8000918:	2341      	movs	r3, #65	; 0x41
 800091a:	73fb      	strb	r3, [r7, #15]
 800091c:	e01a      	b.n	8000954 <Convert2CapsMap+0x44>
		LowerCaseMap[cnt] &= 0xf7;
 800091e:	7bfb      	ldrb	r3, [r7, #15]
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	4413      	add	r3, r2
 8000924:	781a      	ldrb	r2, [r3, #0]
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	6879      	ldr	r1, [r7, #4]
 800092a:	440b      	add	r3, r1
 800092c:	f022 0208 	bic.w	r2, r2, #8
 8000930:	b2d2      	uxtb	r2, r2
 8000932:	701a      	strb	r2, [r3, #0]
		LowerCaseMap[cnt+'a'-'A'] |= 0x08;
 8000934:	7bfb      	ldrb	r3, [r7, #15]
 8000936:	3320      	adds	r3, #32
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	4413      	add	r3, r2
 800093c:	781a      	ldrb	r2, [r3, #0]
 800093e:	7bfb      	ldrb	r3, [r7, #15]
 8000940:	3320      	adds	r3, #32
 8000942:	6879      	ldr	r1, [r7, #4]
 8000944:	440b      	add	r3, r1
 8000946:	f042 0208 	orr.w	r2, r2, #8
 800094a:	b2d2      	uxtb	r2, r2
 800094c:	701a      	strb	r2, [r3, #0]
	for(uint8_t cnt = 'A'; cnt <= 'Z'; cnt++){
 800094e:	7bfb      	ldrb	r3, [r7, #15]
 8000950:	3301      	adds	r3, #1
 8000952:	73fb      	strb	r3, [r7, #15]
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	2b5a      	cmp	r3, #90	; 0x5a
 8000958:	d9e1      	bls.n	800091e <Convert2CapsMap+0xe>
	}
}
 800095a:	bf00      	nop
 800095c:	bf00      	nop
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <InterruptTrap>:

void InterruptTrap(int *InterruptFlag){
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	if(*InterruptFlag == 1){
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d10f      	bne.n	8000998 <InterruptTrap+0x30>
		*InterruptFlag = 0;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
		//Trigger timer interrupt immediately by setting the value of the register
		TIM2->EGR |= TIM_EGR_UG;
 800097e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000982:	695b      	ldr	r3, [r3, #20]
 8000984:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6153      	str	r3, [r2, #20]
		//Second entry interrupt
		MX_TIM2_Init();
 800098e:	f000 f94f 	bl	8000c30 <MX_TIM2_Init>
		HAL_TIM_Base_Start_IT(&htim2);
 8000992:	4803      	ldr	r0, [pc, #12]	; (80009a0 <InterruptTrap+0x38>)
 8000994:	f004 f898 	bl	8004ac8 <HAL_TIM_Base_Start_IT>
	}
}
 8000998:	bf00      	nop
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	200002e4 	.word	0x200002e4

080009a4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a1d      	ldr	r2, [pc, #116]	; (8000a24 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d133      	bne.n	8000a1c <HAL_TIM_PeriodElapsedCallback+0x78>
		if(InterruptCnt == 0){
 80009b4:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d108      	bne.n	80009ce <HAL_TIM_PeriodElapsedCallback+0x2a>
			//Simulate press operation
			Get_Descriptor(128);
 80009bc:	2080      	movs	r0, #128	; 0x80
 80009be:	f7ff fee5 	bl	800078c <Get_Descriptor>
			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80009c2:	220f      	movs	r2, #15
 80009c4:	4919      	ldr	r1, [pc, #100]	; (8000a2c <HAL_TIM_PeriodElapsedCallback+0x88>)
 80009c6:	481a      	ldr	r0, [pc, #104]	; (8000a30 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80009c8:	f007 feec 	bl	80087a4 <USBD_CUSTOM_HID_SendReport>
 80009cc:	e018      	b.n	8000a00 <HAL_TIM_PeriodElapsedCallback+0x5c>
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
		}else if(InterruptCnt == 1){
 80009ce:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d10c      	bne.n	80009f0 <HAL_TIM_PeriodElapsedCallback+0x4c>
			//Simulate release operation
			SimulateKeyRelease();
 80009d6:	f7ff ff37 	bl	8000848 <SimulateKeyRelease>
			//Judging whether to Interrupt
			if((recv_buffer[0]&0x02) != 0x02)
 80009da:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	f003 0302 	and.w	r3, r3, #2
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d10c      	bne.n	8000a00 <HAL_TIM_PeriodElapsedCallback+0x5c>
				InterruptCnt = -1;
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80009e8:	f04f 32ff 	mov.w	r2, #4294967295
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	e007      	b.n	8000a00 <HAL_TIM_PeriodElapsedCallback+0x5c>
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
		}else{
			//off timer
			TIM2->CR1 &= ~TIM_CR1_CEN;
 80009f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009fa:	f023 0301 	bic.w	r3, r3, #1
 80009fe:	6013      	str	r3, [r2, #0]
		}
		InterruptCnt = (InterruptCnt+1)%3;
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	1c59      	adds	r1, r3, #1
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000a08:	fb83 3201 	smull	r3, r2, r3, r1
 8000a0c:	17cb      	asrs	r3, r1, #31
 8000a0e:	1ad2      	subs	r2, r2, r3
 8000a10:	4613      	mov	r3, r2
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	4413      	add	r3, r2
 8000a16:	1aca      	subs	r2, r1, r3
 8000a18:	4b03      	ldr	r3, [pc, #12]	; (8000a28 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000a1a:	601a      	str	r2, [r3, #0]
	}
}
 8000a1c:	bf00      	nop
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	200002e4 	.word	0x200002e4
 8000a28:	20000274 	.word	0x20000274
 8000a2c:	2000025c 	.word	0x2000025c
 8000a30:	200003c0 	.word	0x200003c0
 8000a34:	2000026c 	.word	0x2000026c
 8000a38:	55555556 	.word	0x55555556

08000a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a40:	b672      	cpsid	i
}
 8000a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <Error_Handler+0x8>
	...

08000a48 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000a4c:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <MX_SPI1_Init+0x74>)
 8000a4e:	4a1c      	ldr	r2, [pc, #112]	; (8000ac0 <MX_SPI1_Init+0x78>)
 8000a50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a52:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <MX_SPI1_Init+0x74>)
 8000a54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a5a:	4b18      	ldr	r3, [pc, #96]	; (8000abc <MX_SPI1_Init+0x74>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a60:	4b16      	ldr	r3, [pc, #88]	; (8000abc <MX_SPI1_Init+0x74>)
 8000a62:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a66:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a68:	4b14      	ldr	r3, [pc, #80]	; (8000abc <MX_SPI1_Init+0x74>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a6e:	4b13      	ldr	r3, [pc, #76]	; (8000abc <MX_SPI1_Init+0x74>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <MX_SPI1_Init+0x74>)
 8000a76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a7a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <MX_SPI1_Init+0x74>)
 8000a7e:	2228      	movs	r2, #40	; 0x28
 8000a80:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <MX_SPI1_Init+0x74>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <MX_SPI1_Init+0x74>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <MX_SPI1_Init+0x74>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a94:	4b09      	ldr	r3, [pc, #36]	; (8000abc <MX_SPI1_Init+0x74>)
 8000a96:	2207      	movs	r2, #7
 8000a98:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a9a:	4b08      	ldr	r3, [pc, #32]	; (8000abc <MX_SPI1_Init+0x74>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <MX_SPI1_Init+0x74>)
 8000aa2:	2208      	movs	r2, #8
 8000aa4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000aa6:	4805      	ldr	r0, [pc, #20]	; (8000abc <MX_SPI1_Init+0x74>)
 8000aa8:	f003 ff14 	bl	80048d4 <HAL_SPI_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ab2:	f7ff ffc3 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000280 	.word	0x20000280
 8000ac0:	40013000 	.word	0x40013000

08000ac4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	; 0x28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a17      	ldr	r2, [pc, #92]	; (8000b40 <HAL_SPI_MspInit+0x7c>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d128      	bne.n	8000b38 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ae6:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <HAL_SPI_MspInit+0x80>)
 8000ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aea:	4a16      	ldr	r2, [pc, #88]	; (8000b44 <HAL_SPI_MspInit+0x80>)
 8000aec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000af0:	6613      	str	r3, [r2, #96]	; 0x60
 8000af2:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <HAL_SPI_MspInit+0x80>)
 8000af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000af6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <HAL_SPI_MspInit+0x80>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b02:	4a10      	ldr	r2, [pc, #64]	; (8000b44 <HAL_SPI_MspInit+0x80>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <HAL_SPI_MspInit+0x80>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000b16:	23c2      	movs	r3, #194	; 0xc2
 8000b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b22:	2303      	movs	r3, #3
 8000b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b26:	2305      	movs	r3, #5
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b34:	f000 fdd4 	bl	80016e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b38:	bf00      	nop
 8000b3a:	3728      	adds	r7, #40	; 0x28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40013000 	.word	0x40013000
 8000b44:	40021000 	.word	0x40021000

08000b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <HAL_MspInit+0x44>)
 8000b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b52:	4a0e      	ldr	r2, [pc, #56]	; (8000b8c <HAL_MspInit+0x44>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <HAL_MspInit+0x44>)
 8000b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <HAL_MspInit+0x44>)
 8000b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6a:	4a08      	ldr	r2, [pc, #32]	; (8000b8c <HAL_MspInit+0x44>)
 8000b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b70:	6593      	str	r3, [r2, #88]	; 0x58
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_MspInit+0x44>)
 8000b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	40021000 	.word	0x40021000

08000b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b94:	e7fe      	b.n	8000b94 <NMI_Handler+0x4>

08000b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <HardFault_Handler+0x4>

08000b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <MemManage_Handler+0x4>

08000ba2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <BusFault_Handler+0x4>

08000ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <UsageFault_Handler+0x4>

08000bae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bdc:	f000 f9b2 	bl	8000f44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <TIM2_IRQHandler+0x10>)
 8000bea:	f003 ffc1 	bl	8004b70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200002e4 	.word	0x200002e4

08000bf8 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000bfc:	4802      	ldr	r0, [pc, #8]	; (8000c08 <USB_IRQHandler+0x10>)
 8000bfe:	f001 f819 	bl	8001c34 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000b7c 	.word	0x20000b7c

08000c0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <SystemInit+0x20>)
 8000c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c16:	4a05      	ldr	r2, [pc, #20]	; (8000c2c <SystemInit+0x20>)
 8000c18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b088      	sub	sp, #32
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c36:	f107 0310 	add.w	r3, r7, #16
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c4e:	4b1e      	ldr	r3, [pc, #120]	; (8000cc8 <MX_TIM2_Init+0x98>)
 8000c50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c54:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8000c56:	4b1c      	ldr	r3, [pc, #112]	; (8000cc8 <MX_TIM2_Init+0x98>)
 8000c58:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000c5c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <MX_TIM2_Init+0x98>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 399;
 8000c64:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <MX_TIM2_Init+0x98>)
 8000c66:	f240 128f 	movw	r2, #399	; 0x18f
 8000c6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c6c:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <MX_TIM2_Init+0x98>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <MX_TIM2_Init+0x98>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c78:	4813      	ldr	r0, [pc, #76]	; (8000cc8 <MX_TIM2_Init+0x98>)
 8000c7a:	f003 fece 	bl	8004a1a <HAL_TIM_Base_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000c84:	f7ff feda 	bl	8000a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c8e:	f107 0310 	add.w	r3, r7, #16
 8000c92:	4619      	mov	r1, r3
 8000c94:	480c      	ldr	r0, [pc, #48]	; (8000cc8 <MX_TIM2_Init+0x98>)
 8000c96:	f004 f86d 	bl	8004d74 <HAL_TIM_ConfigClockSource>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000ca0:	f7ff fecc 	bl	8000a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <MX_TIM2_Init+0x98>)
 8000cb2:	f004 fa4f 	bl	8005154 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000cbc:	f7ff febe 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cc0:	bf00      	nop
 8000cc2:	3720      	adds	r7, #32
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	200002e4 	.word	0x200002e4

08000ccc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cdc:	d113      	bne.n	8000d06 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cde:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <HAL_TIM_Base_MspInit+0x44>)
 8000ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce2:	4a0b      	ldr	r2, [pc, #44]	; (8000d10 <HAL_TIM_Base_MspInit+0x44>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6593      	str	r3, [r2, #88]	; 0x58
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <HAL_TIM_Base_MspInit+0x44>)
 8000cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	201c      	movs	r0, #28
 8000cfc:	f000 fa41 	bl	8001182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d00:	201c      	movs	r0, #28
 8000d02:	f000 fa5a 	bl	80011ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000d06:	bf00      	nop
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40021000 	.word	0x40021000

08000d14 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d18:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <MX_USART2_UART_Init+0x58>)
 8000d1a:	4a15      	ldr	r2, [pc, #84]	; (8000d70 <MX_USART2_UART_Init+0x5c>)
 8000d1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d1e:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <MX_USART2_UART_Init+0x58>)
 8000d20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d26:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <MX_USART2_UART_Init+0x58>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <MX_USART2_UART_Init+0x58>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <MX_USART2_UART_Init+0x58>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <MX_USART2_UART_Init+0x58>)
 8000d3a:	220c      	movs	r2, #12
 8000d3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <MX_USART2_UART_Init+0x58>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d44:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <MX_USART2_UART_Init+0x58>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d4a:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <MX_USART2_UART_Init+0x58>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <MX_USART2_UART_Init+0x58>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d56:	4805      	ldr	r0, [pc, #20]	; (8000d6c <MX_USART2_UART_Init+0x58>)
 8000d58:	f004 fa80 	bl	800525c <HAL_UART_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d62:	f7ff fe6b 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000330 	.word	0x20000330
 8000d70:	40004400 	.word	0x40004400

08000d74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b09e      	sub	sp, #120	; 0x78
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d8c:	f107 0310 	add.w	r3, r7, #16
 8000d90:	2254      	movs	r2, #84	; 0x54
 8000d92:	2100      	movs	r1, #0
 8000d94:	4618      	mov	r0, r3
 8000d96:	f00b ffff 	bl	800cd98 <memset>
  if(uartHandle->Instance==USART2)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a28      	ldr	r2, [pc, #160]	; (8000e40 <HAL_UART_MspInit+0xcc>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d148      	bne.n	8000e36 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000da4:	2302      	movs	r3, #2
 8000da6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000da8:	2300      	movs	r3, #0
 8000daa:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dac:	f107 0310 	add.w	r3, r7, #16
 8000db0:	4618      	mov	r0, r3
 8000db2:	f003 fa97 	bl	80042e4 <HAL_RCCEx_PeriphCLKConfig>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000dbc:	f7ff fe3e 	bl	8000a3c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dc0:	4b20      	ldr	r3, [pc, #128]	; (8000e44 <HAL_UART_MspInit+0xd0>)
 8000dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc4:	4a1f      	ldr	r2, [pc, #124]	; (8000e44 <HAL_UART_MspInit+0xd0>)
 8000dc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dca:	6593      	str	r3, [r2, #88]	; 0x58
 8000dcc:	4b1d      	ldr	r3, [pc, #116]	; (8000e44 <HAL_UART_MspInit+0xd0>)
 8000dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd8:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <HAL_UART_MspInit+0xd0>)
 8000dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ddc:	4a19      	ldr	r2, [pc, #100]	; (8000e44 <HAL_UART_MspInit+0xd0>)
 8000dde:	f043 0301 	orr.w	r3, r3, #1
 8000de2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de4:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <HAL_UART_MspInit+0xd0>)
 8000de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de8:	f003 0301 	and.w	r3, r3, #1
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000df0:	2304      	movs	r3, #4
 8000df2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df4:	2302      	movs	r3, #2
 8000df6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e00:	2307      	movs	r3, #7
 8000e02:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000e04:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0e:	f000 fc67 	bl	80016e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000e12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e16:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e20:	2303      	movs	r3, #3
 8000e22:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000e24:	2303      	movs	r3, #3
 8000e26:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000e28:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e32:	f000 fc55 	bl	80016e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e36:	bf00      	nop
 8000e38:	3778      	adds	r7, #120	; 0x78
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40004400 	.word	0x40004400
 8000e44:	40021000 	.word	0x40021000

08000e48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e80 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e4c:	f7ff fede 	bl	8000c0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e50:	480c      	ldr	r0, [pc, #48]	; (8000e84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e52:	490d      	ldr	r1, [pc, #52]	; (8000e88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e54:	4a0d      	ldr	r2, [pc, #52]	; (8000e8c <LoopForever+0xe>)
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e58:	e002      	b.n	8000e60 <LoopCopyDataInit>

08000e5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5e:	3304      	adds	r3, #4

08000e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e64:	d3f9      	bcc.n	8000e5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e66:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e68:	4c0a      	ldr	r4, [pc, #40]	; (8000e94 <LoopForever+0x16>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e6c:	e001      	b.n	8000e72 <LoopFillZerobss>

08000e6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e70:	3204      	adds	r2, #4

08000e72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e74:	d3fb      	bcc.n	8000e6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e76:	f00b ff97 	bl	800cda8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e7a:	f7ff fb85 	bl	8000588 <main>

08000e7e <LoopForever>:

LoopForever:
    b LoopForever
 8000e7e:	e7fe      	b.n	8000e7e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e80:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e88:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 8000e8c:	0800cfa8 	.word	0x0800cfa8
  ldr r2, =_sbss
 8000e90:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8000e94:	20001f14 	.word	0x20001f14

08000e98 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e98:	e7fe      	b.n	8000e98 <ADC1_IRQHandler>

08000e9a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea4:	2003      	movs	r0, #3
 8000ea6:	f000 f961 	bl	800116c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eaa:	2000      	movs	r0, #0
 8000eac:	f000 f80e 	bl	8000ecc <HAL_InitTick>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d002      	beq.n	8000ebc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	71fb      	strb	r3, [r7, #7]
 8000eba:	e001      	b.n	8000ec0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ebc:	f7ff fe44 	bl	8000b48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ed8:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <HAL_InitTick+0x6c>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d023      	beq.n	8000f28 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ee0:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <HAL_InitTick+0x70>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <HAL_InitTick+0x6c>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f96d 	bl	80011d6 <HAL_SYSTICK_Config>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d10f      	bne.n	8000f22 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b0f      	cmp	r3, #15
 8000f06:	d809      	bhi.n	8000f1c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	6879      	ldr	r1, [r7, #4]
 8000f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f10:	f000 f937 	bl	8001182 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f14:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <HAL_InitTick+0x74>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6013      	str	r3, [r2, #0]
 8000f1a:	e007      	b.n	8000f2c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	73fb      	strb	r3, [r7, #15]
 8000f20:	e004      	b.n	8000f2c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	73fb      	strb	r3, [r7, #15]
 8000f26:	e001      	b.n	8000f2c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000008 	.word	0x20000008
 8000f3c:	20000000 	.word	0x20000000
 8000f40:	20000004 	.word	0x20000004

08000f44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_IncTick+0x20>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_IncTick+0x24>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4413      	add	r3, r2
 8000f54:	4a04      	ldr	r2, [pc, #16]	; (8000f68 <HAL_IncTick+0x24>)
 8000f56:	6013      	str	r3, [r2, #0]
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	20000008 	.word	0x20000008
 8000f68:	200003b8 	.word	0x200003b8

08000f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f70:	4b03      	ldr	r3, [pc, #12]	; (8000f80 <HAL_GetTick+0x14>)
 8000f72:	681b      	ldr	r3, [r3, #0]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	200003b8 	.word	0x200003b8

08000f84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f8c:	f7ff ffee 	bl	8000f6c <HAL_GetTick>
 8000f90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f9c:	d005      	beq.n	8000faa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <HAL_Delay+0x44>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000faa:	bf00      	nop
 8000fac:	f7ff ffde 	bl	8000f6c <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d8f7      	bhi.n	8000fac <HAL_Delay+0x28>
  {
  }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000008 	.word	0x20000008

08000fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffe:	4a04      	ldr	r2, [pc, #16]	; (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	60d3      	str	r3, [r2, #12]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001018:	4b04      	ldr	r3, [pc, #16]	; (800102c <__NVIC_GetPriorityGrouping+0x18>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	0a1b      	lsrs	r3, r3, #8
 800101e:	f003 0307 	and.w	r3, r3, #7
}
 8001022:	4618      	mov	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	2b00      	cmp	r3, #0
 8001040:	db0b      	blt.n	800105a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	f003 021f 	and.w	r2, r3, #31
 8001048:	4907      	ldr	r1, [pc, #28]	; (8001068 <__NVIC_EnableIRQ+0x38>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	095b      	lsrs	r3, r3, #5
 8001050:	2001      	movs	r0, #1
 8001052:	fa00 f202 	lsl.w	r2, r0, r2
 8001056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000e100 	.word	0xe000e100

0800106c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	6039      	str	r1, [r7, #0]
 8001076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107c:	2b00      	cmp	r3, #0
 800107e:	db0a      	blt.n	8001096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	b2da      	uxtb	r2, r3
 8001084:	490c      	ldr	r1, [pc, #48]	; (80010b8 <__NVIC_SetPriority+0x4c>)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	0112      	lsls	r2, r2, #4
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	440b      	add	r3, r1
 8001090:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001094:	e00a      	b.n	80010ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4908      	ldr	r1, [pc, #32]	; (80010bc <__NVIC_SetPriority+0x50>)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	3b04      	subs	r3, #4
 80010a4:	0112      	lsls	r2, r2, #4
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	440b      	add	r3, r1
 80010aa:	761a      	strb	r2, [r3, #24]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000e100 	.word	0xe000e100
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b089      	sub	sp, #36	; 0x24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f1c3 0307 	rsb	r3, r3, #7
 80010da:	2b04      	cmp	r3, #4
 80010dc:	bf28      	it	cs
 80010de:	2304      	movcs	r3, #4
 80010e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3304      	adds	r3, #4
 80010e6:	2b06      	cmp	r3, #6
 80010e8:	d902      	bls.n	80010f0 <NVIC_EncodePriority+0x30>
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3b03      	subs	r3, #3
 80010ee:	e000      	b.n	80010f2 <NVIC_EncodePriority+0x32>
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	f04f 32ff 	mov.w	r2, #4294967295
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43da      	mvns	r2, r3
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	401a      	ands	r2, r3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001108:	f04f 31ff 	mov.w	r1, #4294967295
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa01 f303 	lsl.w	r3, r1, r3
 8001112:	43d9      	mvns	r1, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	4313      	orrs	r3, r2
         );
}
 800111a:	4618      	mov	r0, r3
 800111c:	3724      	adds	r7, #36	; 0x24
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3b01      	subs	r3, #1
 8001134:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001138:	d301      	bcc.n	800113e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800113a:	2301      	movs	r3, #1
 800113c:	e00f      	b.n	800115e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800113e:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <SysTick_Config+0x40>)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001146:	210f      	movs	r1, #15
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	f7ff ff8e 	bl	800106c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <SysTick_Config+0x40>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001156:	4b04      	ldr	r3, [pc, #16]	; (8001168 <SysTick_Config+0x40>)
 8001158:	2207      	movs	r2, #7
 800115a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	e000e010 	.word	0xe000e010

0800116c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff ff29 	bl	8000fcc <__NVIC_SetPriorityGrouping>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b086      	sub	sp, #24
 8001186:	af00      	add	r7, sp, #0
 8001188:	4603      	mov	r3, r0
 800118a:	60b9      	str	r1, [r7, #8]
 800118c:	607a      	str	r2, [r7, #4]
 800118e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001194:	f7ff ff3e 	bl	8001014 <__NVIC_GetPriorityGrouping>
 8001198:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	68b9      	ldr	r1, [r7, #8]
 800119e:	6978      	ldr	r0, [r7, #20]
 80011a0:	f7ff ff8e 	bl	80010c0 <NVIC_EncodePriority>
 80011a4:	4602      	mov	r2, r0
 80011a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011aa:	4611      	mov	r1, r2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff5d 	bl	800106c <__NVIC_SetPriority>
}
 80011b2:	bf00      	nop
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	4603      	mov	r3, r0
 80011c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff31 	bl	8001030 <__NVIC_EnableIRQ>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff ffa2 	bl	8001128 <SysTick_Config>
 80011e4:	4603      	mov	r3, r0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001202:	4b2f      	ldr	r3, [pc, #188]	; (80012c0 <HAL_FLASH_Program+0xd0>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d101      	bne.n	800120e <HAL_FLASH_Program+0x1e>
 800120a:	2302      	movs	r3, #2
 800120c:	e053      	b.n	80012b6 <HAL_FLASH_Program+0xc6>
 800120e:	4b2c      	ldr	r3, [pc, #176]	; (80012c0 <HAL_FLASH_Program+0xd0>)
 8001210:	2201      	movs	r2, #1
 8001212:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001214:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001218:	f000 f888 	bl	800132c <FLASH_WaitForLastOperation>
 800121c:	4603      	mov	r3, r0
 800121e:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8001220:	7dfb      	ldrb	r3, [r7, #23]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d143      	bne.n	80012ae <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001226:	4b26      	ldr	r3, [pc, #152]	; (80012c0 <HAL_FLASH_Program+0xd0>)
 8001228:	2200      	movs	r2, #0
 800122a:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800122c:	4b25      	ldr	r3, [pc, #148]	; (80012c4 <HAL_FLASH_Program+0xd4>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001234:	2b00      	cmp	r3, #0
 8001236:	d009      	beq.n	800124c <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001238:	4b22      	ldr	r3, [pc, #136]	; (80012c4 <HAL_FLASH_Program+0xd4>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a21      	ldr	r2, [pc, #132]	; (80012c4 <HAL_FLASH_Program+0xd4>)
 800123e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001242:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001244:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <HAL_FLASH_Program+0xd0>)
 8001246:	2202      	movs	r2, #2
 8001248:	771a      	strb	r2, [r3, #28]
 800124a:	e002      	b.n	8001252 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800124c:	4b1c      	ldr	r3, [pc, #112]	; (80012c0 <HAL_FLASH_Program+0xd0>)
 800124e:	2200      	movs	r2, #0
 8001250:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d107      	bne.n	8001268 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8001258:	e9d7 2300 	ldrd	r2, r3, [r7]
 800125c:	68b8      	ldr	r0, [r7, #8]
 800125e:	f000 f8bd 	bl	80013dc <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8001262:	2301      	movs	r3, #1
 8001264:	613b      	str	r3, [r7, #16]
 8001266:	e010      	b.n	800128a <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d002      	beq.n	8001274 <HAL_FLASH_Program+0x84>
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	2b02      	cmp	r3, #2
 8001272:	d10a      	bne.n	800128a <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	4619      	mov	r1, r3
 8001278:	68b8      	ldr	r0, [r7, #8]
 800127a:	f000 f8d5 	bl	8001428 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	2b02      	cmp	r3, #2
 8001282:	d102      	bne.n	800128a <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8001284:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001288:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800128a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800128e:	f000 f84d 	bl	800132c <FLASH_WaitForLastOperation>
 8001292:	4603      	mov	r3, r0
 8001294:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d006      	beq.n	80012aa <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800129c:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <HAL_FLASH_Program+0xd4>)
 800129e:	695a      	ldr	r2, [r3, #20]
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	43db      	mvns	r3, r3
 80012a4:	4907      	ldr	r1, [pc, #28]	; (80012c4 <HAL_FLASH_Program+0xd4>)
 80012a6:	4013      	ands	r3, r2
 80012a8:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80012aa:	f000 f9cf 	bl	800164c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80012ae:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <HAL_FLASH_Program+0xd0>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	701a      	strb	r2, [r3, #0]

  return status;
 80012b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	2000000c 	.word	0x2000000c
 80012c4:	40022000 	.word	0x40022000

080012c8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80012d2:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <HAL_FLASH_Unlock+0x38>)
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	da0b      	bge.n	80012f2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80012da:	4b09      	ldr	r3, [pc, #36]	; (8001300 <HAL_FLASH_Unlock+0x38>)
 80012dc:	4a09      	ldr	r2, [pc, #36]	; (8001304 <HAL_FLASH_Unlock+0x3c>)
 80012de:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80012e0:	4b07      	ldr	r3, [pc, #28]	; (8001300 <HAL_FLASH_Unlock+0x38>)
 80012e2:	4a09      	ldr	r2, [pc, #36]	; (8001308 <HAL_FLASH_Unlock+0x40>)
 80012e4:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <HAL_FLASH_Unlock+0x38>)
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	da01      	bge.n	80012f2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80012f2:	79fb      	ldrb	r3, [r7, #7]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	40022000 	.word	0x40022000
 8001304:	45670123 	.word	0x45670123
 8001308:	cdef89ab 	.word	0xcdef89ab

0800130c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001310:	4b05      	ldr	r3, [pc, #20]	; (8001328 <HAL_FLASH_Lock+0x1c>)
 8001312:	695b      	ldr	r3, [r3, #20]
 8001314:	4a04      	ldr	r2, [pc, #16]	; (8001328 <HAL_FLASH_Lock+0x1c>)
 8001316:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800131a:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	40022000 	.word	0x40022000

0800132c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8001334:	f7ff fe1a 	bl	8000f6c <HAL_GetTick>
 8001338:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800133a:	e00d      	b.n	8001358 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001342:	d009      	beq.n	8001358 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8001344:	f7ff fe12 	bl	8000f6c <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	429a      	cmp	r2, r3
 8001352:	d801      	bhi.n	8001358 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e036      	b.n	80013c6 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001358:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <FLASH_WaitForLastOperation+0xa4>)
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1eb      	bne.n	800133c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8001364:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <FLASH_WaitForLastOperation+0xa4>)
 8001366:	691a      	ldr	r2, [r3, #16]
 8001368:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <FLASH_WaitForLastOperation+0xa8>)
 800136a:	4013      	ands	r3, r2
 800136c:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d01e      	beq.n	80013b2 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8001374:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <FLASH_WaitForLastOperation+0xac>)
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	4313      	orrs	r3, r2
 800137c:	4a16      	ldr	r2, [pc, #88]	; (80013d8 <FLASH_WaitForLastOperation+0xac>)
 800137e:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d007      	beq.n	800139a <FLASH_WaitForLastOperation+0x6e>
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <FLASH_WaitForLastOperation+0xa4>)
 800138c:	699a      	ldr	r2, [r3, #24]
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8001394:	490e      	ldr	r1, [pc, #56]	; (80013d0 <FLASH_WaitForLastOperation+0xa4>)
 8001396:	4313      	orrs	r3, r2
 8001398:	618b      	str	r3, [r1, #24]
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d004      	beq.n	80013ae <FLASH_WaitForLastOperation+0x82>
 80013a4:	4a0a      	ldr	r2, [pc, #40]	; (80013d0 <FLASH_WaitForLastOperation+0xa4>)
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80013ac:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e009      	b.n	80013c6 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80013b2:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <FLASH_WaitForLastOperation+0xa4>)
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d002      	beq.n	80013c4 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80013be:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <FLASH_WaitForLastOperation+0xa4>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40022000 	.word	0x40022000
 80013d4:	0002c3fa 	.word	0x0002c3fa
 80013d8:	2000000c 	.word	0x2000000c

080013dc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80013e8:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <FLASH_Program_DoubleWord+0x48>)
 80013ea:	695b      	ldr	r3, [r3, #20]
 80013ec:	4a0d      	ldr	r2, [pc, #52]	; (8001424 <FLASH_Program_DoubleWord+0x48>)
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80013fa:	f3bf 8f6f 	isb	sy
}
 80013fe:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8001400:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	f04f 0300 	mov.w	r3, #0
 800140c:	000a      	movs	r2, r1
 800140e:	2300      	movs	r3, #0
 8001410:	68f9      	ldr	r1, [r7, #12]
 8001412:	3104      	adds	r1, #4
 8001414:	4613      	mov	r3, r2
 8001416:	600b      	str	r3, [r1, #0]
}
 8001418:	bf00      	nop
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	40022000 	.word	0x40022000

08001428 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8001428:	b480      	push	{r7}
 800142a:	b089      	sub	sp, #36	; 0x24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8001432:	2340      	movs	r3, #64	; 0x40
 8001434:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800143e:	4b14      	ldr	r3, [pc, #80]	; (8001490 <FLASH_Program_Fast+0x68>)
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	4a13      	ldr	r2, [pc, #76]	; (8001490 <FLASH_Program_Fast+0x68>)
 8001444:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001448:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800144a:	f3ef 8310 	mrs	r3, PRIMASK
 800144e:	60fb      	str	r3, [r7, #12]
  return(result);
 8001450:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8001452:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8001454:	b672      	cpsid	i
}
 8001456:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	3304      	adds	r3, #4
 8001464:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	3304      	adds	r3, #4
 800146a:	617b      	str	r3, [r7, #20]
    row_index--;
 800146c:	7ffb      	ldrb	r3, [r7, #31]
 800146e:	3b01      	subs	r3, #1
 8001470:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8001472:	7ffb      	ldrb	r3, [r7, #31]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1ef      	bne.n	8001458 <FLASH_Program_Fast+0x30>
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	f383 8810 	msr	PRIMASK, r3
}
 8001482:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8001484:	bf00      	nop
 8001486:	3724      	adds	r7, #36	; 0x24
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	40022000 	.word	0x40022000

08001494 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800149e:	4b48      	ldr	r3, [pc, #288]	; (80015c0 <HAL_FLASHEx_Erase+0x12c>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d101      	bne.n	80014aa <HAL_FLASHEx_Erase+0x16>
 80014a6:	2302      	movs	r3, #2
 80014a8:	e085      	b.n	80015b6 <HAL_FLASHEx_Erase+0x122>
 80014aa:	4b45      	ldr	r3, [pc, #276]	; (80015c0 <HAL_FLASHEx_Erase+0x12c>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014b4:	f7ff ff3a 	bl	800132c <FLASH_WaitForLastOperation>
 80014b8:	4603      	mov	r3, r0
 80014ba:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d175      	bne.n	80015ae <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80014c2:	4b3f      	ldr	r3, [pc, #252]	; (80015c0 <HAL_FLASHEx_Erase+0x12c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80014c8:	4b3e      	ldr	r3, [pc, #248]	; (80015c4 <HAL_FLASHEx_Erase+0x130>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d013      	beq.n	80014fc <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80014d4:	4b3b      	ldr	r3, [pc, #236]	; (80015c4 <HAL_FLASHEx_Erase+0x130>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d009      	beq.n	80014f4 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80014e0:	4b38      	ldr	r3, [pc, #224]	; (80015c4 <HAL_FLASHEx_Erase+0x130>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a37      	ldr	r2, [pc, #220]	; (80015c4 <HAL_FLASHEx_Erase+0x130>)
 80014e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014ea:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80014ec:	4b34      	ldr	r3, [pc, #208]	; (80015c0 <HAL_FLASHEx_Erase+0x12c>)
 80014ee:	2203      	movs	r2, #3
 80014f0:	771a      	strb	r2, [r3, #28]
 80014f2:	e016      	b.n	8001522 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80014f4:	4b32      	ldr	r3, [pc, #200]	; (80015c0 <HAL_FLASHEx_Erase+0x12c>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	771a      	strb	r2, [r3, #28]
 80014fa:	e012      	b.n	8001522 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80014fc:	4b31      	ldr	r3, [pc, #196]	; (80015c4 <HAL_FLASHEx_Erase+0x130>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001504:	2b00      	cmp	r3, #0
 8001506:	d009      	beq.n	800151c <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001508:	4b2e      	ldr	r3, [pc, #184]	; (80015c4 <HAL_FLASHEx_Erase+0x130>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a2d      	ldr	r2, [pc, #180]	; (80015c4 <HAL_FLASHEx_Erase+0x130>)
 800150e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001512:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001514:	4b2a      	ldr	r3, [pc, #168]	; (80015c0 <HAL_FLASHEx_Erase+0x12c>)
 8001516:	2202      	movs	r2, #2
 8001518:	771a      	strb	r2, [r3, #28]
 800151a:	e002      	b.n	8001522 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800151c:	4b28      	ldr	r3, [pc, #160]	; (80015c0 <HAL_FLASHEx_Erase+0x12c>)
 800151e:	2200      	movs	r2, #0
 8001520:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d111      	bne.n	800154e <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	4618      	mov	r0, r3
 8001530:	f000 f84a 	bl	80015c8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001534:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001538:	f7ff fef8 	bl	800132c <FLASH_WaitForLastOperation>
 800153c:	4603      	mov	r3, r0
 800153e:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8001540:	4b20      	ldr	r3, [pc, #128]	; (80015c4 <HAL_FLASHEx_Erase+0x130>)
 8001542:	695b      	ldr	r3, [r3, #20]
 8001544:	4a1f      	ldr	r2, [pc, #124]	; (80015c4 <HAL_FLASHEx_Erase+0x130>)
 8001546:	f023 0304 	bic.w	r3, r3, #4
 800154a:	6153      	str	r3, [r2, #20]
 800154c:	e02d      	b.n	80015aa <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	f04f 32ff 	mov.w	r2, #4294967295
 8001554:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	e01d      	b.n	800159a <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	4619      	mov	r1, r3
 8001564:	68b8      	ldr	r0, [r7, #8]
 8001566:	f000 f84d 	bl	8001604 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800156a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800156e:	f7ff fedd 	bl	800132c <FLASH_WaitForLastOperation>
 8001572:	4603      	mov	r3, r0
 8001574:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8001576:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <HAL_FLASHEx_Erase+0x130>)
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <HAL_FLASHEx_Erase+0x130>)
 800157c:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8001580:	f023 0302 	bic.w	r3, r3, #2
 8001584:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	68ba      	ldr	r2, [r7, #8]
 8001590:	601a      	str	r2, [r3, #0]
          break;
 8001592:	e00a      	b.n	80015aa <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	3301      	adds	r3, #1
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	4413      	add	r3, r2
 80015a4:	68ba      	ldr	r2, [r7, #8]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d3d9      	bcc.n	800155e <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80015aa:	f000 f84f 	bl	800164c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80015ae:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <HAL_FLASHEx_Erase+0x12c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	701a      	strb	r2, [r3, #0]

  return status;
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	2000000c 	.word	0x2000000c
 80015c4:	40022000 	.word	0x40022000

080015c8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d005      	beq.n	80015e6 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <FLASH_MassErase+0x38>)
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	4a08      	ldr	r2, [pc, #32]	; (8001600 <FLASH_MassErase+0x38>)
 80015e0:	f043 0304 	orr.w	r3, r3, #4
 80015e4:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80015e6:	4b06      	ldr	r3, [pc, #24]	; (8001600 <FLASH_MassErase+0x38>)
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	4a05      	ldr	r2, [pc, #20]	; (8001600 <FLASH_MassErase+0x38>)
 80015ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f0:	6153      	str	r3, [r2, #20]
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	40022000 	.word	0x40022000

08001604 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <FLASH_PageErase+0x44>)
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800161e:	490a      	ldr	r1, [pc, #40]	; (8001648 <FLASH_PageErase+0x44>)
 8001620:	4313      	orrs	r3, r2
 8001622:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001624:	4b08      	ldr	r3, [pc, #32]	; (8001648 <FLASH_PageErase+0x44>)
 8001626:	695b      	ldr	r3, [r3, #20]
 8001628:	4a07      	ldr	r2, [pc, #28]	; (8001648 <FLASH_PageErase+0x44>)
 800162a:	f043 0302 	orr.w	r3, r3, #2
 800162e:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001630:	4b05      	ldr	r3, [pc, #20]	; (8001648 <FLASH_PageErase+0x44>)
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	4a04      	ldr	r2, [pc, #16]	; (8001648 <FLASH_PageErase+0x44>)
 8001636:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800163a:	6153      	str	r3, [r2, #20]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	40022000 	.word	0x40022000

0800164c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8001652:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <FLASH_FlushCaches+0x8c>)
 8001654:	7f1b      	ldrb	r3, [r3, #28]
 8001656:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d002      	beq.n	8001664 <FLASH_FlushCaches+0x18>
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	2b03      	cmp	r3, #3
 8001662:	d117      	bne.n	8001694 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001664:	4b1d      	ldr	r3, [pc, #116]	; (80016dc <FLASH_FlushCaches+0x90>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a1c      	ldr	r2, [pc, #112]	; (80016dc <FLASH_FlushCaches+0x90>)
 800166a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800166e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001670:	4b1a      	ldr	r3, [pc, #104]	; (80016dc <FLASH_FlushCaches+0x90>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a19      	ldr	r2, [pc, #100]	; (80016dc <FLASH_FlushCaches+0x90>)
 8001676:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	4b17      	ldr	r3, [pc, #92]	; (80016dc <FLASH_FlushCaches+0x90>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a16      	ldr	r2, [pc, #88]	; (80016dc <FLASH_FlushCaches+0x90>)
 8001682:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001686:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001688:	4b14      	ldr	r3, [pc, #80]	; (80016dc <FLASH_FlushCaches+0x90>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a13      	ldr	r2, [pc, #76]	; (80016dc <FLASH_FlushCaches+0x90>)
 800168e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001692:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	2b02      	cmp	r3, #2
 8001698:	d002      	beq.n	80016a0 <FLASH_FlushCaches+0x54>
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	2b03      	cmp	r3, #3
 800169e:	d111      	bne.n	80016c4 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80016a0:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <FLASH_FlushCaches+0x90>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0d      	ldr	r2, [pc, #52]	; (80016dc <FLASH_FlushCaches+0x90>)
 80016a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016aa:	6013      	str	r3, [r2, #0]
 80016ac:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <FLASH_FlushCaches+0x90>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0a      	ldr	r2, [pc, #40]	; (80016dc <FLASH_FlushCaches+0x90>)
 80016b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016b6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <FLASH_FlushCaches+0x90>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a07      	ldr	r2, [pc, #28]	; (80016dc <FLASH_FlushCaches+0x90>)
 80016be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016c2:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80016c4:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <FLASH_FlushCaches+0x8c>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	771a      	strb	r2, [r3, #28]
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	2000000c 	.word	0x2000000c
 80016dc:	40022000 	.word	0x40022000

080016e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b087      	sub	sp, #28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ee:	e148      	b.n	8001982 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	2101      	movs	r1, #1
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	fa01 f303 	lsl.w	r3, r1, r3
 80016fc:	4013      	ands	r3, r2
 80016fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2b00      	cmp	r3, #0
 8001704:	f000 813a 	beq.w	800197c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	2b01      	cmp	r3, #1
 8001712:	d005      	beq.n	8001720 <HAL_GPIO_Init+0x40>
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d130      	bne.n	8001782 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	2203      	movs	r2, #3
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4013      	ands	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	68da      	ldr	r2, [r3, #12]
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	4313      	orrs	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001756:	2201      	movs	r2, #1
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43db      	mvns	r3, r3
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4013      	ands	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	091b      	lsrs	r3, r3, #4
 800176c:	f003 0201 	and.w	r2, r3, #1
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f003 0303 	and.w	r3, r3, #3
 800178a:	2b03      	cmp	r3, #3
 800178c:	d017      	beq.n	80017be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	2203      	movs	r2, #3
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4013      	ands	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	689a      	ldr	r2, [r3, #8]
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 0303 	and.w	r3, r3, #3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d123      	bne.n	8001812 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	08da      	lsrs	r2, r3, #3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3208      	adds	r2, #8
 80017d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	220f      	movs	r2, #15
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	4013      	ands	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	691a      	ldr	r2, [r3, #16]
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	08da      	lsrs	r2, r3, #3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3208      	adds	r2, #8
 800180c:	6939      	ldr	r1, [r7, #16]
 800180e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	2203      	movs	r2, #3
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43db      	mvns	r3, r3
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	4013      	ands	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f003 0203 	and.w	r2, r3, #3
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4313      	orrs	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 8094 	beq.w	800197c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001854:	4b52      	ldr	r3, [pc, #328]	; (80019a0 <HAL_GPIO_Init+0x2c0>)
 8001856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001858:	4a51      	ldr	r2, [pc, #324]	; (80019a0 <HAL_GPIO_Init+0x2c0>)
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	6613      	str	r3, [r2, #96]	; 0x60
 8001860:	4b4f      	ldr	r3, [pc, #316]	; (80019a0 <HAL_GPIO_Init+0x2c0>)
 8001862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800186c:	4a4d      	ldr	r2, [pc, #308]	; (80019a4 <HAL_GPIO_Init+0x2c4>)
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	089b      	lsrs	r3, r3, #2
 8001872:	3302      	adds	r3, #2
 8001874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001878:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	f003 0303 	and.w	r3, r3, #3
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	220f      	movs	r2, #15
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001896:	d00d      	beq.n	80018b4 <HAL_GPIO_Init+0x1d4>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a43      	ldr	r2, [pc, #268]	; (80019a8 <HAL_GPIO_Init+0x2c8>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d007      	beq.n	80018b0 <HAL_GPIO_Init+0x1d0>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a42      	ldr	r2, [pc, #264]	; (80019ac <HAL_GPIO_Init+0x2cc>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d101      	bne.n	80018ac <HAL_GPIO_Init+0x1cc>
 80018a8:	2302      	movs	r3, #2
 80018aa:	e004      	b.n	80018b6 <HAL_GPIO_Init+0x1d6>
 80018ac:	2307      	movs	r3, #7
 80018ae:	e002      	b.n	80018b6 <HAL_GPIO_Init+0x1d6>
 80018b0:	2301      	movs	r3, #1
 80018b2:	e000      	b.n	80018b6 <HAL_GPIO_Init+0x1d6>
 80018b4:	2300      	movs	r3, #0
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	f002 0203 	and.w	r2, r2, #3
 80018bc:	0092      	lsls	r2, r2, #2
 80018be:	4093      	lsls	r3, r2
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018c6:	4937      	ldr	r1, [pc, #220]	; (80019a4 <HAL_GPIO_Init+0x2c4>)
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	089b      	lsrs	r3, r3, #2
 80018cc:	3302      	adds	r3, #2
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018d4:	4b36      	ldr	r3, [pc, #216]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	43db      	mvns	r3, r3
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4013      	ands	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018f8:	4a2d      	ldr	r2, [pc, #180]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018fe:	4b2c      	ldr	r3, [pc, #176]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	43db      	mvns	r3, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4313      	orrs	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001922:	4a23      	ldr	r2, [pc, #140]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001928:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	43db      	mvns	r3, r3
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4013      	ands	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d003      	beq.n	800194c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	4313      	orrs	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800194c:	4a18      	ldr	r2, [pc, #96]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001952:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	43db      	mvns	r3, r3
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	4013      	ands	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4313      	orrs	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001976:	4a0e      	ldr	r2, [pc, #56]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	3301      	adds	r3, #1
 8001980:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	fa22 f303 	lsr.w	r3, r2, r3
 800198c:	2b00      	cmp	r3, #0
 800198e:	f47f aeaf 	bne.w	80016f0 <HAL_GPIO_Init+0x10>
  }
}
 8001992:	bf00      	nop
 8001994:	bf00      	nop
 8001996:	371c      	adds	r7, #28
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40010000 	.word	0x40010000
 80019a8:	48000400 	.word	0x48000400
 80019ac:	48000800 	.word	0x48000800
 80019b0:	40010400 	.word	0x40010400

080019b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	460b      	mov	r3, r1
 80019be:	807b      	strh	r3, [r7, #2]
 80019c0:	4613      	mov	r3, r2
 80019c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019c4:	787b      	ldrb	r3, [r7, #1]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019ca:	887a      	ldrh	r2, [r7, #2]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019d0:	e002      	b.n	80019d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019d2:	887a      	ldrh	r2, [r7, #2]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019e6:	b08b      	sub	sp, #44	; 0x2c
 80019e8:	af06      	add	r7, sp, #24
 80019ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e0f8      	b.n	8001be8 <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d106      	bne.n	8001a10 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f00a fde4 	bl	800c5d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2203      	movs	r2, #3
 8001a14:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f004 f8d4 	bl	8005bca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	603b      	str	r3, [r7, #0]
 8001a28:	687e      	ldr	r6, [r7, #4]
 8001a2a:	466d      	mov	r5, sp
 8001a2c:	f106 0410 	add.w	r4, r6, #16
 8001a30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a34:	6823      	ldr	r3, [r4, #0]
 8001a36:	602b      	str	r3, [r5, #0]
 8001a38:	1d33      	adds	r3, r6, #4
 8001a3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a3c:	6838      	ldr	r0, [r7, #0]
 8001a3e:	f004 f89c 	bl	8005b7a <USB_CoreInit>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d005      	beq.n	8001a54 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e0c9      	b.n	8001be8 <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f004 f8d0 	bl	8005c00 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a60:	2300      	movs	r3, #0
 8001a62:	73fb      	strb	r3, [r7, #15]
 8001a64:	e040      	b.n	8001ae8 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	6879      	ldr	r1, [r7, #4]
 8001a6a:	1c5a      	adds	r2, r3, #1
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4413      	add	r3, r2
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	440b      	add	r3, r1
 8001a76:	3301      	adds	r3, #1
 8001a78:	2201      	movs	r2, #1
 8001a7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	1c5a      	adds	r2, r3, #1
 8001a82:	4613      	mov	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	4413      	add	r3, r2
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	440b      	add	r3, r1
 8001a8c:	7bfa      	ldrb	r2, [r7, #15]
 8001a8e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	1c5a      	adds	r2, r3, #1
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	440b      	add	r3, r1
 8001aa0:	3303      	adds	r3, #3
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001aa6:	7bfa      	ldrb	r2, [r7, #15]
 8001aa8:	6879      	ldr	r1, [r7, #4]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	440b      	add	r3, r1
 8001ab4:	3338      	adds	r3, #56	; 0x38
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001aba:	7bfa      	ldrb	r2, [r7, #15]
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	440b      	add	r3, r1
 8001ac8:	333c      	adds	r3, #60	; 0x3c
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ace:	7bfa      	ldrb	r2, [r7, #15]
 8001ad0:	6879      	ldr	r1, [r7, #4]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	440b      	add	r3, r1
 8001adc:	3340      	adds	r3, #64	; 0x40
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	73fb      	strb	r3, [r7, #15]
 8001ae8:	7bfa      	ldrb	r2, [r7, #15]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d3b9      	bcc.n	8001a66 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001af2:	2300      	movs	r3, #0
 8001af4:	73fb      	strb	r3, [r7, #15]
 8001af6:	e044      	b.n	8001b82 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001af8:	7bfa      	ldrb	r2, [r7, #15]
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	4613      	mov	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	440b      	add	r3, r1
 8001b06:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b0e:	7bfa      	ldrb	r2, [r7, #15]
 8001b10:	6879      	ldr	r1, [r7, #4]
 8001b12:	4613      	mov	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	440b      	add	r3, r1
 8001b1c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b20:	7bfa      	ldrb	r2, [r7, #15]
 8001b22:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b24:	7bfa      	ldrb	r2, [r7, #15]
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	440b      	add	r3, r1
 8001b32:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001b36:	2200      	movs	r2, #0
 8001b38:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b3a:	7bfa      	ldrb	r2, [r7, #15]
 8001b3c:	6879      	ldr	r1, [r7, #4]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4413      	add	r3, r2
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	440b      	add	r3, r1
 8001b48:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b50:	7bfa      	ldrb	r2, [r7, #15]
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	4613      	mov	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	440b      	add	r3, r1
 8001b5e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b66:	7bfa      	ldrb	r2, [r7, #15]
 8001b68:	6879      	ldr	r1, [r7, #4]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	440b      	add	r3, r1
 8001b74:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	73fb      	strb	r3, [r7, #15]
 8001b82:	7bfa      	ldrb	r2, [r7, #15]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d3b5      	bcc.n	8001af8 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	603b      	str	r3, [r7, #0]
 8001b92:	687e      	ldr	r6, [r7, #4]
 8001b94:	466d      	mov	r5, sp
 8001b96:	f106 0410 	add.w	r4, r6, #16
 8001b9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b9e:	6823      	ldr	r3, [r4, #0]
 8001ba0:	602b      	str	r3, [r5, #0]
 8001ba2:	1d33      	adds	r3, r6, #4
 8001ba4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ba6:	6838      	ldr	r0, [r7, #0]
 8001ba8:	f004 f837 	bl	8005c1a <USB_DevInit>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d005      	beq.n	8001bbe <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2202      	movs	r2, #2
 8001bb6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e014      	b.n	8001be8 <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d102      	bne.n	8001bdc <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f001 fc9e 	bl	8003518 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f006 fadf 	bl	80081a4 <USB_DevDisconnect>

  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bf0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d101      	bne.n	8001c06 <HAL_PCD_Start+0x16>
 8001c02:	2302      	movs	r3, #2
 8001c04:	e012      	b.n	8001c2c <HAL_PCD_Start+0x3c>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f003 ffc2 	bl	8005b9c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f006 faaa 	bl	8008176 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f006 fac4 	bl	80081ce <USB_ReadInterrupts>
 8001c46:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 fb59 	bl	800230a <PCD_EP_ISR_Handler>

    return;
 8001c58:	e110      	b.n	8001e7c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d013      	beq.n	8001c8c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c76:	b292      	uxth	r2, r2
 8001c78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f00a fd4c 	bl	800c71a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001c82:	2100      	movs	r1, #0
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f8fc 	bl	8001e82 <HAL_PCD_SetAddress>

    return;
 8001c8a:	e0f7      	b.n	8001e7c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00c      	beq.n	8001cb0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ca8:	b292      	uxth	r2, r2
 8001caa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001cae:	e0e5      	b.n	8001e7c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00c      	beq.n	8001cd4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ccc:	b292      	uxth	r2, r2
 8001cce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001cd2:	e0d3      	b.n	8001e7c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d034      	beq.n	8001d48 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 0204 	bic.w	r2, r2, #4
 8001cf0:	b292      	uxth	r2, r2
 8001cf2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 0208 	bic.w	r2, r2, #8
 8001d08:	b292      	uxth	r2, r2
 8001d0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d107      	bne.n	8001d28 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001d20:	2100      	movs	r1, #0
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f00a ffd6 	bl	800ccd4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f00a fd2f 	bl	800c78c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d40:	b292      	uxth	r2, r2
 8001d42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001d46:	e099      	b.n	8001e7c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d027      	beq.n	8001da2 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f042 0208 	orr.w	r2, r2, #8
 8001d64:	b292      	uxth	r2, r2
 8001d66:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d7c:	b292      	uxth	r2, r2
 8001d7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f042 0204 	orr.w	r2, r2, #4
 8001d94:	b292      	uxth	r2, r2
 8001d96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f00a fcdc 	bl	800c758 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001da0:	e06c      	b.n	8001e7c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d040      	beq.n	8001e2e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dbe:	b292      	uxth	r2, r2
 8001dc0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d12b      	bne.n	8001e26 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f042 0204 	orr.w	r2, r2, #4
 8001de0:	b292      	uxth	r2, r2
 8001de2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f042 0208 	orr.w	r2, r2, #8
 8001df8:	b292      	uxth	r2, r2
 8001dfa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	089b      	lsrs	r3, r3, #2
 8001e12:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f00a ff58 	bl	800ccd4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001e24:	e02a      	b.n	8001e7c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f00a fc96 	bl	800c758 <HAL_PCD_SuspendCallback>
    return;
 8001e2c:	e026      	b.n	8001e7c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00f      	beq.n	8001e58 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e4a:	b292      	uxth	r2, r2
 8001e4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f00a fc54 	bl	800c6fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001e56:	e011      	b.n	8001e7c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00c      	beq.n	8001e7c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e74:	b292      	uxth	r2, r2
 8001e76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e7a:	bf00      	nop
  }
}
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d101      	bne.n	8001e9c <HAL_PCD_SetAddress+0x1a>
 8001e98:	2302      	movs	r3, #2
 8001e9a:	e013      	b.n	8001ec4 <HAL_PCD_SetAddress+0x42>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	78fa      	ldrb	r2, [r7, #3]
 8001ea8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	78fa      	ldrb	r2, [r7, #3]
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f006 f94a 	bl	800814e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	4608      	mov	r0, r1
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4603      	mov	r3, r0
 8001edc:	70fb      	strb	r3, [r7, #3]
 8001ede:	460b      	mov	r3, r1
 8001ee0:	803b      	strh	r3, [r7, #0]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001eea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	da0e      	bge.n	8001f10 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ef2:	78fb      	ldrb	r3, [r7, #3]
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	1c5a      	adds	r2, r3, #1
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	4413      	add	r3, r2
 8001f06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	705a      	strb	r2, [r3, #1]
 8001f0e:	e00e      	b.n	8001f2e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f10:	78fb      	ldrb	r3, [r7, #3]
 8001f12:	f003 0207 	and.w	r2, r3, #7
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f2e:	78fb      	ldrb	r3, [r7, #3]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f3a:	883a      	ldrh	r2, [r7, #0]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	78ba      	ldrb	r2, [r7, #2]
 8001f44:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f46:	78bb      	ldrb	r3, [r7, #2]
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d102      	bne.n	8001f52 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d101      	bne.n	8001f60 <HAL_PCD_EP_Open+0x94>
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	e00e      	b.n	8001f7e <HAL_PCD_EP_Open+0xb2>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68f9      	ldr	r1, [r7, #12]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f003 fe8c 	bl	8005c8c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001f7c:	7afb      	ldrb	r3, [r7, #11]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b084      	sub	sp, #16
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	da0e      	bge.n	8001fb8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f9a:	78fb      	ldrb	r3, [r7, #3]
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	1c5a      	adds	r2, r3, #1
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	705a      	strb	r2, [r3, #1]
 8001fb6:	e00e      	b.n	8001fd6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fb8:	78fb      	ldrb	r3, [r7, #3]
 8001fba:	f003 0207 	and.w	r2, r3, #7
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	4413      	add	r3, r2
 8001fce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fd6:	78fb      	ldrb	r3, [r7, #3]
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d101      	bne.n	8001ff0 <HAL_PCD_EP_Close+0x6a>
 8001fec:	2302      	movs	r3, #2
 8001fee:	e00e      	b.n	800200e <HAL_PCD_EP_Close+0x88>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68f9      	ldr	r1, [r7, #12]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f004 fa08 	bl	8006414 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b086      	sub	sp, #24
 800201a:	af00      	add	r7, sp, #0
 800201c:	60f8      	str	r0, [r7, #12]
 800201e:	607a      	str	r2, [r7, #4]
 8002020:	603b      	str	r3, [r7, #0]
 8002022:	460b      	mov	r3, r1
 8002024:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002026:	7afb      	ldrb	r3, [r7, #11]
 8002028:	f003 0207 	and.w	r2, r3, #7
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	4413      	add	r3, r2
 800203c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	2200      	movs	r2, #0
 800204e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	2200      	movs	r2, #0
 8002054:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002056:	7afb      	ldrb	r3, [r7, #11]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	b2da      	uxtb	r2, r3
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6979      	ldr	r1, [r7, #20]
 8002068:	4618      	mov	r0, r3
 800206a:	f004 fbc0 	bl	80067ee <USB_EPStartXfer>

  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002084:	78fb      	ldrb	r3, [r7, #3]
 8002086:	f003 0207 	and.w	r2, r3, #7
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	440b      	add	r3, r1
 8002096:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800209a:	681b      	ldr	r3, [r3, #0]
}
 800209c:	4618      	mov	r0, r3
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	607a      	str	r2, [r7, #4]
 80020b2:	603b      	str	r3, [r7, #0]
 80020b4:	460b      	mov	r3, r1
 80020b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020b8:	7afb      	ldrb	r3, [r7, #11]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	1c5a      	adds	r2, r3, #1
 80020c0:	4613      	mov	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	4413      	add	r3, r2
 80020cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	2200      	movs	r2, #0
 80020ec:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	2201      	movs	r2, #1
 80020f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020f4:	7afb      	ldrb	r3, [r7, #11]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	701a      	strb	r2, [r3, #0]

  //Determine whether to generate an interrupt:
  if((recv_buffer[0]&0x02) != 0x02)
 8002100:	4b0e      	ldr	r3, [pc, #56]	; (800213c <HAL_PCD_EP_Transmit+0x94>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d102      	bne.n	8002112 <HAL_PCD_EP_Transmit+0x6a>
	  InterruptFlag = 1;
 800210c:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <HAL_PCD_EP_Transmit+0x98>)
 800210e:	2201      	movs	r2, #1
 8002110:	601a      	str	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6979      	ldr	r1, [r7, #20]
 8002118:	4618      	mov	r0, r3
 800211a:	f004 fb68 	bl	80067ee <USB_EPStartXfer>

  //Output test to choose whether to RollBack:
  if((recv_buffer[0]&0x02) != 0x02)
 800211e:	4b07      	ldr	r3, [pc, #28]	; (800213c <HAL_PCD_EP_Transmit+0x94>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d102      	bne.n	8002130 <HAL_PCD_EP_Transmit+0x88>
	  NeedRollBack = 1;
 800212a:	4b06      	ldr	r3, [pc, #24]	; (8002144 <HAL_PCD_EP_Transmit+0x9c>)
 800212c:	2201      	movs	r2, #1
 800212e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3718      	adds	r7, #24
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	2000026c 	.word	0x2000026c
 8002140:	20000270 	.word	0x20000270
 8002144:	2000027c 	.word	0x2000027c

08002148 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002154:	78fb      	ldrb	r3, [r7, #3]
 8002156:	f003 0207 	and.w	r2, r3, #7
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	429a      	cmp	r2, r3
 8002160:	d901      	bls.n	8002166 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e04c      	b.n	8002200 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002166:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800216a:	2b00      	cmp	r3, #0
 800216c:	da0e      	bge.n	800218c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800216e:	78fb      	ldrb	r3, [r7, #3]
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	1c5a      	adds	r2, r3, #1
 8002176:	4613      	mov	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	4413      	add	r3, r2
 8002182:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2201      	movs	r2, #1
 8002188:	705a      	strb	r2, [r3, #1]
 800218a:	e00c      	b.n	80021a6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800218c:	78fa      	ldrb	r2, [r7, #3]
 800218e:	4613      	mov	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	4413      	add	r3, r2
 800219e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2201      	movs	r2, #1
 80021aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021ac:	78fb      	ldrb	r3, [r7, #3]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d101      	bne.n	80021c6 <HAL_PCD_EP_SetStall+0x7e>
 80021c2:	2302      	movs	r3, #2
 80021c4:	e01c      	b.n	8002200 <HAL_PCD_EP_SetStall+0xb8>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68f9      	ldr	r1, [r7, #12]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f005 febb 	bl	8007f50 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021da:	78fb      	ldrb	r3, [r7, #3]
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d108      	bne.n	80021f6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80021ee:	4619      	mov	r1, r3
 80021f0:	4610      	mov	r0, r2
 80021f2:	f005 fffc 	bl	80081ee <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002214:	78fb      	ldrb	r3, [r7, #3]
 8002216:	f003 020f 	and.w	r2, r3, #15
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	429a      	cmp	r2, r3
 8002220:	d901      	bls.n	8002226 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e040      	b.n	80022a8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002226:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800222a:	2b00      	cmp	r3, #0
 800222c:	da0e      	bge.n	800224c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800222e:	78fb      	ldrb	r3, [r7, #3]
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	1c5a      	adds	r2, r3, #1
 8002236:	4613      	mov	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	4413      	add	r3, r2
 8002242:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2201      	movs	r2, #1
 8002248:	705a      	strb	r2, [r3, #1]
 800224a:	e00e      	b.n	800226a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800224c:	78fb      	ldrb	r3, [r7, #3]
 800224e:	f003 0207 	and.w	r2, r3, #7
 8002252:	4613      	mov	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	4413      	add	r3, r2
 8002262:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002270:	78fb      	ldrb	r3, [r7, #3]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	b2da      	uxtb	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002282:	2b01      	cmp	r3, #1
 8002284:	d101      	bne.n	800228a <HAL_PCD_EP_ClrStall+0x82>
 8002286:	2302      	movs	r3, #2
 8002288:	e00e      	b.n	80022a8 <HAL_PCD_EP_ClrStall+0xa0>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68f9      	ldr	r1, [r7, #12]
 8002298:	4618      	mov	r0, r3
 800229a:	f005 feaa 	bl	8007ff2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	460b      	mov	r3, r1
 80022ba:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d101      	bne.n	80022ca <HAL_PCD_EP_Flush+0x1a>
 80022c6:	2302      	movs	r3, #2
 80022c8:	e01b      	b.n	8002302 <HAL_PCD_EP_Flush+0x52>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  if ((ep_addr & 0x80U) == 0x80U)
 80022d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	da09      	bge.n	80022ee <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	78fb      	ldrb	r3, [r7, #3]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	4619      	mov	r1, r3
 80022e6:	4610      	mov	r0, r2
 80022e8:	f003 fcb8 	bl	8005c5c <USB_FlushTxFifo>
 80022ec:	e004      	b.n	80022f8 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f003 fcbe 	bl	8005c74 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b096      	sub	sp, #88	; 0x58
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002312:	e3b1      	b.n	8002a78 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800231c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002320:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002324:	b2db      	uxtb	r3, r3
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800232e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002332:	2b00      	cmp	r3, #0
 8002334:	f040 8173 	bne.w	800261e <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002338:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800233c:	f003 0310 	and.w	r3, r3, #16
 8002340:	2b00      	cmp	r3, #0
 8002342:	d150      	bne.n	80023e6 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	b29b      	uxth	r3, r3
 800234c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002354:	81fb      	strh	r3, [r7, #14]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	89fb      	ldrh	r3, [r7, #14]
 800235c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002360:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002364:	b29b      	uxth	r3, r3
 8002366:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3328      	adds	r3, #40	; 0x28
 800236c:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002376:	b29b      	uxth	r3, r3
 8002378:	461a      	mov	r2, r3
 800237a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	4413      	add	r3, r2
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	6812      	ldr	r2, [r2, #0]
 8002386:	4413      	add	r3, r2
 8002388:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002392:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002394:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002396:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002398:	695a      	ldr	r2, [r3, #20]
 800239a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	441a      	add	r2, r3
 80023a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023a2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80023a4:	2100      	movs	r1, #0
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f00a f98f 	bl	800c6ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 835f 	beq.w	8002a78 <PCD_EP_ISR_Handler+0x76e>
 80023ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f040 835a 	bne.w	8002a78 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023d0:	b2da      	uxtb	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	b292      	uxth	r2, r2
 80023d8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80023e4:	e348      	b.n	8002a78 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023ec:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	881b      	ldrh	r3, [r3, #0]
 80023f4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80023f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80023fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002400:	2b00      	cmp	r3, #0
 8002402:	d032      	beq.n	800246a <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800240c:	b29b      	uxth	r3, r3
 800240e:	461a      	mov	r2, r3
 8002410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	4413      	add	r3, r2
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6812      	ldr	r2, [r2, #0]
 800241c:	4413      	add	r3, r2
 800241e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002422:	881b      	ldrh	r3, [r3, #0]
 8002424:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002428:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800242a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6818      	ldr	r0, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002438:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800243a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800243c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800243e:	b29b      	uxth	r3, r3
 8002440:	f005 ff23 	bl	800828a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	b29a      	uxth	r2, r3
 800244c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002450:	4013      	ands	r3, r2
 8002452:	823b      	strh	r3, [r7, #16]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	8a3a      	ldrh	r2, [r7, #16]
 800245a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800245e:	b292      	uxth	r2, r2
 8002460:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f00a f904 	bl	800c670 <HAL_PCD_SetupStageCallback>
 8002468:	e306      	b.n	8002a78 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800246a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800246e:	2b00      	cmp	r3, #0
 8002470:	f280 8302 	bge.w	8002a78 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	b29a      	uxth	r2, r3
 800247c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002480:	4013      	ands	r3, r2
 8002482:	83fb      	strh	r3, [r7, #30]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	8bfa      	ldrh	r2, [r7, #30]
 800248a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800248e:	b292      	uxth	r2, r2
 8002490:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800249a:	b29b      	uxth	r3, r3
 800249c:	461a      	mov	r2, r3
 800249e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	4413      	add	r3, r2
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	6812      	ldr	r2, [r2, #0]
 80024aa:	4413      	add	r3, r2
 80024ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80024b0:	881b      	ldrh	r3, [r3, #0]
 80024b2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024b8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80024ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d019      	beq.n	80024f6 <PCD_EP_ISR_Handler+0x1ec>
 80024c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d015      	beq.n	80024f6 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6818      	ldr	r0, [r3, #0]
 80024ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024d0:	6959      	ldr	r1, [r3, #20]
 80024d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024d4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80024d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024d8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80024da:	b29b      	uxth	r3, r3
 80024dc:	f005 fed5 	bl	800828a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80024e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024e2:	695a      	ldr	r2, [r3, #20]
 80024e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024e6:	69db      	ldr	r3, [r3, #28]
 80024e8:	441a      	add	r2, r3
 80024ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ec:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80024ee:	2100      	movs	r1, #0
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f00a f8cf 	bl	800c694 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002500:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002504:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002508:	2b00      	cmp	r3, #0
 800250a:	f040 82b5 	bne.w	8002a78 <PCD_EP_ISR_Handler+0x76e>
 800250e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002512:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002516:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800251a:	f000 82ad 	beq.w	8002a78 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	61bb      	str	r3, [r7, #24]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800252c:	b29b      	uxth	r3, r3
 800252e:	461a      	mov	r2, r3
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	4413      	add	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800253c:	617b      	str	r3, [r7, #20]
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	b29b      	uxth	r3, r3
 8002544:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002548:	b29a      	uxth	r2, r3
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	801a      	strh	r2, [r3, #0]
 800254e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	2b3e      	cmp	r3, #62	; 0x3e
 8002554:	d91d      	bls.n	8002592 <PCD_EP_ISR_Handler+0x288>
 8002556:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	095b      	lsrs	r3, r3, #5
 800255c:	647b      	str	r3, [r7, #68]	; 0x44
 800255e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	f003 031f 	and.w	r3, r3, #31
 8002566:	2b00      	cmp	r3, #0
 8002568:	d102      	bne.n	8002570 <PCD_EP_ISR_Handler+0x266>
 800256a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800256c:	3b01      	subs	r3, #1
 800256e:	647b      	str	r3, [r7, #68]	; 0x44
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	b29a      	uxth	r2, r3
 8002576:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002578:	b29b      	uxth	r3, r3
 800257a:	029b      	lsls	r3, r3, #10
 800257c:	b29b      	uxth	r3, r3
 800257e:	4313      	orrs	r3, r2
 8002580:	b29b      	uxth	r3, r3
 8002582:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002586:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800258a:	b29a      	uxth	r2, r3
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	801a      	strh	r2, [r3, #0]
 8002590:	e026      	b.n	80025e0 <PCD_EP_ISR_Handler+0x2d6>
 8002592:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10a      	bne.n	80025b0 <PCD_EP_ISR_Handler+0x2a6>
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	801a      	strh	r2, [r3, #0]
 80025ae:	e017      	b.n	80025e0 <PCD_EP_ISR_Handler+0x2d6>
 80025b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	085b      	lsrs	r3, r3, #1
 80025b6:	647b      	str	r3, [r7, #68]	; 0x44
 80025b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d002      	beq.n	80025ca <PCD_EP_ISR_Handler+0x2c0>
 80025c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025c6:	3301      	adds	r3, #1
 80025c8:	647b      	str	r3, [r7, #68]	; 0x44
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	029b      	lsls	r3, r3, #10
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	4313      	orrs	r3, r2
 80025da:	b29a      	uxth	r2, r3
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025f0:	827b      	strh	r3, [r7, #18]
 80025f2:	8a7b      	ldrh	r3, [r7, #18]
 80025f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80025f8:	827b      	strh	r3, [r7, #18]
 80025fa:	8a7b      	ldrh	r3, [r7, #18]
 80025fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002600:	827b      	strh	r3, [r7, #18]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	8a7b      	ldrh	r3, [r7, #18]
 8002608:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800260c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002610:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002618:	b29b      	uxth	r3, r3
 800261a:	8013      	strh	r3, [r2, #0]
 800261c:	e22c      	b.n	8002a78 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	461a      	mov	r2, r3
 8002624:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	881b      	ldrh	r3, [r3, #0]
 800262e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002632:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002636:	2b00      	cmp	r3, #0
 8002638:	f280 80f6 	bge.w	8002828 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	461a      	mov	r2, r3
 8002642:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	b29a      	uxth	r2, r3
 800264e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002652:	4013      	ands	r3, r2
 8002654:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	461a      	mov	r2, r3
 800265e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800266a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800266e:	b292      	uxth	r2, r2
 8002670:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002672:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002676:	4613      	mov	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	4413      	add	r3, r2
 8002686:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800268a:	7b1b      	ldrb	r3, [r3, #12]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d123      	bne.n	80026d8 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002698:	b29b      	uxth	r3, r3
 800269a:	461a      	mov	r2, r3
 800269c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	4413      	add	r3, r2
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6812      	ldr	r2, [r2, #0]
 80026a8:	4413      	add	r3, r2
 80026aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026ae:	881b      	ldrh	r3, [r3, #0]
 80026b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026b4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80026b8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 808e 	beq.w	80027de <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6818      	ldr	r0, [r3, #0]
 80026c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026c8:	6959      	ldr	r1, [r3, #20]
 80026ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026cc:	88da      	ldrh	r2, [r3, #6]
 80026ce:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80026d2:	f005 fdda 	bl	800828a <USB_ReadPMA>
 80026d6:	e082      	b.n	80027de <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80026d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026da:	78db      	ldrb	r3, [r3, #3]
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d10a      	bne.n	80026f6 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80026e0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80026e4:	461a      	mov	r2, r3
 80026e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 f9d3 	bl	8002a94 <HAL_PCD_EP_DB_Receive>
 80026ee:	4603      	mov	r3, r0
 80026f0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80026f4:	e073      	b.n	80027de <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	461a      	mov	r2, r3
 80026fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	b29b      	uxth	r3, r3
 8002708:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800270c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002710:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	461a      	mov	r2, r3
 800271a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	441a      	add	r2, r3
 8002722:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002726:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800272a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800272e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002732:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002736:	b29b      	uxth	r3, r3
 8002738:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	461a      	mov	r2, r3
 8002740:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	b29b      	uxth	r3, r3
 800274c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d022      	beq.n	800279a <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800275c:	b29b      	uxth	r3, r3
 800275e:	461a      	mov	r2, r3
 8002760:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	4413      	add	r3, r2
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6812      	ldr	r2, [r2, #0]
 800276c:	4413      	add	r3, r2
 800276e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002772:	881b      	ldrh	r3, [r3, #0]
 8002774:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002778:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800277c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002780:	2b00      	cmp	r3, #0
 8002782:	d02c      	beq.n	80027de <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6818      	ldr	r0, [r3, #0]
 8002788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800278a:	6959      	ldr	r1, [r3, #20]
 800278c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800278e:	891a      	ldrh	r2, [r3, #8]
 8002790:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002794:	f005 fd79 	bl	800828a <USB_ReadPMA>
 8002798:	e021      	b.n	80027de <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	461a      	mov	r2, r3
 80027a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	4413      	add	r3, r2
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6812      	ldr	r2, [r2, #0]
 80027b2:	4413      	add	r3, r2
 80027b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027be:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80027c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d009      	beq.n	80027de <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6818      	ldr	r0, [r3, #0]
 80027ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027d0:	6959      	ldr	r1, [r3, #20]
 80027d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027d4:	895a      	ldrh	r2, [r3, #10]
 80027d6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80027da:	f005 fd56 	bl	800828a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80027de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027e0:	69da      	ldr	r2, [r3, #28]
 80027e2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80027e6:	441a      	add	r2, r3
 80027e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ea:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80027ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ee:	695a      	ldr	r2, [r3, #20]
 80027f0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80027f4:	441a      	add	r2, r3
 80027f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027f8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80027fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d005      	beq.n	800280e <PCD_EP_ISR_Handler+0x504>
 8002802:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	429a      	cmp	r2, r3
 800280c:	d206      	bcs.n	800281c <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800280e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	4619      	mov	r1, r3
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f009 ff3d 	bl	800c694 <HAL_PCD_DataOutStageCallback>
 800281a:	e005      	b.n	8002828 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002822:	4618      	mov	r0, r3
 8002824:	f003 ffe3 	bl	80067ee <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002828:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800282c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 8121 	beq.w	8002a78 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8002836:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	4613      	mov	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	4413      	add	r3, r2
 8002848:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	461a      	mov	r2, r3
 8002850:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	881b      	ldrh	r3, [r3, #0]
 800285a:	b29b      	uxth	r3, r3
 800285c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002864:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	461a      	mov	r2, r3
 800286e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	441a      	add	r2, r3
 8002876:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800287a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800287e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002882:	b29b      	uxth	r3, r3
 8002884:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002886:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002888:	78db      	ldrb	r3, [r3, #3]
 800288a:	2b01      	cmp	r3, #1
 800288c:	f040 80a2 	bne.w	80029d4 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8002890:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002892:	2200      	movs	r2, #0
 8002894:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002896:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002898:	7b1b      	ldrb	r3, [r3, #12]
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 8093 	beq.w	80029c6 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80028a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80028a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d046      	beq.n	800293a <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ae:	785b      	ldrb	r3, [r3, #1]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d126      	bne.n	8002902 <PCD_EP_ISR_Handler+0x5f8>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	461a      	mov	r2, r3
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	4413      	add	r3, r2
 80028ca:	627b      	str	r3, [r7, #36]	; 0x24
 80028cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	00da      	lsls	r2, r3, #3
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	4413      	add	r3, r2
 80028d6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80028da:	623b      	str	r3, [r7, #32]
 80028dc:	6a3b      	ldr	r3, [r7, #32]
 80028de:	881b      	ldrh	r3, [r3, #0]
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	6a3b      	ldr	r3, [r7, #32]
 80028ea:	801a      	strh	r2, [r3, #0]
 80028ec:	6a3b      	ldr	r3, [r7, #32]
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	6a3b      	ldr	r3, [r7, #32]
 80028fe:	801a      	strh	r2, [r3, #0]
 8002900:	e061      	b.n	80029c6 <PCD_EP_ISR_Handler+0x6bc>
 8002902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002904:	785b      	ldrb	r3, [r3, #1]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d15d      	bne.n	80029c6 <PCD_EP_ISR_Handler+0x6bc>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002918:	b29b      	uxth	r3, r3
 800291a:	461a      	mov	r2, r3
 800291c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291e:	4413      	add	r3, r2
 8002920:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	00da      	lsls	r2, r3, #3
 8002928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800292a:	4413      	add	r3, r2
 800292c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002930:	62bb      	str	r3, [r7, #40]	; 0x28
 8002932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002934:	2200      	movs	r2, #0
 8002936:	801a      	strh	r2, [r3, #0]
 8002938:	e045      	b.n	80029c6 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002942:	785b      	ldrb	r3, [r3, #1]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d126      	bne.n	8002996 <PCD_EP_ISR_Handler+0x68c>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	637b      	str	r3, [r7, #52]	; 0x34
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002956:	b29b      	uxth	r3, r3
 8002958:	461a      	mov	r2, r3
 800295a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800295c:	4413      	add	r3, r2
 800295e:	637b      	str	r3, [r7, #52]	; 0x34
 8002960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	00da      	lsls	r2, r3, #3
 8002966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002968:	4413      	add	r3, r2
 800296a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800296e:	633b      	str	r3, [r7, #48]	; 0x30
 8002970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002972:	881b      	ldrh	r3, [r3, #0]
 8002974:	b29b      	uxth	r3, r3
 8002976:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800297a:	b29a      	uxth	r2, r3
 800297c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297e:	801a      	strh	r2, [r3, #0]
 8002980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002982:	881b      	ldrh	r3, [r3, #0]
 8002984:	b29b      	uxth	r3, r3
 8002986:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800298a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800298e:	b29a      	uxth	r2, r3
 8002990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002992:	801a      	strh	r2, [r3, #0]
 8002994:	e017      	b.n	80029c6 <PCD_EP_ISR_Handler+0x6bc>
 8002996:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002998:	785b      	ldrb	r3, [r3, #1]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d113      	bne.n	80029c6 <PCD_EP_ISR_Handler+0x6bc>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	461a      	mov	r2, r3
 80029aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029ac:	4413      	add	r3, r2
 80029ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	00da      	lsls	r2, r3, #3
 80029b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029b8:	4413      	add	r3, r2
 80029ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029be:	63bb      	str	r3, [r7, #56]	; 0x38
 80029c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c2:	2200      	movs	r2, #0
 80029c4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	4619      	mov	r1, r3
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f009 fe7c 	bl	800c6ca <HAL_PCD_DataInStageCallback>
 80029d2:	e051      	b.n	8002a78 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80029d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80029d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d144      	bne.n	8002a6a <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	461a      	mov	r2, r3
 80029ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	4413      	add	r3, r2
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6812      	ldr	r2, [r2, #0]
 80029f8:	4413      	add	r3, r2
 80029fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029fe:	881b      	ldrh	r3, [r3, #0]
 8002a00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a04:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002a08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a0a:	699a      	ldr	r2, [r3, #24]
 8002a0c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d907      	bls.n	8002a24 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8002a14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a16:	699a      	ldr	r2, [r3, #24]
 8002a18:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a1c:	1ad2      	subs	r2, r2, r3
 8002a1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a20:	619a      	str	r2, [r3, #24]
 8002a22:	e002      	b.n	8002a2a <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8002a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a26:	2200      	movs	r2, #0
 8002a28:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002a2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d106      	bne.n	8002a40 <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	4619      	mov	r1, r3
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f009 fe46 	bl	800c6ca <HAL_PCD_DataInStageCallback>
 8002a3e:	e01b      	b.n	8002a78 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a42:	695a      	ldr	r2, [r3, #20]
 8002a44:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a48:	441a      	add	r2, r3
 8002a4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a4c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002a4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a50:	69da      	ldr	r2, [r3, #28]
 8002a52:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a56:	441a      	add	r2, r3
 8002a58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a5a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a62:	4618      	mov	r0, r3
 8002a64:	f003 fec3 	bl	80067ee <USB_EPStartXfer>
 8002a68:	e006      	b.n	8002a78 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002a6a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002a6e:	461a      	mov	r2, r3
 8002a70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f917 	bl	8002ca6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	b21b      	sxth	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f6ff ac45 	blt.w	8002314 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3758      	adds	r7, #88	; 0x58
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b088      	sub	sp, #32
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002aa2:	88fb      	ldrh	r3, [r7, #6]
 8002aa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d07c      	beq.n	8002ba6 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	4413      	add	r3, r2
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	6812      	ldr	r2, [r2, #0]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002aca:	881b      	ldrh	r3, [r3, #0]
 8002acc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ad0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	699a      	ldr	r2, [r3, #24]
 8002ad6:	8b7b      	ldrh	r3, [r7, #26]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d306      	bcc.n	8002aea <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	699a      	ldr	r2, [r3, #24]
 8002ae0:	8b7b      	ldrh	r3, [r7, #26]
 8002ae2:	1ad2      	subs	r2, r2, r3
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	619a      	str	r2, [r3, #24]
 8002ae8:	e002      	b.n	8002af0 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	2200      	movs	r2, #0
 8002aee:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d123      	bne.n	8002b40 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	461a      	mov	r2, r3
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	881b      	ldrh	r3, [r3, #0]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b12:	833b      	strh	r3, [r7, #24]
 8002b14:	8b3b      	ldrh	r3, [r7, #24]
 8002b16:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b1a:	833b      	strh	r3, [r7, #24]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	461a      	mov	r2, r3
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	441a      	add	r2, r3
 8002b2a:	8b3b      	ldrh	r3, [r7, #24]
 8002b2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b40:	88fb      	ldrh	r3, [r7, #6]
 8002b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d01f      	beq.n	8002b8a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	881b      	ldrh	r3, [r3, #0]
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b64:	82fb      	strh	r3, [r7, #22]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	441a      	add	r2, r3
 8002b74:	8afb      	ldrh	r3, [r7, #22]
 8002b76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002b8a:	8b7b      	ldrh	r3, [r7, #26]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 8085 	beq.w	8002c9c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6818      	ldr	r0, [r3, #0]
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	6959      	ldr	r1, [r3, #20]
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	891a      	ldrh	r2, [r3, #8]
 8002b9e:	8b7b      	ldrh	r3, [r7, #26]
 8002ba0:	f005 fb73 	bl	800828a <USB_ReadPMA>
 8002ba4:	e07a      	b.n	8002c9c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	4413      	add	r3, r2
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	6812      	ldr	r2, [r2, #0]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bca:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	699a      	ldr	r2, [r3, #24]
 8002bd0:	8b7b      	ldrh	r3, [r7, #26]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d306      	bcc.n	8002be4 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	699a      	ldr	r2, [r3, #24]
 8002bda:	8b7b      	ldrh	r3, [r7, #26]
 8002bdc:	1ad2      	subs	r2, r2, r3
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	619a      	str	r2, [r3, #24]
 8002be2:	e002      	b.n	8002bea <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2200      	movs	r2, #0
 8002be8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d123      	bne.n	8002c3a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	881b      	ldrh	r3, [r3, #0]
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c0c:	83fb      	strh	r3, [r7, #30]
 8002c0e:	8bfb      	ldrh	r3, [r7, #30]
 8002c10:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c14:	83fb      	strh	r3, [r7, #30]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	441a      	add	r2, r3
 8002c24:	8bfb      	ldrh	r3, [r7, #30]
 8002c26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002c3a:	88fb      	ldrh	r3, [r7, #6]
 8002c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d11f      	bne.n	8002c84 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4413      	add	r3, r2
 8002c52:	881b      	ldrh	r3, [r3, #0]
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c5e:	83bb      	strh	r3, [r7, #28]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	461a      	mov	r2, r3
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	441a      	add	r2, r3
 8002c6e:	8bbb      	ldrh	r3, [r7, #28]
 8002c70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c84:	8b7b      	ldrh	r3, [r7, #26]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d008      	beq.n	8002c9c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6818      	ldr	r0, [r3, #0]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	6959      	ldr	r1, [r3, #20]
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	895a      	ldrh	r2, [r3, #10]
 8002c96:	8b7b      	ldrh	r3, [r7, #26]
 8002c98:	f005 faf7 	bl	800828a <USB_ReadPMA>
    }
  }

  return count;
 8002c9c:	8b7b      	ldrh	r3, [r7, #26]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3720      	adds	r7, #32
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b0a4      	sub	sp, #144	; 0x90
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	60f8      	str	r0, [r7, #12]
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002cb4:	88fb      	ldrh	r3, [r7, #6]
 8002cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 81db 	beq.w	8003076 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	461a      	mov	r2, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	6812      	ldr	r2, [r2, #0]
 8002cd8:	4413      	add	r3, r2
 8002cda:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002cde:	881b      	ldrh	r3, [r3, #0]
 8002ce0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ce4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	699a      	ldr	r2, [r3, #24]
 8002cec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d907      	bls.n	8002d04 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	699a      	ldr	r2, [r3, #24]
 8002cf8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002cfc:	1ad2      	subs	r2, r2, r3
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	619a      	str	r2, [r3, #24]
 8002d02:	e002      	b.n	8002d0a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	2200      	movs	r2, #0
 8002d08:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f040 80b9 	bne.w	8002e86 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	785b      	ldrb	r3, [r3, #1]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d126      	bne.n	8002d6a <HAL_PCD_EP_DB_Transmit+0xc4>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d30:	4413      	add	r3, r2
 8002d32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	00da      	lsls	r2, r3, #3
 8002d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3c:	4413      	add	r3, r2
 8002d3e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d42:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d46:	881b      	ldrh	r3, [r3, #0]
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d52:	801a      	strh	r2, [r3, #0]
 8002d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d56:	881b      	ldrh	r3, [r3, #0]
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d66:	801a      	strh	r2, [r3, #0]
 8002d68:	e01a      	b.n	8002da0 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	785b      	ldrb	r3, [r3, #1]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d116      	bne.n	8002da0 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	637b      	str	r3, [r7, #52]	; 0x34
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	461a      	mov	r2, r3
 8002d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d86:	4413      	add	r3, r2
 8002d88:	637b      	str	r3, [r7, #52]	; 0x34
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	00da      	lsls	r2, r3, #3
 8002d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d92:	4413      	add	r3, r2
 8002d94:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d98:	633b      	str	r3, [r7, #48]	; 0x30
 8002d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	785b      	ldrb	r3, [r3, #1]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d126      	bne.n	8002dfc <HAL_PCD_EP_DB_Transmit+0x156>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	61fb      	str	r3, [r7, #28]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	61fb      	str	r3, [r7, #28]
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	00da      	lsls	r2, r3, #3
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	4413      	add	r3, r2
 8002dd0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002dd4:	61bb      	str	r3, [r7, #24]
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	881b      	ldrh	r3, [r3, #0]
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	801a      	strh	r2, [r3, #0]
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002df0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	801a      	strh	r2, [r3, #0]
 8002dfa:	e017      	b.n	8002e2c <HAL_PCD_EP_DB_Transmit+0x186>
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	785b      	ldrb	r3, [r3, #1]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d113      	bne.n	8002e2c <HAL_PCD_EP_DB_Transmit+0x186>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	461a      	mov	r2, r3
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	4413      	add	r3, r2
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	00da      	lsls	r2, r3, #3
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	4413      	add	r3, r2
 8002e20:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e24:	623b      	str	r3, [r7, #32]
 8002e26:	6a3b      	ldr	r3, [r7, #32]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	4619      	mov	r1, r3
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f009 fc49 	bl	800c6ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e38:	88fb      	ldrh	r3, [r7, #6]
 8002e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 82fa 	beq.w	8003438 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	881b      	ldrh	r3, [r3, #0]
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e5e:	82fb      	strh	r3, [r7, #22]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	461a      	mov	r2, r3
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	441a      	add	r2, r3
 8002e6e:	8afb      	ldrh	r3, [r7, #22]
 8002e70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	8013      	strh	r3, [r2, #0]
 8002e84:	e2d8      	b.n	8003438 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e86:	88fb      	ldrh	r3, [r7, #6]
 8002e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d021      	beq.n	8002ed4 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	461a      	mov	r2, r3
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	881b      	ldrh	r3, [r3, #0]
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eaa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	441a      	add	r2, r3
 8002ebc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002ec0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ec4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ec8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	f040 82ac 	bne.w	8003438 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	695a      	ldr	r2, [r3, #20]
 8002ee4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002ee8:	441a      	add	r2, r3
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	69da      	ldr	r2, [r3, #28]
 8002ef2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002ef6:	441a      	add	r2, r3
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	6a1a      	ldr	r2, [r3, #32]
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d30b      	bcc.n	8002f20 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	6a1a      	ldr	r2, [r3, #32]
 8002f14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f18:	1ad2      	subs	r2, r2, r3
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	621a      	str	r2, [r3, #32]
 8002f1e:	e017      	b.n	8002f50 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d108      	bne.n	8002f3a <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8002f28:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f38:	e00a      	b.n	8002f50 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	785b      	ldrb	r3, [r3, #1]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d165      	bne.n	8003024 <HAL_PCD_EP_DB_Transmit+0x37e>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	461a      	mov	r2, r3
 8002f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f6c:	4413      	add	r3, r2
 8002f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	00da      	lsls	r2, r3, #3
 8002f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f78:	4413      	add	r3, r2
 8002f7a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f82:	881b      	ldrh	r3, [r3, #0]
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f8e:	801a      	strh	r2, [r3, #0]
 8002f90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f94:	2b3e      	cmp	r3, #62	; 0x3e
 8002f96:	d91d      	bls.n	8002fd4 <HAL_PCD_EP_DB_Transmit+0x32e>
 8002f98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f9c:	095b      	lsrs	r3, r3, #5
 8002f9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fa4:	f003 031f 	and.w	r3, r3, #31
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d102      	bne.n	8002fb2 <HAL_PCD_EP_DB_Transmit+0x30c>
 8002fac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	029b      	lsls	r3, r3, #10
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd0:	801a      	strh	r2, [r3, #0]
 8002fd2:	e044      	b.n	800305e <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002fd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10a      	bne.n	8002ff2 <HAL_PCD_EP_DB_Transmit+0x34c>
 8002fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fde:	881b      	ldrh	r3, [r3, #0]
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fe6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fee:	801a      	strh	r2, [r3, #0]
 8002ff0:	e035      	b.n	800305e <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002ff2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ff6:	085b      	lsrs	r3, r3, #1
 8002ff8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ffa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b00      	cmp	r3, #0
 8003004:	d002      	beq.n	800300c <HAL_PCD_EP_DB_Transmit+0x366>
 8003006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003008:	3301      	adds	r3, #1
 800300a:	64bb      	str	r3, [r7, #72]	; 0x48
 800300c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800300e:	881b      	ldrh	r3, [r3, #0]
 8003010:	b29a      	uxth	r2, r3
 8003012:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003014:	b29b      	uxth	r3, r3
 8003016:	029b      	lsls	r3, r3, #10
 8003018:	b29b      	uxth	r3, r3
 800301a:	4313      	orrs	r3, r2
 800301c:	b29a      	uxth	r2, r3
 800301e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003020:	801a      	strh	r2, [r3, #0]
 8003022:	e01c      	b.n	800305e <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	785b      	ldrb	r3, [r3, #1]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d118      	bne.n	800305e <HAL_PCD_EP_DB_Transmit+0x3b8>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	647b      	str	r3, [r7, #68]	; 0x44
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800303a:	b29b      	uxth	r3, r3
 800303c:	461a      	mov	r2, r3
 800303e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003040:	4413      	add	r3, r2
 8003042:	647b      	str	r3, [r7, #68]	; 0x44
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	00da      	lsls	r2, r3, #3
 800304a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800304c:	4413      	add	r3, r2
 800304e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003052:	643b      	str	r3, [r7, #64]	; 0x40
 8003054:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003058:	b29a      	uxth	r2, r3
 800305a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800305c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6818      	ldr	r0, [r3, #0]
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	6959      	ldr	r1, [r3, #20]
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	891a      	ldrh	r2, [r3, #8]
 800306a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800306e:	b29b      	uxth	r3, r3
 8003070:	f005 f8c9 	bl	8008206 <USB_WritePMA>
 8003074:	e1e0      	b.n	8003438 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800307e:	b29b      	uxth	r3, r3
 8003080:	461a      	mov	r2, r3
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4413      	add	r3, r2
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	6812      	ldr	r2, [r2, #0]
 800308e:	4413      	add	r3, r2
 8003090:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800309a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	699a      	ldr	r2, [r3, #24]
 80030a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d307      	bcc.n	80030ba <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	699a      	ldr	r2, [r3, #24]
 80030ae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80030b2:	1ad2      	subs	r2, r2, r3
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	619a      	str	r2, [r3, #24]
 80030b8:	e002      	b.n	80030c0 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	2200      	movs	r2, #0
 80030be:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f040 80c0 	bne.w	800324a <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	785b      	ldrb	r3, [r3, #1]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d126      	bne.n	8003120 <HAL_PCD_EP_DB_Transmit+0x47a>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	461a      	mov	r2, r3
 80030e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030e6:	4413      	add	r3, r2
 80030e8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	00da      	lsls	r2, r3, #3
 80030f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030f2:	4413      	add	r3, r2
 80030f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80030f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80030fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	b29b      	uxth	r3, r3
 8003100:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003104:	b29a      	uxth	r2, r3
 8003106:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003108:	801a      	strh	r2, [r3, #0]
 800310a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800310c:	881b      	ldrh	r3, [r3, #0]
 800310e:	b29b      	uxth	r3, r3
 8003110:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003114:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003118:	b29a      	uxth	r2, r3
 800311a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800311c:	801a      	strh	r2, [r3, #0]
 800311e:	e01a      	b.n	8003156 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	785b      	ldrb	r3, [r3, #1]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d116      	bne.n	8003156 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	667b      	str	r3, [r7, #100]	; 0x64
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003136:	b29b      	uxth	r3, r3
 8003138:	461a      	mov	r2, r3
 800313a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800313c:	4413      	add	r3, r2
 800313e:	667b      	str	r3, [r7, #100]	; 0x64
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	00da      	lsls	r2, r3, #3
 8003146:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003148:	4413      	add	r3, r2
 800314a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800314e:	663b      	str	r3, [r7, #96]	; 0x60
 8003150:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003152:	2200      	movs	r2, #0
 8003154:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	677b      	str	r3, [r7, #116]	; 0x74
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	785b      	ldrb	r3, [r3, #1]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d12b      	bne.n	80031bc <HAL_PCD_EP_DB_Transmit+0x516>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	66fb      	str	r3, [r7, #108]	; 0x6c
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003172:	b29b      	uxth	r3, r3
 8003174:	461a      	mov	r2, r3
 8003176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003178:	4413      	add	r3, r2
 800317a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	00da      	lsls	r2, r3, #3
 8003182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003184:	4413      	add	r3, r2
 8003186:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800318a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800318e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003192:	881b      	ldrh	r3, [r3, #0]
 8003194:	b29b      	uxth	r3, r3
 8003196:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800319a:	b29a      	uxth	r2, r3
 800319c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031a0:	801a      	strh	r2, [r3, #0]
 80031a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031a6:	881b      	ldrh	r3, [r3, #0]
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031b8:	801a      	strh	r2, [r3, #0]
 80031ba:	e017      	b.n	80031ec <HAL_PCD_EP_DB_Transmit+0x546>
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	785b      	ldrb	r3, [r3, #1]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d113      	bne.n	80031ec <HAL_PCD_EP_DB_Transmit+0x546>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	461a      	mov	r2, r3
 80031d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031d2:	4413      	add	r3, r2
 80031d4:	677b      	str	r3, [r7, #116]	; 0x74
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	00da      	lsls	r2, r3, #3
 80031dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031de:	4413      	add	r3, r2
 80031e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80031e4:	673b      	str	r3, [r7, #112]	; 0x70
 80031e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031e8:	2200      	movs	r2, #0
 80031ea:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	4619      	mov	r1, r3
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f009 fa69 	bl	800c6ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80031f8:	88fb      	ldrh	r3, [r7, #6]
 80031fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f040 811a 	bne.w	8003438 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	461a      	mov	r2, r3
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	881b      	ldrh	r3, [r3, #0]
 8003214:	b29b      	uxth	r3, r3
 8003216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800321a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800321e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	461a      	mov	r2, r3
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	441a      	add	r2, r3
 8003230:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003234:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003238:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800323c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003244:	b29b      	uxth	r3, r3
 8003246:	8013      	strh	r3, [r2, #0]
 8003248:	e0f6      	b.n	8003438 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800324a:	88fb      	ldrh	r3, [r7, #6]
 800324c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d121      	bne.n	8003298 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	461a      	mov	r2, r3
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	881b      	ldrh	r3, [r3, #0]
 8003264:	b29b      	uxth	r3, r3
 8003266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800326a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800326e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	461a      	mov	r2, r3
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	441a      	add	r2, r3
 8003280:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003284:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003288:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800328c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003294:	b29b      	uxth	r3, r3
 8003296:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800329e:	2b01      	cmp	r3, #1
 80032a0:	f040 80ca 	bne.w	8003438 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	695a      	ldr	r2, [r3, #20]
 80032a8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80032ac:	441a      	add	r2, r3
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	69da      	ldr	r2, [r3, #28]
 80032b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80032ba:	441a      	add	r2, r3
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	6a1a      	ldr	r2, [r3, #32]
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d30b      	bcc.n	80032e4 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	6a1a      	ldr	r2, [r3, #32]
 80032d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032dc:	1ad2      	subs	r2, r2, r3
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	621a      	str	r2, [r3, #32]
 80032e2:	e017      	b.n	8003314 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d108      	bne.n	80032fe <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80032ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80032f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80032fc:	e00a      	b.n	8003314 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2200      	movs	r2, #0
 800330a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	657b      	str	r3, [r7, #84]	; 0x54
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	785b      	ldrb	r3, [r3, #1]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d165      	bne.n	80033ee <HAL_PCD_EP_DB_Transmit+0x748>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003330:	b29b      	uxth	r3, r3
 8003332:	461a      	mov	r2, r3
 8003334:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003336:	4413      	add	r3, r2
 8003338:	65fb      	str	r3, [r7, #92]	; 0x5c
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	00da      	lsls	r2, r3, #3
 8003340:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003342:	4413      	add	r3, r2
 8003344:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003348:	65bb      	str	r3, [r7, #88]	; 0x58
 800334a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800334c:	881b      	ldrh	r3, [r3, #0]
 800334e:	b29b      	uxth	r3, r3
 8003350:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003354:	b29a      	uxth	r2, r3
 8003356:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003358:	801a      	strh	r2, [r3, #0]
 800335a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800335e:	2b3e      	cmp	r3, #62	; 0x3e
 8003360:	d91d      	bls.n	800339e <HAL_PCD_EP_DB_Transmit+0x6f8>
 8003362:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003366:	095b      	lsrs	r3, r3, #5
 8003368:	66bb      	str	r3, [r7, #104]	; 0x68
 800336a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800336e:	f003 031f 	and.w	r3, r3, #31
 8003372:	2b00      	cmp	r3, #0
 8003374:	d102      	bne.n	800337c <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003376:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003378:	3b01      	subs	r3, #1
 800337a:	66bb      	str	r3, [r7, #104]	; 0x68
 800337c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800337e:	881b      	ldrh	r3, [r3, #0]
 8003380:	b29a      	uxth	r2, r3
 8003382:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003384:	b29b      	uxth	r3, r3
 8003386:	029b      	lsls	r3, r3, #10
 8003388:	b29b      	uxth	r3, r3
 800338a:	4313      	orrs	r3, r2
 800338c:	b29b      	uxth	r3, r3
 800338e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003392:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003396:	b29a      	uxth	r2, r3
 8003398:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800339a:	801a      	strh	r2, [r3, #0]
 800339c:	e041      	b.n	8003422 <HAL_PCD_EP_DB_Transmit+0x77c>
 800339e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10a      	bne.n	80033bc <HAL_PCD_EP_DB_Transmit+0x716>
 80033a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033b8:	801a      	strh	r2, [r3, #0]
 80033ba:	e032      	b.n	8003422 <HAL_PCD_EP_DB_Transmit+0x77c>
 80033bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033c0:	085b      	lsrs	r3, r3, #1
 80033c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80033c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d002      	beq.n	80033d6 <HAL_PCD_EP_DB_Transmit+0x730>
 80033d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033d2:	3301      	adds	r3, #1
 80033d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80033d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	b29a      	uxth	r2, r3
 80033dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033de:	b29b      	uxth	r3, r3
 80033e0:	029b      	lsls	r3, r3, #10
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	4313      	orrs	r3, r2
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033ea:	801a      	strh	r2, [r3, #0]
 80033ec:	e019      	b.n	8003422 <HAL_PCD_EP_DB_Transmit+0x77c>
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	785b      	ldrb	r3, [r3, #1]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d115      	bne.n	8003422 <HAL_PCD_EP_DB_Transmit+0x77c>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033fe:	b29b      	uxth	r3, r3
 8003400:	461a      	mov	r2, r3
 8003402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003404:	4413      	add	r3, r2
 8003406:	657b      	str	r3, [r7, #84]	; 0x54
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	00da      	lsls	r2, r3, #3
 800340e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003410:	4413      	add	r3, r2
 8003412:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003416:	653b      	str	r3, [r7, #80]	; 0x50
 8003418:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800341c:	b29a      	uxth	r2, r3
 800341e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003420:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6818      	ldr	r0, [r3, #0]
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	6959      	ldr	r1, [r3, #20]
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	895a      	ldrh	r2, [r3, #10]
 800342e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003432:	b29b      	uxth	r3, r3
 8003434:	f004 fee7 	bl	8008206 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	461a      	mov	r2, r3
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	881b      	ldrh	r3, [r3, #0]
 8003448:	b29b      	uxth	r3, r3
 800344a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800344e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003452:	82bb      	strh	r3, [r7, #20]
 8003454:	8abb      	ldrh	r3, [r7, #20]
 8003456:	f083 0310 	eor.w	r3, r3, #16
 800345a:	82bb      	strh	r3, [r7, #20]
 800345c:	8abb      	ldrh	r3, [r7, #20]
 800345e:	f083 0320 	eor.w	r3, r3, #32
 8003462:	82bb      	strh	r3, [r7, #20]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	461a      	mov	r2, r3
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	441a      	add	r2, r3
 8003472:	8abb      	ldrh	r3, [r7, #20]
 8003474:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003478:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800347c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003484:	b29b      	uxth	r3, r3
 8003486:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3790      	adds	r7, #144	; 0x90
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003492:	b480      	push	{r7}
 8003494:	b087      	sub	sp, #28
 8003496:	af00      	add	r7, sp, #0
 8003498:	60f8      	str	r0, [r7, #12]
 800349a:	607b      	str	r3, [r7, #4]
 800349c:	460b      	mov	r3, r1
 800349e:	817b      	strh	r3, [r7, #10]
 80034a0:	4613      	mov	r3, r2
 80034a2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80034a4:	897b      	ldrh	r3, [r7, #10]
 80034a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00b      	beq.n	80034c8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034b0:	897b      	ldrh	r3, [r7, #10]
 80034b2:	f003 0307 	and.w	r3, r3, #7
 80034b6:	1c5a      	adds	r2, r3, #1
 80034b8:	4613      	mov	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	4413      	add	r3, r2
 80034c4:	617b      	str	r3, [r7, #20]
 80034c6:	e009      	b.n	80034dc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80034c8:	897a      	ldrh	r2, [r7, #10]
 80034ca:	4613      	mov	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4413      	add	r3, r2
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	4413      	add	r3, r2
 80034da:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80034dc:	893b      	ldrh	r3, [r7, #8]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d107      	bne.n	80034f2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	2200      	movs	r2, #0
 80034e6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	80da      	strh	r2, [r3, #6]
 80034f0:	e00b      	b.n	800350a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2201      	movs	r2, #1
 80034f6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	0c1b      	lsrs	r3, r3, #16
 8003504:	b29a      	uxth	r2, r3
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	371c      	adds	r7, #28
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800353c:	b29b      	uxth	r3, r3
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	b29a      	uxth	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003550:	b29b      	uxth	r3, r3
 8003552:	f043 0302 	orr.w	r3, r3, #2
 8003556:	b29a      	uxth	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3714      	adds	r7, #20
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003570:	4b05      	ldr	r3, [pc, #20]	; (8003588 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a04      	ldr	r2, [pc, #16]	; (8003588 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800357a:	6013      	str	r3, [r2, #0]
}
 800357c:	bf00      	nop
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	40007000 	.word	0x40007000

0800358c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003590:	4b04      	ldr	r3, [pc, #16]	; (80035a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003598:	4618      	mov	r0, r3
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	40007000 	.word	0x40007000

080035a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035b6:	d130      	bne.n	800361a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80035b8:	4b23      	ldr	r3, [pc, #140]	; (8003648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035c4:	d038      	beq.n	8003638 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035c6:	4b20      	ldr	r3, [pc, #128]	; (8003648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035ce:	4a1e      	ldr	r2, [pc, #120]	; (8003648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035d6:	4b1d      	ldr	r3, [pc, #116]	; (800364c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2232      	movs	r2, #50	; 0x32
 80035dc:	fb02 f303 	mul.w	r3, r2, r3
 80035e0:	4a1b      	ldr	r2, [pc, #108]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80035e2:	fba2 2303 	umull	r2, r3, r2, r3
 80035e6:	0c9b      	lsrs	r3, r3, #18
 80035e8:	3301      	adds	r3, #1
 80035ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035ec:	e002      	b.n	80035f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	3b01      	subs	r3, #1
 80035f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035f4:	4b14      	ldr	r3, [pc, #80]	; (8003648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003600:	d102      	bne.n	8003608 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1f2      	bne.n	80035ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003608:	4b0f      	ldr	r3, [pc, #60]	; (8003648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003610:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003614:	d110      	bne.n	8003638 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e00f      	b.n	800363a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800361a:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003626:	d007      	beq.n	8003638 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003628:	4b07      	ldr	r3, [pc, #28]	; (8003648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003630:	4a05      	ldr	r2, [pc, #20]	; (8003648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003632:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003636:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	40007000 	.word	0x40007000
 800364c:	20000000 	.word	0x20000000
 8003650:	431bde83 	.word	0x431bde83

08003654 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003658:	4b05      	ldr	r3, [pc, #20]	; (8003670 <HAL_PWREx_EnableVddUSB+0x1c>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	4a04      	ldr	r2, [pc, #16]	; (8003670 <HAL_PWREx_EnableVddUSB+0x1c>)
 800365e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003662:	6053      	str	r3, [r2, #4]
}
 8003664:	bf00      	nop
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	40007000 	.word	0x40007000

08003674 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b088      	sub	sp, #32
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d102      	bne.n	8003688 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	f000 bc02 	b.w	8003e8c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003688:	4b96      	ldr	r3, [pc, #600]	; (80038e4 <HAL_RCC_OscConfig+0x270>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 030c 	and.w	r3, r3, #12
 8003690:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003692:	4b94      	ldr	r3, [pc, #592]	; (80038e4 <HAL_RCC_OscConfig+0x270>)
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	f003 0303 	and.w	r3, r3, #3
 800369a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0310 	and.w	r3, r3, #16
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 80e4 	beq.w	8003872 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d007      	beq.n	80036c0 <HAL_RCC_OscConfig+0x4c>
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	2b0c      	cmp	r3, #12
 80036b4:	f040 808b 	bne.w	80037ce <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	f040 8087 	bne.w	80037ce <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036c0:	4b88      	ldr	r3, [pc, #544]	; (80038e4 <HAL_RCC_OscConfig+0x270>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d005      	beq.n	80036d8 <HAL_RCC_OscConfig+0x64>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e3d9      	b.n	8003e8c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a1a      	ldr	r2, [r3, #32]
 80036dc:	4b81      	ldr	r3, [pc, #516]	; (80038e4 <HAL_RCC_OscConfig+0x270>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0308 	and.w	r3, r3, #8
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d004      	beq.n	80036f2 <HAL_RCC_OscConfig+0x7e>
 80036e8:	4b7e      	ldr	r3, [pc, #504]	; (80038e4 <HAL_RCC_OscConfig+0x270>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036f0:	e005      	b.n	80036fe <HAL_RCC_OscConfig+0x8a>
 80036f2:	4b7c      	ldr	r3, [pc, #496]	; (80038e4 <HAL_RCC_OscConfig+0x270>)
 80036f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036f8:	091b      	lsrs	r3, r3, #4
 80036fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036fe:	4293      	cmp	r3, r2
 8003700:	d223      	bcs.n	800374a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	4618      	mov	r0, r3
 8003708:	f000 fd8c 	bl	8004224 <RCC_SetFlashLatencyFromMSIRange>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e3ba      	b.n	8003e8c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003716:	4b73      	ldr	r3, [pc, #460]	; (80038e4 <HAL_RCC_OscConfig+0x270>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a72      	ldr	r2, [pc, #456]	; (80038e4 <HAL_RCC_OscConfig+0x270>)
 800371c:	f043 0308 	orr.w	r3, r3, #8
 8003720:	6013      	str	r3, [r2, #0]
 8003722:	4b70      	ldr	r3, [pc, #448]	; (80038e4 <HAL_RCC_OscConfig+0x270>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	496d      	ldr	r1, [pc, #436]	; (80038e4 <HAL_RCC_OscConfig+0x270>)
 8003730:	4313      	orrs	r3, r2
 8003732:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003734:	4b6b      	ldr	r3, [pc, #428]	; (80038e4 <HAL_RCC_OscConfig+0x270>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	021b      	lsls	r3, r3, #8
 8003742:	4968      	ldr	r1, [pc, #416]	; (80038e4 <HAL_RCC_OscConfig+0x270>)
 8003744:	4313      	orrs	r3, r2
 8003746:	604b      	str	r3, [r1, #4]
 8003748:	e025      	b.n	8003796 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800374a:	4b66      	ldr	r3, [pc, #408]	; (80038e4 <HAL_RCC_OscConfig+0x270>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a65      	ldr	r2, [pc, #404]	; (80038e4 <HAL_RCC_OscConfig+0x270>)
 8003750:	f043 0308 	orr.w	r3, r3, #8
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	4b63      	ldr	r3, [pc, #396]	; (80038e4 <HAL_RCC_OscConfig+0x270>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	4960      	ldr	r1, [pc, #384]	; (80038e4 <HAL_RCC_OscConfig+0x270>)
 8003764:	4313      	orrs	r3, r2
 8003766:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003768:	4b5e      	ldr	r3, [pc, #376]	; (80038e4 <HAL_RCC_OscConfig+0x270>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	69db      	ldr	r3, [r3, #28]
 8003774:	021b      	lsls	r3, r3, #8
 8003776:	495b      	ldr	r1, [pc, #364]	; (80038e4 <HAL_RCC_OscConfig+0x270>)
 8003778:	4313      	orrs	r3, r2
 800377a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d109      	bne.n	8003796 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	4618      	mov	r0, r3
 8003788:	f000 fd4c 	bl	8004224 <RCC_SetFlashLatencyFromMSIRange>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e37a      	b.n	8003e8c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003796:	f000 fc81 	bl	800409c <HAL_RCC_GetSysClockFreq>
 800379a:	4602      	mov	r2, r0
 800379c:	4b51      	ldr	r3, [pc, #324]	; (80038e4 <HAL_RCC_OscConfig+0x270>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	091b      	lsrs	r3, r3, #4
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	4950      	ldr	r1, [pc, #320]	; (80038e8 <HAL_RCC_OscConfig+0x274>)
 80037a8:	5ccb      	ldrb	r3, [r1, r3]
 80037aa:	f003 031f 	and.w	r3, r3, #31
 80037ae:	fa22 f303 	lsr.w	r3, r2, r3
 80037b2:	4a4e      	ldr	r2, [pc, #312]	; (80038ec <HAL_RCC_OscConfig+0x278>)
 80037b4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80037b6:	4b4e      	ldr	r3, [pc, #312]	; (80038f0 <HAL_RCC_OscConfig+0x27c>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7fd fb86 	bl	8000ecc <HAL_InitTick>
 80037c0:	4603      	mov	r3, r0
 80037c2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80037c4:	7bfb      	ldrb	r3, [r7, #15]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d052      	beq.n	8003870 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80037ca:	7bfb      	ldrb	r3, [r7, #15]
 80037cc:	e35e      	b.n	8003e8c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d032      	beq.n	800383c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80037d6:	4b43      	ldr	r3, [pc, #268]	; (80038e4 <HAL_RCC_OscConfig+0x270>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a42      	ldr	r2, [pc, #264]	; (80038e4 <HAL_RCC_OscConfig+0x270>)
 80037dc:	f043 0301 	orr.w	r3, r3, #1
 80037e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037e2:	f7fd fbc3 	bl	8000f6c <HAL_GetTick>
 80037e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037e8:	e008      	b.n	80037fc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037ea:	f7fd fbbf 	bl	8000f6c <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e347      	b.n	8003e8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037fc:	4b39      	ldr	r3, [pc, #228]	; (80038e4 <HAL_RCC_OscConfig+0x270>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d0f0      	beq.n	80037ea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003808:	4b36      	ldr	r3, [pc, #216]	; (80038e4 <HAL_RCC_OscConfig+0x270>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a35      	ldr	r2, [pc, #212]	; (80038e4 <HAL_RCC_OscConfig+0x270>)
 800380e:	f043 0308 	orr.w	r3, r3, #8
 8003812:	6013      	str	r3, [r2, #0]
 8003814:	4b33      	ldr	r3, [pc, #204]	; (80038e4 <HAL_RCC_OscConfig+0x270>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	4930      	ldr	r1, [pc, #192]	; (80038e4 <HAL_RCC_OscConfig+0x270>)
 8003822:	4313      	orrs	r3, r2
 8003824:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003826:	4b2f      	ldr	r3, [pc, #188]	; (80038e4 <HAL_RCC_OscConfig+0x270>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	021b      	lsls	r3, r3, #8
 8003834:	492b      	ldr	r1, [pc, #172]	; (80038e4 <HAL_RCC_OscConfig+0x270>)
 8003836:	4313      	orrs	r3, r2
 8003838:	604b      	str	r3, [r1, #4]
 800383a:	e01a      	b.n	8003872 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800383c:	4b29      	ldr	r3, [pc, #164]	; (80038e4 <HAL_RCC_OscConfig+0x270>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a28      	ldr	r2, [pc, #160]	; (80038e4 <HAL_RCC_OscConfig+0x270>)
 8003842:	f023 0301 	bic.w	r3, r3, #1
 8003846:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003848:	f7fd fb90 	bl	8000f6c <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003850:	f7fd fb8c 	bl	8000f6c <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e314      	b.n	8003e8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003862:	4b20      	ldr	r3, [pc, #128]	; (80038e4 <HAL_RCC_OscConfig+0x270>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1f0      	bne.n	8003850 <HAL_RCC_OscConfig+0x1dc>
 800386e:	e000      	b.n	8003872 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003870:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d073      	beq.n	8003966 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	2b08      	cmp	r3, #8
 8003882:	d005      	beq.n	8003890 <HAL_RCC_OscConfig+0x21c>
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	2b0c      	cmp	r3, #12
 8003888:	d10e      	bne.n	80038a8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	2b03      	cmp	r3, #3
 800388e:	d10b      	bne.n	80038a8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003890:	4b14      	ldr	r3, [pc, #80]	; (80038e4 <HAL_RCC_OscConfig+0x270>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d063      	beq.n	8003964 <HAL_RCC_OscConfig+0x2f0>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d15f      	bne.n	8003964 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e2f1      	b.n	8003e8c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038b0:	d106      	bne.n	80038c0 <HAL_RCC_OscConfig+0x24c>
 80038b2:	4b0c      	ldr	r3, [pc, #48]	; (80038e4 <HAL_RCC_OscConfig+0x270>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a0b      	ldr	r2, [pc, #44]	; (80038e4 <HAL_RCC_OscConfig+0x270>)
 80038b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038bc:	6013      	str	r3, [r2, #0]
 80038be:	e025      	b.n	800390c <HAL_RCC_OscConfig+0x298>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038c8:	d114      	bne.n	80038f4 <HAL_RCC_OscConfig+0x280>
 80038ca:	4b06      	ldr	r3, [pc, #24]	; (80038e4 <HAL_RCC_OscConfig+0x270>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a05      	ldr	r2, [pc, #20]	; (80038e4 <HAL_RCC_OscConfig+0x270>)
 80038d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	4b03      	ldr	r3, [pc, #12]	; (80038e4 <HAL_RCC_OscConfig+0x270>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a02      	ldr	r2, [pc, #8]	; (80038e4 <HAL_RCC_OscConfig+0x270>)
 80038dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038e0:	6013      	str	r3, [r2, #0]
 80038e2:	e013      	b.n	800390c <HAL_RCC_OscConfig+0x298>
 80038e4:	40021000 	.word	0x40021000
 80038e8:	0800cf2c 	.word	0x0800cf2c
 80038ec:	20000000 	.word	0x20000000
 80038f0:	20000004 	.word	0x20000004
 80038f4:	4ba0      	ldr	r3, [pc, #640]	; (8003b78 <HAL_RCC_OscConfig+0x504>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a9f      	ldr	r2, [pc, #636]	; (8003b78 <HAL_RCC_OscConfig+0x504>)
 80038fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038fe:	6013      	str	r3, [r2, #0]
 8003900:	4b9d      	ldr	r3, [pc, #628]	; (8003b78 <HAL_RCC_OscConfig+0x504>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a9c      	ldr	r2, [pc, #624]	; (8003b78 <HAL_RCC_OscConfig+0x504>)
 8003906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800390a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d013      	beq.n	800393c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003914:	f7fd fb2a 	bl	8000f6c <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800391c:	f7fd fb26 	bl	8000f6c <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b64      	cmp	r3, #100	; 0x64
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e2ae      	b.n	8003e8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800392e:	4b92      	ldr	r3, [pc, #584]	; (8003b78 <HAL_RCC_OscConfig+0x504>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0f0      	beq.n	800391c <HAL_RCC_OscConfig+0x2a8>
 800393a:	e014      	b.n	8003966 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393c:	f7fd fb16 	bl	8000f6c <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003944:	f7fd fb12 	bl	8000f6c <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b64      	cmp	r3, #100	; 0x64
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e29a      	b.n	8003e8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003956:	4b88      	ldr	r3, [pc, #544]	; (8003b78 <HAL_RCC_OscConfig+0x504>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1f0      	bne.n	8003944 <HAL_RCC_OscConfig+0x2d0>
 8003962:	e000      	b.n	8003966 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d060      	beq.n	8003a34 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	2b04      	cmp	r3, #4
 8003976:	d005      	beq.n	8003984 <HAL_RCC_OscConfig+0x310>
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	2b0c      	cmp	r3, #12
 800397c:	d119      	bne.n	80039b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	2b02      	cmp	r3, #2
 8003982:	d116      	bne.n	80039b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003984:	4b7c      	ldr	r3, [pc, #496]	; (8003b78 <HAL_RCC_OscConfig+0x504>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800398c:	2b00      	cmp	r3, #0
 800398e:	d005      	beq.n	800399c <HAL_RCC_OscConfig+0x328>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d101      	bne.n	800399c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e277      	b.n	8003e8c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800399c:	4b76      	ldr	r3, [pc, #472]	; (8003b78 <HAL_RCC_OscConfig+0x504>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	061b      	lsls	r3, r3, #24
 80039aa:	4973      	ldr	r1, [pc, #460]	; (8003b78 <HAL_RCC_OscConfig+0x504>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039b0:	e040      	b.n	8003a34 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d023      	beq.n	8003a02 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039ba:	4b6f      	ldr	r3, [pc, #444]	; (8003b78 <HAL_RCC_OscConfig+0x504>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a6e      	ldr	r2, [pc, #440]	; (8003b78 <HAL_RCC_OscConfig+0x504>)
 80039c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c6:	f7fd fad1 	bl	8000f6c <HAL_GetTick>
 80039ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039cc:	e008      	b.n	80039e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ce:	f7fd facd 	bl	8000f6c <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e255      	b.n	8003e8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039e0:	4b65      	ldr	r3, [pc, #404]	; (8003b78 <HAL_RCC_OscConfig+0x504>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d0f0      	beq.n	80039ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ec:	4b62      	ldr	r3, [pc, #392]	; (8003b78 <HAL_RCC_OscConfig+0x504>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	061b      	lsls	r3, r3, #24
 80039fa:	495f      	ldr	r1, [pc, #380]	; (8003b78 <HAL_RCC_OscConfig+0x504>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	604b      	str	r3, [r1, #4]
 8003a00:	e018      	b.n	8003a34 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a02:	4b5d      	ldr	r3, [pc, #372]	; (8003b78 <HAL_RCC_OscConfig+0x504>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a5c      	ldr	r2, [pc, #368]	; (8003b78 <HAL_RCC_OscConfig+0x504>)
 8003a08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0e:	f7fd faad 	bl	8000f6c <HAL_GetTick>
 8003a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a14:	e008      	b.n	8003a28 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a16:	f7fd faa9 	bl	8000f6c <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e231      	b.n	8003e8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a28:	4b53      	ldr	r3, [pc, #332]	; (8003b78 <HAL_RCC_OscConfig+0x504>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1f0      	bne.n	8003a16 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0308 	and.w	r3, r3, #8
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d03c      	beq.n	8003aba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	695b      	ldr	r3, [r3, #20]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d01c      	beq.n	8003a82 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a48:	4b4b      	ldr	r3, [pc, #300]	; (8003b78 <HAL_RCC_OscConfig+0x504>)
 8003a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a4e:	4a4a      	ldr	r2, [pc, #296]	; (8003b78 <HAL_RCC_OscConfig+0x504>)
 8003a50:	f043 0301 	orr.w	r3, r3, #1
 8003a54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a58:	f7fd fa88 	bl	8000f6c <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a60:	f7fd fa84 	bl	8000f6c <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e20c      	b.n	8003e8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a72:	4b41      	ldr	r3, [pc, #260]	; (8003b78 <HAL_RCC_OscConfig+0x504>)
 8003a74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0ef      	beq.n	8003a60 <HAL_RCC_OscConfig+0x3ec>
 8003a80:	e01b      	b.n	8003aba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a82:	4b3d      	ldr	r3, [pc, #244]	; (8003b78 <HAL_RCC_OscConfig+0x504>)
 8003a84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a88:	4a3b      	ldr	r2, [pc, #236]	; (8003b78 <HAL_RCC_OscConfig+0x504>)
 8003a8a:	f023 0301 	bic.w	r3, r3, #1
 8003a8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a92:	f7fd fa6b 	bl	8000f6c <HAL_GetTick>
 8003a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a98:	e008      	b.n	8003aac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a9a:	f7fd fa67 	bl	8000f6c <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e1ef      	b.n	8003e8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003aac:	4b32      	ldr	r3, [pc, #200]	; (8003b78 <HAL_RCC_OscConfig+0x504>)
 8003aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1ef      	bne.n	8003a9a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0304 	and.w	r3, r3, #4
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 80a6 	beq.w	8003c14 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003acc:	4b2a      	ldr	r3, [pc, #168]	; (8003b78 <HAL_RCC_OscConfig+0x504>)
 8003ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10d      	bne.n	8003af4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ad8:	4b27      	ldr	r3, [pc, #156]	; (8003b78 <HAL_RCC_OscConfig+0x504>)
 8003ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003adc:	4a26      	ldr	r2, [pc, #152]	; (8003b78 <HAL_RCC_OscConfig+0x504>)
 8003ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ae2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ae4:	4b24      	ldr	r3, [pc, #144]	; (8003b78 <HAL_RCC_OscConfig+0x504>)
 8003ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aec:	60bb      	str	r3, [r7, #8]
 8003aee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003af0:	2301      	movs	r3, #1
 8003af2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003af4:	4b21      	ldr	r3, [pc, #132]	; (8003b7c <HAL_RCC_OscConfig+0x508>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d118      	bne.n	8003b32 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b00:	4b1e      	ldr	r3, [pc, #120]	; (8003b7c <HAL_RCC_OscConfig+0x508>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a1d      	ldr	r2, [pc, #116]	; (8003b7c <HAL_RCC_OscConfig+0x508>)
 8003b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b0c:	f7fd fa2e 	bl	8000f6c <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b14:	f7fd fa2a 	bl	8000f6c <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e1b2      	b.n	8003e8c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b26:	4b15      	ldr	r3, [pc, #84]	; (8003b7c <HAL_RCC_OscConfig+0x508>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0f0      	beq.n	8003b14 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d108      	bne.n	8003b4c <HAL_RCC_OscConfig+0x4d8>
 8003b3a:	4b0f      	ldr	r3, [pc, #60]	; (8003b78 <HAL_RCC_OscConfig+0x504>)
 8003b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b40:	4a0d      	ldr	r2, [pc, #52]	; (8003b78 <HAL_RCC_OscConfig+0x504>)
 8003b42:	f043 0301 	orr.w	r3, r3, #1
 8003b46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b4a:	e029      	b.n	8003ba0 <HAL_RCC_OscConfig+0x52c>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	2b05      	cmp	r3, #5
 8003b52:	d115      	bne.n	8003b80 <HAL_RCC_OscConfig+0x50c>
 8003b54:	4b08      	ldr	r3, [pc, #32]	; (8003b78 <HAL_RCC_OscConfig+0x504>)
 8003b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5a:	4a07      	ldr	r2, [pc, #28]	; (8003b78 <HAL_RCC_OscConfig+0x504>)
 8003b5c:	f043 0304 	orr.w	r3, r3, #4
 8003b60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b64:	4b04      	ldr	r3, [pc, #16]	; (8003b78 <HAL_RCC_OscConfig+0x504>)
 8003b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6a:	4a03      	ldr	r2, [pc, #12]	; (8003b78 <HAL_RCC_OscConfig+0x504>)
 8003b6c:	f043 0301 	orr.w	r3, r3, #1
 8003b70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b74:	e014      	b.n	8003ba0 <HAL_RCC_OscConfig+0x52c>
 8003b76:	bf00      	nop
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	40007000 	.word	0x40007000
 8003b80:	4b9a      	ldr	r3, [pc, #616]	; (8003dec <HAL_RCC_OscConfig+0x778>)
 8003b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b86:	4a99      	ldr	r2, [pc, #612]	; (8003dec <HAL_RCC_OscConfig+0x778>)
 8003b88:	f023 0301 	bic.w	r3, r3, #1
 8003b8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b90:	4b96      	ldr	r3, [pc, #600]	; (8003dec <HAL_RCC_OscConfig+0x778>)
 8003b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b96:	4a95      	ldr	r2, [pc, #596]	; (8003dec <HAL_RCC_OscConfig+0x778>)
 8003b98:	f023 0304 	bic.w	r3, r3, #4
 8003b9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d016      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba8:	f7fd f9e0 	bl	8000f6c <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bae:	e00a      	b.n	8003bc6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb0:	f7fd f9dc 	bl	8000f6c <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e162      	b.n	8003e8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bc6:	4b89      	ldr	r3, [pc, #548]	; (8003dec <HAL_RCC_OscConfig+0x778>)
 8003bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d0ed      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x53c>
 8003bd4:	e015      	b.n	8003c02 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd6:	f7fd f9c9 	bl	8000f6c <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bdc:	e00a      	b.n	8003bf4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bde:	f7fd f9c5 	bl	8000f6c <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e14b      	b.n	8003e8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bf4:	4b7d      	ldr	r3, [pc, #500]	; (8003dec <HAL_RCC_OscConfig+0x778>)
 8003bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1ed      	bne.n	8003bde <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c02:	7ffb      	ldrb	r3, [r7, #31]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d105      	bne.n	8003c14 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c08:	4b78      	ldr	r3, [pc, #480]	; (8003dec <HAL_RCC_OscConfig+0x778>)
 8003c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0c:	4a77      	ldr	r2, [pc, #476]	; (8003dec <HAL_RCC_OscConfig+0x778>)
 8003c0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c12:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0320 	and.w	r3, r3, #32
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d03c      	beq.n	8003c9a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d01c      	beq.n	8003c62 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c28:	4b70      	ldr	r3, [pc, #448]	; (8003dec <HAL_RCC_OscConfig+0x778>)
 8003c2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c2e:	4a6f      	ldr	r2, [pc, #444]	; (8003dec <HAL_RCC_OscConfig+0x778>)
 8003c30:	f043 0301 	orr.w	r3, r3, #1
 8003c34:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c38:	f7fd f998 	bl	8000f6c <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c3e:	e008      	b.n	8003c52 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c40:	f7fd f994 	bl	8000f6c <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e11c      	b.n	8003e8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c52:	4b66      	ldr	r3, [pc, #408]	; (8003dec <HAL_RCC_OscConfig+0x778>)
 8003c54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0ef      	beq.n	8003c40 <HAL_RCC_OscConfig+0x5cc>
 8003c60:	e01b      	b.n	8003c9a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c62:	4b62      	ldr	r3, [pc, #392]	; (8003dec <HAL_RCC_OscConfig+0x778>)
 8003c64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c68:	4a60      	ldr	r2, [pc, #384]	; (8003dec <HAL_RCC_OscConfig+0x778>)
 8003c6a:	f023 0301 	bic.w	r3, r3, #1
 8003c6e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c72:	f7fd f97b 	bl	8000f6c <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c78:	e008      	b.n	8003c8c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c7a:	f7fd f977 	bl	8000f6c <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d901      	bls.n	8003c8c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e0ff      	b.n	8003e8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c8c:	4b57      	ldr	r3, [pc, #348]	; (8003dec <HAL_RCC_OscConfig+0x778>)
 8003c8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1ef      	bne.n	8003c7a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 80f3 	beq.w	8003e8a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	f040 80c9 	bne.w	8003e40 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003cae:	4b4f      	ldr	r3, [pc, #316]	; (8003dec <HAL_RCC_OscConfig+0x778>)
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	f003 0203 	and.w	r2, r3, #3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d12c      	bne.n	8003d1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d123      	bne.n	8003d1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cde:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d11b      	bne.n	8003d1c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d113      	bne.n	8003d1c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cfe:	085b      	lsrs	r3, r3, #1
 8003d00:	3b01      	subs	r3, #1
 8003d02:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d109      	bne.n	8003d1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	085b      	lsrs	r3, r3, #1
 8003d14:	3b01      	subs	r3, #1
 8003d16:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d06b      	beq.n	8003df4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	2b0c      	cmp	r3, #12
 8003d20:	d062      	beq.n	8003de8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d22:	4b32      	ldr	r3, [pc, #200]	; (8003dec <HAL_RCC_OscConfig+0x778>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e0ac      	b.n	8003e8c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d32:	4b2e      	ldr	r3, [pc, #184]	; (8003dec <HAL_RCC_OscConfig+0x778>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a2d      	ldr	r2, [pc, #180]	; (8003dec <HAL_RCC_OscConfig+0x778>)
 8003d38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d3c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d3e:	f7fd f915 	bl	8000f6c <HAL_GetTick>
 8003d42:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d44:	e008      	b.n	8003d58 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d46:	f7fd f911 	bl	8000f6c <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d901      	bls.n	8003d58 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e099      	b.n	8003e8c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d58:	4b24      	ldr	r3, [pc, #144]	; (8003dec <HAL_RCC_OscConfig+0x778>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1f0      	bne.n	8003d46 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d64:	4b21      	ldr	r3, [pc, #132]	; (8003dec <HAL_RCC_OscConfig+0x778>)
 8003d66:	68da      	ldr	r2, [r3, #12]
 8003d68:	4b21      	ldr	r3, [pc, #132]	; (8003df0 <HAL_RCC_OscConfig+0x77c>)
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003d74:	3a01      	subs	r2, #1
 8003d76:	0112      	lsls	r2, r2, #4
 8003d78:	4311      	orrs	r1, r2
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d7e:	0212      	lsls	r2, r2, #8
 8003d80:	4311      	orrs	r1, r2
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003d86:	0852      	lsrs	r2, r2, #1
 8003d88:	3a01      	subs	r2, #1
 8003d8a:	0552      	lsls	r2, r2, #21
 8003d8c:	4311      	orrs	r1, r2
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003d92:	0852      	lsrs	r2, r2, #1
 8003d94:	3a01      	subs	r2, #1
 8003d96:	0652      	lsls	r2, r2, #25
 8003d98:	4311      	orrs	r1, r2
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d9e:	06d2      	lsls	r2, r2, #27
 8003da0:	430a      	orrs	r2, r1
 8003da2:	4912      	ldr	r1, [pc, #72]	; (8003dec <HAL_RCC_OscConfig+0x778>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003da8:	4b10      	ldr	r3, [pc, #64]	; (8003dec <HAL_RCC_OscConfig+0x778>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a0f      	ldr	r2, [pc, #60]	; (8003dec <HAL_RCC_OscConfig+0x778>)
 8003dae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003db2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003db4:	4b0d      	ldr	r3, [pc, #52]	; (8003dec <HAL_RCC_OscConfig+0x778>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	4a0c      	ldr	r2, [pc, #48]	; (8003dec <HAL_RCC_OscConfig+0x778>)
 8003dba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dbe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003dc0:	f7fd f8d4 	bl	8000f6c <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc8:	f7fd f8d0 	bl	8000f6c <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e058      	b.n	8003e8c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dda:	4b04      	ldr	r3, [pc, #16]	; (8003dec <HAL_RCC_OscConfig+0x778>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0f0      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003de6:	e050      	b.n	8003e8a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e04f      	b.n	8003e8c <HAL_RCC_OscConfig+0x818>
 8003dec:	40021000 	.word	0x40021000
 8003df0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003df4:	4b27      	ldr	r3, [pc, #156]	; (8003e94 <HAL_RCC_OscConfig+0x820>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d144      	bne.n	8003e8a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003e00:	4b24      	ldr	r3, [pc, #144]	; (8003e94 <HAL_RCC_OscConfig+0x820>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a23      	ldr	r2, [pc, #140]	; (8003e94 <HAL_RCC_OscConfig+0x820>)
 8003e06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e0c:	4b21      	ldr	r3, [pc, #132]	; (8003e94 <HAL_RCC_OscConfig+0x820>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	4a20      	ldr	r2, [pc, #128]	; (8003e94 <HAL_RCC_OscConfig+0x820>)
 8003e12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e18:	f7fd f8a8 	bl	8000f6c <HAL_GetTick>
 8003e1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e1e:	e008      	b.n	8003e32 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e20:	f7fd f8a4 	bl	8000f6c <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e02c      	b.n	8003e8c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e32:	4b18      	ldr	r3, [pc, #96]	; (8003e94 <HAL_RCC_OscConfig+0x820>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d0f0      	beq.n	8003e20 <HAL_RCC_OscConfig+0x7ac>
 8003e3e:	e024      	b.n	8003e8a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	2b0c      	cmp	r3, #12
 8003e44:	d01f      	beq.n	8003e86 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e46:	4b13      	ldr	r3, [pc, #76]	; (8003e94 <HAL_RCC_OscConfig+0x820>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a12      	ldr	r2, [pc, #72]	; (8003e94 <HAL_RCC_OscConfig+0x820>)
 8003e4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e52:	f7fd f88b 	bl	8000f6c <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e58:	e008      	b.n	8003e6c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e5a:	f7fd f887 	bl	8000f6c <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e00f      	b.n	8003e8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e6c:	4b09      	ldr	r3, [pc, #36]	; (8003e94 <HAL_RCC_OscConfig+0x820>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1f0      	bne.n	8003e5a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003e78:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <HAL_RCC_OscConfig+0x820>)
 8003e7a:	68da      	ldr	r2, [r3, #12]
 8003e7c:	4905      	ldr	r1, [pc, #20]	; (8003e94 <HAL_RCC_OscConfig+0x820>)
 8003e7e:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <HAL_RCC_OscConfig+0x824>)
 8003e80:	4013      	ands	r3, r2
 8003e82:	60cb      	str	r3, [r1, #12]
 8003e84:	e001      	b.n	8003e8a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e000      	b.n	8003e8c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3720      	adds	r7, #32
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	40021000 	.word	0x40021000
 8003e98:	feeefffc 	.word	0xfeeefffc

08003e9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e0e7      	b.n	8004080 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003eb0:	4b75      	ldr	r3, [pc, #468]	; (8004088 <HAL_RCC_ClockConfig+0x1ec>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d910      	bls.n	8003ee0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ebe:	4b72      	ldr	r3, [pc, #456]	; (8004088 <HAL_RCC_ClockConfig+0x1ec>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f023 0207 	bic.w	r2, r3, #7
 8003ec6:	4970      	ldr	r1, [pc, #448]	; (8004088 <HAL_RCC_ClockConfig+0x1ec>)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ece:	4b6e      	ldr	r3, [pc, #440]	; (8004088 <HAL_RCC_ClockConfig+0x1ec>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0307 	and.w	r3, r3, #7
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d001      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e0cf      	b.n	8004080 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d010      	beq.n	8003f0e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	4b66      	ldr	r3, [pc, #408]	; (800408c <HAL_RCC_ClockConfig+0x1f0>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d908      	bls.n	8003f0e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003efc:	4b63      	ldr	r3, [pc, #396]	; (800408c <HAL_RCC_ClockConfig+0x1f0>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	4960      	ldr	r1, [pc, #384]	; (800408c <HAL_RCC_ClockConfig+0x1f0>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d04c      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	2b03      	cmp	r3, #3
 8003f20:	d107      	bne.n	8003f32 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f22:	4b5a      	ldr	r3, [pc, #360]	; (800408c <HAL_RCC_ClockConfig+0x1f0>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d121      	bne.n	8003f72 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e0a6      	b.n	8004080 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d107      	bne.n	8003f4a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f3a:	4b54      	ldr	r3, [pc, #336]	; (800408c <HAL_RCC_ClockConfig+0x1f0>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d115      	bne.n	8003f72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e09a      	b.n	8004080 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d107      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f52:	4b4e      	ldr	r3, [pc, #312]	; (800408c <HAL_RCC_ClockConfig+0x1f0>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d109      	bne.n	8003f72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e08e      	b.n	8004080 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f62:	4b4a      	ldr	r3, [pc, #296]	; (800408c <HAL_RCC_ClockConfig+0x1f0>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e086      	b.n	8004080 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f72:	4b46      	ldr	r3, [pc, #280]	; (800408c <HAL_RCC_ClockConfig+0x1f0>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f023 0203 	bic.w	r2, r3, #3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	4943      	ldr	r1, [pc, #268]	; (800408c <HAL_RCC_ClockConfig+0x1f0>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f84:	f7fc fff2 	bl	8000f6c <HAL_GetTick>
 8003f88:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f8a:	e00a      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f8c:	f7fc ffee 	bl	8000f6c <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e06e      	b.n	8004080 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fa2:	4b3a      	ldr	r3, [pc, #232]	; (800408c <HAL_RCC_ClockConfig+0x1f0>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f003 020c 	and.w	r2, r3, #12
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d1eb      	bne.n	8003f8c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d010      	beq.n	8003fe2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	4b31      	ldr	r3, [pc, #196]	; (800408c <HAL_RCC_ClockConfig+0x1f0>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d208      	bcs.n	8003fe2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fd0:	4b2e      	ldr	r3, [pc, #184]	; (800408c <HAL_RCC_ClockConfig+0x1f0>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	492b      	ldr	r1, [pc, #172]	; (800408c <HAL_RCC_ClockConfig+0x1f0>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fe2:	4b29      	ldr	r3, [pc, #164]	; (8004088 <HAL_RCC_ClockConfig+0x1ec>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0307 	and.w	r3, r3, #7
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d210      	bcs.n	8004012 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ff0:	4b25      	ldr	r3, [pc, #148]	; (8004088 <HAL_RCC_ClockConfig+0x1ec>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f023 0207 	bic.w	r2, r3, #7
 8003ff8:	4923      	ldr	r1, [pc, #140]	; (8004088 <HAL_RCC_ClockConfig+0x1ec>)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004000:	4b21      	ldr	r3, [pc, #132]	; (8004088 <HAL_RCC_ClockConfig+0x1ec>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0307 	and.w	r3, r3, #7
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	429a      	cmp	r2, r3
 800400c:	d001      	beq.n	8004012 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e036      	b.n	8004080 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0304 	and.w	r3, r3, #4
 800401a:	2b00      	cmp	r3, #0
 800401c:	d008      	beq.n	8004030 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800401e:	4b1b      	ldr	r3, [pc, #108]	; (800408c <HAL_RCC_ClockConfig+0x1f0>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	4918      	ldr	r1, [pc, #96]	; (800408c <HAL_RCC_ClockConfig+0x1f0>)
 800402c:	4313      	orrs	r3, r2
 800402e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0308 	and.w	r3, r3, #8
 8004038:	2b00      	cmp	r3, #0
 800403a:	d009      	beq.n	8004050 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800403c:	4b13      	ldr	r3, [pc, #76]	; (800408c <HAL_RCC_ClockConfig+0x1f0>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	4910      	ldr	r1, [pc, #64]	; (800408c <HAL_RCC_ClockConfig+0x1f0>)
 800404c:	4313      	orrs	r3, r2
 800404e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004050:	f000 f824 	bl	800409c <HAL_RCC_GetSysClockFreq>
 8004054:	4602      	mov	r2, r0
 8004056:	4b0d      	ldr	r3, [pc, #52]	; (800408c <HAL_RCC_ClockConfig+0x1f0>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	091b      	lsrs	r3, r3, #4
 800405c:	f003 030f 	and.w	r3, r3, #15
 8004060:	490b      	ldr	r1, [pc, #44]	; (8004090 <HAL_RCC_ClockConfig+0x1f4>)
 8004062:	5ccb      	ldrb	r3, [r1, r3]
 8004064:	f003 031f 	and.w	r3, r3, #31
 8004068:	fa22 f303 	lsr.w	r3, r2, r3
 800406c:	4a09      	ldr	r2, [pc, #36]	; (8004094 <HAL_RCC_ClockConfig+0x1f8>)
 800406e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004070:	4b09      	ldr	r3, [pc, #36]	; (8004098 <HAL_RCC_ClockConfig+0x1fc>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4618      	mov	r0, r3
 8004076:	f7fc ff29 	bl	8000ecc <HAL_InitTick>
 800407a:	4603      	mov	r3, r0
 800407c:	72fb      	strb	r3, [r7, #11]

  return status;
 800407e:	7afb      	ldrb	r3, [r7, #11]
}
 8004080:	4618      	mov	r0, r3
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	40022000 	.word	0x40022000
 800408c:	40021000 	.word	0x40021000
 8004090:	0800cf2c 	.word	0x0800cf2c
 8004094:	20000000 	.word	0x20000000
 8004098:	20000004 	.word	0x20000004

0800409c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800409c:	b480      	push	{r7}
 800409e:	b089      	sub	sp, #36	; 0x24
 80040a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80040a2:	2300      	movs	r3, #0
 80040a4:	61fb      	str	r3, [r7, #28]
 80040a6:	2300      	movs	r3, #0
 80040a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040aa:	4b3e      	ldr	r3, [pc, #248]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 030c 	and.w	r3, r3, #12
 80040b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040b4:	4b3b      	ldr	r3, [pc, #236]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	f003 0303 	and.w	r3, r3, #3
 80040bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d005      	beq.n	80040d0 <HAL_RCC_GetSysClockFreq+0x34>
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	2b0c      	cmp	r3, #12
 80040c8:	d121      	bne.n	800410e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d11e      	bne.n	800410e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80040d0:	4b34      	ldr	r3, [pc, #208]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0308 	and.w	r3, r3, #8
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d107      	bne.n	80040ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80040dc:	4b31      	ldr	r3, [pc, #196]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80040de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040e2:	0a1b      	lsrs	r3, r3, #8
 80040e4:	f003 030f 	and.w	r3, r3, #15
 80040e8:	61fb      	str	r3, [r7, #28]
 80040ea:	e005      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80040ec:	4b2d      	ldr	r3, [pc, #180]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	091b      	lsrs	r3, r3, #4
 80040f2:	f003 030f 	and.w	r3, r3, #15
 80040f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80040f8:	4a2b      	ldr	r2, [pc, #172]	; (80041a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004100:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10d      	bne.n	8004124 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800410c:	e00a      	b.n	8004124 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	2b04      	cmp	r3, #4
 8004112:	d102      	bne.n	800411a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004114:	4b25      	ldr	r3, [pc, #148]	; (80041ac <HAL_RCC_GetSysClockFreq+0x110>)
 8004116:	61bb      	str	r3, [r7, #24]
 8004118:	e004      	b.n	8004124 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	2b08      	cmp	r3, #8
 800411e:	d101      	bne.n	8004124 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004120:	4b23      	ldr	r3, [pc, #140]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004122:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	2b0c      	cmp	r3, #12
 8004128:	d134      	bne.n	8004194 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800412a:	4b1e      	ldr	r3, [pc, #120]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f003 0303 	and.w	r3, r3, #3
 8004132:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	2b02      	cmp	r3, #2
 8004138:	d003      	beq.n	8004142 <HAL_RCC_GetSysClockFreq+0xa6>
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	2b03      	cmp	r3, #3
 800413e:	d003      	beq.n	8004148 <HAL_RCC_GetSysClockFreq+0xac>
 8004140:	e005      	b.n	800414e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004142:	4b1a      	ldr	r3, [pc, #104]	; (80041ac <HAL_RCC_GetSysClockFreq+0x110>)
 8004144:	617b      	str	r3, [r7, #20]
      break;
 8004146:	e005      	b.n	8004154 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004148:	4b19      	ldr	r3, [pc, #100]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800414a:	617b      	str	r3, [r7, #20]
      break;
 800414c:	e002      	b.n	8004154 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	617b      	str	r3, [r7, #20]
      break;
 8004152:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004154:	4b13      	ldr	r3, [pc, #76]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	091b      	lsrs	r3, r3, #4
 800415a:	f003 0307 	and.w	r3, r3, #7
 800415e:	3301      	adds	r3, #1
 8004160:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004162:	4b10      	ldr	r3, [pc, #64]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	0a1b      	lsrs	r3, r3, #8
 8004168:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	fb03 f202 	mul.w	r2, r3, r2
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	fbb2 f3f3 	udiv	r3, r2, r3
 8004178:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800417a:	4b0a      	ldr	r3, [pc, #40]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	0e5b      	lsrs	r3, r3, #25
 8004180:	f003 0303 	and.w	r3, r3, #3
 8004184:	3301      	adds	r3, #1
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004192:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004194:	69bb      	ldr	r3, [r7, #24]
}
 8004196:	4618      	mov	r0, r3
 8004198:	3724      	adds	r7, #36	; 0x24
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	40021000 	.word	0x40021000
 80041a8:	0800cf44 	.word	0x0800cf44
 80041ac:	00f42400 	.word	0x00f42400
 80041b0:	007a1200 	.word	0x007a1200

080041b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041b8:	4b03      	ldr	r3, [pc, #12]	; (80041c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80041ba:	681b      	ldr	r3, [r3, #0]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	20000000 	.word	0x20000000

080041cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80041d0:	f7ff fff0 	bl	80041b4 <HAL_RCC_GetHCLKFreq>
 80041d4:	4602      	mov	r2, r0
 80041d6:	4b06      	ldr	r3, [pc, #24]	; (80041f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	0a1b      	lsrs	r3, r3, #8
 80041dc:	f003 0307 	and.w	r3, r3, #7
 80041e0:	4904      	ldr	r1, [pc, #16]	; (80041f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80041e2:	5ccb      	ldrb	r3, [r1, r3]
 80041e4:	f003 031f 	and.w	r3, r3, #31
 80041e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	40021000 	.word	0x40021000
 80041f4:	0800cf3c 	.word	0x0800cf3c

080041f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80041fc:	f7ff ffda 	bl	80041b4 <HAL_RCC_GetHCLKFreq>
 8004200:	4602      	mov	r2, r0
 8004202:	4b06      	ldr	r3, [pc, #24]	; (800421c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	0adb      	lsrs	r3, r3, #11
 8004208:	f003 0307 	and.w	r3, r3, #7
 800420c:	4904      	ldr	r1, [pc, #16]	; (8004220 <HAL_RCC_GetPCLK2Freq+0x28>)
 800420e:	5ccb      	ldrb	r3, [r1, r3]
 8004210:	f003 031f 	and.w	r3, r3, #31
 8004214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004218:	4618      	mov	r0, r3
 800421a:	bd80      	pop	{r7, pc}
 800421c:	40021000 	.word	0x40021000
 8004220:	0800cf3c 	.word	0x0800cf3c

08004224 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800422c:	2300      	movs	r3, #0
 800422e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004230:	4b2a      	ldr	r3, [pc, #168]	; (80042dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d003      	beq.n	8004244 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800423c:	f7ff f9a6 	bl	800358c <HAL_PWREx_GetVoltageRange>
 8004240:	6178      	str	r0, [r7, #20]
 8004242:	e014      	b.n	800426e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004244:	4b25      	ldr	r3, [pc, #148]	; (80042dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004248:	4a24      	ldr	r2, [pc, #144]	; (80042dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800424a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800424e:	6593      	str	r3, [r2, #88]	; 0x58
 8004250:	4b22      	ldr	r3, [pc, #136]	; (80042dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004258:	60fb      	str	r3, [r7, #12]
 800425a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800425c:	f7ff f996 	bl	800358c <HAL_PWREx_GetVoltageRange>
 8004260:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004262:	4b1e      	ldr	r3, [pc, #120]	; (80042dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004266:	4a1d      	ldr	r2, [pc, #116]	; (80042dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004268:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800426c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004274:	d10b      	bne.n	800428e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b80      	cmp	r3, #128	; 0x80
 800427a:	d919      	bls.n	80042b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2ba0      	cmp	r3, #160	; 0xa0
 8004280:	d902      	bls.n	8004288 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004282:	2302      	movs	r3, #2
 8004284:	613b      	str	r3, [r7, #16]
 8004286:	e013      	b.n	80042b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004288:	2301      	movs	r3, #1
 800428a:	613b      	str	r3, [r7, #16]
 800428c:	e010      	b.n	80042b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b80      	cmp	r3, #128	; 0x80
 8004292:	d902      	bls.n	800429a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004294:	2303      	movs	r3, #3
 8004296:	613b      	str	r3, [r7, #16]
 8004298:	e00a      	b.n	80042b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b80      	cmp	r3, #128	; 0x80
 800429e:	d102      	bne.n	80042a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042a0:	2302      	movs	r3, #2
 80042a2:	613b      	str	r3, [r7, #16]
 80042a4:	e004      	b.n	80042b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b70      	cmp	r3, #112	; 0x70
 80042aa:	d101      	bne.n	80042b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042ac:	2301      	movs	r3, #1
 80042ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80042b0:	4b0b      	ldr	r3, [pc, #44]	; (80042e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f023 0207 	bic.w	r2, r3, #7
 80042b8:	4909      	ldr	r1, [pc, #36]	; (80042e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	4313      	orrs	r3, r2
 80042be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80042c0:	4b07      	ldr	r3, [pc, #28]	; (80042e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0307 	and.w	r3, r3, #7
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d001      	beq.n	80042d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e000      	b.n	80042d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3718      	adds	r7, #24
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	40021000 	.word	0x40021000
 80042e0:	40022000 	.word	0x40022000

080042e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042ec:	2300      	movs	r3, #0
 80042ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042f0:	2300      	movs	r3, #0
 80042f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d031      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004304:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004308:	d01a      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800430a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800430e:	d814      	bhi.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004310:	2b00      	cmp	r3, #0
 8004312:	d009      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004314:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004318:	d10f      	bne.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800431a:	4b5d      	ldr	r3, [pc, #372]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	4a5c      	ldr	r2, [pc, #368]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004324:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004326:	e00c      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	3304      	adds	r3, #4
 800432c:	2100      	movs	r1, #0
 800432e:	4618      	mov	r0, r3
 8004330:	f000 f9de 	bl	80046f0 <RCCEx_PLLSAI1_Config>
 8004334:	4603      	mov	r3, r0
 8004336:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004338:	e003      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	74fb      	strb	r3, [r7, #19]
      break;
 800433e:	e000      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004340:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004342:	7cfb      	ldrb	r3, [r7, #19]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10b      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004348:	4b51      	ldr	r3, [pc, #324]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800434a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004356:	494e      	ldr	r1, [pc, #312]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004358:	4313      	orrs	r3, r2
 800435a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800435e:	e001      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004360:	7cfb      	ldrb	r3, [r7, #19]
 8004362:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 809e 	beq.w	80044ae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004372:	2300      	movs	r3, #0
 8004374:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004376:	4b46      	ldr	r3, [pc, #280]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004382:	2301      	movs	r3, #1
 8004384:	e000      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004386:	2300      	movs	r3, #0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00d      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800438c:	4b40      	ldr	r3, [pc, #256]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800438e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004390:	4a3f      	ldr	r2, [pc, #252]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004396:	6593      	str	r3, [r2, #88]	; 0x58
 8004398:	4b3d      	ldr	r3, [pc, #244]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800439a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800439c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a0:	60bb      	str	r3, [r7, #8]
 80043a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043a4:	2301      	movs	r3, #1
 80043a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043a8:	4b3a      	ldr	r3, [pc, #232]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a39      	ldr	r2, [pc, #228]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80043ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043b4:	f7fc fdda 	bl	8000f6c <HAL_GetTick>
 80043b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043ba:	e009      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043bc:	f7fc fdd6 	bl	8000f6c <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d902      	bls.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	74fb      	strb	r3, [r7, #19]
        break;
 80043ce:	e005      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043d0:	4b30      	ldr	r3, [pc, #192]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0ef      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80043dc:	7cfb      	ldrb	r3, [r7, #19]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d15a      	bne.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043e2:	4b2b      	ldr	r3, [pc, #172]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d01e      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d019      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043fe:	4b24      	ldr	r3, [pc, #144]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004408:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800440a:	4b21      	ldr	r3, [pc, #132]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800440c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004410:	4a1f      	ldr	r2, [pc, #124]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004416:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800441a:	4b1d      	ldr	r3, [pc, #116]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800441c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004420:	4a1b      	ldr	r2, [pc, #108]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004426:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800442a:	4a19      	ldr	r2, [pc, #100]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b00      	cmp	r3, #0
 800443a:	d016      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443c:	f7fc fd96 	bl	8000f6c <HAL_GetTick>
 8004440:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004442:	e00b      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004444:	f7fc fd92 	bl	8000f6c <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004452:	4293      	cmp	r3, r2
 8004454:	d902      	bls.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	74fb      	strb	r3, [r7, #19]
            break;
 800445a:	e006      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800445c:	4b0c      	ldr	r3, [pc, #48]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800445e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d0ec      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800446a:	7cfb      	ldrb	r3, [r7, #19]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10b      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004470:	4b07      	ldr	r3, [pc, #28]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004476:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800447e:	4904      	ldr	r1, [pc, #16]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004480:	4313      	orrs	r3, r2
 8004482:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004486:	e009      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004488:	7cfb      	ldrb	r3, [r7, #19]
 800448a:	74bb      	strb	r3, [r7, #18]
 800448c:	e006      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800448e:	bf00      	nop
 8004490:	40021000 	.word	0x40021000
 8004494:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004498:	7cfb      	ldrb	r3, [r7, #19]
 800449a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800449c:	7c7b      	ldrb	r3, [r7, #17]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d105      	bne.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044a2:	4b8a      	ldr	r3, [pc, #552]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a6:	4a89      	ldr	r2, [pc, #548]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00a      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044ba:	4b84      	ldr	r3, [pc, #528]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c0:	f023 0203 	bic.w	r2, r3, #3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	4980      	ldr	r1, [pc, #512]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00a      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044dc:	4b7b      	ldr	r3, [pc, #492]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e2:	f023 020c 	bic.w	r2, r3, #12
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	4978      	ldr	r1, [pc, #480]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0320 	and.w	r3, r3, #32
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00a      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044fe:	4b73      	ldr	r3, [pc, #460]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004504:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450c:	496f      	ldr	r1, [pc, #444]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800450e:	4313      	orrs	r3, r2
 8004510:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00a      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004520:	4b6a      	ldr	r3, [pc, #424]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004526:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800452e:	4967      	ldr	r1, [pc, #412]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004530:	4313      	orrs	r3, r2
 8004532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00a      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004542:	4b62      	ldr	r3, [pc, #392]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004548:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004550:	495e      	ldr	r1, [pc, #376]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004552:	4313      	orrs	r3, r2
 8004554:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00a      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004564:	4b59      	ldr	r3, [pc, #356]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004572:	4956      	ldr	r1, [pc, #344]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004574:	4313      	orrs	r3, r2
 8004576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00a      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004586:	4b51      	ldr	r3, [pc, #324]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004594:	494d      	ldr	r1, [pc, #308]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004596:	4313      	orrs	r3, r2
 8004598:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d028      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045a8:	4b48      	ldr	r3, [pc, #288]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	4945      	ldr	r1, [pc, #276]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045c6:	d106      	bne.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045c8:	4b40      	ldr	r3, [pc, #256]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	4a3f      	ldr	r2, [pc, #252]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045d2:	60d3      	str	r3, [r2, #12]
 80045d4:	e011      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045de:	d10c      	bne.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	3304      	adds	r3, #4
 80045e4:	2101      	movs	r1, #1
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 f882 	bl	80046f0 <RCCEx_PLLSAI1_Config>
 80045ec:	4603      	mov	r3, r0
 80045ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80045f0:	7cfb      	ldrb	r3, [r7, #19]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80045f6:	7cfb      	ldrb	r3, [r7, #19]
 80045f8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d028      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004606:	4b31      	ldr	r3, [pc, #196]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004614:	492d      	ldr	r1, [pc, #180]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004616:	4313      	orrs	r3, r2
 8004618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004620:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004624:	d106      	bne.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004626:	4b29      	ldr	r3, [pc, #164]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	4a28      	ldr	r2, [pc, #160]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800462c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004630:	60d3      	str	r3, [r2, #12]
 8004632:	e011      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004638:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800463c:	d10c      	bne.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	3304      	adds	r3, #4
 8004642:	2101      	movs	r1, #1
 8004644:	4618      	mov	r0, r3
 8004646:	f000 f853 	bl	80046f0 <RCCEx_PLLSAI1_Config>
 800464a:	4603      	mov	r3, r0
 800464c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800464e:	7cfb      	ldrb	r3, [r7, #19]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004654:	7cfb      	ldrb	r3, [r7, #19]
 8004656:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d01c      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004664:	4b19      	ldr	r3, [pc, #100]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800466a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004672:	4916      	ldr	r1, [pc, #88]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004674:	4313      	orrs	r3, r2
 8004676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800467e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004682:	d10c      	bne.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	3304      	adds	r3, #4
 8004688:	2102      	movs	r1, #2
 800468a:	4618      	mov	r0, r3
 800468c:	f000 f830 	bl	80046f0 <RCCEx_PLLSAI1_Config>
 8004690:	4603      	mov	r3, r0
 8004692:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004694:	7cfb      	ldrb	r3, [r7, #19]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800469a:	7cfb      	ldrb	r3, [r7, #19]
 800469c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00a      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046aa:	4b08      	ldr	r3, [pc, #32]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b8:	4904      	ldr	r1, [pc, #16]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80046c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3718      	adds	r7, #24
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	40021000 	.word	0x40021000

080046d0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80046d4:	4b05      	ldr	r3, [pc, #20]	; (80046ec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a04      	ldr	r2, [pc, #16]	; (80046ec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80046da:	f043 0304 	orr.w	r3, r3, #4
 80046de:	6013      	str	r3, [r2, #0]
}
 80046e0:	bf00      	nop
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	40021000 	.word	0x40021000

080046f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046fa:	2300      	movs	r3, #0
 80046fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046fe:	4b74      	ldr	r3, [pc, #464]	; (80048d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f003 0303 	and.w	r3, r3, #3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d018      	beq.n	800473c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800470a:	4b71      	ldr	r3, [pc, #452]	; (80048d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	f003 0203 	and.w	r2, r3, #3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	429a      	cmp	r2, r3
 8004718:	d10d      	bne.n	8004736 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
       ||
 800471e:	2b00      	cmp	r3, #0
 8004720:	d009      	beq.n	8004736 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004722:	4b6b      	ldr	r3, [pc, #428]	; (80048d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	091b      	lsrs	r3, r3, #4
 8004728:	f003 0307 	and.w	r3, r3, #7
 800472c:	1c5a      	adds	r2, r3, #1
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
       ||
 8004732:	429a      	cmp	r2, r3
 8004734:	d047      	beq.n	80047c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	73fb      	strb	r3, [r7, #15]
 800473a:	e044      	b.n	80047c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2b03      	cmp	r3, #3
 8004742:	d018      	beq.n	8004776 <RCCEx_PLLSAI1_Config+0x86>
 8004744:	2b03      	cmp	r3, #3
 8004746:	d825      	bhi.n	8004794 <RCCEx_PLLSAI1_Config+0xa4>
 8004748:	2b01      	cmp	r3, #1
 800474a:	d002      	beq.n	8004752 <RCCEx_PLLSAI1_Config+0x62>
 800474c:	2b02      	cmp	r3, #2
 800474e:	d009      	beq.n	8004764 <RCCEx_PLLSAI1_Config+0x74>
 8004750:	e020      	b.n	8004794 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004752:	4b5f      	ldr	r3, [pc, #380]	; (80048d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d11d      	bne.n	800479a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004762:	e01a      	b.n	800479a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004764:	4b5a      	ldr	r3, [pc, #360]	; (80048d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800476c:	2b00      	cmp	r3, #0
 800476e:	d116      	bne.n	800479e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004774:	e013      	b.n	800479e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004776:	4b56      	ldr	r3, [pc, #344]	; (80048d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10f      	bne.n	80047a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004782:	4b53      	ldr	r3, [pc, #332]	; (80048d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d109      	bne.n	80047a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004792:	e006      	b.n	80047a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	73fb      	strb	r3, [r7, #15]
      break;
 8004798:	e004      	b.n	80047a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800479a:	bf00      	nop
 800479c:	e002      	b.n	80047a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800479e:	bf00      	nop
 80047a0:	e000      	b.n	80047a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80047a4:	7bfb      	ldrb	r3, [r7, #15]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10d      	bne.n	80047c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80047aa:	4b49      	ldr	r3, [pc, #292]	; (80048d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6819      	ldr	r1, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	3b01      	subs	r3, #1
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	430b      	orrs	r3, r1
 80047c0:	4943      	ldr	r1, [pc, #268]	; (80048d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80047c6:	7bfb      	ldrb	r3, [r7, #15]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d17c      	bne.n	80048c6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80047cc:	4b40      	ldr	r3, [pc, #256]	; (80048d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a3f      	ldr	r2, [pc, #252]	; (80048d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047d8:	f7fc fbc8 	bl	8000f6c <HAL_GetTick>
 80047dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047de:	e009      	b.n	80047f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047e0:	f7fc fbc4 	bl	8000f6c <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d902      	bls.n	80047f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	73fb      	strb	r3, [r7, #15]
        break;
 80047f2:	e005      	b.n	8004800 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047f4:	4b36      	ldr	r3, [pc, #216]	; (80048d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1ef      	bne.n	80047e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004800:	7bfb      	ldrb	r3, [r7, #15]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d15f      	bne.n	80048c6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d110      	bne.n	800482e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800480c:	4b30      	ldr	r3, [pc, #192]	; (80048d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004814:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6892      	ldr	r2, [r2, #8]
 800481c:	0211      	lsls	r1, r2, #8
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	68d2      	ldr	r2, [r2, #12]
 8004822:	06d2      	lsls	r2, r2, #27
 8004824:	430a      	orrs	r2, r1
 8004826:	492a      	ldr	r1, [pc, #168]	; (80048d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004828:	4313      	orrs	r3, r2
 800482a:	610b      	str	r3, [r1, #16]
 800482c:	e027      	b.n	800487e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d112      	bne.n	800485a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004834:	4b26      	ldr	r3, [pc, #152]	; (80048d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800483c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6892      	ldr	r2, [r2, #8]
 8004844:	0211      	lsls	r1, r2, #8
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	6912      	ldr	r2, [r2, #16]
 800484a:	0852      	lsrs	r2, r2, #1
 800484c:	3a01      	subs	r2, #1
 800484e:	0552      	lsls	r2, r2, #21
 8004850:	430a      	orrs	r2, r1
 8004852:	491f      	ldr	r1, [pc, #124]	; (80048d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004854:	4313      	orrs	r3, r2
 8004856:	610b      	str	r3, [r1, #16]
 8004858:	e011      	b.n	800487e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800485a:	4b1d      	ldr	r3, [pc, #116]	; (80048d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004862:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	6892      	ldr	r2, [r2, #8]
 800486a:	0211      	lsls	r1, r2, #8
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	6952      	ldr	r2, [r2, #20]
 8004870:	0852      	lsrs	r2, r2, #1
 8004872:	3a01      	subs	r2, #1
 8004874:	0652      	lsls	r2, r2, #25
 8004876:	430a      	orrs	r2, r1
 8004878:	4915      	ldr	r1, [pc, #84]	; (80048d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800487a:	4313      	orrs	r3, r2
 800487c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800487e:	4b14      	ldr	r3, [pc, #80]	; (80048d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a13      	ldr	r2, [pc, #76]	; (80048d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004884:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004888:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800488a:	f7fc fb6f 	bl	8000f6c <HAL_GetTick>
 800488e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004890:	e009      	b.n	80048a6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004892:	f7fc fb6b 	bl	8000f6c <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b02      	cmp	r3, #2
 800489e:	d902      	bls.n	80048a6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	73fb      	strb	r3, [r7, #15]
          break;
 80048a4:	e005      	b.n	80048b2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048a6:	4b0a      	ldr	r3, [pc, #40]	; (80048d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0ef      	beq.n	8004892 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80048b2:	7bfb      	ldrb	r3, [r7, #15]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d106      	bne.n	80048c6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80048b8:	4b05      	ldr	r3, [pc, #20]	; (80048d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048ba:	691a      	ldr	r2, [r3, #16]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	4903      	ldr	r1, [pc, #12]	; (80048d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80048c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	40021000 	.word	0x40021000

080048d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e095      	b.n	8004a12 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d108      	bne.n	8004900 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048f6:	d009      	beq.n	800490c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	61da      	str	r2, [r3, #28]
 80048fe:	e005      	b.n	800490c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d106      	bne.n	800492c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7fc f8cc 	bl	8000ac4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2202      	movs	r2, #2
 8004930:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004942:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800494c:	d902      	bls.n	8004954 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800494e:	2300      	movs	r3, #0
 8004950:	60fb      	str	r3, [r7, #12]
 8004952:	e002      	b.n	800495a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004958:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004962:	d007      	beq.n	8004974 <HAL_SPI_Init+0xa0>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800496c:	d002      	beq.n	8004974 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004984:	431a      	orrs	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	431a      	orrs	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	695b      	ldr	r3, [r3, #20]
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	431a      	orrs	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049a2:	431a      	orrs	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	69db      	ldr	r3, [r3, #28]
 80049a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049ac:	431a      	orrs	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b6:	ea42 0103 	orr.w	r1, r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049be:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	0c1b      	lsrs	r3, r3, #16
 80049d0:	f003 0204 	and.w	r2, r3, #4
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	f003 0310 	and.w	r3, r3, #16
 80049dc:	431a      	orrs	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e2:	f003 0308 	and.w	r3, r3, #8
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80049f0:	ea42 0103 	orr.w	r1, r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b082      	sub	sp, #8
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e049      	b.n	8004ac0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d106      	bne.n	8004a46 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f7fc f943 	bl	8000ccc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2202      	movs	r2, #2
 8004a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	3304      	adds	r3, #4
 8004a56:	4619      	mov	r1, r3
 8004a58:	4610      	mov	r0, r2
 8004a5a:	f000 fa7d 	bl	8004f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3708      	adds	r7, #8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d001      	beq.n	8004ae0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e03b      	b.n	8004b58 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68da      	ldr	r2, [r3, #12]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0201 	orr.w	r2, r2, #1
 8004af6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a19      	ldr	r2, [pc, #100]	; (8004b64 <HAL_TIM_Base_Start_IT+0x9c>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d009      	beq.n	8004b16 <HAL_TIM_Base_Start_IT+0x4e>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b0a:	d004      	beq.n	8004b16 <HAL_TIM_Base_Start_IT+0x4e>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a15      	ldr	r2, [pc, #84]	; (8004b68 <HAL_TIM_Base_Start_IT+0xa0>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d115      	bne.n	8004b42 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	4b13      	ldr	r3, [pc, #76]	; (8004b6c <HAL_TIM_Base_Start_IT+0xa4>)
 8004b1e:	4013      	ands	r3, r2
 8004b20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2b06      	cmp	r3, #6
 8004b26:	d015      	beq.n	8004b54 <HAL_TIM_Base_Start_IT+0x8c>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b2e:	d011      	beq.n	8004b54 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f042 0201 	orr.w	r2, r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b40:	e008      	b.n	8004b54 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f042 0201 	orr.w	r2, r2, #1
 8004b50:	601a      	str	r2, [r3, #0]
 8004b52:	e000      	b.n	8004b56 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b54:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	40012c00 	.word	0x40012c00
 8004b68:	40014000 	.word	0x40014000
 8004b6c:	00010007 	.word	0x00010007

08004b70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d020      	beq.n	8004bd4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d01b      	beq.n	8004bd4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f06f 0202 	mvn.w	r2, #2
 8004ba4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	f003 0303 	and.w	r3, r3, #3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f9ad 	bl	8004f1a <HAL_TIM_IC_CaptureCallback>
 8004bc0:	e005      	b.n	8004bce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f99f 	bl	8004f06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 f9b0 	bl	8004f2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	f003 0304 	and.w	r3, r3, #4
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d020      	beq.n	8004c20 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d01b      	beq.n	8004c20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f06f 0204 	mvn.w	r2, #4
 8004bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2202      	movs	r2, #2
 8004bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f987 	bl	8004f1a <HAL_TIM_IC_CaptureCallback>
 8004c0c:	e005      	b.n	8004c1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f979 	bl	8004f06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 f98a 	bl	8004f2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	f003 0308 	and.w	r3, r3, #8
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d020      	beq.n	8004c6c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f003 0308 	and.w	r3, r3, #8
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d01b      	beq.n	8004c6c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f06f 0208 	mvn.w	r2, #8
 8004c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2204      	movs	r2, #4
 8004c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f961 	bl	8004f1a <HAL_TIM_IC_CaptureCallback>
 8004c58:	e005      	b.n	8004c66 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f953 	bl	8004f06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 f964 	bl	8004f2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	f003 0310 	and.w	r3, r3, #16
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d020      	beq.n	8004cb8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f003 0310 	and.w	r3, r3, #16
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d01b      	beq.n	8004cb8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f06f 0210 	mvn.w	r2, #16
 8004c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2208      	movs	r2, #8
 8004c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f93b 	bl	8004f1a <HAL_TIM_IC_CaptureCallback>
 8004ca4:	e005      	b.n	8004cb2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f92d 	bl	8004f06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 f93e 	bl	8004f2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00c      	beq.n	8004cdc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d007      	beq.n	8004cdc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f06f 0201 	mvn.w	r2, #1
 8004cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f7fb fe64 	bl	80009a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00c      	beq.n	8004d00 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d007      	beq.n	8004d00 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 fa9a 	bl	8005234 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00c      	beq.n	8004d24 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d007      	beq.n	8004d24 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 fa92 	bl	8005248 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00c      	beq.n	8004d48 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d007      	beq.n	8004d48 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f8fd 	bl	8004f42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f003 0320 	and.w	r3, r3, #32
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00c      	beq.n	8004d6c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f003 0320 	and.w	r3, r3, #32
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d007      	beq.n	8004d6c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f06f 0220 	mvn.w	r2, #32
 8004d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 fa5a 	bl	8005220 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d6c:	bf00      	nop
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d101      	bne.n	8004d90 <HAL_TIM_ConfigClockSource+0x1c>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	e0b6      	b.n	8004efe <HAL_TIM_ConfigClockSource+0x18a>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004db2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dcc:	d03e      	beq.n	8004e4c <HAL_TIM_ConfigClockSource+0xd8>
 8004dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dd2:	f200 8087 	bhi.w	8004ee4 <HAL_TIM_ConfigClockSource+0x170>
 8004dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dda:	f000 8086 	beq.w	8004eea <HAL_TIM_ConfigClockSource+0x176>
 8004dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de2:	d87f      	bhi.n	8004ee4 <HAL_TIM_ConfigClockSource+0x170>
 8004de4:	2b70      	cmp	r3, #112	; 0x70
 8004de6:	d01a      	beq.n	8004e1e <HAL_TIM_ConfigClockSource+0xaa>
 8004de8:	2b70      	cmp	r3, #112	; 0x70
 8004dea:	d87b      	bhi.n	8004ee4 <HAL_TIM_ConfigClockSource+0x170>
 8004dec:	2b60      	cmp	r3, #96	; 0x60
 8004dee:	d050      	beq.n	8004e92 <HAL_TIM_ConfigClockSource+0x11e>
 8004df0:	2b60      	cmp	r3, #96	; 0x60
 8004df2:	d877      	bhi.n	8004ee4 <HAL_TIM_ConfigClockSource+0x170>
 8004df4:	2b50      	cmp	r3, #80	; 0x50
 8004df6:	d03c      	beq.n	8004e72 <HAL_TIM_ConfigClockSource+0xfe>
 8004df8:	2b50      	cmp	r3, #80	; 0x50
 8004dfa:	d873      	bhi.n	8004ee4 <HAL_TIM_ConfigClockSource+0x170>
 8004dfc:	2b40      	cmp	r3, #64	; 0x40
 8004dfe:	d058      	beq.n	8004eb2 <HAL_TIM_ConfigClockSource+0x13e>
 8004e00:	2b40      	cmp	r3, #64	; 0x40
 8004e02:	d86f      	bhi.n	8004ee4 <HAL_TIM_ConfigClockSource+0x170>
 8004e04:	2b30      	cmp	r3, #48	; 0x30
 8004e06:	d064      	beq.n	8004ed2 <HAL_TIM_ConfigClockSource+0x15e>
 8004e08:	2b30      	cmp	r3, #48	; 0x30
 8004e0a:	d86b      	bhi.n	8004ee4 <HAL_TIM_ConfigClockSource+0x170>
 8004e0c:	2b20      	cmp	r3, #32
 8004e0e:	d060      	beq.n	8004ed2 <HAL_TIM_ConfigClockSource+0x15e>
 8004e10:	2b20      	cmp	r3, #32
 8004e12:	d867      	bhi.n	8004ee4 <HAL_TIM_ConfigClockSource+0x170>
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d05c      	beq.n	8004ed2 <HAL_TIM_ConfigClockSource+0x15e>
 8004e18:	2b10      	cmp	r3, #16
 8004e1a:	d05a      	beq.n	8004ed2 <HAL_TIM_ConfigClockSource+0x15e>
 8004e1c:	e062      	b.n	8004ee4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e2e:	f000 f971 	bl	8005114 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	609a      	str	r2, [r3, #8]
      break;
 8004e4a:	e04f      	b.n	8004eec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e5c:	f000 f95a 	bl	8005114 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	689a      	ldr	r2, [r3, #8]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e6e:	609a      	str	r2, [r3, #8]
      break;
 8004e70:	e03c      	b.n	8004eec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e7e:	461a      	mov	r2, r3
 8004e80:	f000 f8ce 	bl	8005020 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2150      	movs	r1, #80	; 0x50
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 f927 	bl	80050de <TIM_ITRx_SetConfig>
      break;
 8004e90:	e02c      	b.n	8004eec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	f000 f8ed 	bl	800507e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2160      	movs	r1, #96	; 0x60
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 f917 	bl	80050de <TIM_ITRx_SetConfig>
      break;
 8004eb0:	e01c      	b.n	8004eec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	f000 f8ae 	bl	8005020 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2140      	movs	r1, #64	; 0x40
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 f907 	bl	80050de <TIM_ITRx_SetConfig>
      break;
 8004ed0:	e00c      	b.n	8004eec <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4619      	mov	r1, r3
 8004edc:	4610      	mov	r0, r2
 8004ede:	f000 f8fe 	bl	80050de <TIM_ITRx_SetConfig>
      break;
 8004ee2:	e003      	b.n	8004eec <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ee8:	e000      	b.n	8004eec <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004eea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b083      	sub	sp, #12
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f0e:	bf00      	nop
 8004f10:	370c      	adds	r7, #12
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b083      	sub	sp, #12
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f22:	bf00      	nop
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b083      	sub	sp, #12
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f36:	bf00      	nop
 8004f38:	370c      	adds	r7, #12
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f42:	b480      	push	{r7}
 8004f44:	b083      	sub	sp, #12
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f4a:	bf00      	nop
 8004f4c:	370c      	adds	r7, #12
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
	...

08004f58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a2a      	ldr	r2, [pc, #168]	; (8005014 <TIM_Base_SetConfig+0xbc>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d003      	beq.n	8004f78 <TIM_Base_SetConfig+0x20>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f76:	d108      	bne.n	8004f8a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a21      	ldr	r2, [pc, #132]	; (8005014 <TIM_Base_SetConfig+0xbc>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d00b      	beq.n	8004faa <TIM_Base_SetConfig+0x52>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f98:	d007      	beq.n	8004faa <TIM_Base_SetConfig+0x52>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a1e      	ldr	r2, [pc, #120]	; (8005018 <TIM_Base_SetConfig+0xc0>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d003      	beq.n	8004faa <TIM_Base_SetConfig+0x52>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a1d      	ldr	r2, [pc, #116]	; (800501c <TIM_Base_SetConfig+0xc4>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d108      	bne.n	8004fbc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	689a      	ldr	r2, [r3, #8]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a0c      	ldr	r2, [pc, #48]	; (8005014 <TIM_Base_SetConfig+0xbc>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d007      	beq.n	8004ff8 <TIM_Base_SetConfig+0xa0>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a0b      	ldr	r2, [pc, #44]	; (8005018 <TIM_Base_SetConfig+0xc0>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d003      	beq.n	8004ff8 <TIM_Base_SetConfig+0xa0>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a0a      	ldr	r2, [pc, #40]	; (800501c <TIM_Base_SetConfig+0xc4>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d103      	bne.n	8005000 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	691a      	ldr	r2, [r3, #16]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	615a      	str	r2, [r3, #20]
}
 8005006:	bf00      	nop
 8005008:	3714      	adds	r7, #20
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	40012c00 	.word	0x40012c00
 8005018:	40014000 	.word	0x40014000
 800501c:	40014400 	.word	0x40014400

08005020 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	f023 0201 	bic.w	r2, r3, #1
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800504a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	011b      	lsls	r3, r3, #4
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	4313      	orrs	r3, r2
 8005054:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f023 030a 	bic.w	r3, r3, #10
 800505c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	4313      	orrs	r3, r2
 8005064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	621a      	str	r2, [r3, #32]
}
 8005072:	bf00      	nop
 8005074:	371c      	adds	r7, #28
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800507e:	b480      	push	{r7}
 8005080:	b087      	sub	sp, #28
 8005082:	af00      	add	r7, sp, #0
 8005084:	60f8      	str	r0, [r7, #12]
 8005086:	60b9      	str	r1, [r7, #8]
 8005088:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6a1b      	ldr	r3, [r3, #32]
 8005094:	f023 0210 	bic.w	r2, r3, #16
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	031b      	lsls	r3, r3, #12
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	011b      	lsls	r3, r3, #4
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	621a      	str	r2, [r3, #32]
}
 80050d2:	bf00      	nop
 80050d4:	371c      	adds	r7, #28
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050de:	b480      	push	{r7}
 80050e0:	b085      	sub	sp, #20
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	f043 0307 	orr.w	r3, r3, #7
 8005100:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	609a      	str	r2, [r3, #8]
}
 8005108:	bf00      	nop
 800510a:	3714      	adds	r7, #20
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005114:	b480      	push	{r7}
 8005116:	b087      	sub	sp, #28
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
 8005120:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800512e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	021a      	lsls	r2, r3, #8
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	431a      	orrs	r2, r3
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	4313      	orrs	r3, r2
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	4313      	orrs	r3, r2
 8005140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	609a      	str	r2, [r3, #8]
}
 8005148:	bf00      	nop
 800514a:	371c      	adds	r7, #28
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005164:	2b01      	cmp	r3, #1
 8005166:	d101      	bne.n	800516c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005168:	2302      	movs	r3, #2
 800516a:	e04f      	b.n	800520c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2202      	movs	r2, #2
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a21      	ldr	r2, [pc, #132]	; (8005218 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d108      	bne.n	80051a8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800519c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a14      	ldr	r2, [pc, #80]	; (8005218 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d009      	beq.n	80051e0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d4:	d004      	beq.n	80051e0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a10      	ldr	r2, [pc, #64]	; (800521c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d10c      	bne.n	80051fa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3714      	adds	r7, #20
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr
 8005218:	40012c00 	.word	0x40012c00
 800521c:	40014000 	.word	0x40014000

08005220 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005228:	bf00      	nop
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e040      	b.n	80052f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005272:	2b00      	cmp	r3, #0
 8005274:	d106      	bne.n	8005284 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7fb fd78 	bl	8000d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2224      	movs	r2, #36	; 0x24
 8005288:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f022 0201 	bic.w	r2, r2, #1
 8005298:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d002      	beq.n	80052a8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 fa54 	bl	8005750 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 f825 	bl	80052f8 <UART_SetConfig>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d101      	bne.n	80052b8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e01b      	b.n	80052f0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689a      	ldr	r2, [r3, #8]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f042 0201 	orr.w	r2, r2, #1
 80052e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 fad3 	bl	8005894 <UART_CheckIdleState>
 80052ee:	4603      	mov	r3, r0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3708      	adds	r7, #8
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052fc:	b08a      	sub	sp, #40	; 0x28
 80052fe:	af00      	add	r7, sp, #0
 8005300:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005302:	2300      	movs	r3, #0
 8005304:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	689a      	ldr	r2, [r3, #8]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	431a      	orrs	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	431a      	orrs	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	69db      	ldr	r3, [r3, #28]
 800531c:	4313      	orrs	r3, r2
 800531e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	4bb4      	ldr	r3, [pc, #720]	; (80055f8 <UART_SetConfig+0x300>)
 8005328:	4013      	ands	r3, r2
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	6812      	ldr	r2, [r2, #0]
 800532e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005330:	430b      	orrs	r3, r1
 8005332:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	68da      	ldr	r2, [r3, #12]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4aa9      	ldr	r2, [pc, #676]	; (80055fc <UART_SetConfig+0x304>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d004      	beq.n	8005364 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005360:	4313      	orrs	r3, r2
 8005362:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005374:	430a      	orrs	r2, r1
 8005376:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4aa0      	ldr	r2, [pc, #640]	; (8005600 <UART_SetConfig+0x308>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d126      	bne.n	80053d0 <UART_SetConfig+0xd8>
 8005382:	4ba0      	ldr	r3, [pc, #640]	; (8005604 <UART_SetConfig+0x30c>)
 8005384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005388:	f003 0303 	and.w	r3, r3, #3
 800538c:	2b03      	cmp	r3, #3
 800538e:	d81b      	bhi.n	80053c8 <UART_SetConfig+0xd0>
 8005390:	a201      	add	r2, pc, #4	; (adr r2, 8005398 <UART_SetConfig+0xa0>)
 8005392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005396:	bf00      	nop
 8005398:	080053a9 	.word	0x080053a9
 800539c:	080053b9 	.word	0x080053b9
 80053a0:	080053b1 	.word	0x080053b1
 80053a4:	080053c1 	.word	0x080053c1
 80053a8:	2301      	movs	r3, #1
 80053aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ae:	e080      	b.n	80054b2 <UART_SetConfig+0x1ba>
 80053b0:	2302      	movs	r3, #2
 80053b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053b6:	e07c      	b.n	80054b2 <UART_SetConfig+0x1ba>
 80053b8:	2304      	movs	r3, #4
 80053ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053be:	e078      	b.n	80054b2 <UART_SetConfig+0x1ba>
 80053c0:	2308      	movs	r3, #8
 80053c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053c6:	e074      	b.n	80054b2 <UART_SetConfig+0x1ba>
 80053c8:	2310      	movs	r3, #16
 80053ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ce:	e070      	b.n	80054b2 <UART_SetConfig+0x1ba>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a8c      	ldr	r2, [pc, #560]	; (8005608 <UART_SetConfig+0x310>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d138      	bne.n	800544c <UART_SetConfig+0x154>
 80053da:	4b8a      	ldr	r3, [pc, #552]	; (8005604 <UART_SetConfig+0x30c>)
 80053dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e0:	f003 030c 	and.w	r3, r3, #12
 80053e4:	2b0c      	cmp	r3, #12
 80053e6:	d82d      	bhi.n	8005444 <UART_SetConfig+0x14c>
 80053e8:	a201      	add	r2, pc, #4	; (adr r2, 80053f0 <UART_SetConfig+0xf8>)
 80053ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ee:	bf00      	nop
 80053f0:	08005425 	.word	0x08005425
 80053f4:	08005445 	.word	0x08005445
 80053f8:	08005445 	.word	0x08005445
 80053fc:	08005445 	.word	0x08005445
 8005400:	08005435 	.word	0x08005435
 8005404:	08005445 	.word	0x08005445
 8005408:	08005445 	.word	0x08005445
 800540c:	08005445 	.word	0x08005445
 8005410:	0800542d 	.word	0x0800542d
 8005414:	08005445 	.word	0x08005445
 8005418:	08005445 	.word	0x08005445
 800541c:	08005445 	.word	0x08005445
 8005420:	0800543d 	.word	0x0800543d
 8005424:	2300      	movs	r3, #0
 8005426:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800542a:	e042      	b.n	80054b2 <UART_SetConfig+0x1ba>
 800542c:	2302      	movs	r3, #2
 800542e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005432:	e03e      	b.n	80054b2 <UART_SetConfig+0x1ba>
 8005434:	2304      	movs	r3, #4
 8005436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800543a:	e03a      	b.n	80054b2 <UART_SetConfig+0x1ba>
 800543c:	2308      	movs	r3, #8
 800543e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005442:	e036      	b.n	80054b2 <UART_SetConfig+0x1ba>
 8005444:	2310      	movs	r3, #16
 8005446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800544a:	e032      	b.n	80054b2 <UART_SetConfig+0x1ba>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a6a      	ldr	r2, [pc, #424]	; (80055fc <UART_SetConfig+0x304>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d12a      	bne.n	80054ac <UART_SetConfig+0x1b4>
 8005456:	4b6b      	ldr	r3, [pc, #428]	; (8005604 <UART_SetConfig+0x30c>)
 8005458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800545c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005460:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005464:	d01a      	beq.n	800549c <UART_SetConfig+0x1a4>
 8005466:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800546a:	d81b      	bhi.n	80054a4 <UART_SetConfig+0x1ac>
 800546c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005470:	d00c      	beq.n	800548c <UART_SetConfig+0x194>
 8005472:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005476:	d815      	bhi.n	80054a4 <UART_SetConfig+0x1ac>
 8005478:	2b00      	cmp	r3, #0
 800547a:	d003      	beq.n	8005484 <UART_SetConfig+0x18c>
 800547c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005480:	d008      	beq.n	8005494 <UART_SetConfig+0x19c>
 8005482:	e00f      	b.n	80054a4 <UART_SetConfig+0x1ac>
 8005484:	2300      	movs	r3, #0
 8005486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800548a:	e012      	b.n	80054b2 <UART_SetConfig+0x1ba>
 800548c:	2302      	movs	r3, #2
 800548e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005492:	e00e      	b.n	80054b2 <UART_SetConfig+0x1ba>
 8005494:	2304      	movs	r3, #4
 8005496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800549a:	e00a      	b.n	80054b2 <UART_SetConfig+0x1ba>
 800549c:	2308      	movs	r3, #8
 800549e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054a2:	e006      	b.n	80054b2 <UART_SetConfig+0x1ba>
 80054a4:	2310      	movs	r3, #16
 80054a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054aa:	e002      	b.n	80054b2 <UART_SetConfig+0x1ba>
 80054ac:	2310      	movs	r3, #16
 80054ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a51      	ldr	r2, [pc, #324]	; (80055fc <UART_SetConfig+0x304>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d17a      	bne.n	80055b2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054c0:	2b08      	cmp	r3, #8
 80054c2:	d824      	bhi.n	800550e <UART_SetConfig+0x216>
 80054c4:	a201      	add	r2, pc, #4	; (adr r2, 80054cc <UART_SetConfig+0x1d4>)
 80054c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ca:	bf00      	nop
 80054cc:	080054f1 	.word	0x080054f1
 80054d0:	0800550f 	.word	0x0800550f
 80054d4:	080054f9 	.word	0x080054f9
 80054d8:	0800550f 	.word	0x0800550f
 80054dc:	080054ff 	.word	0x080054ff
 80054e0:	0800550f 	.word	0x0800550f
 80054e4:	0800550f 	.word	0x0800550f
 80054e8:	0800550f 	.word	0x0800550f
 80054ec:	08005507 	.word	0x08005507
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054f0:	f7fe fe6c 	bl	80041cc <HAL_RCC_GetPCLK1Freq>
 80054f4:	61f8      	str	r0, [r7, #28]
        break;
 80054f6:	e010      	b.n	800551a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054f8:	4b44      	ldr	r3, [pc, #272]	; (800560c <UART_SetConfig+0x314>)
 80054fa:	61fb      	str	r3, [r7, #28]
        break;
 80054fc:	e00d      	b.n	800551a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054fe:	f7fe fdcd 	bl	800409c <HAL_RCC_GetSysClockFreq>
 8005502:	61f8      	str	r0, [r7, #28]
        break;
 8005504:	e009      	b.n	800551a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800550a:	61fb      	str	r3, [r7, #28]
        break;
 800550c:	e005      	b.n	800551a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800550e:	2300      	movs	r3, #0
 8005510:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005518:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	2b00      	cmp	r3, #0
 800551e:	f000 8107 	beq.w	8005730 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	4613      	mov	r3, r2
 8005528:	005b      	lsls	r3, r3, #1
 800552a:	4413      	add	r3, r2
 800552c:	69fa      	ldr	r2, [r7, #28]
 800552e:	429a      	cmp	r2, r3
 8005530:	d305      	bcc.n	800553e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005538:	69fa      	ldr	r2, [r7, #28]
 800553a:	429a      	cmp	r2, r3
 800553c:	d903      	bls.n	8005546 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005544:	e0f4      	b.n	8005730 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	2200      	movs	r2, #0
 800554a:	461c      	mov	r4, r3
 800554c:	4615      	mov	r5, r2
 800554e:	f04f 0200 	mov.w	r2, #0
 8005552:	f04f 0300 	mov.w	r3, #0
 8005556:	022b      	lsls	r3, r5, #8
 8005558:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800555c:	0222      	lsls	r2, r4, #8
 800555e:	68f9      	ldr	r1, [r7, #12]
 8005560:	6849      	ldr	r1, [r1, #4]
 8005562:	0849      	lsrs	r1, r1, #1
 8005564:	2000      	movs	r0, #0
 8005566:	4688      	mov	r8, r1
 8005568:	4681      	mov	r9, r0
 800556a:	eb12 0a08 	adds.w	sl, r2, r8
 800556e:	eb43 0b09 	adc.w	fp, r3, r9
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	603b      	str	r3, [r7, #0]
 800557a:	607a      	str	r2, [r7, #4]
 800557c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005580:	4650      	mov	r0, sl
 8005582:	4659      	mov	r1, fp
 8005584:	f7fa fe2a 	bl	80001dc <__aeabi_uldivmod>
 8005588:	4602      	mov	r2, r0
 800558a:	460b      	mov	r3, r1
 800558c:	4613      	mov	r3, r2
 800558e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005596:	d308      	bcc.n	80055aa <UART_SetConfig+0x2b2>
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800559e:	d204      	bcs.n	80055aa <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	60da      	str	r2, [r3, #12]
 80055a8:	e0c2      	b.n	8005730 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80055b0:	e0be      	b.n	8005730 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055ba:	d16a      	bne.n	8005692 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80055bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055c0:	2b08      	cmp	r3, #8
 80055c2:	d834      	bhi.n	800562e <UART_SetConfig+0x336>
 80055c4:	a201      	add	r2, pc, #4	; (adr r2, 80055cc <UART_SetConfig+0x2d4>)
 80055c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ca:	bf00      	nop
 80055cc:	080055f1 	.word	0x080055f1
 80055d0:	08005611 	.word	0x08005611
 80055d4:	08005619 	.word	0x08005619
 80055d8:	0800562f 	.word	0x0800562f
 80055dc:	0800561f 	.word	0x0800561f
 80055e0:	0800562f 	.word	0x0800562f
 80055e4:	0800562f 	.word	0x0800562f
 80055e8:	0800562f 	.word	0x0800562f
 80055ec:	08005627 	.word	0x08005627
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055f0:	f7fe fdec 	bl	80041cc <HAL_RCC_GetPCLK1Freq>
 80055f4:	61f8      	str	r0, [r7, #28]
        break;
 80055f6:	e020      	b.n	800563a <UART_SetConfig+0x342>
 80055f8:	efff69f3 	.word	0xefff69f3
 80055fc:	40008000 	.word	0x40008000
 8005600:	40013800 	.word	0x40013800
 8005604:	40021000 	.word	0x40021000
 8005608:	40004400 	.word	0x40004400
 800560c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005610:	f7fe fdf2 	bl	80041f8 <HAL_RCC_GetPCLK2Freq>
 8005614:	61f8      	str	r0, [r7, #28]
        break;
 8005616:	e010      	b.n	800563a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005618:	4b4c      	ldr	r3, [pc, #304]	; (800574c <UART_SetConfig+0x454>)
 800561a:	61fb      	str	r3, [r7, #28]
        break;
 800561c:	e00d      	b.n	800563a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800561e:	f7fe fd3d 	bl	800409c <HAL_RCC_GetSysClockFreq>
 8005622:	61f8      	str	r0, [r7, #28]
        break;
 8005624:	e009      	b.n	800563a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005626:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800562a:	61fb      	str	r3, [r7, #28]
        break;
 800562c:	e005      	b.n	800563a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800562e:	2300      	movs	r3, #0
 8005630:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005638:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d077      	beq.n	8005730 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	005a      	lsls	r2, r3, #1
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	085b      	lsrs	r3, r3, #1
 800564a:	441a      	add	r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	fbb2 f3f3 	udiv	r3, r2, r3
 8005654:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	2b0f      	cmp	r3, #15
 800565a:	d916      	bls.n	800568a <UART_SetConfig+0x392>
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005662:	d212      	bcs.n	800568a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	b29b      	uxth	r3, r3
 8005668:	f023 030f 	bic.w	r3, r3, #15
 800566c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	085b      	lsrs	r3, r3, #1
 8005672:	b29b      	uxth	r3, r3
 8005674:	f003 0307 	and.w	r3, r3, #7
 8005678:	b29a      	uxth	r2, r3
 800567a:	8afb      	ldrh	r3, [r7, #22]
 800567c:	4313      	orrs	r3, r2
 800567e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	8afa      	ldrh	r2, [r7, #22]
 8005686:	60da      	str	r2, [r3, #12]
 8005688:	e052      	b.n	8005730 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005690:	e04e      	b.n	8005730 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005692:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005696:	2b08      	cmp	r3, #8
 8005698:	d827      	bhi.n	80056ea <UART_SetConfig+0x3f2>
 800569a:	a201      	add	r2, pc, #4	; (adr r2, 80056a0 <UART_SetConfig+0x3a8>)
 800569c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a0:	080056c5 	.word	0x080056c5
 80056a4:	080056cd 	.word	0x080056cd
 80056a8:	080056d5 	.word	0x080056d5
 80056ac:	080056eb 	.word	0x080056eb
 80056b0:	080056db 	.word	0x080056db
 80056b4:	080056eb 	.word	0x080056eb
 80056b8:	080056eb 	.word	0x080056eb
 80056bc:	080056eb 	.word	0x080056eb
 80056c0:	080056e3 	.word	0x080056e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056c4:	f7fe fd82 	bl	80041cc <HAL_RCC_GetPCLK1Freq>
 80056c8:	61f8      	str	r0, [r7, #28]
        break;
 80056ca:	e014      	b.n	80056f6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056cc:	f7fe fd94 	bl	80041f8 <HAL_RCC_GetPCLK2Freq>
 80056d0:	61f8      	str	r0, [r7, #28]
        break;
 80056d2:	e010      	b.n	80056f6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056d4:	4b1d      	ldr	r3, [pc, #116]	; (800574c <UART_SetConfig+0x454>)
 80056d6:	61fb      	str	r3, [r7, #28]
        break;
 80056d8:	e00d      	b.n	80056f6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056da:	f7fe fcdf 	bl	800409c <HAL_RCC_GetSysClockFreq>
 80056de:	61f8      	str	r0, [r7, #28]
        break;
 80056e0:	e009      	b.n	80056f6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056e6:	61fb      	str	r3, [r7, #28]
        break;
 80056e8:	e005      	b.n	80056f6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80056ea:	2300      	movs	r3, #0
 80056ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80056f4:	bf00      	nop
    }

    if (pclk != 0U)
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d019      	beq.n	8005730 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	085a      	lsrs	r2, r3, #1
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	441a      	add	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	fbb2 f3f3 	udiv	r3, r2, r3
 800570e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	2b0f      	cmp	r3, #15
 8005714:	d909      	bls.n	800572a <UART_SetConfig+0x432>
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800571c:	d205      	bcs.n	800572a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	b29a      	uxth	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	60da      	str	r2, [r3, #12]
 8005728:	e002      	b.n	8005730 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800573c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005740:	4618      	mov	r0, r3
 8005742:	3728      	adds	r7, #40	; 0x28
 8005744:	46bd      	mov	sp, r7
 8005746:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800574a:	bf00      	nop
 800574c:	00f42400 	.word	0x00f42400

08005750 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575c:	f003 0308 	and.w	r3, r3, #8
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00a      	beq.n	800577a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	430a      	orrs	r2, r1
 8005778:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00a      	beq.n	800579c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	430a      	orrs	r2, r1
 800579a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a0:	f003 0302 	and.w	r3, r3, #2
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00a      	beq.n	80057be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	430a      	orrs	r2, r1
 80057bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c2:	f003 0304 	and.w	r3, r3, #4
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00a      	beq.n	80057e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	430a      	orrs	r2, r1
 80057de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e4:	f003 0310 	and.w	r3, r3, #16
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00a      	beq.n	8005802 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	430a      	orrs	r2, r1
 8005800:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005806:	f003 0320 	and.w	r3, r3, #32
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00a      	beq.n	8005824 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	430a      	orrs	r2, r1
 8005822:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800582c:	2b00      	cmp	r3, #0
 800582e:	d01a      	beq.n	8005866 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800584e:	d10a      	bne.n	8005866 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	430a      	orrs	r2, r1
 8005864:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00a      	beq.n	8005888 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	605a      	str	r2, [r3, #4]
  }
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b098      	sub	sp, #96	; 0x60
 8005898:	af02      	add	r7, sp, #8
 800589a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058a4:	f7fb fb62 	bl	8000f6c <HAL_GetTick>
 80058a8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0308 	and.w	r3, r3, #8
 80058b4:	2b08      	cmp	r3, #8
 80058b6:	d12e      	bne.n	8005916 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058bc:	9300      	str	r3, [sp, #0]
 80058be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058c0:	2200      	movs	r2, #0
 80058c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f88c 	bl	80059e4 <UART_WaitOnFlagUntilTimeout>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d021      	beq.n	8005916 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058da:	e853 3f00 	ldrex	r3, [r3]
 80058de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80058e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058e6:	653b      	str	r3, [r7, #80]	; 0x50
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	461a      	mov	r2, r3
 80058ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058f0:	647b      	str	r3, [r7, #68]	; 0x44
 80058f2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80058f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058f8:	e841 2300 	strex	r3, r2, [r1]
 80058fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80058fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1e6      	bne.n	80058d2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2220      	movs	r2, #32
 8005908:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e062      	b.n	80059dc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0304 	and.w	r3, r3, #4
 8005920:	2b04      	cmp	r3, #4
 8005922:	d149      	bne.n	80059b8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005924:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005928:	9300      	str	r3, [sp, #0]
 800592a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800592c:	2200      	movs	r2, #0
 800592e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f856 	bl	80059e4 <UART_WaitOnFlagUntilTimeout>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d03c      	beq.n	80059b8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	e853 3f00 	ldrex	r3, [r3]
 800594a:	623b      	str	r3, [r7, #32]
   return(result);
 800594c:	6a3b      	ldr	r3, [r7, #32]
 800594e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005952:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	461a      	mov	r2, r3
 800595a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800595c:	633b      	str	r3, [r7, #48]	; 0x30
 800595e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005960:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005962:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005964:	e841 2300 	strex	r3, r2, [r1]
 8005968:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800596a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1e6      	bne.n	800593e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	3308      	adds	r3, #8
 8005976:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	e853 3f00 	ldrex	r3, [r3]
 800597e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f023 0301 	bic.w	r3, r3, #1
 8005986:	64bb      	str	r3, [r7, #72]	; 0x48
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	3308      	adds	r3, #8
 800598e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005990:	61fa      	str	r2, [r7, #28]
 8005992:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005994:	69b9      	ldr	r1, [r7, #24]
 8005996:	69fa      	ldr	r2, [r7, #28]
 8005998:	e841 2300 	strex	r3, r2, [r1]
 800599c:	617b      	str	r3, [r7, #20]
   return(result);
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d1e5      	bne.n	8005970 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2220      	movs	r2, #32
 80059a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e011      	b.n	80059dc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2220      	movs	r2, #32
 80059bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2220      	movs	r2, #32
 80059c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3758      	adds	r7, #88	; 0x58
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	603b      	str	r3, [r7, #0]
 80059f0:	4613      	mov	r3, r2
 80059f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059f4:	e049      	b.n	8005a8a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059fc:	d045      	beq.n	8005a8a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059fe:	f7fb fab5 	bl	8000f6c <HAL_GetTick>
 8005a02:	4602      	mov	r2, r0
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	69ba      	ldr	r2, [r7, #24]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d302      	bcc.n	8005a14 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d101      	bne.n	8005a18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e048      	b.n	8005aaa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0304 	and.w	r3, r3, #4
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d031      	beq.n	8005a8a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	69db      	ldr	r3, [r3, #28]
 8005a2c:	f003 0308 	and.w	r3, r3, #8
 8005a30:	2b08      	cmp	r3, #8
 8005a32:	d110      	bne.n	8005a56 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2208      	movs	r2, #8
 8005a3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a3c:	68f8      	ldr	r0, [r7, #12]
 8005a3e:	f000 f838 	bl	8005ab2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2208      	movs	r2, #8
 8005a46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e029      	b.n	8005aaa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	69db      	ldr	r3, [r3, #28]
 8005a5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a64:	d111      	bne.n	8005a8a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f000 f81e 	bl	8005ab2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2220      	movs	r2, #32
 8005a7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e00f      	b.n	8005aaa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	69da      	ldr	r2, [r3, #28]
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	4013      	ands	r3, r2
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	bf0c      	ite	eq
 8005a9a:	2301      	moveq	r3, #1
 8005a9c:	2300      	movne	r3, #0
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	79fb      	ldrb	r3, [r7, #7]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d0a6      	beq.n	80059f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b095      	sub	sp, #84	; 0x54
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac2:	e853 3f00 	ldrex	r3, [r3]
 8005ac6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ace:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ad8:	643b      	str	r3, [r7, #64]	; 0x40
 8005ada:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005adc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ade:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ae0:	e841 2300 	strex	r3, r2, [r1]
 8005ae4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1e6      	bne.n	8005aba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	3308      	adds	r3, #8
 8005af2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af4:	6a3b      	ldr	r3, [r7, #32]
 8005af6:	e853 3f00 	ldrex	r3, [r3]
 8005afa:	61fb      	str	r3, [r7, #28]
   return(result);
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	f023 0301 	bic.w	r3, r3, #1
 8005b02:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	3308      	adds	r3, #8
 8005b0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b14:	e841 2300 	strex	r3, r2, [r1]
 8005b18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1e5      	bne.n	8005aec <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d118      	bne.n	8005b5a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	e853 3f00 	ldrex	r3, [r3]
 8005b34:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	f023 0310 	bic.w	r3, r3, #16
 8005b3c:	647b      	str	r3, [r7, #68]	; 0x44
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	461a      	mov	r2, r3
 8005b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b46:	61bb      	str	r3, [r7, #24]
 8005b48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4a:	6979      	ldr	r1, [r7, #20]
 8005b4c:	69ba      	ldr	r2, [r7, #24]
 8005b4e:	e841 2300 	strex	r3, r2, [r1]
 8005b52:	613b      	str	r3, [r7, #16]
   return(result);
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1e6      	bne.n	8005b28 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2220      	movs	r2, #32
 8005b5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005b6e:	bf00      	nop
 8005b70:	3754      	adds	r7, #84	; 0x54
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	f107 0014 	add.w	r0, r7, #20
 8005b88:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	b004      	add	sp, #16
 8005b9a:	4770      	bx	lr

08005b9c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005bac:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005bb0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3714      	adds	r7, #20
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr

08005bca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005bca:	b480      	push	{r7}
 8005bcc:	b085      	sub	sp, #20
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005bd2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005bd6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	43db      	mvns	r3, r3
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	4013      	ands	r3, r2
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3714      	adds	r7, #20
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	460b      	mov	r3, r1
 8005c0a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	f107 0014 	add.w	r0, r7, #20
 8005c28:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	370c      	adds	r7, #12
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	b004      	add	sp, #16
 8005c5a:	4770      	bx	lr

08005c5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef const *USBx, uint32_t num)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef const *USBx)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
	...

08005c8c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b09d      	sub	sp, #116	; 0x74
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c96:	2300      	movs	r3, #0
 8005c98:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	881b      	ldrh	r3, [r3, #0]
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cb2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	78db      	ldrb	r3, [r3, #3]
 8005cba:	2b03      	cmp	r3, #3
 8005cbc:	d81f      	bhi.n	8005cfe <USB_ActivateEndpoint+0x72>
 8005cbe:	a201      	add	r2, pc, #4	; (adr r2, 8005cc4 <USB_ActivateEndpoint+0x38>)
 8005cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc4:	08005cd5 	.word	0x08005cd5
 8005cc8:	08005cf1 	.word	0x08005cf1
 8005ccc:	08005d07 	.word	0x08005d07
 8005cd0:	08005ce3 	.word	0x08005ce3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005cd4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005cd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005cdc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005ce0:	e012      	b.n	8005d08 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005ce2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005ce6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005cea:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005cee:	e00b      	b.n	8005d08 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005cf0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005cf4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005cf8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005cfc:	e004      	b.n	8005d08 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005d04:	e000      	b.n	8005d08 <USB_ActivateEndpoint+0x7c>
      break;
 8005d06:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	441a      	add	r2, r3
 8005d12:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005d16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	4413      	add	r3, r2
 8005d34:	881b      	ldrh	r3, [r3, #0]
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	b21b      	sxth	r3, r3
 8005d3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d42:	b21a      	sxth	r2, r3
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	b21b      	sxth	r3, r3
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	b21b      	sxth	r3, r3
 8005d4e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	441a      	add	r2, r3
 8005d5c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005d60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	7b1b      	ldrb	r3, [r3, #12]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f040 8178 	bne.w	800606e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	785b      	ldrb	r3, [r3, #1]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f000 8084 	beq.w	8005e90 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	61bb      	str	r3, [r7, #24]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	461a      	mov	r2, r3
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	4413      	add	r3, r2
 8005d9a:	61bb      	str	r3, [r7, #24]
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	00da      	lsls	r2, r3, #3
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	4413      	add	r3, r2
 8005da6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005daa:	617b      	str	r3, [r7, #20]
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	88db      	ldrh	r3, [r3, #6]
 8005db0:	085b      	lsrs	r3, r3, #1
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	005b      	lsls	r3, r3, #1
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	4413      	add	r3, r2
 8005dc6:	881b      	ldrh	r3, [r3, #0]
 8005dc8:	827b      	strh	r3, [r7, #18]
 8005dca:	8a7b      	ldrh	r3, [r7, #18]
 8005dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d01b      	beq.n	8005e0c <USB_ActivateEndpoint+0x180>
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4413      	add	r3, r2
 8005dde:	881b      	ldrh	r3, [r3, #0]
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dea:	823b      	strh	r3, [r7, #16]
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	441a      	add	r2, r3
 8005df6:	8a3b      	ldrh	r3, [r7, #16]
 8005df8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	78db      	ldrb	r3, [r3, #3]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d020      	beq.n	8005e56 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	4413      	add	r3, r2
 8005e1e:	881b      	ldrh	r3, [r3, #0]
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e2a:	81bb      	strh	r3, [r7, #12]
 8005e2c:	89bb      	ldrh	r3, [r7, #12]
 8005e2e:	f083 0320 	eor.w	r3, r3, #32
 8005e32:	81bb      	strh	r3, [r7, #12]
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	441a      	add	r2, r3
 8005e3e:	89bb      	ldrh	r3, [r7, #12]
 8005e40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	8013      	strh	r3, [r2, #0]
 8005e54:	e2d5      	b.n	8006402 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	881b      	ldrh	r3, [r3, #0]
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e6c:	81fb      	strh	r3, [r7, #14]
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	441a      	add	r2, r3
 8005e78:	89fb      	ldrh	r3, [r7, #14]
 8005e7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	8013      	strh	r3, [r2, #0]
 8005e8e:	e2b8      	b.n	8006402 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	633b      	str	r3, [r7, #48]	; 0x30
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea0:	4413      	add	r3, r2
 8005ea2:	633b      	str	r3, [r7, #48]	; 0x30
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	00da      	lsls	r2, r3, #3
 8005eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eac:	4413      	add	r3, r2
 8005eae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	88db      	ldrh	r3, [r3, #6]
 8005eb8:	085b      	lsrs	r3, r3, #1
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	005b      	lsls	r3, r3, #1
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed4:	4413      	add	r3, r2
 8005ed6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	00da      	lsls	r2, r3, #3
 8005ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eea:	881b      	ldrh	r3, [r3, #0]
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef6:	801a      	strh	r2, [r3, #0]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	2b3e      	cmp	r3, #62	; 0x3e
 8005efe:	d91d      	bls.n	8005f3c <USB_ActivateEndpoint+0x2b0>
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	095b      	lsrs	r3, r3, #5
 8005f06:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	f003 031f 	and.w	r3, r3, #31
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d102      	bne.n	8005f1a <USB_ActivateEndpoint+0x28e>
 8005f14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f16:	3b01      	subs	r3, #1
 8005f18:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	881b      	ldrh	r3, [r3, #0]
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	029b      	lsls	r3, r3, #10
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f38:	801a      	strh	r2, [r3, #0]
 8005f3a:	e026      	b.n	8005f8a <USB_ActivateEndpoint+0x2fe>
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10a      	bne.n	8005f5a <USB_ActivateEndpoint+0x2ce>
 8005f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f46:	881b      	ldrh	r3, [r3, #0]
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	801a      	strh	r2, [r3, #0]
 8005f58:	e017      	b.n	8005f8a <USB_ActivateEndpoint+0x2fe>
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	085b      	lsrs	r3, r3, #1
 8005f60:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d002      	beq.n	8005f74 <USB_ActivateEndpoint+0x2e8>
 8005f6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f70:	3301      	adds	r3, #1
 8005f72:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f76:	881b      	ldrh	r3, [r3, #0]
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	029b      	lsls	r3, r3, #10
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	4313      	orrs	r3, r2
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f88:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	4413      	add	r3, r2
 8005f94:	881b      	ldrh	r3, [r3, #0]
 8005f96:	847b      	strh	r3, [r7, #34]	; 0x22
 8005f98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d01b      	beq.n	8005fda <USB_ActivateEndpoint+0x34e>
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	4413      	add	r3, r2
 8005fac:	881b      	ldrh	r3, [r3, #0]
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb8:	843b      	strh	r3, [r7, #32]
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	441a      	add	r2, r3
 8005fc4:	8c3b      	ldrh	r3, [r7, #32]
 8005fc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d124      	bne.n	800602c <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	4413      	add	r3, r2
 8005fec:	881b      	ldrh	r3, [r3, #0]
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff8:	83bb      	strh	r3, [r7, #28]
 8005ffa:	8bbb      	ldrh	r3, [r7, #28]
 8005ffc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006000:	83bb      	strh	r3, [r7, #28]
 8006002:	8bbb      	ldrh	r3, [r7, #28]
 8006004:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006008:	83bb      	strh	r3, [r7, #28]
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	441a      	add	r2, r3
 8006014:	8bbb      	ldrh	r3, [r7, #28]
 8006016:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800601a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800601e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006026:	b29b      	uxth	r3, r3
 8006028:	8013      	strh	r3, [r2, #0]
 800602a:	e1ea      	b.n	8006402 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4413      	add	r3, r2
 8006036:	881b      	ldrh	r3, [r3, #0]
 8006038:	b29b      	uxth	r3, r3
 800603a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800603e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006042:	83fb      	strh	r3, [r7, #30]
 8006044:	8bfb      	ldrh	r3, [r7, #30]
 8006046:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800604a:	83fb      	strh	r3, [r7, #30]
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	441a      	add	r2, r3
 8006056:	8bfb      	ldrh	r3, [r7, #30]
 8006058:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800605c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006060:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006068:	b29b      	uxth	r3, r3
 800606a:	8013      	strh	r3, [r2, #0]
 800606c:	e1c9      	b.n	8006402 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	78db      	ldrb	r3, [r3, #3]
 8006072:	2b02      	cmp	r3, #2
 8006074:	d11e      	bne.n	80060b4 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	4413      	add	r3, r2
 8006080:	881b      	ldrh	r3, [r3, #0]
 8006082:	b29b      	uxth	r3, r3
 8006084:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800608c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	441a      	add	r2, r3
 800609a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800609e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060a6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80060aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	8013      	strh	r3, [r2, #0]
 80060b2:	e01d      	b.n	80060f0 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	4413      	add	r3, r2
 80060be:	881b      	ldrh	r3, [r3, #0]
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80060c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ca:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	441a      	add	r2, r3
 80060d8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80060dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	461a      	mov	r2, r3
 80060fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006100:	4413      	add	r3, r2
 8006102:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	00da      	lsls	r2, r3, #3
 800610a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800610c:	4413      	add	r3, r2
 800610e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006112:	65bb      	str	r3, [r7, #88]	; 0x58
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	891b      	ldrh	r3, [r3, #8]
 8006118:	085b      	lsrs	r3, r3, #1
 800611a:	b29b      	uxth	r3, r3
 800611c:	005b      	lsls	r3, r3, #1
 800611e:	b29a      	uxth	r2, r3
 8006120:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006122:	801a      	strh	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	657b      	str	r3, [r7, #84]	; 0x54
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800612e:	b29b      	uxth	r3, r3
 8006130:	461a      	mov	r2, r3
 8006132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006134:	4413      	add	r3, r2
 8006136:	657b      	str	r3, [r7, #84]	; 0x54
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	00da      	lsls	r2, r3, #3
 800613e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006140:	4413      	add	r3, r2
 8006142:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006146:	653b      	str	r3, [r7, #80]	; 0x50
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	895b      	ldrh	r3, [r3, #10]
 800614c:	085b      	lsrs	r3, r3, #1
 800614e:	b29b      	uxth	r3, r3
 8006150:	005b      	lsls	r3, r3, #1
 8006152:	b29a      	uxth	r2, r3
 8006154:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006156:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	785b      	ldrb	r3, [r3, #1]
 800615c:	2b00      	cmp	r3, #0
 800615e:	f040 8093 	bne.w	8006288 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	4413      	add	r3, r2
 800616c:	881b      	ldrh	r3, [r3, #0]
 800616e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006172:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d01b      	beq.n	80061b6 <USB_ActivateEndpoint+0x52a>
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4413      	add	r3, r2
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	b29b      	uxth	r3, r3
 800618c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006194:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	441a      	add	r2, r3
 80061a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80061a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	4413      	add	r3, r2
 80061c0:	881b      	ldrh	r3, [r3, #0]
 80061c2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80061c4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80061c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d01b      	beq.n	8006206 <USB_ActivateEndpoint+0x57a>
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4413      	add	r3, r2
 80061d8:	881b      	ldrh	r3, [r3, #0]
 80061da:	b29b      	uxth	r3, r3
 80061dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	441a      	add	r2, r3
 80061f0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80061f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006202:	b29b      	uxth	r3, r3
 8006204:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4413      	add	r3, r2
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	b29b      	uxth	r3, r3
 8006214:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800621c:	873b      	strh	r3, [r7, #56]	; 0x38
 800621e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006220:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006224:	873b      	strh	r3, [r7, #56]	; 0x38
 8006226:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006228:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800622c:	873b      	strh	r3, [r7, #56]	; 0x38
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	441a      	add	r2, r3
 8006238:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800623a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800623e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800624a:	b29b      	uxth	r3, r3
 800624c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	4413      	add	r3, r2
 8006258:	881b      	ldrh	r3, [r3, #0]
 800625a:	b29b      	uxth	r3, r3
 800625c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006260:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006264:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	441a      	add	r2, r3
 8006270:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006272:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006276:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800627a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800627e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006282:	b29b      	uxth	r3, r3
 8006284:	8013      	strh	r3, [r2, #0]
 8006286:	e0bc      	b.n	8006402 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	881b      	ldrh	r3, [r3, #0]
 8006294:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006298:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800629c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d01d      	beq.n	80062e0 <USB_ActivateEndpoint+0x654>
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	881b      	ldrh	r3, [r3, #0]
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ba:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	441a      	add	r2, r3
 80062c8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80062cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062dc:	b29b      	uxth	r3, r3
 80062de:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	4413      	add	r3, r2
 80062ea:	881b      	ldrh	r3, [r3, #0]
 80062ec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80062f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80062f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d01d      	beq.n	8006338 <USB_ActivateEndpoint+0x6ac>
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	4413      	add	r3, r2
 8006306:	881b      	ldrh	r3, [r3, #0]
 8006308:	b29b      	uxth	r3, r3
 800630a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800630e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006312:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	441a      	add	r2, r3
 8006320:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006324:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006328:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800632c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006330:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006334:	b29b      	uxth	r3, r3
 8006336:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	78db      	ldrb	r3, [r3, #3]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d024      	beq.n	800638a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4413      	add	r3, r2
 800634a:	881b      	ldrh	r3, [r3, #0]
 800634c:	b29b      	uxth	r3, r3
 800634e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006356:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800635a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800635e:	f083 0320 	eor.w	r3, r3, #32
 8006362:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	441a      	add	r2, r3
 8006370:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006374:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006378:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800637c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006384:	b29b      	uxth	r3, r3
 8006386:	8013      	strh	r3, [r2, #0]
 8006388:	e01d      	b.n	80063c6 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	4413      	add	r3, r2
 8006394:	881b      	ldrh	r3, [r3, #0]
 8006396:	b29b      	uxth	r3, r3
 8006398:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800639c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063a0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	441a      	add	r2, r3
 80063ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80063b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	4413      	add	r3, r2
 80063d0:	881b      	ldrh	r3, [r3, #0]
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	441a      	add	r2, r3
 80063ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80063ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063fe:	b29b      	uxth	r3, r3
 8006400:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006402:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006406:	4618      	mov	r0, r3
 8006408:	3774      	adds	r7, #116	; 0x74
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop

08006414 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006414:	b480      	push	{r7}
 8006416:	b08d      	sub	sp, #52	; 0x34
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	7b1b      	ldrb	r3, [r3, #12]
 8006422:	2b00      	cmp	r3, #0
 8006424:	f040 808e 	bne.w	8006544 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	785b      	ldrb	r3, [r3, #1]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d044      	beq.n	80064ba <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	4413      	add	r3, r2
 800643a:	881b      	ldrh	r3, [r3, #0]
 800643c:	81bb      	strh	r3, [r7, #12]
 800643e:	89bb      	ldrh	r3, [r7, #12]
 8006440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006444:	2b00      	cmp	r3, #0
 8006446:	d01b      	beq.n	8006480 <USB_DeactivateEndpoint+0x6c>
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	4413      	add	r3, r2
 8006452:	881b      	ldrh	r3, [r3, #0]
 8006454:	b29b      	uxth	r3, r3
 8006456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800645a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800645e:	817b      	strh	r3, [r7, #10]
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	441a      	add	r2, r3
 800646a:	897b      	ldrh	r3, [r7, #10]
 800646c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006470:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006474:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006478:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800647c:	b29b      	uxth	r3, r3
 800647e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	4413      	add	r3, r2
 800648a:	881b      	ldrh	r3, [r3, #0]
 800648c:	b29b      	uxth	r3, r3
 800648e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006492:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006496:	813b      	strh	r3, [r7, #8]
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	441a      	add	r2, r3
 80064a2:	893b      	ldrh	r3, [r7, #8]
 80064a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	8013      	strh	r3, [r2, #0]
 80064b8:	e192      	b.n	80067e0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	4413      	add	r3, r2
 80064c4:	881b      	ldrh	r3, [r3, #0]
 80064c6:	827b      	strh	r3, [r7, #18]
 80064c8:	8a7b      	ldrh	r3, [r7, #18]
 80064ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d01b      	beq.n	800650a <USB_DeactivateEndpoint+0xf6>
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4413      	add	r3, r2
 80064dc:	881b      	ldrh	r3, [r3, #0]
 80064de:	b29b      	uxth	r3, r3
 80064e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064e8:	823b      	strh	r3, [r7, #16]
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	441a      	add	r2, r3
 80064f4:	8a3b      	ldrh	r3, [r7, #16]
 80064f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006506:	b29b      	uxth	r3, r3
 8006508:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4413      	add	r3, r2
 8006514:	881b      	ldrh	r3, [r3, #0]
 8006516:	b29b      	uxth	r3, r3
 8006518:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800651c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006520:	81fb      	strh	r3, [r7, #14]
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	441a      	add	r2, r3
 800652c:	89fb      	ldrh	r3, [r7, #14]
 800652e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006532:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800653a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800653e:	b29b      	uxth	r3, r3
 8006540:	8013      	strh	r3, [r2, #0]
 8006542:	e14d      	b.n	80067e0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	785b      	ldrb	r3, [r3, #1]
 8006548:	2b00      	cmp	r3, #0
 800654a:	f040 80a5 	bne.w	8006698 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	4413      	add	r3, r2
 8006558:	881b      	ldrh	r3, [r3, #0]
 800655a:	843b      	strh	r3, [r7, #32]
 800655c:	8c3b      	ldrh	r3, [r7, #32]
 800655e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006562:	2b00      	cmp	r3, #0
 8006564:	d01b      	beq.n	800659e <USB_DeactivateEndpoint+0x18a>
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	4413      	add	r3, r2
 8006570:	881b      	ldrh	r3, [r3, #0]
 8006572:	b29b      	uxth	r3, r3
 8006574:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800657c:	83fb      	strh	r3, [r7, #30]
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	441a      	add	r2, r3
 8006588:	8bfb      	ldrh	r3, [r7, #30]
 800658a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800658e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006592:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800659a:	b29b      	uxth	r3, r3
 800659c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	4413      	add	r3, r2
 80065a8:	881b      	ldrh	r3, [r3, #0]
 80065aa:	83bb      	strh	r3, [r7, #28]
 80065ac:	8bbb      	ldrh	r3, [r7, #28]
 80065ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d01b      	beq.n	80065ee <USB_DeactivateEndpoint+0x1da>
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	4413      	add	r3, r2
 80065c0:	881b      	ldrh	r3, [r3, #0]
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065cc:	837b      	strh	r3, [r7, #26]
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	441a      	add	r2, r3
 80065d8:	8b7b      	ldrh	r3, [r7, #26]
 80065da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4413      	add	r3, r2
 80065f8:	881b      	ldrh	r3, [r3, #0]
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006604:	833b      	strh	r3, [r7, #24]
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	441a      	add	r2, r3
 8006610:	8b3b      	ldrh	r3, [r7, #24]
 8006612:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006616:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800661a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800661e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006622:	b29b      	uxth	r3, r3
 8006624:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	4413      	add	r3, r2
 8006630:	881b      	ldrh	r3, [r3, #0]
 8006632:	b29b      	uxth	r3, r3
 8006634:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800663c:	82fb      	strh	r3, [r7, #22]
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	441a      	add	r2, r3
 8006648:	8afb      	ldrh	r3, [r7, #22]
 800664a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800664e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800665a:	b29b      	uxth	r3, r3
 800665c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	4413      	add	r3, r2
 8006668:	881b      	ldrh	r3, [r3, #0]
 800666a:	b29b      	uxth	r3, r3
 800666c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006670:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006674:	82bb      	strh	r3, [r7, #20]
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	441a      	add	r2, r3
 8006680:	8abb      	ldrh	r3, [r7, #20]
 8006682:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006686:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800668a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800668e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006692:	b29b      	uxth	r3, r3
 8006694:	8013      	strh	r3, [r2, #0]
 8006696:	e0a3      	b.n	80067e0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	4413      	add	r3, r2
 80066a2:	881b      	ldrh	r3, [r3, #0]
 80066a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80066a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80066a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d01b      	beq.n	80066e8 <USB_DeactivateEndpoint+0x2d4>
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	881b      	ldrh	r3, [r3, #0]
 80066bc:	b29b      	uxth	r3, r3
 80066be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066c6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	441a      	add	r2, r3
 80066d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80066d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	4413      	add	r3, r2
 80066f2:	881b      	ldrh	r3, [r3, #0]
 80066f4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80066f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80066f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d01b      	beq.n	8006738 <USB_DeactivateEndpoint+0x324>
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	4413      	add	r3, r2
 800670a:	881b      	ldrh	r3, [r3, #0]
 800670c:	b29b      	uxth	r3, r3
 800670e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006716:	853b      	strh	r3, [r7, #40]	; 0x28
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	441a      	add	r2, r3
 8006722:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006724:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006728:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800672c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006730:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006734:	b29b      	uxth	r3, r3
 8006736:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4413      	add	r3, r2
 8006742:	881b      	ldrh	r3, [r3, #0]
 8006744:	b29b      	uxth	r3, r3
 8006746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800674a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800674e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	441a      	add	r2, r3
 800675a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800675c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006760:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006764:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800676c:	b29b      	uxth	r3, r3
 800676e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	4413      	add	r3, r2
 800677a:	881b      	ldrh	r3, [r3, #0]
 800677c:	b29b      	uxth	r3, r3
 800677e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006782:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006786:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	441a      	add	r2, r3
 8006792:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006794:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006798:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800679c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	4413      	add	r3, r2
 80067b2:	881b      	ldrh	r3, [r3, #0]
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067be:	847b      	strh	r3, [r7, #34]	; 0x22
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	441a      	add	r2, r3
 80067ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80067cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067dc:	b29b      	uxth	r3, r3
 80067de:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3734      	adds	r7, #52	; 0x34
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b0c2      	sub	sp, #264	; 0x108
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067fc:	6018      	str	r0, [r3, #0]
 80067fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006802:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006806:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006808:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800680c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	785b      	ldrb	r3, [r3, #1]
 8006814:	2b01      	cmp	r3, #1
 8006816:	f040 86b7 	bne.w	8007588 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800681a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800681e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	699a      	ldr	r2, [r3, #24]
 8006826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800682a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	429a      	cmp	r2, r3
 8006834:	d908      	bls.n	8006848 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006836:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800683a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006846:	e007      	b.n	8006858 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800684c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800685c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	7b1b      	ldrb	r3, [r3, #12]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d13a      	bne.n	80068de <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800686c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	6959      	ldr	r1, [r3, #20]
 8006874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006878:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	88da      	ldrh	r2, [r3, #6]
 8006880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006884:	b29b      	uxth	r3, r3
 8006886:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800688a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800688e:	6800      	ldr	r0, [r0, #0]
 8006890:	f001 fcb9 	bl	8008206 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006894:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006898:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	613b      	str	r3, [r7, #16]
 80068a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	461a      	mov	r2, r3
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	4413      	add	r3, r2
 80068b6:	613b      	str	r3, [r7, #16]
 80068b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	00da      	lsls	r2, r3, #3
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	4413      	add	r3, r2
 80068ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80068ce:	60fb      	str	r3, [r7, #12]
 80068d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	801a      	strh	r2, [r3, #0]
 80068da:	f000 be1f 	b.w	800751c <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80068de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	78db      	ldrb	r3, [r3, #3]
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	f040 8462 	bne.w	80071b4 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80068f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	6a1a      	ldr	r2, [r3, #32]
 80068fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006900:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	429a      	cmp	r2, r3
 800690a:	f240 83df 	bls.w	80070cc <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800690e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006912:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800691c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	881b      	ldrh	r3, [r3, #0]
 800692a:	b29b      	uxth	r3, r3
 800692c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006934:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006938:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800693c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006946:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	441a      	add	r2, r3
 8006952:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006956:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800695a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800695e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006966:	b29b      	uxth	r3, r3
 8006968:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800696a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800696e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	6a1a      	ldr	r2, [r3, #32]
 8006976:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800697a:	1ad2      	subs	r2, r2, r3
 800697c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006980:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800698c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006996:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	4413      	add	r3, r2
 80069a2:	881b      	ldrh	r3, [r3, #0]
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	f000 81c7 	beq.w	8006d3e <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80069b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	633b      	str	r3, [r7, #48]	; 0x30
 80069bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	785b      	ldrb	r3, [r3, #1]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d177      	bne.n	8006abc <USB_EPStartXfer+0x2ce>
 80069cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80069d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	461a      	mov	r2, r3
 80069ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ec:	4413      	add	r3, r2
 80069ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80069f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	00da      	lsls	r2, r3, #3
 80069fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a00:	4413      	add	r3, r2
 8006a02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a06:	627b      	str	r3, [r7, #36]	; 0x24
 8006a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0a:	881b      	ldrh	r3, [r3, #0]
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a12:	b29a      	uxth	r2, r3
 8006a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a16:	801a      	strh	r2, [r3, #0]
 8006a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a1c:	2b3e      	cmp	r3, #62	; 0x3e
 8006a1e:	d921      	bls.n	8006a64 <USB_EPStartXfer+0x276>
 8006a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a24:	095b      	lsrs	r3, r3, #5
 8006a26:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a2e:	f003 031f 	and.w	r3, r3, #31
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d104      	bne.n	8006a40 <USB_EPStartXfer+0x252>
 8006a36:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	881b      	ldrh	r3, [r3, #0]
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	029b      	lsls	r3, r3, #10
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	4313      	orrs	r3, r2
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a5c:	b29a      	uxth	r2, r3
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a60:	801a      	strh	r2, [r3, #0]
 8006a62:	e050      	b.n	8006b06 <USB_EPStartXfer+0x318>
 8006a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d10a      	bne.n	8006a82 <USB_EPStartXfer+0x294>
 8006a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6e:	881b      	ldrh	r3, [r3, #0]
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7e:	801a      	strh	r2, [r3, #0]
 8006a80:	e041      	b.n	8006b06 <USB_EPStartXfer+0x318>
 8006a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a86:	085b      	lsrs	r3, r3, #1
 8006a88:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a90:	f003 0301 	and.w	r3, r3, #1
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d004      	beq.n	8006aa2 <USB_EPStartXfer+0x2b4>
 8006a98:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa4:	881b      	ldrh	r3, [r3, #0]
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	029b      	lsls	r3, r3, #10
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab8:	801a      	strh	r2, [r3, #0]
 8006aba:	e024      	b.n	8006b06 <USB_EPStartXfer+0x318>
 8006abc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ac0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	785b      	ldrb	r3, [r3, #1]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d11c      	bne.n	8006b06 <USB_EPStartXfer+0x318>
 8006acc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ad0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	461a      	mov	r2, r3
 8006ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae0:	4413      	add	r3, r2
 8006ae2:	633b      	str	r3, [r7, #48]	; 0x30
 8006ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ae8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	00da      	lsls	r2, r3, #3
 8006af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af4:	4413      	add	r3, r2
 8006af6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006afa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b04:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006b06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	895b      	ldrh	r3, [r3, #10]
 8006b12:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	6959      	ldr	r1, [r3, #20]
 8006b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006b2c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006b30:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006b34:	6800      	ldr	r0, [r0, #0]
 8006b36:	f001 fb66 	bl	8008206 <USB_WritePMA>
            ep->xfer_buff += len;
 8006b3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	695a      	ldr	r2, [r3, #20]
 8006b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b4a:	441a      	add	r2, r3
 8006b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006b58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	6a1a      	ldr	r2, [r3, #32]
 8006b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d90f      	bls.n	8006b94 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	6a1a      	ldr	r2, [r3, #32]
 8006b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b84:	1ad2      	subs	r2, r2, r3
 8006b86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	621a      	str	r2, [r3, #32]
 8006b92:	e00e      	b.n	8006bb2 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	6a1b      	ldr	r3, [r3, #32]
 8006ba0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ba8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006bb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	785b      	ldrb	r3, [r3, #1]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d177      	bne.n	8006cb2 <USB_EPStartXfer+0x4c4>
 8006bc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	61bb      	str	r3, [r7, #24]
 8006bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	461a      	mov	r2, r3
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	4413      	add	r3, r2
 8006be4:	61bb      	str	r3, [r7, #24]
 8006be6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	00da      	lsls	r2, r3, #3
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006bfc:	617b      	str	r3, [r7, #20]
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	881b      	ldrh	r3, [r3, #0]
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	801a      	strh	r2, [r3, #0]
 8006c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c12:	2b3e      	cmp	r3, #62	; 0x3e
 8006c14:	d921      	bls.n	8006c5a <USB_EPStartXfer+0x46c>
 8006c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c1a:	095b      	lsrs	r3, r3, #5
 8006c1c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c24:	f003 031f 	and.w	r3, r3, #31
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d104      	bne.n	8006c36 <USB_EPStartXfer+0x448>
 8006c2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c30:	3b01      	subs	r3, #1
 8006c32:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	881b      	ldrh	r3, [r3, #0]
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	029b      	lsls	r3, r3, #10
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	4313      	orrs	r3, r2
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c52:	b29a      	uxth	r2, r3
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	801a      	strh	r2, [r3, #0]
 8006c58:	e056      	b.n	8006d08 <USB_EPStartXfer+0x51a>
 8006c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d10a      	bne.n	8006c78 <USB_EPStartXfer+0x48a>
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	881b      	ldrh	r3, [r3, #0]
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	801a      	strh	r2, [r3, #0]
 8006c76:	e047      	b.n	8006d08 <USB_EPStartXfer+0x51a>
 8006c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c7c:	085b      	lsrs	r3, r3, #1
 8006c7e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d004      	beq.n	8006c98 <USB_EPStartXfer+0x4aa>
 8006c8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c92:	3301      	adds	r3, #1
 8006c94:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	881b      	ldrh	r3, [r3, #0]
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	029b      	lsls	r3, r3, #10
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	801a      	strh	r2, [r3, #0]
 8006cb0:	e02a      	b.n	8006d08 <USB_EPStartXfer+0x51a>
 8006cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	785b      	ldrb	r3, [r3, #1]
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d122      	bne.n	8006d08 <USB_EPStartXfer+0x51a>
 8006cc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	623b      	str	r3, [r7, #32]
 8006cce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	461a      	mov	r2, r3
 8006ce0:	6a3b      	ldr	r3, [r7, #32]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	623b      	str	r3, [r7, #32]
 8006ce6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	00da      	lsls	r2, r3, #3
 8006cf4:	6a3b      	ldr	r3, [r7, #32]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006cfc:	61fb      	str	r3, [r7, #28]
 8006cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d02:	b29a      	uxth	r2, r3
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006d08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	891b      	ldrh	r3, [r3, #8]
 8006d14:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	6959      	ldr	r1, [r3, #20]
 8006d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006d2e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006d32:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006d36:	6800      	ldr	r0, [r0, #0]
 8006d38:	f001 fa65 	bl	8008206 <USB_WritePMA>
 8006d3c:	e3ee      	b.n	800751c <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006d3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	785b      	ldrb	r3, [r3, #1]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d177      	bne.n	8006e3e <USB_EPStartXfer+0x650>
 8006d4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d6e:	4413      	add	r3, r2
 8006d70:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	00da      	lsls	r2, r3, #3
 8006d80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d82:	4413      	add	r3, r2
 8006d84:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d88:	647b      	str	r3, [r7, #68]	; 0x44
 8006d8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d8c:	881b      	ldrh	r3, [r3, #0]
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d94:	b29a      	uxth	r2, r3
 8006d96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d98:	801a      	strh	r2, [r3, #0]
 8006d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d9e:	2b3e      	cmp	r3, #62	; 0x3e
 8006da0:	d921      	bls.n	8006de6 <USB_EPStartXfer+0x5f8>
 8006da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006da6:	095b      	lsrs	r3, r3, #5
 8006da8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006db0:	f003 031f 	and.w	r3, r3, #31
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d104      	bne.n	8006dc2 <USB_EPStartXfer+0x5d4>
 8006db8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006dc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dc4:	881b      	ldrh	r3, [r3, #0]
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	029b      	lsls	r3, r3, #10
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006de2:	801a      	strh	r2, [r3, #0]
 8006de4:	e056      	b.n	8006e94 <USB_EPStartXfer+0x6a6>
 8006de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d10a      	bne.n	8006e04 <USB_EPStartXfer+0x616>
 8006dee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006df0:	881b      	ldrh	r3, [r3, #0]
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006df8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dfc:	b29a      	uxth	r2, r3
 8006dfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e00:	801a      	strh	r2, [r3, #0]
 8006e02:	e047      	b.n	8006e94 <USB_EPStartXfer+0x6a6>
 8006e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e08:	085b      	lsrs	r3, r3, #1
 8006e0a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e12:	f003 0301 	and.w	r3, r3, #1
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d004      	beq.n	8006e24 <USB_EPStartXfer+0x636>
 8006e1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e1e:	3301      	adds	r3, #1
 8006e20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e26:	881b      	ldrh	r3, [r3, #0]
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	029b      	lsls	r3, r3, #10
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	4313      	orrs	r3, r2
 8006e36:	b29a      	uxth	r2, r3
 8006e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e3a:	801a      	strh	r2, [r3, #0]
 8006e3c:	e02a      	b.n	8006e94 <USB_EPStartXfer+0x6a6>
 8006e3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	785b      	ldrb	r3, [r3, #1]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d122      	bne.n	8006e94 <USB_EPStartXfer+0x6a6>
 8006e4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	653b      	str	r3, [r7, #80]	; 0x50
 8006e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e6e:	4413      	add	r3, r2
 8006e70:	653b      	str	r3, [r7, #80]	; 0x50
 8006e72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	00da      	lsls	r2, r3, #3
 8006e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e82:	4413      	add	r3, r2
 8006e84:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e92:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	891b      	ldrh	r3, [r3, #8]
 8006ea0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ea8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	6959      	ldr	r1, [r3, #20]
 8006eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006eba:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006ebe:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006ec2:	6800      	ldr	r0, [r0, #0]
 8006ec4:	f001 f99f 	bl	8008206 <USB_WritePMA>
            ep->xfer_buff += len;
 8006ec8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ecc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	695a      	ldr	r2, [r3, #20]
 8006ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ed8:	441a      	add	r2, r3
 8006eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ede:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006ee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	6a1a      	ldr	r2, [r3, #32]
 8006ef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ef6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d90f      	bls.n	8006f22 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006f02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	6a1a      	ldr	r2, [r3, #32]
 8006f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f12:	1ad2      	subs	r2, r2, r3
 8006f14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	621a      	str	r2, [r3, #32]
 8006f20:	e00e      	b.n	8006f40 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006f22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006f32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	643b      	str	r3, [r7, #64]	; 0x40
 8006f4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	785b      	ldrb	r3, [r3, #1]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d177      	bne.n	800704c <USB_EPStartXfer+0x85e>
 8006f5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	461a      	mov	r2, r3
 8006f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7c:	4413      	add	r3, r2
 8006f7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	00da      	lsls	r2, r3, #3
 8006f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f90:	4413      	add	r3, r2
 8006f92:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f96:	637b      	str	r3, [r7, #52]	; 0x34
 8006f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f9a:	881b      	ldrh	r3, [r3, #0]
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fa6:	801a      	strh	r2, [r3, #0]
 8006fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fac:	2b3e      	cmp	r3, #62	; 0x3e
 8006fae:	d921      	bls.n	8006ff4 <USB_EPStartXfer+0x806>
 8006fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fb4:	095b      	lsrs	r3, r3, #5
 8006fb6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fbe:	f003 031f 	and.w	r3, r3, #31
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d104      	bne.n	8006fd0 <USB_EPStartXfer+0x7e2>
 8006fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fd2:	881b      	ldrh	r3, [r3, #0]
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	029b      	lsls	r3, r3, #10
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fe8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ff0:	801a      	strh	r2, [r3, #0]
 8006ff2:	e050      	b.n	8007096 <USB_EPStartXfer+0x8a8>
 8006ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d10a      	bne.n	8007012 <USB_EPStartXfer+0x824>
 8006ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ffe:	881b      	ldrh	r3, [r3, #0]
 8007000:	b29b      	uxth	r3, r3
 8007002:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007006:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800700a:	b29a      	uxth	r2, r3
 800700c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800700e:	801a      	strh	r2, [r3, #0]
 8007010:	e041      	b.n	8007096 <USB_EPStartXfer+0x8a8>
 8007012:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007016:	085b      	lsrs	r3, r3, #1
 8007018:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800701c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007020:	f003 0301 	and.w	r3, r3, #1
 8007024:	2b00      	cmp	r3, #0
 8007026:	d004      	beq.n	8007032 <USB_EPStartXfer+0x844>
 8007028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800702c:	3301      	adds	r3, #1
 800702e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007034:	881b      	ldrh	r3, [r3, #0]
 8007036:	b29a      	uxth	r2, r3
 8007038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800703c:	b29b      	uxth	r3, r3
 800703e:	029b      	lsls	r3, r3, #10
 8007040:	b29b      	uxth	r3, r3
 8007042:	4313      	orrs	r3, r2
 8007044:	b29a      	uxth	r2, r3
 8007046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007048:	801a      	strh	r2, [r3, #0]
 800704a:	e024      	b.n	8007096 <USB_EPStartXfer+0x8a8>
 800704c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007050:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	785b      	ldrb	r3, [r3, #1]
 8007058:	2b01      	cmp	r3, #1
 800705a:	d11c      	bne.n	8007096 <USB_EPStartXfer+0x8a8>
 800705c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007060:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800706a:	b29b      	uxth	r3, r3
 800706c:	461a      	mov	r2, r3
 800706e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007070:	4413      	add	r3, r2
 8007072:	643b      	str	r3, [r7, #64]	; 0x40
 8007074:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007078:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	00da      	lsls	r2, r3, #3
 8007082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007084:	4413      	add	r3, r2
 8007086:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800708a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800708c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007090:	b29a      	uxth	r2, r3
 8007092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007094:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007096:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800709a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	895b      	ldrh	r3, [r3, #10]
 80070a2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	6959      	ldr	r1, [r3, #20]
 80070b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80070bc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80070c0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80070c4:	6800      	ldr	r0, [r0, #0]
 80070c6:	f001 f89e 	bl	8008206 <USB_WritePMA>
 80070ca:	e227      	b.n	800751c <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80070cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	6a1b      	ldr	r3, [r3, #32]
 80070d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80070dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	4413      	add	r3, r2
 80070f6:	881b      	ldrh	r3, [r3, #0]
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80070fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007102:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007106:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800710a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	441a      	add	r2, r3
 8007120:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007124:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007128:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800712c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007134:	b29b      	uxth	r3, r3
 8007136:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007138:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800713c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007148:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007152:	b29b      	uxth	r3, r3
 8007154:	461a      	mov	r2, r3
 8007156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007158:	4413      	add	r3, r2
 800715a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800715c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007160:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	00da      	lsls	r2, r3, #3
 800716a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800716c:	4413      	add	r3, r2
 800716e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007172:	65bb      	str	r3, [r7, #88]	; 0x58
 8007174:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007178:	b29a      	uxth	r2, r3
 800717a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800717c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800717e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007182:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	891b      	ldrh	r3, [r3, #8]
 800718a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800718e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	6959      	ldr	r1, [r3, #20]
 800719a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800719e:	b29b      	uxth	r3, r3
 80071a0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80071a4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80071a8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80071ac:	6800      	ldr	r0, [r0, #0]
 80071ae:	f001 f82a 	bl	8008206 <USB_WritePMA>
 80071b2:	e1b3      	b.n	800751c <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80071b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	6a1a      	ldr	r2, [r3, #32]
 80071c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071c4:	1ad2      	subs	r2, r2, r3
 80071c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80071d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	4413      	add	r3, r2
 80071ec:	881b      	ldrh	r3, [r3, #0]
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f000 80c6 	beq.w	8007386 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80071fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	673b      	str	r3, [r7, #112]	; 0x70
 8007206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800720a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	785b      	ldrb	r3, [r3, #1]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d177      	bne.n	8007306 <USB_EPStartXfer+0xb18>
 8007216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800721a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	66bb      	str	r3, [r7, #104]	; 0x68
 8007222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007226:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007230:	b29b      	uxth	r3, r3
 8007232:	461a      	mov	r2, r3
 8007234:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007236:	4413      	add	r3, r2
 8007238:	66bb      	str	r3, [r7, #104]	; 0x68
 800723a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800723e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	00da      	lsls	r2, r3, #3
 8007248:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800724a:	4413      	add	r3, r2
 800724c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007250:	667b      	str	r3, [r7, #100]	; 0x64
 8007252:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007254:	881b      	ldrh	r3, [r3, #0]
 8007256:	b29b      	uxth	r3, r3
 8007258:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800725c:	b29a      	uxth	r2, r3
 800725e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007260:	801a      	strh	r2, [r3, #0]
 8007262:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007266:	2b3e      	cmp	r3, #62	; 0x3e
 8007268:	d921      	bls.n	80072ae <USB_EPStartXfer+0xac0>
 800726a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800726e:	095b      	lsrs	r3, r3, #5
 8007270:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007274:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007278:	f003 031f 	and.w	r3, r3, #31
 800727c:	2b00      	cmp	r3, #0
 800727e:	d104      	bne.n	800728a <USB_EPStartXfer+0xa9c>
 8007280:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007284:	3b01      	subs	r3, #1
 8007286:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800728a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800728c:	881b      	ldrh	r3, [r3, #0]
 800728e:	b29a      	uxth	r2, r3
 8007290:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007294:	b29b      	uxth	r3, r3
 8007296:	029b      	lsls	r3, r3, #10
 8007298:	b29b      	uxth	r3, r3
 800729a:	4313      	orrs	r3, r2
 800729c:	b29b      	uxth	r3, r3
 800729e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072a6:	b29a      	uxth	r2, r3
 80072a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072aa:	801a      	strh	r2, [r3, #0]
 80072ac:	e050      	b.n	8007350 <USB_EPStartXfer+0xb62>
 80072ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10a      	bne.n	80072cc <USB_EPStartXfer+0xade>
 80072b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072b8:	881b      	ldrh	r3, [r3, #0]
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072c8:	801a      	strh	r2, [r3, #0]
 80072ca:	e041      	b.n	8007350 <USB_EPStartXfer+0xb62>
 80072cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072d0:	085b      	lsrs	r3, r3, #1
 80072d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80072d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072da:	f003 0301 	and.w	r3, r3, #1
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d004      	beq.n	80072ec <USB_EPStartXfer+0xafe>
 80072e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80072e6:	3301      	adds	r3, #1
 80072e8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80072ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072ee:	881b      	ldrh	r3, [r3, #0]
 80072f0:	b29a      	uxth	r2, r3
 80072f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	029b      	lsls	r3, r3, #10
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	4313      	orrs	r3, r2
 80072fe:	b29a      	uxth	r2, r3
 8007300:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007302:	801a      	strh	r2, [r3, #0]
 8007304:	e024      	b.n	8007350 <USB_EPStartXfer+0xb62>
 8007306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800730a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	785b      	ldrb	r3, [r3, #1]
 8007312:	2b01      	cmp	r3, #1
 8007314:	d11c      	bne.n	8007350 <USB_EPStartXfer+0xb62>
 8007316:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800731a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007324:	b29b      	uxth	r3, r3
 8007326:	461a      	mov	r2, r3
 8007328:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800732a:	4413      	add	r3, r2
 800732c:	673b      	str	r3, [r7, #112]	; 0x70
 800732e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007332:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	00da      	lsls	r2, r3, #3
 800733c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800733e:	4413      	add	r3, r2
 8007340:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007344:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007346:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800734a:	b29a      	uxth	r2, r3
 800734c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800734e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007354:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	895b      	ldrh	r3, [r3, #10]
 800735c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007364:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	6959      	ldr	r1, [r3, #20]
 800736c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007370:	b29b      	uxth	r3, r3
 8007372:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007376:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800737a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800737e:	6800      	ldr	r0, [r0, #0]
 8007380:	f000 ff41 	bl	8008206 <USB_WritePMA>
 8007384:	e0ca      	b.n	800751c <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800738a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	785b      	ldrb	r3, [r3, #1]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d177      	bne.n	8007486 <USB_EPStartXfer+0xc98>
 8007396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800739a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80073a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	461a      	mov	r2, r3
 80073b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80073b6:	4413      	add	r3, r2
 80073b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80073ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	00da      	lsls	r2, r3, #3
 80073c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80073ca:	4413      	add	r3, r2
 80073cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80073d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80073d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073d4:	881b      	ldrh	r3, [r3, #0]
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073dc:	b29a      	uxth	r2, r3
 80073de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073e0:	801a      	strh	r2, [r3, #0]
 80073e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073e6:	2b3e      	cmp	r3, #62	; 0x3e
 80073e8:	d921      	bls.n	800742e <USB_EPStartXfer+0xc40>
 80073ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073ee:	095b      	lsrs	r3, r3, #5
 80073f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80073f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073f8:	f003 031f 	and.w	r3, r3, #31
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d104      	bne.n	800740a <USB_EPStartXfer+0xc1c>
 8007400:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007404:	3b01      	subs	r3, #1
 8007406:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800740a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800740c:	881b      	ldrh	r3, [r3, #0]
 800740e:	b29a      	uxth	r2, r3
 8007410:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007414:	b29b      	uxth	r3, r3
 8007416:	029b      	lsls	r3, r3, #10
 8007418:	b29b      	uxth	r3, r3
 800741a:	4313      	orrs	r3, r2
 800741c:	b29b      	uxth	r3, r3
 800741e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007422:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007426:	b29a      	uxth	r2, r3
 8007428:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800742a:	801a      	strh	r2, [r3, #0]
 800742c:	e05c      	b.n	80074e8 <USB_EPStartXfer+0xcfa>
 800742e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007432:	2b00      	cmp	r3, #0
 8007434:	d10a      	bne.n	800744c <USB_EPStartXfer+0xc5e>
 8007436:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007438:	881b      	ldrh	r3, [r3, #0]
 800743a:	b29b      	uxth	r3, r3
 800743c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007440:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007444:	b29a      	uxth	r2, r3
 8007446:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007448:	801a      	strh	r2, [r3, #0]
 800744a:	e04d      	b.n	80074e8 <USB_EPStartXfer+0xcfa>
 800744c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007450:	085b      	lsrs	r3, r3, #1
 8007452:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007456:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800745a:	f003 0301 	and.w	r3, r3, #1
 800745e:	2b00      	cmp	r3, #0
 8007460:	d004      	beq.n	800746c <USB_EPStartXfer+0xc7e>
 8007462:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007466:	3301      	adds	r3, #1
 8007468:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800746c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800746e:	881b      	ldrh	r3, [r3, #0]
 8007470:	b29a      	uxth	r2, r3
 8007472:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007476:	b29b      	uxth	r3, r3
 8007478:	029b      	lsls	r3, r3, #10
 800747a:	b29b      	uxth	r3, r3
 800747c:	4313      	orrs	r3, r2
 800747e:	b29a      	uxth	r2, r3
 8007480:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007482:	801a      	strh	r2, [r3, #0]
 8007484:	e030      	b.n	80074e8 <USB_EPStartXfer+0xcfa>
 8007486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800748a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	785b      	ldrb	r3, [r3, #1]
 8007492:	2b01      	cmp	r3, #1
 8007494:	d128      	bne.n	80074e8 <USB_EPStartXfer+0xcfa>
 8007496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800749a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80074a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	461a      	mov	r2, r3
 80074b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074ba:	4413      	add	r3, r2
 80074bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80074c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	00da      	lsls	r2, r3, #3
 80074ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074d2:	4413      	add	r3, r2
 80074d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80074d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80074dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80074e6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80074e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	891b      	ldrh	r3, [r3, #8]
 80074f4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	6959      	ldr	r1, [r3, #20]
 8007504:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007508:	b29b      	uxth	r3, r3
 800750a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800750e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007512:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007516:	6800      	ldr	r0, [r0, #0]
 8007518:	f000 fe75 	bl	8008206 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800751c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007520:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800752a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	4413      	add	r3, r2
 8007536:	881b      	ldrh	r3, [r3, #0]
 8007538:	b29b      	uxth	r3, r3
 800753a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800753e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007542:	817b      	strh	r3, [r7, #10]
 8007544:	897b      	ldrh	r3, [r7, #10]
 8007546:	f083 0310 	eor.w	r3, r3, #16
 800754a:	817b      	strh	r3, [r7, #10]
 800754c:	897b      	ldrh	r3, [r7, #10]
 800754e:	f083 0320 	eor.w	r3, r3, #32
 8007552:	817b      	strh	r3, [r7, #10]
 8007554:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007558:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007562:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	441a      	add	r2, r3
 800756e:	897b      	ldrh	r3, [r7, #10]
 8007570:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007574:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007578:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800757c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007580:	b29b      	uxth	r3, r3
 8007582:	8013      	strh	r3, [r2, #0]
 8007584:	f000 bcde 	b.w	8007f44 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800758c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	7b1b      	ldrb	r3, [r3, #12]
 8007594:	2b00      	cmp	r3, #0
 8007596:	f040 80bb 	bne.w	8007710 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800759a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800759e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	699a      	ldr	r2, [r3, #24]
 80075a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d917      	bls.n	80075e6 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80075b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80075c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	699a      	ldr	r2, [r3, #24]
 80075d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075d6:	1ad2      	subs	r2, r2, r3
 80075d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	619a      	str	r2, [r3, #24]
 80075e4:	e00e      	b.n	8007604 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80075e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	699b      	ldr	r3, [r3, #24]
 80075f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80075f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2200      	movs	r2, #0
 8007602:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007608:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007616:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007620:	b29b      	uxth	r3, r3
 8007622:	461a      	mov	r2, r3
 8007624:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007628:	4413      	add	r3, r2
 800762a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800762e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007632:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	00da      	lsls	r2, r3, #3
 800763c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007640:	4413      	add	r3, r2
 8007642:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007646:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800764a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800764e:	881b      	ldrh	r3, [r3, #0]
 8007650:	b29b      	uxth	r3, r3
 8007652:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007656:	b29a      	uxth	r2, r3
 8007658:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800765c:	801a      	strh	r2, [r3, #0]
 800765e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007662:	2b3e      	cmp	r3, #62	; 0x3e
 8007664:	d924      	bls.n	80076b0 <USB_EPStartXfer+0xec2>
 8007666:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800766a:	095b      	lsrs	r3, r3, #5
 800766c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007674:	f003 031f 	and.w	r3, r3, #31
 8007678:	2b00      	cmp	r3, #0
 800767a:	d104      	bne.n	8007686 <USB_EPStartXfer+0xe98>
 800767c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007680:	3b01      	subs	r3, #1
 8007682:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007686:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800768a:	881b      	ldrh	r3, [r3, #0]
 800768c:	b29a      	uxth	r2, r3
 800768e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007692:	b29b      	uxth	r3, r3
 8007694:	029b      	lsls	r3, r3, #10
 8007696:	b29b      	uxth	r3, r3
 8007698:	4313      	orrs	r3, r2
 800769a:	b29b      	uxth	r3, r3
 800769c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076aa:	801a      	strh	r2, [r3, #0]
 80076ac:	f000 bc10 	b.w	8007ed0 <USB_EPStartXfer+0x16e2>
 80076b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d10c      	bne.n	80076d2 <USB_EPStartXfer+0xee4>
 80076b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076bc:	881b      	ldrh	r3, [r3, #0]
 80076be:	b29b      	uxth	r3, r3
 80076c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076c8:	b29a      	uxth	r2, r3
 80076ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076ce:	801a      	strh	r2, [r3, #0]
 80076d0:	e3fe      	b.n	8007ed0 <USB_EPStartXfer+0x16e2>
 80076d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076d6:	085b      	lsrs	r3, r3, #1
 80076d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80076dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076e0:	f003 0301 	and.w	r3, r3, #1
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d004      	beq.n	80076f2 <USB_EPStartXfer+0xf04>
 80076e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80076ec:	3301      	adds	r3, #1
 80076ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80076f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076f6:	881b      	ldrh	r3, [r3, #0]
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80076fe:	b29b      	uxth	r3, r3
 8007700:	029b      	lsls	r3, r3, #10
 8007702:	b29b      	uxth	r3, r3
 8007704:	4313      	orrs	r3, r2
 8007706:	b29a      	uxth	r2, r3
 8007708:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800770c:	801a      	strh	r2, [r3, #0]
 800770e:	e3df      	b.n	8007ed0 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007714:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	78db      	ldrb	r3, [r3, #3]
 800771c:	2b02      	cmp	r3, #2
 800771e:	f040 8218 	bne.w	8007b52 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007726:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	785b      	ldrb	r3, [r3, #1]
 800772e:	2b00      	cmp	r3, #0
 8007730:	f040 809d 	bne.w	800786e <USB_EPStartXfer+0x1080>
 8007734:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007738:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007746:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007750:	b29b      	uxth	r3, r3
 8007752:	461a      	mov	r2, r3
 8007754:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007758:	4413      	add	r3, r2
 800775a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800775e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007762:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	00da      	lsls	r2, r3, #3
 800776c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007770:	4413      	add	r3, r2
 8007772:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007776:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800777a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800777e:	881b      	ldrh	r3, [r3, #0]
 8007780:	b29b      	uxth	r3, r3
 8007782:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007786:	b29a      	uxth	r2, r3
 8007788:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800778c:	801a      	strh	r2, [r3, #0]
 800778e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007792:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	2b3e      	cmp	r3, #62	; 0x3e
 800779c:	d92b      	bls.n	80077f6 <USB_EPStartXfer+0x1008>
 800779e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	095b      	lsrs	r3, r3, #5
 80077ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80077b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	f003 031f 	and.w	r3, r3, #31
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d104      	bne.n	80077ce <USB_EPStartXfer+0xfe0>
 80077c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077c8:	3b01      	subs	r3, #1
 80077ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80077ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80077d2:	881b      	ldrh	r3, [r3, #0]
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077da:	b29b      	uxth	r3, r3
 80077dc:	029b      	lsls	r3, r3, #10
 80077de:	b29b      	uxth	r3, r3
 80077e0:	4313      	orrs	r3, r2
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077ec:	b29a      	uxth	r2, r3
 80077ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80077f2:	801a      	strh	r2, [r3, #0]
 80077f4:	e070      	b.n	80078d8 <USB_EPStartXfer+0x10ea>
 80077f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d10c      	bne.n	8007820 <USB_EPStartXfer+0x1032>
 8007806:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800780a:	881b      	ldrh	r3, [r3, #0]
 800780c:	b29b      	uxth	r3, r3
 800780e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007812:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007816:	b29a      	uxth	r2, r3
 8007818:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800781c:	801a      	strh	r2, [r3, #0]
 800781e:	e05b      	b.n	80078d8 <USB_EPStartXfer+0x10ea>
 8007820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007824:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	085b      	lsrs	r3, r3, #1
 800782e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007836:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	691b      	ldr	r3, [r3, #16]
 800783e:	f003 0301 	and.w	r3, r3, #1
 8007842:	2b00      	cmp	r3, #0
 8007844:	d004      	beq.n	8007850 <USB_EPStartXfer+0x1062>
 8007846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800784a:	3301      	adds	r3, #1
 800784c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007850:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007854:	881b      	ldrh	r3, [r3, #0]
 8007856:	b29a      	uxth	r2, r3
 8007858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800785c:	b29b      	uxth	r3, r3
 800785e:	029b      	lsls	r3, r3, #10
 8007860:	b29b      	uxth	r3, r3
 8007862:	4313      	orrs	r3, r2
 8007864:	b29a      	uxth	r2, r3
 8007866:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800786a:	801a      	strh	r2, [r3, #0]
 800786c:	e034      	b.n	80078d8 <USB_EPStartXfer+0x10ea>
 800786e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007872:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	785b      	ldrb	r3, [r3, #1]
 800787a:	2b01      	cmp	r3, #1
 800787c:	d12c      	bne.n	80078d8 <USB_EPStartXfer+0x10ea>
 800787e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007882:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800788c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007890:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800789a:	b29b      	uxth	r3, r3
 800789c:	461a      	mov	r2, r3
 800789e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80078a2:	4413      	add	r3, r2
 80078a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	00da      	lsls	r2, r3, #3
 80078b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80078ba:	4413      	add	r3, r2
 80078bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80078c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	b29a      	uxth	r2, r3
 80078d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80078d6:	801a      	strh	r2, [r3, #0]
 80078d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80078e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	785b      	ldrb	r3, [r3, #1]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f040 809d 	bne.w	8007a32 <USB_EPStartXfer+0x1244>
 80078f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800790a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007914:	b29b      	uxth	r3, r3
 8007916:	461a      	mov	r2, r3
 8007918:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800791c:	4413      	add	r3, r2
 800791e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007922:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007926:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	00da      	lsls	r2, r3, #3
 8007930:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007934:	4413      	add	r3, r2
 8007936:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800793a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800793e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007942:	881b      	ldrh	r3, [r3, #0]
 8007944:	b29b      	uxth	r3, r3
 8007946:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800794a:	b29a      	uxth	r2, r3
 800794c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007950:	801a      	strh	r2, [r3, #0]
 8007952:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007956:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	2b3e      	cmp	r3, #62	; 0x3e
 8007960:	d92b      	bls.n	80079ba <USB_EPStartXfer+0x11cc>
 8007962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007966:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	095b      	lsrs	r3, r3, #5
 8007970:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007978:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	f003 031f 	and.w	r3, r3, #31
 8007984:	2b00      	cmp	r3, #0
 8007986:	d104      	bne.n	8007992 <USB_EPStartXfer+0x11a4>
 8007988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800798c:	3b01      	subs	r3, #1
 800798e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007992:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007996:	881b      	ldrh	r3, [r3, #0]
 8007998:	b29a      	uxth	r2, r3
 800799a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800799e:	b29b      	uxth	r3, r3
 80079a0:	029b      	lsls	r3, r3, #10
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	4313      	orrs	r3, r2
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079b0:	b29a      	uxth	r2, r3
 80079b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079b6:	801a      	strh	r2, [r3, #0]
 80079b8:	e069      	b.n	8007a8e <USB_EPStartXfer+0x12a0>
 80079ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d10c      	bne.n	80079e4 <USB_EPStartXfer+0x11f6>
 80079ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079ce:	881b      	ldrh	r3, [r3, #0]
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079da:	b29a      	uxth	r2, r3
 80079dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079e0:	801a      	strh	r2, [r3, #0]
 80079e2:	e054      	b.n	8007a8e <USB_EPStartXfer+0x12a0>
 80079e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	085b      	lsrs	r3, r3, #1
 80079f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80079f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	f003 0301 	and.w	r3, r3, #1
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d004      	beq.n	8007a14 <USB_EPStartXfer+0x1226>
 8007a0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a0e:	3301      	adds	r3, #1
 8007a10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007a14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a18:	881b      	ldrh	r3, [r3, #0]
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	029b      	lsls	r3, r3, #10
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	4313      	orrs	r3, r2
 8007a28:	b29a      	uxth	r2, r3
 8007a2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a2e:	801a      	strh	r2, [r3, #0]
 8007a30:	e02d      	b.n	8007a8e <USB_EPStartXfer+0x12a0>
 8007a32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	785b      	ldrb	r3, [r3, #1]
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d125      	bne.n	8007a8e <USB_EPStartXfer+0x12a0>
 8007a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	461a      	mov	r2, r3
 8007a54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007a58:	4413      	add	r3, r2
 8007a5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	00da      	lsls	r2, r3, #3
 8007a6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007a70:	4413      	add	r3, r2
 8007a72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007a7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	b29a      	uxth	r2, r3
 8007a88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007a8c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007a8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	69db      	ldr	r3, [r3, #28]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	f000 8218 	beq.w	8007ed0 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007aa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aa4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	4413      	add	r3, r2
 8007aba:	881b      	ldrh	r3, [r3, #0]
 8007abc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007ac0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007ac4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d005      	beq.n	8007ad8 <USB_EPStartXfer+0x12ea>
 8007acc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d10d      	bne.n	8007af4 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007ad8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007adc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f040 81f5 	bne.w	8007ed0 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007ae6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	f040 81ee 	bne.w	8007ed0 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007af4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007af8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	4413      	add	r3, r2
 8007b0e:	881b      	ldrh	r3, [r3, #0]
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b1a:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007b1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	441a      	add	r2, r3
 8007b38:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007b3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	8013      	strh	r3, [r2, #0]
 8007b50:	e1be      	b.n	8007ed0 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007b52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	78db      	ldrb	r3, [r3, #3]
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	f040 81b4 	bne.w	8007ecc <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	699a      	ldr	r2, [r3, #24]
 8007b70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d917      	bls.n	8007bb0 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007b80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007b90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	699a      	ldr	r2, [r3, #24]
 8007b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ba0:	1ad2      	subs	r2, r2, r3
 8007ba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ba6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	619a      	str	r2, [r3, #24]
 8007bae:	e00e      	b.n	8007bce <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	699b      	ldr	r3, [r3, #24]
 8007bbc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007bc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	785b      	ldrb	r3, [r3, #1]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	f040 8085 	bne.w	8007cea <USB_EPStartXfer+0x14fc>
 8007be0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007be4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007bee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bf2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	461a      	mov	r2, r3
 8007c00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007c04:	4413      	add	r3, r2
 8007c06:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007c0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	00da      	lsls	r2, r3, #3
 8007c18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007c1c:	4413      	add	r3, r2
 8007c1e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007c22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c2a:	881b      	ldrh	r3, [r3, #0]
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c32:	b29a      	uxth	r2, r3
 8007c34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c38:	801a      	strh	r2, [r3, #0]
 8007c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c3e:	2b3e      	cmp	r3, #62	; 0x3e
 8007c40:	d923      	bls.n	8007c8a <USB_EPStartXfer+0x149c>
 8007c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c46:	095b      	lsrs	r3, r3, #5
 8007c48:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c50:	f003 031f 	and.w	r3, r3, #31
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d104      	bne.n	8007c62 <USB_EPStartXfer+0x1474>
 8007c58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007c62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c66:	881b      	ldrh	r3, [r3, #0]
 8007c68:	b29a      	uxth	r2, r3
 8007c6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	029b      	lsls	r3, r3, #10
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	4313      	orrs	r3, r2
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c86:	801a      	strh	r2, [r3, #0]
 8007c88:	e060      	b.n	8007d4c <USB_EPStartXfer+0x155e>
 8007c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d10c      	bne.n	8007cac <USB_EPStartXfer+0x14be>
 8007c92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c96:	881b      	ldrh	r3, [r3, #0]
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ca8:	801a      	strh	r2, [r3, #0]
 8007caa:	e04f      	b.n	8007d4c <USB_EPStartXfer+0x155e>
 8007cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cb0:	085b      	lsrs	r3, r3, #1
 8007cb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cba:	f003 0301 	and.w	r3, r3, #1
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d004      	beq.n	8007ccc <USB_EPStartXfer+0x14de>
 8007cc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007ccc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007cd0:	881b      	ldrh	r3, [r3, #0]
 8007cd2:	b29a      	uxth	r2, r3
 8007cd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	029b      	lsls	r3, r3, #10
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ce6:	801a      	strh	r2, [r3, #0]
 8007ce8:	e030      	b.n	8007d4c <USB_EPStartXfer+0x155e>
 8007cea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	785b      	ldrb	r3, [r3, #1]
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d128      	bne.n	8007d4c <USB_EPStartXfer+0x155e>
 8007cfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cfe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007d08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	461a      	mov	r2, r3
 8007d1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d1e:	4413      	add	r3, r2
 8007d20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007d24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	00da      	lsls	r2, r3, #3
 8007d32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d36:	4413      	add	r3, r2
 8007d38:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007d3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007d4a:	801a      	strh	r2, [r3, #0]
 8007d4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	785b      	ldrb	r3, [r3, #1]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	f040 8085 	bne.w	8007e76 <USB_EPStartXfer+0x1688>
 8007d6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007d7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007d90:	4413      	add	r3, r2
 8007d92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007d96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	00da      	lsls	r2, r3, #3
 8007da4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007da8:	4413      	add	r3, r2
 8007daa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007dae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007db2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007db6:	881b      	ldrh	r3, [r3, #0]
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007dc4:	801a      	strh	r2, [r3, #0]
 8007dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dca:	2b3e      	cmp	r3, #62	; 0x3e
 8007dcc:	d923      	bls.n	8007e16 <USB_EPStartXfer+0x1628>
 8007dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dd2:	095b      	lsrs	r3, r3, #5
 8007dd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ddc:	f003 031f 	and.w	r3, r3, #31
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d104      	bne.n	8007dee <USB_EPStartXfer+0x1600>
 8007de4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007de8:	3b01      	subs	r3, #1
 8007dea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007dee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007df2:	881b      	ldrh	r3, [r3, #0]
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	029b      	lsls	r3, r3, #10
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	4313      	orrs	r3, r2
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e0c:	b29a      	uxth	r2, r3
 8007e0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e12:	801a      	strh	r2, [r3, #0]
 8007e14:	e05c      	b.n	8007ed0 <USB_EPStartXfer+0x16e2>
 8007e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d10c      	bne.n	8007e38 <USB_EPStartXfer+0x164a>
 8007e1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e22:	881b      	ldrh	r3, [r3, #0]
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e34:	801a      	strh	r2, [r3, #0]
 8007e36:	e04b      	b.n	8007ed0 <USB_EPStartXfer+0x16e2>
 8007e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e3c:	085b      	lsrs	r3, r3, #1
 8007e3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e46:	f003 0301 	and.w	r3, r3, #1
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d004      	beq.n	8007e58 <USB_EPStartXfer+0x166a>
 8007e4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e52:	3301      	adds	r3, #1
 8007e54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007e58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e5c:	881b      	ldrh	r3, [r3, #0]
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	029b      	lsls	r3, r3, #10
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e72:	801a      	strh	r2, [r3, #0]
 8007e74:	e02c      	b.n	8007ed0 <USB_EPStartXfer+0x16e2>
 8007e76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	785b      	ldrb	r3, [r3, #1]
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d124      	bne.n	8007ed0 <USB_EPStartXfer+0x16e2>
 8007e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	461a      	mov	r2, r3
 8007e98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e9c:	4413      	add	r3, r2
 8007e9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ea6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	00da      	lsls	r2, r3, #3
 8007eb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007eb4:	4413      	add	r3, r2
 8007eb6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007eba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ec2:	b29a      	uxth	r2, r3
 8007ec4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007ec8:	801a      	strh	r2, [r3, #0]
 8007eca:	e001      	b.n	8007ed0 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e03a      	b.n	8007f46 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007ed0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ed4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ede:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	4413      	add	r3, r2
 8007eea:	881b      	ldrh	r3, [r3, #0]
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ef6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007efa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007efe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007f02:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007f06:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007f0a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007f0e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007f12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	441a      	add	r2, r3
 8007f2c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007f30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	785b      	ldrb	r3, [r3, #1]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d020      	beq.n	8007fa4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	4413      	add	r3, r2
 8007f6c:	881b      	ldrh	r3, [r3, #0]
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f78:	81bb      	strh	r3, [r7, #12]
 8007f7a:	89bb      	ldrh	r3, [r7, #12]
 8007f7c:	f083 0310 	eor.w	r3, r3, #16
 8007f80:	81bb      	strh	r3, [r7, #12]
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	441a      	add	r2, r3
 8007f8c:	89bb      	ldrh	r3, [r7, #12]
 8007f8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	8013      	strh	r3, [r2, #0]
 8007fa2:	e01f      	b.n	8007fe4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	4413      	add	r3, r2
 8007fae:	881b      	ldrh	r3, [r3, #0]
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fba:	81fb      	strh	r3, [r7, #14]
 8007fbc:	89fb      	ldrh	r3, [r7, #14]
 8007fbe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007fc2:	81fb      	strh	r3, [r7, #14]
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	441a      	add	r2, r3
 8007fce:	89fb      	ldrh	r3, [r7, #14]
 8007fd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3714      	adds	r7, #20
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr

08007ff2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007ff2:	b480      	push	{r7}
 8007ff4:	b087      	sub	sp, #28
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
 8007ffa:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	7b1b      	ldrb	r3, [r3, #12]
 8008000:	2b00      	cmp	r3, #0
 8008002:	f040 809d 	bne.w	8008140 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	785b      	ldrb	r3, [r3, #1]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d04c      	beq.n	80080a8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	4413      	add	r3, r2
 8008018:	881b      	ldrh	r3, [r3, #0]
 800801a:	823b      	strh	r3, [r7, #16]
 800801c:	8a3b      	ldrh	r3, [r7, #16]
 800801e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008022:	2b00      	cmp	r3, #0
 8008024:	d01b      	beq.n	800805e <USB_EPClearStall+0x6c>
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	4413      	add	r3, r2
 8008030:	881b      	ldrh	r3, [r3, #0]
 8008032:	b29b      	uxth	r3, r3
 8008034:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008038:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800803c:	81fb      	strh	r3, [r7, #14]
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	441a      	add	r2, r3
 8008048:	89fb      	ldrh	r3, [r7, #14]
 800804a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800804e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008056:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800805a:	b29b      	uxth	r3, r3
 800805c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	78db      	ldrb	r3, [r3, #3]
 8008062:	2b01      	cmp	r3, #1
 8008064:	d06c      	beq.n	8008140 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	4413      	add	r3, r2
 8008070:	881b      	ldrh	r3, [r3, #0]
 8008072:	b29b      	uxth	r3, r3
 8008074:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008078:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800807c:	81bb      	strh	r3, [r7, #12]
 800807e:	89bb      	ldrh	r3, [r7, #12]
 8008080:	f083 0320 	eor.w	r3, r3, #32
 8008084:	81bb      	strh	r3, [r7, #12]
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	441a      	add	r2, r3
 8008090:	89bb      	ldrh	r3, [r7, #12]
 8008092:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008096:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800809a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800809e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	8013      	strh	r3, [r2, #0]
 80080a6:	e04b      	b.n	8008140 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	4413      	add	r3, r2
 80080b2:	881b      	ldrh	r3, [r3, #0]
 80080b4:	82fb      	strh	r3, [r7, #22]
 80080b6:	8afb      	ldrh	r3, [r7, #22]
 80080b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d01b      	beq.n	80080f8 <USB_EPClearStall+0x106>
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	4413      	add	r3, r2
 80080ca:	881b      	ldrh	r3, [r3, #0]
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080d6:	82bb      	strh	r3, [r7, #20]
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	441a      	add	r2, r3
 80080e2:	8abb      	ldrh	r3, [r7, #20]
 80080e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80080f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	4413      	add	r3, r2
 8008102:	881b      	ldrh	r3, [r3, #0]
 8008104:	b29b      	uxth	r3, r3
 8008106:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800810a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800810e:	827b      	strh	r3, [r7, #18]
 8008110:	8a7b      	ldrh	r3, [r7, #18]
 8008112:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008116:	827b      	strh	r3, [r7, #18]
 8008118:	8a7b      	ldrh	r3, [r7, #18]
 800811a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800811e:	827b      	strh	r3, [r7, #18]
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	441a      	add	r2, r3
 800812a:	8a7b      	ldrh	r3, [r7, #18]
 800812c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008130:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008134:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800813c:	b29b      	uxth	r3, r3
 800813e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	371c      	adds	r7, #28
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr

0800814e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800814e:	b480      	push	{r7}
 8008150:	b083      	sub	sp, #12
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
 8008156:	460b      	mov	r3, r1
 8008158:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800815a:	78fb      	ldrb	r3, [r7, #3]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d103      	bne.n	8008168 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2280      	movs	r2, #128	; 0x80
 8008164:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	370c      	adds	r7, #12
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr

08008176 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008176:	b480      	push	{r7}
 8008178:	b083      	sub	sp, #12
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008184:	b29b      	uxth	r3, r3
 8008186:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800818a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800818e:	b29a      	uxth	r2, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	370c      	adds	r7, #12
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80081b8:	b29a      	uxth	r2, r3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80081c0:	2300      	movs	r3, #0
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	370c      	adds	r7, #12
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr

080081ce <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80081ce:	b480      	push	{r7}
 80081d0:	b085      	sub	sp, #20
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80081dc:	b29b      	uxth	r3, r3
 80081de:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80081e0:	68fb      	ldr	r3, [r7, #12]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3714      	adds	r7, #20
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr

080081ee <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80081ee:	b480      	push	{r7}
 80081f0:	b083      	sub	sp, #12
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
 80081f6:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	370c      	adds	r7, #12
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr

08008206 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008206:	b480      	push	{r7}
 8008208:	b08b      	sub	sp, #44	; 0x2c
 800820a:	af00      	add	r7, sp, #0
 800820c:	60f8      	str	r0, [r7, #12]
 800820e:	60b9      	str	r1, [r7, #8]
 8008210:	4611      	mov	r1, r2
 8008212:	461a      	mov	r2, r3
 8008214:	460b      	mov	r3, r1
 8008216:	80fb      	strh	r3, [r7, #6]
 8008218:	4613      	mov	r3, r2
 800821a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800821c:	88bb      	ldrh	r3, [r7, #4]
 800821e:	3301      	adds	r3, #1
 8008220:	085b      	lsrs	r3, r3, #1
 8008222:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800822c:	88fa      	ldrh	r2, [r7, #6]
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	4413      	add	r3, r2
 8008232:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008236:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008238:	69bb      	ldr	r3, [r7, #24]
 800823a:	627b      	str	r3, [r7, #36]	; 0x24
 800823c:	e01b      	b.n	8008276 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800823e:	69fb      	ldr	r3, [r7, #28]
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	3301      	adds	r3, #1
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	021b      	lsls	r3, r3, #8
 800824c:	b21a      	sxth	r2, r3
 800824e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008252:	4313      	orrs	r3, r2
 8008254:	b21b      	sxth	r3, r3
 8008256:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008258:	6a3b      	ldr	r3, [r7, #32]
 800825a:	8a7a      	ldrh	r2, [r7, #18]
 800825c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800825e:	6a3b      	ldr	r3, [r7, #32]
 8008260:	3302      	adds	r3, #2
 8008262:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	3301      	adds	r3, #1
 8008268:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	3301      	adds	r3, #1
 800826e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008272:	3b01      	subs	r3, #1
 8008274:	627b      	str	r3, [r7, #36]	; 0x24
 8008276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008278:	2b00      	cmp	r3, #0
 800827a:	d1e0      	bne.n	800823e <USB_WritePMA+0x38>
  }
}
 800827c:	bf00      	nop
 800827e:	bf00      	nop
 8008280:	372c      	adds	r7, #44	; 0x2c
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr

0800828a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800828a:	b480      	push	{r7}
 800828c:	b08b      	sub	sp, #44	; 0x2c
 800828e:	af00      	add	r7, sp, #0
 8008290:	60f8      	str	r0, [r7, #12]
 8008292:	60b9      	str	r1, [r7, #8]
 8008294:	4611      	mov	r1, r2
 8008296:	461a      	mov	r2, r3
 8008298:	460b      	mov	r3, r1
 800829a:	80fb      	strh	r3, [r7, #6]
 800829c:	4613      	mov	r3, r2
 800829e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80082a0:	88bb      	ldrh	r3, [r7, #4]
 80082a2:	085b      	lsrs	r3, r3, #1
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80082b0:	88fa      	ldrh	r2, [r7, #6]
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	4413      	add	r3, r2
 80082b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082ba:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	627b      	str	r3, [r7, #36]	; 0x24
 80082c0:	e018      	b.n	80082f4 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80082c2:	6a3b      	ldr	r3, [r7, #32]
 80082c4:	881b      	ldrh	r3, [r3, #0]
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80082ca:	6a3b      	ldr	r3, [r7, #32]
 80082cc:	3302      	adds	r3, #2
 80082ce:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	b2da      	uxtb	r2, r3
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	3301      	adds	r3, #1
 80082dc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	0a1b      	lsrs	r3, r3, #8
 80082e2:	b2da      	uxtb	r2, r3
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	3301      	adds	r3, #1
 80082ec:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80082ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f0:	3b01      	subs	r3, #1
 80082f2:	627b      	str	r3, [r7, #36]	; 0x24
 80082f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d1e3      	bne.n	80082c2 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80082fa:	88bb      	ldrh	r3, [r7, #4]
 80082fc:	f003 0301 	and.w	r3, r3, #1
 8008300:	b29b      	uxth	r3, r3
 8008302:	2b00      	cmp	r3, #0
 8008304:	d007      	beq.n	8008316 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8008306:	6a3b      	ldr	r3, [r7, #32]
 8008308:	881b      	ldrh	r3, [r3, #0]
 800830a:	b29b      	uxth	r3, r3
 800830c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	b2da      	uxtb	r2, r3
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	701a      	strb	r2, [r3, #0]
  }
}
 8008316:	bf00      	nop
 8008318:	372c      	adds	r7, #44	; 0x2c
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr
	...

08008324 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	460b      	mov	r3, r1
 800832e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8008330:	2024      	movs	r0, #36	; 0x24
 8008332:	f004 fd05 	bl	800cd40 <USBD_static_malloc>
 8008336:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d109      	bne.n	8008352 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	32b0      	adds	r2, #176	; 0xb0
 8008348:	2100      	movs	r1, #0
 800834a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800834e:	2302      	movs	r3, #2
 8008350:	e08b      	b.n	800846a <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	32b0      	adds	r2, #176	; 0xb0
 800835c:	68f9      	ldr	r1, [r7, #12]
 800835e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	32b0      	adds	r2, #176	; 0xb0
 800836c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	7c1b      	ldrb	r3, [r3, #16]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d11b      	bne.n	80083b6 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800837e:	4b3d      	ldr	r3, [pc, #244]	; (8008474 <USBD_CUSTOM_HID_Init+0x150>)
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	f003 020f 	and.w	r2, r3, #15
 8008386:	6879      	ldr	r1, [r7, #4]
 8008388:	4613      	mov	r3, r2
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	4413      	add	r3, r2
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	440b      	add	r3, r1
 8008392:	3326      	adds	r3, #38	; 0x26
 8008394:	2205      	movs	r2, #5
 8008396:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008398:	4b37      	ldr	r3, [pc, #220]	; (8008478 <USBD_CUSTOM_HID_Init+0x154>)
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	f003 020f 	and.w	r2, r3, #15
 80083a0:	6879      	ldr	r1, [r7, #4]
 80083a2:	4613      	mov	r3, r2
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	4413      	add	r3, r2
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	440b      	add	r3, r1
 80083ac:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80083b0:	2205      	movs	r2, #5
 80083b2:	801a      	strh	r2, [r3, #0]
 80083b4:	e01a      	b.n	80083ec <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80083b6:	4b2f      	ldr	r3, [pc, #188]	; (8008474 <USBD_CUSTOM_HID_Init+0x150>)
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	f003 020f 	and.w	r2, r3, #15
 80083be:	6879      	ldr	r1, [r7, #4]
 80083c0:	4613      	mov	r3, r2
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	4413      	add	r3, r2
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	440b      	add	r3, r1
 80083ca:	3326      	adds	r3, #38	; 0x26
 80083cc:	2205      	movs	r2, #5
 80083ce:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80083d0:	4b29      	ldr	r3, [pc, #164]	; (8008478 <USBD_CUSTOM_HID_Init+0x154>)
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	f003 020f 	and.w	r2, r3, #15
 80083d8:	6879      	ldr	r1, [r7, #4]
 80083da:	4613      	mov	r3, r2
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	4413      	add	r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	440b      	add	r3, r1
 80083e4:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80083e8:	2205      	movs	r2, #5
 80083ea:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 80083ec:	4b21      	ldr	r3, [pc, #132]	; (8008474 <USBD_CUSTOM_HID_Init+0x150>)
 80083ee:	7819      	ldrb	r1, [r3, #0]
 80083f0:	2302      	movs	r3, #2
 80083f2:	2203      	movs	r2, #3
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f004 fa6f 	bl	800c8d8 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 80083fa:	4b1e      	ldr	r3, [pc, #120]	; (8008474 <USBD_CUSTOM_HID_Init+0x150>)
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	f003 020f 	and.w	r2, r3, #15
 8008402:	6879      	ldr	r1, [r7, #4]
 8008404:	4613      	mov	r3, r2
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	4413      	add	r3, r2
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	440b      	add	r3, r1
 800840e:	3324      	adds	r3, #36	; 0x24
 8008410:	2201      	movs	r2, #1
 8008412:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8008414:	4b18      	ldr	r3, [pc, #96]	; (8008478 <USBD_CUSTOM_HID_Init+0x154>)
 8008416:	7819      	ldrb	r1, [r3, #0]
 8008418:	2302      	movs	r3, #2
 800841a:	2203      	movs	r2, #3
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f004 fa5b 	bl	800c8d8 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8008422:	4b15      	ldr	r3, [pc, #84]	; (8008478 <USBD_CUSTOM_HID_Init+0x154>)
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	f003 020f 	and.w	r2, r3, #15
 800842a:	6879      	ldr	r1, [r7, #4]
 800842c:	4613      	mov	r3, r2
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	4413      	add	r3, r2
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	440b      	add	r3, r1
 8008436:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800843a:	2201      	movs	r2, #1
 800843c:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2200      	movs	r2, #0
 8008442:	f883 2020 	strb.w	r2, [r3, #32]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	33b0      	adds	r3, #176	; 0xb0
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	4413      	add	r3, r2
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800845a:	4b07      	ldr	r3, [pc, #28]	; (8008478 <USBD_CUSTOM_HID_Init+0x154>)
 800845c:	7819      	ldrb	r1, [r3, #0]
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	230f      	movs	r3, #15
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f004 fbea 	bl	800cc3c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3710      	adds	r7, #16
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	200000a6 	.word	0x200000a6
 8008478:	200000a7 	.word	0x200000a7

0800847c <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	460b      	mov	r3, r1
 8008486:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8008488:	4b37      	ldr	r3, [pc, #220]	; (8008568 <USBD_CUSTOM_HID_DeInit+0xec>)
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	4619      	mov	r1, r3
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f004 fa60 	bl	800c954 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8008494:	4b34      	ldr	r3, [pc, #208]	; (8008568 <USBD_CUSTOM_HID_DeInit+0xec>)
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	f003 020f 	and.w	r2, r3, #15
 800849c:	6879      	ldr	r1, [r7, #4]
 800849e:	4613      	mov	r3, r2
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	4413      	add	r3, r2
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	440b      	add	r3, r1
 80084a8:	3324      	adds	r3, #36	; 0x24
 80084aa:	2200      	movs	r2, #0
 80084ac:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 80084ae:	4b2e      	ldr	r3, [pc, #184]	; (8008568 <USBD_CUSTOM_HID_DeInit+0xec>)
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	f003 020f 	and.w	r2, r3, #15
 80084b6:	6879      	ldr	r1, [r7, #4]
 80084b8:	4613      	mov	r3, r2
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	4413      	add	r3, r2
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	440b      	add	r3, r1
 80084c2:	3326      	adds	r3, #38	; 0x26
 80084c4:	2200      	movs	r2, #0
 80084c6:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 80084c8:	4b28      	ldr	r3, [pc, #160]	; (800856c <USBD_CUSTOM_HID_DeInit+0xf0>)
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	4619      	mov	r1, r3
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f004 fa40 	bl	800c954 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 80084d4:	4b25      	ldr	r3, [pc, #148]	; (800856c <USBD_CUSTOM_HID_DeInit+0xf0>)
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	f003 020f 	and.w	r2, r3, #15
 80084dc:	6879      	ldr	r1, [r7, #4]
 80084de:	4613      	mov	r3, r2
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	4413      	add	r3, r2
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	440b      	add	r3, r1
 80084e8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80084ec:	2200      	movs	r2, #0
 80084ee:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 80084f0:	4b1e      	ldr	r3, [pc, #120]	; (800856c <USBD_CUSTOM_HID_DeInit+0xf0>)
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	f003 020f 	and.w	r2, r3, #15
 80084f8:	6879      	ldr	r1, [r7, #4]
 80084fa:	4613      	mov	r3, r2
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	4413      	add	r3, r2
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	440b      	add	r3, r1
 8008504:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8008508:	2200      	movs	r2, #0
 800850a:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	32b0      	adds	r2, #176	; 0xb0
 8008516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d01f      	beq.n	800855e <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	33b0      	adds	r3, #176	; 0xb0
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	4413      	add	r3, r2
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	32b0      	adds	r2, #176	; 0xb0
 800853c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008540:	4618      	mov	r0, r3
 8008542:	f004 fc19 	bl	800cd78 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	32b0      	adds	r2, #176	; 0xb0
 8008550:	2100      	movs	r1, #0
 8008552:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	3708      	adds	r7, #8
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}
 8008568:	200000a6 	.word	0x200000a6
 800856c:	200000a7 	.word	0x200000a7

08008570 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b088      	sub	sp, #32
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	32b0      	adds	r2, #176	; 0xb0
 8008584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008588:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800858a:	2300      	movs	r3, #0
 800858c:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 800858e:	2300      	movs	r3, #0
 8008590:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8008592:	2300      	movs	r3, #0
 8008594:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8008596:	2300      	movs	r3, #0
 8008598:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d101      	bne.n	80085a4 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 80085a0:	2303      	movs	r3, #3
 80085a2:	e0f8      	b.n	8008796 <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d056      	beq.n	800865e <USBD_CUSTOM_HID_Setup+0xee>
 80085b0:	2b20      	cmp	r3, #32
 80085b2:	f040 80e8 	bne.w	8008786 <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	785b      	ldrb	r3, [r3, #1]
 80085ba:	3b02      	subs	r3, #2
 80085bc:	2b09      	cmp	r3, #9
 80085be:	d846      	bhi.n	800864e <USBD_CUSTOM_HID_Setup+0xde>
 80085c0:	a201      	add	r2, pc, #4	; (adr r2, 80085c8 <USBD_CUSTOM_HID_Setup+0x58>)
 80085c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c6:	bf00      	nop
 80085c8:	08008621 	.word	0x08008621
 80085cc:	080085ff 	.word	0x080085ff
 80085d0:	0800864f 	.word	0x0800864f
 80085d4:	0800864f 	.word	0x0800864f
 80085d8:	0800864f 	.word	0x0800864f
 80085dc:	0800864f 	.word	0x0800864f
 80085e0:	0800864f 	.word	0x0800864f
 80085e4:	08008631 	.word	0x08008631
 80085e8:	0800860f 	.word	0x0800860f
 80085ec:	080085f1 	.word	0x080085f1
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	885b      	ldrh	r3, [r3, #2]
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	461a      	mov	r2, r3
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	611a      	str	r2, [r3, #16]
          break;
 80085fc:	e02e      	b.n	800865c <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	3310      	adds	r3, #16
 8008602:	2201      	movs	r2, #1
 8008604:	4619      	mov	r1, r3
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f003 fd0e 	bl	800c028 <USBD_CtlSendData>
          break;
 800860c:	e026      	b.n	800865c <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	885b      	ldrh	r3, [r3, #2]
 8008612:	0a1b      	lsrs	r3, r3, #8
 8008614:	b29b      	uxth	r3, r3
 8008616:	b2db      	uxtb	r3, r3
 8008618:	461a      	mov	r2, r3
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	615a      	str	r2, [r3, #20]
          break;
 800861e:	e01d      	b.n	800865c <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	3314      	adds	r3, #20
 8008624:	2201      	movs	r2, #1
 8008626:	4619      	mov	r1, r3
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f003 fcfd 	bl	800c028 <USBD_CtlSendData>
          break;
 800862e:	e015      	b.n	800865c <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	2201      	movs	r2, #1
 8008634:	61da      	str	r2, [r3, #28]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8008636:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	88db      	ldrh	r3, [r3, #6]
 800863c:	2b0f      	cmp	r3, #15
 800863e:	bf28      	it	cs
 8008640:	230f      	movcs	r3, #15
 8008642:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8008644:	461a      	mov	r2, r3
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f003 fd1a 	bl	800c080 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 800864c:	e006      	b.n	800865c <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 800864e:	6839      	ldr	r1, [r7, #0]
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f003 fc78 	bl	800bf46 <USBD_CtlError>
          ret = USBD_FAIL;
 8008656:	2303      	movs	r3, #3
 8008658:	75fb      	strb	r3, [r7, #23]
          break;
 800865a:	bf00      	nop
      }
      break;
 800865c:	e09a      	b.n	8008794 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	785b      	ldrb	r3, [r3, #1]
 8008662:	2b0b      	cmp	r3, #11
 8008664:	f200 8086 	bhi.w	8008774 <USBD_CUSTOM_HID_Setup+0x204>
 8008668:	a201      	add	r2, pc, #4	; (adr r2, 8008670 <USBD_CUSTOM_HID_Setup+0x100>)
 800866a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800866e:	bf00      	nop
 8008670:	080086a1 	.word	0x080086a1
 8008674:	08008783 	.word	0x08008783
 8008678:	08008775 	.word	0x08008775
 800867c:	08008775 	.word	0x08008775
 8008680:	08008775 	.word	0x08008775
 8008684:	08008775 	.word	0x08008775
 8008688:	080086cb 	.word	0x080086cb
 800868c:	08008775 	.word	0x08008775
 8008690:	08008775 	.word	0x08008775
 8008694:	08008775 	.word	0x08008775
 8008698:	08008723 	.word	0x08008723
 800869c:	0800874d 	.word	0x0800874d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	2b03      	cmp	r3, #3
 80086aa:	d107      	bne.n	80086bc <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80086ac:	f107 030e 	add.w	r3, r7, #14
 80086b0:	2202      	movs	r2, #2
 80086b2:	4619      	mov	r1, r3
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f003 fcb7 	bl	800c028 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80086ba:	e063      	b.n	8008784 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 80086bc:	6839      	ldr	r1, [r7, #0]
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f003 fc41 	bl	800bf46 <USBD_CtlError>
            ret = USBD_FAIL;
 80086c4:	2303      	movs	r3, #3
 80086c6:	75fb      	strb	r3, [r7, #23]
          break;
 80086c8:	e05c      	b.n	8008784 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	885b      	ldrh	r3, [r3, #2]
 80086ce:	0a1b      	lsrs	r3, r3, #8
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	2b22      	cmp	r3, #34	; 0x22
 80086d4:	d110      	bne.n	80086f8 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	88db      	ldrh	r3, [r3, #6]
 80086da:	2b49      	cmp	r3, #73	; 0x49
 80086dc:	bf28      	it	cs
 80086de:	2349      	movcs	r3, #73	; 0x49
 80086e0:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	33b0      	adds	r3, #176	; 0xb0
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	4413      	add	r3, r2
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	61bb      	str	r3, [r7, #24]
 80086f6:	e00d      	b.n	8008714 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	885b      	ldrh	r3, [r3, #2]
 80086fc:	0a1b      	lsrs	r3, r3, #8
 80086fe:	b29b      	uxth	r3, r3
 8008700:	2b21      	cmp	r3, #33	; 0x21
 8008702:	d107      	bne.n	8008714 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8008704:	4b26      	ldr	r3, [pc, #152]	; (80087a0 <USBD_CUSTOM_HID_Setup+0x230>)
 8008706:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	88db      	ldrh	r3, [r3, #6]
 800870c:	2b09      	cmp	r3, #9
 800870e:	bf28      	it	cs
 8008710:	2309      	movcs	r3, #9
 8008712:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008714:	8bfb      	ldrh	r3, [r7, #30]
 8008716:	461a      	mov	r2, r3
 8008718:	69b9      	ldr	r1, [r7, #24]
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f003 fc84 	bl	800c028 <USBD_CtlSendData>
          break;
 8008720:	e030      	b.n	8008784 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008728:	b2db      	uxtb	r3, r3
 800872a:	2b03      	cmp	r3, #3
 800872c:	d107      	bne.n	800873e <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	3318      	adds	r3, #24
 8008732:	2201      	movs	r2, #1
 8008734:	4619      	mov	r1, r3
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f003 fc76 	bl	800c028 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800873c:	e022      	b.n	8008784 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800873e:	6839      	ldr	r1, [r7, #0]
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f003 fc00 	bl	800bf46 <USBD_CtlError>
            ret = USBD_FAIL;
 8008746:	2303      	movs	r3, #3
 8008748:	75fb      	strb	r3, [r7, #23]
          break;
 800874a:	e01b      	b.n	8008784 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008752:	b2db      	uxtb	r3, r3
 8008754:	2b03      	cmp	r3, #3
 8008756:	d106      	bne.n	8008766 <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	885b      	ldrh	r3, [r3, #2]
 800875c:	b2db      	uxtb	r3, r3
 800875e:	461a      	mov	r2, r3
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	619a      	str	r2, [r3, #24]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008764:	e00e      	b.n	8008784 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8008766:	6839      	ldr	r1, [r7, #0]
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f003 fbec 	bl	800bf46 <USBD_CtlError>
            ret = USBD_FAIL;
 800876e:	2303      	movs	r3, #3
 8008770:	75fb      	strb	r3, [r7, #23]
          break;
 8008772:	e007      	b.n	8008784 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008774:	6839      	ldr	r1, [r7, #0]
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f003 fbe5 	bl	800bf46 <USBD_CtlError>
          ret = USBD_FAIL;
 800877c:	2303      	movs	r3, #3
 800877e:	75fb      	strb	r3, [r7, #23]
          break;
 8008780:	e000      	b.n	8008784 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8008782:	bf00      	nop
      }
      break;
 8008784:	e006      	b.n	8008794 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8008786:	6839      	ldr	r1, [r7, #0]
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f003 fbdc 	bl	800bf46 <USBD_CtlError>
      ret = USBD_FAIL;
 800878e:	2303      	movs	r3, #3
 8008790:	75fb      	strb	r3, [r7, #23]
      break;
 8008792:	bf00      	nop
  }
  return (uint8_t)ret;
 8008794:	7dfb      	ldrb	r3, [r7, #23]
}
 8008796:	4618      	mov	r0, r3
 8008798:	3720      	adds	r7, #32
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	20000090 	.word	0x20000090

080087a4 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b086      	sub	sp, #24
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	4613      	mov	r3, r2
 80087b0:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	32b0      	adds	r2, #176	; 0xb0
 80087bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087c0:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d101      	bne.n	80087cc <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80087c8:	2303      	movs	r3, #3
 80087ca:	e019      	b.n	8008800 <USBD_CUSTOM_HID_SendReport+0x5c>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	2b03      	cmp	r3, #3
 80087d6:	d112      	bne.n	80087fe <USBD_CUSTOM_HID_SendReport+0x5a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d10b      	bne.n	80087fa <USBD_CUSTOM_HID_SendReport+0x56>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	2201      	movs	r2, #1
 80087e6:	f883 2020 	strb.w	r2, [r3, #32]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 80087ea:	4b07      	ldr	r3, [pc, #28]	; (8008808 <USBD_CUSTOM_HID_SendReport+0x64>)
 80087ec:	7819      	ldrb	r1, [r3, #0]
 80087ee:	88fb      	ldrh	r3, [r7, #6]
 80087f0:	68ba      	ldr	r2, [r7, #8]
 80087f2:	68f8      	ldr	r0, [r7, #12]
 80087f4:	f004 f9ea 	bl	800cbcc <USBD_LL_Transmit>
 80087f8:	e001      	b.n	80087fe <USBD_CUSTOM_HID_SendReport+0x5a>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 80087fa:	2301      	movs	r3, #1
 80087fc:	e000      	b.n	8008800 <USBD_CUSTOM_HID_SendReport+0x5c>
    }
  }
  return (uint8_t)USBD_OK;
 80087fe:	2300      	movs	r3, #0
}
 8008800:	4618      	mov	r0, r3
 8008802:	3718      	adds	r7, #24
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}
 8008808:	200000a6 	.word	0x200000a6

0800880c <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008814:	2181      	movs	r1, #129	; 0x81
 8008816:	4815      	ldr	r0, [pc, #84]	; (800886c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8008818:	f002 fd32 	bl	800b280 <USBD_GetEpDesc>
 800881c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800881e:	2101      	movs	r1, #1
 8008820:	4812      	ldr	r0, [pc, #72]	; (800886c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8008822:	f002 fd2d 	bl	800b280 <USBD_GetEpDesc>
 8008826:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d009      	beq.n	8008842 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2200      	movs	r2, #0
 8008832:	f042 0202 	orr.w	r2, r2, #2
 8008836:	711a      	strb	r2, [r3, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2205      	movs	r2, #5
 8008840:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d009      	beq.n	800885c <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	2200      	movs	r2, #0
 800884c:	f042 0202 	orr.w	r2, r2, #2
 8008850:	711a      	strb	r2, [r3, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	2205      	movs	r2, #5
 800885a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2229      	movs	r2, #41	; 0x29
 8008860:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008862:	4b02      	ldr	r3, [pc, #8]	; (800886c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8008864:	4618      	mov	r0, r3
 8008866:	3710      	adds	r7, #16
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	20000064 	.word	0x20000064

08008870 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008878:	2181      	movs	r1, #129	; 0x81
 800887a:	4815      	ldr	r0, [pc, #84]	; (80088d0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800887c:	f002 fd00 	bl	800b280 <USBD_GetEpDesc>
 8008880:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008882:	2101      	movs	r1, #1
 8008884:	4812      	ldr	r0, [pc, #72]	; (80088d0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8008886:	f002 fcfb 	bl	800b280 <USBD_GetEpDesc>
 800888a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d009      	beq.n	80088a6 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2200      	movs	r2, #0
 8008896:	f042 0202 	orr.w	r2, r2, #2
 800889a:	711a      	strb	r2, [r3, #4]
 800889c:	2200      	movs	r2, #0
 800889e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2205      	movs	r2, #5
 80088a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d009      	beq.n	80088c0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f042 0202 	orr.w	r2, r2, #2
 80088b4:	711a      	strb	r2, [r3, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	2205      	movs	r2, #5
 80088be:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2229      	movs	r2, #41	; 0x29
 80088c4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80088c6:	4b02      	ldr	r3, [pc, #8]	; (80088d0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3710      	adds	r7, #16
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	20000064 	.word	0x20000064

080088d4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80088dc:	2181      	movs	r1, #129	; 0x81
 80088de:	4815      	ldr	r0, [pc, #84]	; (8008934 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80088e0:	f002 fcce 	bl	800b280 <USBD_GetEpDesc>
 80088e4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80088e6:	2101      	movs	r1, #1
 80088e8:	4812      	ldr	r0, [pc, #72]	; (8008934 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80088ea:	f002 fcc9 	bl	800b280 <USBD_GetEpDesc>
 80088ee:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d009      	beq.n	800890a <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2200      	movs	r2, #0
 80088fa:	f042 0202 	orr.w	r2, r2, #2
 80088fe:	711a      	strb	r2, [r3, #4]
 8008900:	2200      	movs	r2, #0
 8008902:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2205      	movs	r2, #5
 8008908:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d009      	beq.n	8008924 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	2200      	movs	r2, #0
 8008914:	f042 0202 	orr.w	r2, r2, #2
 8008918:	711a      	strb	r2, [r3, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	2205      	movs	r2, #5
 8008922:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2229      	movs	r2, #41	; 0x29
 8008928:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800892a:	4b02      	ldr	r3, [pc, #8]	; (8008934 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 800892c:	4618      	mov	r0, r3
 800892e:	3710      	adds	r7, #16
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}
 8008934:	20000064 	.word	0x20000064

08008938 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	460b      	mov	r3, r1
 8008942:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	32b0      	adds	r2, #176	; 0xb0
 800894e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008952:	2200      	movs	r2, #0
 8008954:	f883 2020 	strb.w	r2, [r3, #32]

  return (uint8_t)USBD_OK;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	370c      	adds	r7, #12
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr

08008966 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008966:	b580      	push	{r7, lr}
 8008968:	b084      	sub	sp, #16
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
 800896e:	460b      	mov	r3, r1
 8008970:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	32b0      	adds	r2, #176	; 0xb0
 800897c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d101      	bne.n	8008988 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008984:	2303      	movs	r3, #3
 8008986:	e017      	b.n	80089b8 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	32b0      	adds	r2, #176	; 0xb0
 8008992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008996:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	33b0      	adds	r3, #176	; 0xb0
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	4413      	add	r3, r2
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	68fa      	ldr	r2, [r7, #12]
 80089ac:	7810      	ldrb	r0, [r2, #0]
 80089ae:	68fa      	ldr	r2, [r7, #12]
 80089b0:	7852      	ldrb	r2, [r2, #1]
 80089b2:	4611      	mov	r1, r2
 80089b4:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 80089b6:	2300      	movs	r3, #0
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3710      	adds	r7, #16
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	32b0      	adds	r2, #176	; 0xb0
 80089d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d101      	bne.n	80089de <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80089da:	2303      	movs	r3, #3
 80089dc:	e01c      	b.n	8008a18 <USBD_CUSTOM_HID_ReceivePacket+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	32b0      	adds	r2, #176	; 0xb0
 80089e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089ec:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 80089ee:	4b0c      	ldr	r3, [pc, #48]	; (8008a20 <USBD_CUSTOM_HID_ReceivePacket+0x60>)
 80089f0:	7819      	ldrb	r1, [r3, #0]
 80089f2:	68fa      	ldr	r2, [r7, #12]
 80089f4:	230f      	movs	r3, #15
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f004 f920 	bl	800cc3c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  if(((recv_buffer[0]=(hhid->Report_buf[0]))&0x02) != 0x02){
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	781a      	ldrb	r2, [r3, #0]
 8008a00:	4b08      	ldr	r3, [pc, #32]	; (8008a24 <USBD_CUSTOM_HID_ReceivePacket+0x64>)
 8008a02:	701a      	strb	r2, [r3, #0]
 8008a04:	4b07      	ldr	r3, [pc, #28]	; (8008a24 <USBD_CUSTOM_HID_ReceivePacket+0x64>)
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	f003 0302 	and.w	r3, r3, #2
 8008a0c:	2b02      	cmp	r3, #2
 8008a0e:	d002      	beq.n	8008a16 <USBD_CUSTOM_HID_ReceivePacket+0x56>
	  InterruptFlag = 1;
 8008a10:	4b05      	ldr	r3, [pc, #20]	; (8008a28 <USBD_CUSTOM_HID_ReceivePacket+0x68>)
 8008a12:	2201      	movs	r2, #1
 8008a14:	601a      	str	r2, [r3, #0]
  }
  return (uint8_t)USBD_OK;
 8008a16:	2300      	movs	r3, #0
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3710      	adds	r7, #16
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}
 8008a20:	200000a7 	.word	0x200000a7
 8008a24:	2000026c 	.word	0x2000026c
 8008a28:	20000270 	.word	0x20000270

08008a2c <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	32b0      	adds	r2, #176	; 0xb0
 8008a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a42:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d101      	bne.n	8008a4e <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008a4a:	2303      	movs	r3, #3
 8008a4c:	e016      	b.n	8008a7c <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	69db      	ldr	r3, [r3, #28]
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d111      	bne.n	8008a7a <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	33b0      	adds	r3, #176	; 0xb0
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	4413      	add	r3, r2
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	68fa      	ldr	r2, [r7, #12]
 8008a6a:	7810      	ldrb	r0, [r2, #0]
 8008a6c:	68fa      	ldr	r2, [r7, #12]
 8008a6e:	7852      	ldrb	r2, [r2, #1]
 8008a70:	4611      	mov	r1, r2
 8008a72:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2200      	movs	r2, #0
 8008a78:	61da      	str	r2, [r3, #28]
  }

  return (uint8_t)USBD_OK;
 8008a7a:	2300      	movs	r3, #0
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3710      	adds	r7, #16
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	220a      	movs	r2, #10
 8008a90:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8008a92:	4b03      	ldr	r3, [pc, #12]	; (8008aa0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr
 8008aa0:	2000009c 	.word	0x2000009c

08008aa4 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d101      	bne.n	8008ab8 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008ab4:	2303      	movs	r3, #3
 8008ab6:	e009      	b.n	8008acc <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	33b0      	adds	r3, #176	; 0xb0
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	4413      	add	r3, r2
 8008ac6:	683a      	ldr	r2, [r7, #0]
 8008ac8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008aca:	2300      	movs	r3, #0
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	370c      	adds	r7, #12
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc_MSC(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8008ae4:	f241 0074 	movw	r0, #4212	; 0x1074
 8008ae8:	f004 f938 	bl	800cd5c <USBD_static_malloc_MSC>
 8008aec:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d109      	bne.n	8008b08 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	32b0      	adds	r2, #176	; 0xb0
 8008afe:	2100      	movs	r1, #0
 8008b00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008b04:	2302      	movs	r3, #2
 8008b06:	e06e      	b.n	8008be6 <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	32b0      	adds	r2, #176	; 0xb0
 8008b12:	68f9      	ldr	r1, [r7, #12]
 8008b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	32b0      	adds	r2, #176	; 0xb0
 8008b22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	7c1b      	ldrb	r3, [r3, #16]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d12b      	bne.n	8008b8c <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8008b34:	4b2e      	ldr	r3, [pc, #184]	; (8008bf0 <USBD_MSC_Init+0x118>)
 8008b36:	7819      	ldrb	r1, [r3, #0]
 8008b38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b3c:	2202      	movs	r2, #2
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f003 feca 	bl	800c8d8 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8008b44:	4b2a      	ldr	r3, [pc, #168]	; (8008bf0 <USBD_MSC_Init+0x118>)
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	f003 020f 	and.w	r2, r3, #15
 8008b4c:	6879      	ldr	r1, [r7, #4]
 8008b4e:	4613      	mov	r3, r2
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	4413      	add	r3, r2
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	440b      	add	r3, r1
 8008b58:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8008b60:	4b24      	ldr	r3, [pc, #144]	; (8008bf4 <USBD_MSC_Init+0x11c>)
 8008b62:	7819      	ldrb	r1, [r3, #0]
 8008b64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b68:	2202      	movs	r2, #2
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f003 feb4 	bl	800c8d8 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8008b70:	4b20      	ldr	r3, [pc, #128]	; (8008bf4 <USBD_MSC_Init+0x11c>)
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	f003 020f 	and.w	r2, r3, #15
 8008b78:	6879      	ldr	r1, [r7, #4]
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	4413      	add	r3, r2
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	440b      	add	r3, r1
 8008b84:	3324      	adds	r3, #36	; 0x24
 8008b86:	2201      	movs	r2, #1
 8008b88:	801a      	strh	r2, [r3, #0]
 8008b8a:	e028      	b.n	8008bde <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8008b8c:	4b18      	ldr	r3, [pc, #96]	; (8008bf0 <USBD_MSC_Init+0x118>)
 8008b8e:	7819      	ldrb	r1, [r3, #0]
 8008b90:	2340      	movs	r3, #64	; 0x40
 8008b92:	2202      	movs	r2, #2
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f003 fe9f 	bl	800c8d8 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8008b9a:	4b15      	ldr	r3, [pc, #84]	; (8008bf0 <USBD_MSC_Init+0x118>)
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	f003 020f 	and.w	r2, r3, #15
 8008ba2:	6879      	ldr	r1, [r7, #4]
 8008ba4:	4613      	mov	r3, r2
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	4413      	add	r3, r2
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	440b      	add	r3, r1
 8008bae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8008bb6:	4b0f      	ldr	r3, [pc, #60]	; (8008bf4 <USBD_MSC_Init+0x11c>)
 8008bb8:	7819      	ldrb	r1, [r3, #0]
 8008bba:	2340      	movs	r3, #64	; 0x40
 8008bbc:	2202      	movs	r2, #2
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f003 fe8a 	bl	800c8d8 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8008bc4:	4b0b      	ldr	r3, [pc, #44]	; (8008bf4 <USBD_MSC_Init+0x11c>)
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	f003 020f 	and.w	r2, r3, #15
 8008bcc:	6879      	ldr	r1, [r7, #4]
 8008bce:	4613      	mov	r3, r2
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	4413      	add	r3, r2
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	440b      	add	r3, r1
 8008bd8:	3324      	adds	r3, #36	; 0x24
 8008bda:	2201      	movs	r2, #1
 8008bdc:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 fa2c 	bl	800903c <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	2000010b 	.word	0x2000010b
 8008bf4:	2000010a 	.word	0x2000010a

08008bf8 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	460b      	mov	r3, r1
 8008c02:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8008c04:	4b26      	ldr	r3, [pc, #152]	; (8008ca0 <USBD_MSC_DeInit+0xa8>)
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	4619      	mov	r1, r3
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f003 fea2 	bl	800c954 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8008c10:	4b23      	ldr	r3, [pc, #140]	; (8008ca0 <USBD_MSC_DeInit+0xa8>)
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	f003 020f 	and.w	r2, r3, #15
 8008c18:	6879      	ldr	r1, [r7, #4]
 8008c1a:	4613      	mov	r3, r2
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	4413      	add	r3, r2
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	440b      	add	r3, r1
 8008c24:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008c28:	2200      	movs	r2, #0
 8008c2a:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8008c2c:	4b1d      	ldr	r3, [pc, #116]	; (8008ca4 <USBD_MSC_DeInit+0xac>)
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	4619      	mov	r1, r3
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f003 fe8e 	bl	800c954 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8008c38:	4b1a      	ldr	r3, [pc, #104]	; (8008ca4 <USBD_MSC_DeInit+0xac>)
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	f003 020f 	and.w	r2, r3, #15
 8008c40:	6879      	ldr	r1, [r7, #4]
 8008c42:	4613      	mov	r3, r2
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	4413      	add	r3, r2
 8008c48:	009b      	lsls	r3, r3, #2
 8008c4a:	440b      	add	r3, r1
 8008c4c:	3324      	adds	r3, #36	; 0x24
 8008c4e:	2200      	movs	r2, #0
 8008c50:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	32b0      	adds	r2, #176	; 0xb0
 8008c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d018      	beq.n	8008c96 <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 fa6f 	bl	8009148 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	32b0      	adds	r2, #176	; 0xb0
 8008c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f004 f87d 	bl	800cd78 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	32b0      	adds	r2, #176	; 0xb0
 8008c88:	2100      	movs	r1, #0
 8008c8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3708      	adds	r7, #8
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}
 8008ca0:	2000010b 	.word	0x2000010b
 8008ca4:	2000010a 	.word	0x2000010a

08008ca8 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b086      	sub	sp, #24
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	32b0      	adds	r2, #176	; 0xb0
 8008cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cc0:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d101      	bne.n	8008cd4 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8008cd0:	2303      	movs	r3, #3
 8008cd2:	e0e1      	b.n	8008e98 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d053      	beq.n	8008d88 <USBD_MSC_Setup+0xe0>
 8008ce0:	2b20      	cmp	r3, #32
 8008ce2:	f040 80d1 	bne.w	8008e88 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	785b      	ldrb	r3, [r3, #1]
 8008cea:	2bfe      	cmp	r3, #254	; 0xfe
 8008cec:	d002      	beq.n	8008cf4 <USBD_MSC_Setup+0x4c>
 8008cee:	2bff      	cmp	r3, #255	; 0xff
 8008cf0:	d02a      	beq.n	8008d48 <USBD_MSC_Setup+0xa0>
 8008cf2:	e041      	b.n	8008d78 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	885b      	ldrh	r3, [r3, #2]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d11e      	bne.n	8008d3a <USBD_MSC_Setup+0x92>
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	88db      	ldrh	r3, [r3, #6]
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d11a      	bne.n	8008d3a <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	781b      	ldrb	r3, [r3, #0]
 8008d08:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	da15      	bge.n	8008d3a <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	33b0      	adds	r3, #176	; 0xb0
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	4413      	add	r3, r2
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	699b      	ldr	r3, [r3, #24]
 8008d20:	4798      	blx	r3
 8008d22:	4603      	mov	r3, r0
 8008d24:	461a      	mov	r2, r3
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	4619      	mov	r1, r3
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f003 f979 	bl	800c028 <USBD_CtlSendData>
 8008d36:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d38:	e025      	b.n	8008d86 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8008d3a:	6839      	ldr	r1, [r7, #0]
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f003 f902 	bl	800bf46 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d42:	2303      	movs	r3, #3
 8008d44:	75fb      	strb	r3, [r7, #23]
          break;
 8008d46:	e01e      	b.n	8008d86 <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	885b      	ldrh	r3, [r3, #2]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d10c      	bne.n	8008d6a <USBD_MSC_Setup+0xc2>
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	88db      	ldrh	r3, [r3, #6]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d108      	bne.n	8008d6a <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	db03      	blt.n	8008d6a <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 f9bc 	bl	80090e0 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d68:	e00d      	b.n	8008d86 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8008d6a:	6839      	ldr	r1, [r7, #0]
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f003 f8ea 	bl	800bf46 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d72:	2303      	movs	r3, #3
 8008d74:	75fb      	strb	r3, [r7, #23]
          break;
 8008d76:	e006      	b.n	8008d86 <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8008d78:	6839      	ldr	r1, [r7, #0]
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f003 f8e3 	bl	800bf46 <USBD_CtlError>
          ret = USBD_FAIL;
 8008d80:	2303      	movs	r3, #3
 8008d82:	75fb      	strb	r3, [r7, #23]
          break;
 8008d84:	bf00      	nop
      }
      break;
 8008d86:	e086      	b.n	8008e96 <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	785b      	ldrb	r3, [r3, #1]
 8008d8c:	2b0b      	cmp	r3, #11
 8008d8e:	d872      	bhi.n	8008e76 <USBD_MSC_Setup+0x1ce>
 8008d90:	a201      	add	r2, pc, #4	; (adr r2, 8008d98 <USBD_MSC_Setup+0xf0>)
 8008d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d96:	bf00      	nop
 8008d98:	08008dc9 	.word	0x08008dc9
 8008d9c:	08008e45 	.word	0x08008e45
 8008da0:	08008e77 	.word	0x08008e77
 8008da4:	08008e77 	.word	0x08008e77
 8008da8:	08008e77 	.word	0x08008e77
 8008dac:	08008e77 	.word	0x08008e77
 8008db0:	08008e77 	.word	0x08008e77
 8008db4:	08008e77 	.word	0x08008e77
 8008db8:	08008e77 	.word	0x08008e77
 8008dbc:	08008e77 	.word	0x08008e77
 8008dc0:	08008df3 	.word	0x08008df3
 8008dc4:	08008e1d 	.word	0x08008e1d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	2b03      	cmp	r3, #3
 8008dd2:	d107      	bne.n	8008de4 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008dd4:	f107 030e 	add.w	r3, r7, #14
 8008dd8:	2202      	movs	r2, #2
 8008dda:	4619      	mov	r1, r3
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f003 f923 	bl	800c028 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008de2:	e050      	b.n	8008e86 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8008de4:	6839      	ldr	r1, [r7, #0]
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f003 f8ad 	bl	800bf46 <USBD_CtlError>
            ret = USBD_FAIL;
 8008dec:	2303      	movs	r3, #3
 8008dee:	75fb      	strb	r3, [r7, #23]
          break;
 8008df0:	e049      	b.n	8008e86 <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	2b03      	cmp	r3, #3
 8008dfc:	d107      	bne.n	8008e0e <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	3304      	adds	r3, #4
 8008e02:	2201      	movs	r2, #1
 8008e04:	4619      	mov	r1, r3
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f003 f90e 	bl	800c028 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e0c:	e03b      	b.n	8008e86 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8008e0e:	6839      	ldr	r1, [r7, #0]
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f003 f898 	bl	800bf46 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e16:	2303      	movs	r3, #3
 8008e18:	75fb      	strb	r3, [r7, #23]
          break;
 8008e1a:	e034      	b.n	8008e86 <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	2b03      	cmp	r3, #3
 8008e26:	d106      	bne.n	8008e36 <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	885b      	ldrh	r3, [r3, #2]
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	461a      	mov	r2, r3
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e34:	e027      	b.n	8008e86 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8008e36:	6839      	ldr	r1, [r7, #0]
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f003 f884 	bl	800bf46 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e3e:	2303      	movs	r3, #3
 8008e40:	75fb      	strb	r3, [r7, #23]
          break;
 8008e42:	e020      	b.n	8008e86 <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	2b03      	cmp	r3, #3
 8008e4e:	d119      	bne.n	8008e84 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	885b      	ldrh	r3, [r3, #2]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d115      	bne.n	8008e84 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	889b      	ldrh	r3, [r3, #4]
 8008e5c:	b2db      	uxtb	r3, r3
 8008e5e:	4619      	mov	r1, r3
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f003 fdad 	bl	800c9c0 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	889b      	ldrh	r3, [r3, #4]
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 fb54 	bl	800951c <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8008e74:	e006      	b.n	8008e84 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 8008e76:	6839      	ldr	r1, [r7, #0]
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f003 f864 	bl	800bf46 <USBD_CtlError>
          ret = USBD_FAIL;
 8008e7e:	2303      	movs	r3, #3
 8008e80:	75fb      	strb	r3, [r7, #23]
          break;
 8008e82:	e000      	b.n	8008e86 <USBD_MSC_Setup+0x1de>
          break;
 8008e84:	bf00      	nop
      }
      break;
 8008e86:	e006      	b.n	8008e96 <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8008e88:	6839      	ldr	r1, [r7, #0]
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f003 f85b 	bl	800bf46 <USBD_CtlError>
      ret = USBD_FAIL;
 8008e90:	2303      	movs	r3, #3
 8008e92:	75fb      	strb	r3, [r7, #23]
      break;
 8008e94:	bf00      	nop
  }

  return (uint8_t)ret;
 8008e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3718      	adds	r7, #24
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8008eac:	78fb      	ldrb	r3, [r7, #3]
 8008eae:	4619      	mov	r1, r3
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 f961 	bl	8009178 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8008eb6:	2300      	movs	r3, #0
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3708      	adds	r7, #8
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	460b      	mov	r3, r1
 8008eca:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8008ecc:	78fb      	ldrb	r3, [r7, #3]
 8008ece:	4619      	mov	r1, r3
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 f98d 	bl	80091f0 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8008ed6:	2300      	movs	r3, #0
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3708      	adds	r7, #8
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8008ee8:	2181      	movs	r1, #129	; 0x81
 8008eea:	4812      	ldr	r0, [pc, #72]	; (8008f34 <USBD_MSC_GetHSCfgDesc+0x54>)
 8008eec:	f002 f9c8 	bl	800b280 <USBD_GetEpDesc>
 8008ef0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8008ef2:	2101      	movs	r1, #1
 8008ef4:	480f      	ldr	r0, [pc, #60]	; (8008f34 <USBD_MSC_GetHSCfgDesc+0x54>)
 8008ef6:	f002 f9c3 	bl	800b280 <USBD_GetEpDesc>
 8008efa:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d006      	beq.n	8008f10 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2200      	movs	r2, #0
 8008f06:	711a      	strb	r2, [r3, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f042 0202 	orr.w	r2, r2, #2
 8008f0e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d006      	beq.n	8008f24 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	711a      	strb	r2, [r3, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f042 0202 	orr.w	r2, r2, #2
 8008f22:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2220      	movs	r2, #32
 8008f28:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8008f2a:	4b02      	ldr	r3, [pc, #8]	; (8008f34 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3710      	adds	r7, #16
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	200000e0 	.word	0x200000e0

08008f38 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8008f40:	2181      	movs	r1, #129	; 0x81
 8008f42:	4812      	ldr	r0, [pc, #72]	; (8008f8c <USBD_MSC_GetFSCfgDesc+0x54>)
 8008f44:	f002 f99c 	bl	800b280 <USBD_GetEpDesc>
 8008f48:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8008f4a:	2101      	movs	r1, #1
 8008f4c:	480f      	ldr	r0, [pc, #60]	; (8008f8c <USBD_MSC_GetFSCfgDesc+0x54>)
 8008f4e:	f002 f997 	bl	800b280 <USBD_GetEpDesc>
 8008f52:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d006      	beq.n	8008f68 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f62:	711a      	strb	r2, [r3, #4]
 8008f64:	2200      	movs	r2, #0
 8008f66:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d006      	beq.n	8008f7c <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	2200      	movs	r2, #0
 8008f72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f76:	711a      	strb	r2, [r3, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2220      	movs	r2, #32
 8008f80:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8008f82:	4b02      	ldr	r3, [pc, #8]	; (8008f8c <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	200000e0 	.word	0x200000e0

08008f90 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b084      	sub	sp, #16
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8008f98:	2181      	movs	r1, #129	; 0x81
 8008f9a:	4812      	ldr	r0, [pc, #72]	; (8008fe4 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8008f9c:	f002 f970 	bl	800b280 <USBD_GetEpDesc>
 8008fa0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8008fa2:	2101      	movs	r1, #1
 8008fa4:	480f      	ldr	r0, [pc, #60]	; (8008fe4 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8008fa6:	f002 f96b 	bl	800b280 <USBD_GetEpDesc>
 8008faa:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d006      	beq.n	8008fc0 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fba:	711a      	strb	r2, [r3, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d006      	beq.n	8008fd4 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fce:	711a      	strb	r2, [r3, #4]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2220      	movs	r2, #32
 8008fd8:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8008fda:	4b02      	ldr	r3, [pc, #8]	; (8008fe4 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3710      	adds	r7, #16
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	200000e0 	.word	0x200000e0

08008fe8 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	220a      	movs	r2, #10
 8008ff4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8008ff6:	4b03      	ldr	r3, [pc, #12]	; (8009004 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr
 8009004:	20000100 	.word	0x20000100

08009008 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d101      	bne.n	800901c <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009018:	2303      	movs	r3, #3
 800901a:	e009      	b.n	8009030 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	33b0      	adds	r3, #176	; 0xb0
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	4413      	add	r3, r2
 800902a:	683a      	ldr	r2, [r7, #0]
 800902c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800902e:	2300      	movs	r3, #0
}
 8009030:	4618      	mov	r0, r3
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b084      	sub	sp, #16
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	32b0      	adds	r2, #176	; 0xb0
 800904e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009052:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d039      	beq.n	80090ce <MSC_BOT_Init+0x92>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2200      	movs	r2, #0
 800905e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2200      	movs	r2, #0
 8009064:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800906c:	2200      	movs	r2, #0
 800906e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  hmsc->scsi_sense_head = 0U;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009078:	2200      	movs	r2, #0
 800907a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009084:	2200      	movs	r2, #0
 8009086:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	33b0      	adds	r3, #176	; 0xb0
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	4413      	add	r3, r2
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2000      	movs	r0, #0
 800909e:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 80090a0:	4b0d      	ldr	r3, [pc, #52]	; (80090d8 <MSC_BOT_Init+0x9c>)
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	4619      	mov	r1, r3
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f003 fc8a 	bl	800c9c0 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 80090ac:	4b0b      	ldr	r3, [pc, #44]	; (80090dc <MSC_BOT_Init+0xa0>)
 80090ae:	781b      	ldrb	r3, [r3, #0]
 80090b0:	4619      	mov	r1, r3
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f003 fc84 	bl	800c9c0 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80090b8:	4b07      	ldr	r3, [pc, #28]	; (80090d8 <MSC_BOT_Init+0x9c>)
 80090ba:	7819      	ldrb	r1, [r3, #0]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80090c2:	3210      	adds	r2, #16
 80090c4:	231f      	movs	r3, #31
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f003 fdb8 	bl	800cc3c <USBD_LL_PrepareReceive>
 80090cc:	e000      	b.n	80090d0 <MSC_BOT_Init+0x94>
    return;
 80090ce:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80090d0:	3710      	adds	r7, #16
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop
 80090d8:	2000010b 	.word	0x2000010b
 80090dc:	2000010a 	.word	0x2000010a

080090e0 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	32b0      	adds	r2, #176	; 0xb0
 80090f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090f6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d01c      	beq.n	8009138 <MSC_BOT_Reset+0x58>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2200      	movs	r2, #0
 8009102:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2201      	movs	r2, #1
 8009108:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 800910a:	4b0d      	ldr	r3, [pc, #52]	; (8009140 <MSC_BOT_Reset+0x60>)
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	4619      	mov	r1, r3
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f003 fcc1 	bl	800ca98 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 8009116:	4b0b      	ldr	r3, [pc, #44]	; (8009144 <MSC_BOT_Reset+0x64>)
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	4619      	mov	r1, r3
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f003 fcbb 	bl	800ca98 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8009122:	4b08      	ldr	r3, [pc, #32]	; (8009144 <MSC_BOT_Reset+0x64>)
 8009124:	7819      	ldrb	r1, [r3, #0]
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800912c:	3210      	adds	r2, #16
 800912e:	231f      	movs	r3, #31
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f003 fd83 	bl	800cc3c <USBD_LL_PrepareReceive>
 8009136:	e000      	b.n	800913a <MSC_BOT_Reset+0x5a>
    return;
 8009138:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800913a:	3710      	adds	r7, #16
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}
 8009140:	2000010a 	.word	0x2000010a
 8009144:	2000010b 	.word	0x2000010b

08009148 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8009148:	b480      	push	{r7}
 800914a:	b085      	sub	sp, #20
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	32b0      	adds	r2, #176	; 0xb0
 800915a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800915e:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d002      	beq.n	800916c <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2200      	movs	r2, #0
 800916a:	721a      	strb	r2, [r3, #8]
  }
}
 800916c:	bf00      	nop
 800916e:	3714      	adds	r7, #20
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	460b      	mov	r3, r1
 8009182:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	32b0      	adds	r2, #176	; 0xb0
 800918e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009192:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d022      	beq.n	80091e0 <MSC_BOT_DataIn+0x68>
  {
    return;
  }

  switch (hmsc->bot_state)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	7a1b      	ldrb	r3, [r3, #8]
 800919e:	2b02      	cmp	r3, #2
 80091a0:	d005      	beq.n	80091ae <MSC_BOT_DataIn+0x36>
 80091a2:	2b02      	cmp	r3, #2
 80091a4:	db1e      	blt.n	80091e4 <MSC_BOT_DataIn+0x6c>
 80091a6:	3b03      	subs	r3, #3
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d81b      	bhi.n	80091e4 <MSC_BOT_DataIn+0x6c>
 80091ac:	e013      	b.n	80091d6 <MSC_BOT_DataIn+0x5e>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091b4:	7f59      	ldrb	r1, [r3, #29]
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091bc:	331f      	adds	r3, #31
 80091be:	461a      	mov	r2, r3
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 f9e5 	bl	8009590 <SCSI_ProcessCmd>
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	da0d      	bge.n	80091e8 <MSC_BOT_DataIn+0x70>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80091cc:	2101      	movs	r1, #1
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 f920 	bl	8009414 <MSC_BOT_SendCSW>
      }
      break;
 80091d4:	e008      	b.n	80091e8 <MSC_BOT_DataIn+0x70>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80091d6:	2100      	movs	r1, #0
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 f91b 	bl	8009414 <MSC_BOT_SendCSW>
      break;
 80091de:	e004      	b.n	80091ea <MSC_BOT_DataIn+0x72>
    return;
 80091e0:	bf00      	nop
 80091e2:	e002      	b.n	80091ea <MSC_BOT_DataIn+0x72>

    default:
      break;
 80091e4:	bf00      	nop
 80091e6:	e000      	b.n	80091ea <MSC_BOT_DataIn+0x72>
      break;
 80091e8:	bf00      	nop
  }
}
 80091ea:	3710      	adds	r7, #16
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	460b      	mov	r3, r1
 80091fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	32b0      	adds	r2, #176	; 0xb0
 8009206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800920a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d01e      	beq.n	8009250 <MSC_BOT_DataOut+0x60>
  {
    return;
  }

  switch (hmsc->bot_state)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	7a1b      	ldrb	r3, [r3, #8]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d002      	beq.n	8009220 <MSC_BOT_DataOut+0x30>
 800921a:	2b01      	cmp	r3, #1
 800921c:	d004      	beq.n	8009228 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800921e:	e01a      	b.n	8009256 <MSC_BOT_DataOut+0x66>
      MSC_BOT_CBW_Decode(pdev);
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 f81b 	bl	800925c <MSC_BOT_CBW_Decode>
      break;
 8009226:	e016      	b.n	8009256 <MSC_BOT_DataOut+0x66>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800922e:	7f59      	ldrb	r1, [r3, #29]
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009236:	331f      	adds	r3, #31
 8009238:	461a      	mov	r2, r3
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 f9a8 	bl	8009590 <SCSI_ProcessCmd>
 8009240:	4603      	mov	r3, r0
 8009242:	2b00      	cmp	r3, #0
 8009244:	da06      	bge.n	8009254 <MSC_BOT_DataOut+0x64>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009246:	2101      	movs	r1, #1
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 f8e3 	bl	8009414 <MSC_BOT_SendCSW>
      break;
 800924e:	e001      	b.n	8009254 <MSC_BOT_DataOut+0x64>
    return;
 8009250:	bf00      	nop
 8009252:	e000      	b.n	8009256 <MSC_BOT_DataOut+0x66>
      break;
 8009254:	bf00      	nop
  }
}
 8009256:	3710      	adds	r7, #16
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	32b0      	adds	r2, #176	; 0xb0
 800926e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009272:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2b00      	cmp	r3, #0
 8009278:	f000 8085 	beq.w	8009386 <MSC_BOT_CBW_Decode+0x12a>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009282:	695b      	ldr	r3, [r3, #20]
 8009284:	68fa      	ldr	r2, [r7, #12]
 8009286:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800928a:	6353      	str	r3, [r2, #52]	; 0x34
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009292:	699b      	ldr	r3, [r3, #24]
 8009294:	68fa      	ldr	r2, [r7, #12]
 8009296:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800929a:	6393      	str	r3, [r2, #56]	; 0x38

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800929c:	4b3d      	ldr	r3, [pc, #244]	; (8009394 <MSC_BOT_CBW_Decode+0x138>)
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	4619      	mov	r1, r3
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f003 fd02 	bl	800ccac <USBD_LL_GetRxDataSize>
 80092a8:	4603      	mov	r3, r0
 80092aa:	2b1f      	cmp	r3, #31
 80092ac:	d118      	bne.n	80092e0 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092b4:	691b      	ldr	r3, [r3, #16]
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 80092b6:	4a38      	ldr	r2, [pc, #224]	; (8009398 <MSC_BOT_CBW_Decode+0x13c>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d111      	bne.n	80092e0 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092c2:	7f5b      	ldrb	r3, [r3, #29]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d80b      	bhi.n	80092e0 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092ce:	7f9b      	ldrb	r3, [r3, #30]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d005      	beq.n	80092e0 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bCBLength > 16U))
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092da:	7f9b      	ldrb	r3, [r3, #30]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80092dc:	2b10      	cmp	r3, #16
 80092de:	d90f      	bls.n	8009300 <MSC_BOT_CBW_Decode+0xa4>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092e6:	7f59      	ldrb	r1, [r3, #29]
 80092e8:	2320      	movs	r3, #32
 80092ea:	2205      	movs	r2, #5
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 fe7b 	bl	8009fe8 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2202      	movs	r2, #2
 80092f6:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 f8cb 	bl	8009494 <MSC_BOT_Abort>
 80092fe:	e045      	b.n	800938c <MSC_BOT_CBW_Decode+0x130>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009306:	7f59      	ldrb	r1, [r3, #29]
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800930e:	331f      	adds	r3, #31
 8009310:	461a      	mov	r2, r3
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 f93c 	bl	8009590 <SCSI_ProcessCmd>
 8009318:	4603      	mov	r3, r0
 800931a:	2b00      	cmp	r3, #0
 800931c:	da0c      	bge.n	8009338 <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	7a1b      	ldrb	r3, [r3, #8]
 8009322:	2b05      	cmp	r3, #5
 8009324:	d104      	bne.n	8009330 <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009326:	2101      	movs	r1, #1
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 f873 	bl	8009414 <MSC_BOT_SendCSW>
 800932e:	e02d      	b.n	800938c <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 f8af 	bl	8009494 <MSC_BOT_Abort>
 8009336:	e029      	b.n	800938c <MSC_BOT_CBW_Decode+0x130>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	7a1b      	ldrb	r3, [r3, #8]
 800933c:	2b02      	cmp	r3, #2
 800933e:	d024      	beq.n	800938a <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8009344:	2b01      	cmp	r3, #1
 8009346:	d020      	beq.n	800938a <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800934c:	2b03      	cmp	r3, #3
 800934e:	d01c      	beq.n	800938a <MSC_BOT_CBW_Decode+0x12e>
    {
      if (hmsc->bot_data_length > 0U)
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d009      	beq.n	800936c <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f103 0110 	add.w	r1, r3, #16
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	68db      	ldr	r3, [r3, #12]
 8009362:	461a      	mov	r2, r3
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f000 f819 	bl	800939c <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800936a:	e00f      	b.n	800938c <MSC_BOT_CBW_Decode+0x130>
      }
      else if (hmsc->bot_data_length == 0U)
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d104      	bne.n	800937e <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8009374:	2100      	movs	r1, #0
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 f84c 	bl	8009414 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800937c:	e006      	b.n	800938c <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 f888 	bl	8009494 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8009384:	e002      	b.n	800938c <MSC_BOT_CBW_Decode+0x130>
    return;
 8009386:	bf00      	nop
 8009388:	e000      	b.n	800938c <MSC_BOT_CBW_Decode+0x130>
      }
    }
    else
    {
      return;
 800938a:	bf00      	nop
    }
  }
}
 800938c:	3710      	adds	r7, #16
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop
 8009394:	2000010b 	.word	0x2000010b
 8009398:	43425355 	.word	0x43425355

0800939c <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b086      	sub	sp, #24
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	60b9      	str	r1, [r7, #8]
 80093a6:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	32b0      	adds	r2, #176	; 0xb0
 80093b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093b6:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d023      	beq.n	8009406 <MSC_BOT_SendData+0x6a>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093c4:	699b      	ldr	r3, [r3, #24]
 80093c6:	687a      	ldr	r2, [r7, #4]
 80093c8:	4293      	cmp	r3, r2
 80093ca:	bf28      	it	cs
 80093cc:	4613      	movcs	r3, r2
 80093ce:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	1ad3      	subs	r3, r2, r3
 80093dc:	697a      	ldr	r2, [r7, #20]
 80093de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80093e2:	6393      	str	r3, [r2, #56]	; 0x38
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093ea:	2200      	movs	r2, #0
 80093ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	2204      	movs	r2, #4
 80093f4:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 80093f6:	4b06      	ldr	r3, [pc, #24]	; (8009410 <MSC_BOT_SendData+0x74>)
 80093f8:	7819      	ldrb	r1, [r3, #0]
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	68ba      	ldr	r2, [r7, #8]
 80093fe:	68f8      	ldr	r0, [r7, #12]
 8009400:	f003 fbe4 	bl	800cbcc <USBD_LL_Transmit>
 8009404:	e000      	b.n	8009408 <MSC_BOT_SendData+0x6c>
    return;
 8009406:	bf00      	nop
}
 8009408:	3718      	adds	r7, #24
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	2000010a 	.word	0x2000010a

08009414 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	460b      	mov	r3, r1
 800941e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	32b0      	adds	r2, #176	; 0xb0
 800942a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800942e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d024      	beq.n	8009480 <MSC_BOT_SendCSW+0x6c>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800943c:	461a      	mov	r2, r3
 800943e:	4b12      	ldr	r3, [pc, #72]	; (8009488 <MSC_BOT_SendCSW+0x74>)
 8009440:	6313      	str	r3, [r2, #48]	; 0x30
  hmsc->csw.bStatus = CSW_Status;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009448:	461a      	mov	r2, r3
 800944a:	78fb      	ldrb	r3, [r7, #3]
 800944c:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_IDLE;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2200      	movs	r2, #0
 8009454:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8009456:	4b0d      	ldr	r3, [pc, #52]	; (800948c <MSC_BOT_SendCSW+0x78>)
 8009458:	7819      	ldrb	r1, [r3, #0]
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	f503 5281 	add.w	r2, r3, #4128	; 0x1020
 8009460:	3210      	adds	r2, #16
 8009462:	230d      	movs	r3, #13
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f003 fbb1 	bl	800cbcc <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800946a:	4b09      	ldr	r3, [pc, #36]	; (8009490 <MSC_BOT_SendCSW+0x7c>)
 800946c:	7819      	ldrb	r1, [r3, #0]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8009474:	3210      	adds	r2, #16
 8009476:	231f      	movs	r3, #31
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f003 fbdf 	bl	800cc3c <USBD_LL_PrepareReceive>
 800947e:	e000      	b.n	8009482 <MSC_BOT_SendCSW+0x6e>
    return;
 8009480:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8009482:	3710      	adds	r7, #16
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}
 8009488:	53425355 	.word	0x53425355
 800948c:	2000010a 	.word	0x2000010a
 8009490:	2000010b 	.word	0x2000010b

08009494 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	32b0      	adds	r2, #176	; 0xb0
 80094a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094aa:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d02c      	beq.n	800950c <MSC_BOT_Abort+0x78>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094b8:	7f1b      	ldrb	r3, [r3, #28]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d10f      	bne.n	80094de <MSC_BOT_Abort+0x4a>
      (hmsc->cbw.dDataLength != 0U) &&
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094c4:	699b      	ldr	r3, [r3, #24]
  if ((hmsc->cbw.bmFlags == 0U) &&
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d009      	beq.n	80094de <MSC_BOT_Abort+0x4a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d105      	bne.n	80094de <MSC_BOT_Abort+0x4a>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80094d2:	4b10      	ldr	r3, [pc, #64]	; (8009514 <MSC_BOT_Abort+0x80>)
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	4619      	mov	r1, r3
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f003 faa7 	bl	800ca2c <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80094de:	4b0e      	ldr	r3, [pc, #56]	; (8009518 <MSC_BOT_Abort+0x84>)
 80094e0:	781b      	ldrb	r3, [r3, #0]
 80094e2:	4619      	mov	r1, r3
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f003 faa1 	bl	800ca2c <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	7a5b      	ldrb	r3, [r3, #9]
 80094ee:	2b02      	cmp	r3, #2
 80094f0:	d10d      	bne.n	800950e <MSC_BOT_Abort+0x7a>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80094f2:	4b09      	ldr	r3, [pc, #36]	; (8009518 <MSC_BOT_Abort+0x84>)
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	4619      	mov	r1, r3
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f003 fa97 	bl	800ca2c <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80094fe:	4b05      	ldr	r3, [pc, #20]	; (8009514 <MSC_BOT_Abort+0x80>)
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	4619      	mov	r1, r3
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f003 fa91 	bl	800ca2c <USBD_LL_StallEP>
 800950a:	e000      	b.n	800950e <MSC_BOT_Abort+0x7a>
    return;
 800950c:	bf00      	nop
  }
}
 800950e:	3710      	adds	r7, #16
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}
 8009514:	2000010b 	.word	0x2000010b
 8009518:	2000010a 	.word	0x2000010a

0800951c <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	460b      	mov	r3, r1
 8009526:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	32b0      	adds	r2, #176	; 0xb0
 8009532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009536:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d01d      	beq.n	800957a <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	7a5b      	ldrb	r3, [r3, #9]
 8009542:	2b02      	cmp	r3, #2
 8009544:	d10c      	bne.n	8009560 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8009546:	4b10      	ldr	r3, [pc, #64]	; (8009588 <MSC_BOT_CplClrFeature+0x6c>)
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	4619      	mov	r1, r3
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f003 fa6d 	bl	800ca2c <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8009552:	4b0e      	ldr	r3, [pc, #56]	; (800958c <MSC_BOT_CplClrFeature+0x70>)
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	4619      	mov	r1, r3
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f003 fa67 	bl	800ca2c <USBD_LL_StallEP>
 800955e:	e00f      	b.n	8009580 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8009560:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009564:	2b00      	cmp	r3, #0
 8009566:	da0a      	bge.n	800957e <MSC_BOT_CplClrFeature+0x62>
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	7a5b      	ldrb	r3, [r3, #9]
 800956c:	2b01      	cmp	r3, #1
 800956e:	d006      	beq.n	800957e <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009570:	2101      	movs	r1, #1
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f7ff ff4e 	bl	8009414 <MSC_BOT_SendCSW>
 8009578:	e002      	b.n	8009580 <MSC_BOT_CplClrFeature+0x64>
    return;
 800957a:	bf00      	nop
 800957c:	e000      	b.n	8009580 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 800957e:	bf00      	nop
  }
}
 8009580:	3710      	adds	r7, #16
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	2000010a 	.word	0x2000010a
 800958c:	2000010b 	.word	0x2000010b

08009590 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b086      	sub	sp, #24
 8009594:	af00      	add	r7, sp, #0
 8009596:	60f8      	str	r0, [r7, #12]
 8009598:	460b      	mov	r3, r1
 800959a:	607a      	str	r2, [r7, #4]
 800959c:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	32b0      	adds	r2, #176	; 0xb0
 80095a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095ac:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d102      	bne.n	80095ba <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 80095b4:	f04f 33ff 	mov.w	r3, #4294967295
 80095b8:	e168      	b.n	800988c <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	2baa      	cmp	r3, #170	; 0xaa
 80095c0:	f000 8144 	beq.w	800984c <SCSI_ProcessCmd+0x2bc>
 80095c4:	2baa      	cmp	r3, #170	; 0xaa
 80095c6:	f300 8153 	bgt.w	8009870 <SCSI_ProcessCmd+0x2e0>
 80095ca:	2ba8      	cmp	r3, #168	; 0xa8
 80095cc:	f000 812c 	beq.w	8009828 <SCSI_ProcessCmd+0x298>
 80095d0:	2ba8      	cmp	r3, #168	; 0xa8
 80095d2:	f300 814d 	bgt.w	8009870 <SCSI_ProcessCmd+0x2e0>
 80095d6:	2b5a      	cmp	r3, #90	; 0x5a
 80095d8:	f300 80c0 	bgt.w	800975c <SCSI_ProcessCmd+0x1cc>
 80095dc:	2b00      	cmp	r3, #0
 80095de:	f2c0 8147 	blt.w	8009870 <SCSI_ProcessCmd+0x2e0>
 80095e2:	2b5a      	cmp	r3, #90	; 0x5a
 80095e4:	f200 8144 	bhi.w	8009870 <SCSI_ProcessCmd+0x2e0>
 80095e8:	a201      	add	r2, pc, #4	; (adr r2, 80095f0 <SCSI_ProcessCmd+0x60>)
 80095ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ee:	bf00      	nop
 80095f0:	08009763 	.word	0x08009763
 80095f4:	08009871 	.word	0x08009871
 80095f8:	08009871 	.word	0x08009871
 80095fc:	08009775 	.word	0x08009775
 8009600:	08009871 	.word	0x08009871
 8009604:	08009871 	.word	0x08009871
 8009608:	08009871 	.word	0x08009871
 800960c:	08009871 	.word	0x08009871
 8009610:	08009871 	.word	0x08009871
 8009614:	08009871 	.word	0x08009871
 8009618:	08009871 	.word	0x08009871
 800961c:	08009871 	.word	0x08009871
 8009620:	08009871 	.word	0x08009871
 8009624:	08009871 	.word	0x08009871
 8009628:	08009871 	.word	0x08009871
 800962c:	08009871 	.word	0x08009871
 8009630:	08009871 	.word	0x08009871
 8009634:	08009871 	.word	0x08009871
 8009638:	08009787 	.word	0x08009787
 800963c:	08009871 	.word	0x08009871
 8009640:	08009871 	.word	0x08009871
 8009644:	08009871 	.word	0x08009871
 8009648:	08009871 	.word	0x08009871
 800964c:	08009871 	.word	0x08009871
 8009650:	08009871 	.word	0x08009871
 8009654:	08009871 	.word	0x08009871
 8009658:	080097bd 	.word	0x080097bd
 800965c:	08009799 	.word	0x08009799
 8009660:	08009871 	.word	0x08009871
 8009664:	08009871 	.word	0x08009871
 8009668:	080097ab 	.word	0x080097ab
 800966c:	08009871 	.word	0x08009871
 8009670:	08009871 	.word	0x08009871
 8009674:	08009871 	.word	0x08009871
 8009678:	08009871 	.word	0x08009871
 800967c:	080097e1 	.word	0x080097e1
 8009680:	08009871 	.word	0x08009871
 8009684:	080097f3 	.word	0x080097f3
 8009688:	08009871 	.word	0x08009871
 800968c:	08009871 	.word	0x08009871
 8009690:	08009817 	.word	0x08009817
 8009694:	08009871 	.word	0x08009871
 8009698:	0800983b 	.word	0x0800983b
 800969c:	08009871 	.word	0x08009871
 80096a0:	08009871 	.word	0x08009871
 80096a4:	08009871 	.word	0x08009871
 80096a8:	08009871 	.word	0x08009871
 80096ac:	0800985f 	.word	0x0800985f
 80096b0:	08009871 	.word	0x08009871
 80096b4:	08009871 	.word	0x08009871
 80096b8:	08009871 	.word	0x08009871
 80096bc:	08009871 	.word	0x08009871
 80096c0:	08009871 	.word	0x08009871
 80096c4:	08009871 	.word	0x08009871
 80096c8:	08009871 	.word	0x08009871
 80096cc:	08009871 	.word	0x08009871
 80096d0:	08009871 	.word	0x08009871
 80096d4:	08009871 	.word	0x08009871
 80096d8:	08009871 	.word	0x08009871
 80096dc:	08009871 	.word	0x08009871
 80096e0:	08009871 	.word	0x08009871
 80096e4:	08009871 	.word	0x08009871
 80096e8:	08009871 	.word	0x08009871
 80096ec:	08009871 	.word	0x08009871
 80096f0:	08009871 	.word	0x08009871
 80096f4:	08009871 	.word	0x08009871
 80096f8:	08009871 	.word	0x08009871
 80096fc:	08009871 	.word	0x08009871
 8009700:	08009871 	.word	0x08009871
 8009704:	08009871 	.word	0x08009871
 8009708:	08009871 	.word	0x08009871
 800970c:	08009871 	.word	0x08009871
 8009710:	08009871 	.word	0x08009871
 8009714:	08009871 	.word	0x08009871
 8009718:	08009871 	.word	0x08009871
 800971c:	08009871 	.word	0x08009871
 8009720:	08009871 	.word	0x08009871
 8009724:	08009871 	.word	0x08009871
 8009728:	08009871 	.word	0x08009871
 800972c:	08009871 	.word	0x08009871
 8009730:	08009871 	.word	0x08009871
 8009734:	08009871 	.word	0x08009871
 8009738:	08009871 	.word	0x08009871
 800973c:	08009871 	.word	0x08009871
 8009740:	08009871 	.word	0x08009871
 8009744:	08009871 	.word	0x08009871
 8009748:	08009871 	.word	0x08009871
 800974c:	08009871 	.word	0x08009871
 8009750:	08009871 	.word	0x08009871
 8009754:	08009871 	.word	0x08009871
 8009758:	080097cf 	.word	0x080097cf
 800975c:	2b9e      	cmp	r3, #158	; 0x9e
 800975e:	d051      	beq.n	8009804 <SCSI_ProcessCmd+0x274>
 8009760:	e086      	b.n	8009870 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8009762:	7afb      	ldrb	r3, [r7, #11]
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	4619      	mov	r1, r3
 8009768:	68f8      	ldr	r0, [r7, #12]
 800976a:	f000 f893 	bl	8009894 <SCSI_TestUnitReady>
 800976e:	4603      	mov	r3, r0
 8009770:	75fb      	strb	r3, [r7, #23]
      break;
 8009772:	e089      	b.n	8009888 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8009774:	7afb      	ldrb	r3, [r7, #11]
 8009776:	687a      	ldr	r2, [r7, #4]
 8009778:	4619      	mov	r1, r3
 800977a:	68f8      	ldr	r0, [r7, #12]
 800977c:	f000 fb9a 	bl	8009eb4 <SCSI_RequestSense>
 8009780:	4603      	mov	r3, r0
 8009782:	75fb      	strb	r3, [r7, #23]
      break;
 8009784:	e080      	b.n	8009888 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8009786:	7afb      	ldrb	r3, [r7, #11]
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	4619      	mov	r1, r3
 800978c:	68f8      	ldr	r0, [r7, #12]
 800978e:	f000 f8df 	bl	8009950 <SCSI_Inquiry>
 8009792:	4603      	mov	r3, r0
 8009794:	75fb      	strb	r3, [r7, #23]
      break;
 8009796:	e077      	b.n	8009888 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8009798:	7afb      	ldrb	r3, [r7, #11]
 800979a:	687a      	ldr	r2, [r7, #4]
 800979c:	4619      	mov	r1, r3
 800979e:	68f8      	ldr	r0, [r7, #12]
 80097a0:	f000 fc7e 	bl	800a0a0 <SCSI_StartStopUnit>
 80097a4:	4603      	mov	r3, r0
 80097a6:	75fb      	strb	r3, [r7, #23]
      break;
 80097a8:	e06e      	b.n	8009888 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 80097aa:	7afb      	ldrb	r3, [r7, #11]
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	4619      	mov	r1, r3
 80097b0:	68f8      	ldr	r0, [r7, #12]
 80097b2:	f000 fcd2 	bl	800a15a <SCSI_AllowPreventRemovable>
 80097b6:	4603      	mov	r3, r0
 80097b8:	75fb      	strb	r3, [r7, #23]
      break;
 80097ba:	e065      	b.n	8009888 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 80097bc:	7afb      	ldrb	r3, [r7, #11]
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	4619      	mov	r1, r3
 80097c2:	68f8      	ldr	r0, [r7, #12]
 80097c4:	f000 fb16 	bl	8009df4 <SCSI_ModeSense6>
 80097c8:	4603      	mov	r3, r0
 80097ca:	75fb      	strb	r3, [r7, #23]
      break;
 80097cc:	e05c      	b.n	8009888 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 80097ce:	7afb      	ldrb	r3, [r7, #11]
 80097d0:	687a      	ldr	r2, [r7, #4]
 80097d2:	4619      	mov	r1, r3
 80097d4:	68f8      	ldr	r0, [r7, #12]
 80097d6:	f000 fb3d 	bl	8009e54 <SCSI_ModeSense10>
 80097da:	4603      	mov	r3, r0
 80097dc:	75fb      	strb	r3, [r7, #23]
      break;
 80097de:	e053      	b.n	8009888 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 80097e0:	7afb      	ldrb	r3, [r7, #11]
 80097e2:	687a      	ldr	r2, [r7, #4]
 80097e4:	4619      	mov	r1, r3
 80097e6:	68f8      	ldr	r0, [r7, #12]
 80097e8:	f000 fa86 	bl	8009cf8 <SCSI_ReadFormatCapacity>
 80097ec:	4603      	mov	r3, r0
 80097ee:	75fb      	strb	r3, [r7, #23]
      break;
 80097f0:	e04a      	b.n	8009888 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 80097f2:	7afb      	ldrb	r3, [r7, #11]
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	4619      	mov	r1, r3
 80097f8:	68f8      	ldr	r0, [r7, #12]
 80097fa:	f000 f929 	bl	8009a50 <SCSI_ReadCapacity10>
 80097fe:	4603      	mov	r3, r0
 8009800:	75fb      	strb	r3, [r7, #23]
      break;
 8009802:	e041      	b.n	8009888 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8009804:	7afb      	ldrb	r3, [r7, #11]
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	4619      	mov	r1, r3
 800980a:	68f8      	ldr	r0, [r7, #12]
 800980c:	f000 f9af 	bl	8009b6e <SCSI_ReadCapacity16>
 8009810:	4603      	mov	r3, r0
 8009812:	75fb      	strb	r3, [r7, #23]
      break;
 8009814:	e038      	b.n	8009888 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8009816:	7afb      	ldrb	r3, [r7, #11]
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	4619      	mov	r1, r3
 800981c:	68f8      	ldr	r0, [r7, #12]
 800981e:	f000 fccd 	bl	800a1bc <SCSI_Read10>
 8009822:	4603      	mov	r3, r0
 8009824:	75fb      	strb	r3, [r7, #23]
      break;
 8009826:	e02f      	b.n	8009888 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8009828:	7afb      	ldrb	r3, [r7, #11]
 800982a:	687a      	ldr	r2, [r7, #4]
 800982c:	4619      	mov	r1, r3
 800982e:	68f8      	ldr	r0, [r7, #12]
 8009830:	f000 fd7b 	bl	800a32a <SCSI_Read12>
 8009834:	4603      	mov	r3, r0
 8009836:	75fb      	strb	r3, [r7, #23]
      break;
 8009838:	e026      	b.n	8009888 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 800983a:	7afb      	ldrb	r3, [r7, #11]
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	4619      	mov	r1, r3
 8009840:	68f8      	ldr	r0, [r7, #12]
 8009842:	f000 fe33 	bl	800a4ac <SCSI_Write10>
 8009846:	4603      	mov	r3, r0
 8009848:	75fb      	strb	r3, [r7, #23]
      break;
 800984a:	e01d      	b.n	8009888 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 800984c:	7afb      	ldrb	r3, [r7, #11]
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	4619      	mov	r1, r3
 8009852:	68f8      	ldr	r0, [r7, #12]
 8009854:	f000 ff0e 	bl	800a674 <SCSI_Write12>
 8009858:	4603      	mov	r3, r0
 800985a:	75fb      	strb	r3, [r7, #23]
      break;
 800985c:	e014      	b.n	8009888 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800985e:	7afb      	ldrb	r3, [r7, #11]
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	4619      	mov	r1, r3
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f000 fff9 	bl	800a85c <SCSI_Verify10>
 800986a:	4603      	mov	r3, r0
 800986c:	75fb      	strb	r3, [r7, #23]
      break;
 800986e:	e00b      	b.n	8009888 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8009870:	7af9      	ldrb	r1, [r7, #11]
 8009872:	2320      	movs	r3, #32
 8009874:	2205      	movs	r2, #5
 8009876:	68f8      	ldr	r0, [r7, #12]
 8009878:	f000 fbb6 	bl	8009fe8 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	2202      	movs	r2, #2
 8009880:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8009882:	23ff      	movs	r3, #255	; 0xff
 8009884:	75fb      	strb	r3, [r7, #23]
      break;
 8009886:	bf00      	nop
  }

  return ret;
 8009888:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800988c:	4618      	mov	r0, r3
 800988e:	3718      	adds	r7, #24
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b086      	sub	sp, #24
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	460b      	mov	r3, r1
 800989e:	607a      	str	r2, [r7, #4]
 80098a0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	32b0      	adds	r2, #176	; 0xb0
 80098ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098b0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d102      	bne.n	80098be <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 80098b8:	f04f 33ff 	mov.w	r3, #4294967295
 80098bc:	e043      	b.n	8009946 <SCSI_TestUnitReady+0xb2>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098c4:	699b      	ldr	r3, [r3, #24]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d00b      	beq.n	80098e2 <SCSI_TestUnitReady+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098d0:	7f59      	ldrb	r1, [r3, #29]
 80098d2:	2320      	movs	r3, #32
 80098d4:	2205      	movs	r2, #5
 80098d6:	68f8      	ldr	r0, [r7, #12]
 80098d8:	f000 fb86 	bl	8009fe8 <SCSI_SenseCode>

    return -1;
 80098dc:	f04f 33ff 	mov.w	r3, #4294967295
 80098e0:	e031      	b.n	8009946 <SCSI_TestUnitReady+0xb2>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098e8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80098ec:	2b02      	cmp	r3, #2
 80098ee:	d10b      	bne.n	8009908 <SCSI_TestUnitReady+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80098f0:	7af9      	ldrb	r1, [r7, #11]
 80098f2:	233a      	movs	r3, #58	; 0x3a
 80098f4:	2202      	movs	r2, #2
 80098f6:	68f8      	ldr	r0, [r7, #12]
 80098f8:	f000 fb76 	bl	8009fe8 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	2205      	movs	r2, #5
 8009900:	721a      	strb	r2, [r3, #8]
    return -1;
 8009902:	f04f 33ff 	mov.w	r3, #4294967295
 8009906:	e01e      	b.n	8009946 <SCSI_TestUnitReady+0xb2>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800990e:	68fa      	ldr	r2, [r7, #12]
 8009910:	33b0      	adds	r3, #176	; 0xb0
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	4413      	add	r3, r2
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	689b      	ldr	r3, [r3, #8]
 800991a:	7afa      	ldrb	r2, [r7, #11]
 800991c:	4610      	mov	r0, r2
 800991e:	4798      	blx	r3
 8009920:	4603      	mov	r3, r0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00b      	beq.n	800993e <SCSI_TestUnitReady+0xaa>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009926:	7af9      	ldrb	r1, [r7, #11]
 8009928:	233a      	movs	r3, #58	; 0x3a
 800992a:	2202      	movs	r2, #2
 800992c:	68f8      	ldr	r0, [r7, #12]
 800992e:	f000 fb5b 	bl	8009fe8 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	2205      	movs	r2, #5
 8009936:	721a      	strb	r2, [r3, #8]

    return -1;
 8009938:	f04f 33ff 	mov.w	r3, #4294967295
 800993c:	e003      	b.n	8009946 <SCSI_TestUnitReady+0xb2>
  }
  hmsc->bot_data_length = 0U;
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	2200      	movs	r2, #0
 8009942:	60da      	str	r2, [r3, #12]

  return 0;
 8009944:	2300      	movs	r3, #0
}
 8009946:	4618      	mov	r0, r3
 8009948:	3718      	adds	r7, #24
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}
	...

08009950 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b088      	sub	sp, #32
 8009954:	af00      	add	r7, sp, #0
 8009956:	60f8      	str	r0, [r7, #12]
 8009958:	460b      	mov	r3, r1
 800995a:	607a      	str	r2, [r7, #4]
 800995c:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	32b0      	adds	r2, #176	; 0xb0
 8009968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800996c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800996e:	69bb      	ldr	r3, [r7, #24]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d102      	bne.n	800997a <SCSI_Inquiry+0x2a>
  {
    return -1;
 8009974:	f04f 33ff 	mov.w	r3, #4294967295
 8009978:	e062      	b.n	8009a40 <SCSI_Inquiry+0xf0>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009980:	699b      	ldr	r3, [r3, #24]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d10b      	bne.n	800999e <SCSI_Inquiry+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009986:	69bb      	ldr	r3, [r7, #24]
 8009988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800998c:	7f59      	ldrb	r1, [r3, #29]
 800998e:	2320      	movs	r3, #32
 8009990:	2205      	movs	r2, #5
 8009992:	68f8      	ldr	r0, [r7, #12]
 8009994:	f000 fb28 	bl	8009fe8 <SCSI_SenseCode>
    return -1;
 8009998:	f04f 33ff 	mov.w	r3, #4294967295
 800999c:	e050      	b.n	8009a40 <SCSI_Inquiry+0xf0>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	3301      	adds	r3, #1
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	f003 0301 	and.w	r3, r3, #1
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d021      	beq.n	80099f0 <SCSI_Inquiry+0xa0>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	3302      	adds	r3, #2
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d105      	bne.n	80099c2 <SCSI_Inquiry+0x72>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 80099b6:	2206      	movs	r2, #6
 80099b8:	4923      	ldr	r1, [pc, #140]	; (8009a48 <SCSI_Inquiry+0xf8>)
 80099ba:	69b8      	ldr	r0, [r7, #24]
 80099bc:	f001 f8fa 	bl	800abb4 <SCSI_UpdateBotData>
 80099c0:	e03d      	b.n	8009a3e <SCSI_Inquiry+0xee>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	3302      	adds	r3, #2
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	2b80      	cmp	r3, #128	; 0x80
 80099ca:	d105      	bne.n	80099d8 <SCSI_Inquiry+0x88>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 80099cc:	2208      	movs	r2, #8
 80099ce:	491f      	ldr	r1, [pc, #124]	; (8009a4c <SCSI_Inquiry+0xfc>)
 80099d0:	69b8      	ldr	r0, [r7, #24]
 80099d2:	f001 f8ef 	bl	800abb4 <SCSI_UpdateBotData>
 80099d6:	e032      	b.n	8009a3e <SCSI_Inquiry+0xee>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 80099d8:	69bb      	ldr	r3, [r7, #24]
 80099da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099de:	7f59      	ldrb	r1, [r3, #29]
 80099e0:	2324      	movs	r3, #36	; 0x24
 80099e2:	2205      	movs	r2, #5
 80099e4:	68f8      	ldr	r0, [r7, #12]
 80099e6:	f000 faff 	bl	8009fe8 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 80099ea:	f04f 33ff 	mov.w	r3, #4294967295
 80099ee:	e027      	b.n	8009a40 <SCSI_Inquiry+0xf0>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80099f6:	68fa      	ldr	r2, [r7, #12]
 80099f8:	33b0      	adds	r3, #176	; 0xb0
 80099fa:	009b      	lsls	r3, r3, #2
 80099fc:	4413      	add	r3, r2
 80099fe:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8009a00:	69d9      	ldr	r1, [r3, #28]
 8009a02:	7afa      	ldrb	r2, [r7, #11]
 8009a04:	4613      	mov	r3, r2
 8009a06:	00db      	lsls	r3, r3, #3
 8009a08:	4413      	add	r3, r2
 8009a0a:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8009a0c:	440b      	add	r3, r1
 8009a0e:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	3304      	adds	r3, #4
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	3305      	adds	r3, #5
 8009a1a:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	3304      	adds	r3, #4
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	8bfa      	ldrh	r2, [r7, #30]
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d303      	bcc.n	8009a32 <SCSI_Inquiry+0xe2>
    {
      len = params[4];
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	3304      	adds	r3, #4
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8009a32:	8bfb      	ldrh	r3, [r7, #30]
 8009a34:	461a      	mov	r2, r3
 8009a36:	6979      	ldr	r1, [r7, #20]
 8009a38:	69b8      	ldr	r0, [r7, #24]
 8009a3a:	f001 f8bb 	bl	800abb4 <SCSI_UpdateBotData>
  }

  return 0;
 8009a3e:	2300      	movs	r3, #0
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3720      	adds	r7, #32
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}
 8009a48:	2000010c 	.word	0x2000010c
 8009a4c:	20000114 	.word	0x20000114

08009a50 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009a50:	b590      	push	{r4, r7, lr}
 8009a52:	b087      	sub	sp, #28
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	460b      	mov	r3, r1
 8009a5a:	607a      	str	r2, [r7, #4]
 8009a5c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	32b0      	adds	r2, #176	; 0xb0
 8009a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a6c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d102      	bne.n	8009a7a <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8009a74:	f04f 33ff 	mov.w	r3, #4294967295
 8009a78:	e075      	b.n	8009b66 <SCSI_ReadCapacity10+0x116>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a80:	68fa      	ldr	r2, [r7, #12]
 8009a82:	33b0      	adds	r3, #176	; 0xb0
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	4413      	add	r3, r2
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	685c      	ldr	r4, [r3, #4]
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8009a92:	3308      	adds	r3, #8
 8009a94:	697a      	ldr	r2, [r7, #20]
 8009a96:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 8009a9a:	3204      	adds	r2, #4
 8009a9c:	7af8      	ldrb	r0, [r7, #11]
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	47a0      	blx	r4
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009aa6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d106      	bne.n	8009abc <SCSI_ReadCapacity10+0x6c>
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ab4:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009ab8:	2b02      	cmp	r3, #2
 8009aba:	d108      	bne.n	8009ace <SCSI_ReadCapacity10+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009abc:	7af9      	ldrb	r1, [r7, #11]
 8009abe:	233a      	movs	r3, #58	; 0x3a
 8009ac0:	2202      	movs	r2, #2
 8009ac2:	68f8      	ldr	r0, [r7, #12]
 8009ac4:	f000 fa90 	bl	8009fe8 <SCSI_SenseCode>
    return -1;
 8009ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8009acc:	e04b      	b.n	8009b66 <SCSI_ReadCapacity10+0x116>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ad4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ad6:	3b01      	subs	r3, #1
 8009ad8:	0e1b      	lsrs	r3, r3, #24
 8009ada:	b2da      	uxtb	r2, r3
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ae6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	0c1b      	lsrs	r3, r3, #16
 8009aec:	b2da      	uxtb	r2, r3
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009af8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009afa:	3b01      	subs	r3, #1
 8009afc:	0a1b      	lsrs	r3, r3, #8
 8009afe:	b2da      	uxtb	r2, r3
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	3b01      	subs	r3, #1
 8009b10:	b2da      	uxtb	r2, r3
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b1c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009b20:	161b      	asrs	r3, r3, #24
 8009b22:	b2da      	uxtb	r2, r3
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b2e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009b32:	141b      	asrs	r3, r3, #16
 8009b34:	b2da      	uxtb	r2, r3
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b40:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009b44:	0a1b      	lsrs	r3, r3, #8
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	b2da      	uxtb	r2, r3
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b54:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009b58:	b2da      	uxtb	r2, r3
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	2208      	movs	r2, #8
 8009b62:	60da      	str	r2, [r3, #12]

  return 0;
 8009b64:	2300      	movs	r3, #0

}
 8009b66:	4618      	mov	r0, r3
 8009b68:	371c      	adds	r7, #28
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd90      	pop	{r4, r7, pc}

08009b6e <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009b6e:	b590      	push	{r4, r7, lr}
 8009b70:	b089      	sub	sp, #36	; 0x24
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	60f8      	str	r0, [r7, #12]
 8009b76:	460b      	mov	r3, r1
 8009b78:	607a      	str	r2, [r7, #4]
 8009b7a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	32b0      	adds	r2, #176	; 0xb0
 8009b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b8a:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009b8c:	69bb      	ldr	r3, [r7, #24]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d102      	bne.n	8009b98 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8009b92:	f04f 33ff 	mov.w	r3, #4294967295
 8009b96:	e0ab      	b.n	8009cf0 <SCSI_ReadCapacity16+0x182>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009b9e:	68fa      	ldr	r2, [r7, #12]
 8009ba0:	33b0      	adds	r3, #176	; 0xb0
 8009ba2:	009b      	lsls	r3, r3, #2
 8009ba4:	4413      	add	r3, r2
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	685c      	ldr	r4, [r3, #4]
 8009baa:	69bb      	ldr	r3, [r7, #24]
 8009bac:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8009bb0:	3308      	adds	r3, #8
 8009bb2:	69ba      	ldr	r2, [r7, #24]
 8009bb4:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 8009bb8:	3204      	adds	r2, #4
 8009bba:	7af8      	ldrb	r0, [r7, #11]
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	47a0      	blx	r4
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009bc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d106      	bne.n	8009bda <SCSI_ReadCapacity16+0x6c>
 8009bcc:	69bb      	ldr	r3, [r7, #24]
 8009bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bd2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009bd6:	2b02      	cmp	r3, #2
 8009bd8:	d108      	bne.n	8009bec <SCSI_ReadCapacity16+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009bda:	7af9      	ldrb	r1, [r7, #11]
 8009bdc:	233a      	movs	r3, #58	; 0x3a
 8009bde:	2202      	movs	r2, #2
 8009be0:	68f8      	ldr	r0, [r7, #12]
 8009be2:	f000 fa01 	bl	8009fe8 <SCSI_SenseCode>
    return -1;
 8009be6:	f04f 33ff 	mov.w	r3, #4294967295
 8009bea:	e081      	b.n	8009cf0 <SCSI_ReadCapacity16+0x182>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	330a      	adds	r3, #10
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	330b      	adds	r3, #11
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009bfc:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	330c      	adds	r3, #12
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8009c06:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	320d      	adds	r2, #13
 8009c0c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8009c0e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009c10:	69bb      	ldr	r3, [r7, #24]
 8009c12:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8009c14:	2300      	movs	r3, #0
 8009c16:	61fb      	str	r3, [r7, #28]
 8009c18:	e008      	b.n	8009c2c <SCSI_ReadCapacity16+0xbe>
  {
    hmsc->bot_data[idx] = 0U;
 8009c1a:	69ba      	ldr	r2, [r7, #24]
 8009c1c:	69fb      	ldr	r3, [r7, #28]
 8009c1e:	4413      	add	r3, r2
 8009c20:	3310      	adds	r3, #16
 8009c22:	2200      	movs	r2, #0
 8009c24:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8009c26:	69fb      	ldr	r3, [r7, #28]
 8009c28:	3301      	adds	r3, #1
 8009c2a:	61fb      	str	r3, [r7, #28]
 8009c2c:	69bb      	ldr	r3, [r7, #24]
 8009c2e:	68db      	ldr	r3, [r3, #12]
 8009c30:	69fa      	ldr	r2, [r7, #28]
 8009c32:	429a      	cmp	r2, r3
 8009c34:	d3f1      	bcc.n	8009c1a <SCSI_ReadCapacity16+0xac>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8009c36:	69bb      	ldr	r3, [r7, #24]
 8009c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c3e:	3b01      	subs	r3, #1
 8009c40:	0e1b      	lsrs	r3, r3, #24
 8009c42:	b2da      	uxtb	r2, r3
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8009c48:	69bb      	ldr	r3, [r7, #24]
 8009c4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c50:	3b01      	subs	r3, #1
 8009c52:	0c1b      	lsrs	r3, r3, #16
 8009c54:	b2da      	uxtb	r2, r3
 8009c56:	69bb      	ldr	r3, [r7, #24]
 8009c58:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8009c5a:	69bb      	ldr	r3, [r7, #24]
 8009c5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c62:	3b01      	subs	r3, #1
 8009c64:	0a1b      	lsrs	r3, r3, #8
 8009c66:	b2da      	uxtb	r2, r3
 8009c68:	69bb      	ldr	r3, [r7, #24]
 8009c6a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8009c6c:	69bb      	ldr	r3, [r7, #24]
 8009c6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c74:	b2db      	uxtb	r3, r3
 8009c76:	3b01      	subs	r3, #1
 8009c78:	b2da      	uxtb	r2, r3
 8009c7a:	69bb      	ldr	r3, [r7, #24]
 8009c7c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8009c7e:	69bb      	ldr	r3, [r7, #24]
 8009c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c84:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009c88:	161b      	asrs	r3, r3, #24
 8009c8a:	b2da      	uxtb	r2, r3
 8009c8c:	69bb      	ldr	r3, [r7, #24]
 8009c8e:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8009c90:	69bb      	ldr	r3, [r7, #24]
 8009c92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c96:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009c9a:	141b      	asrs	r3, r3, #16
 8009c9c:	b2da      	uxtb	r2, r3
 8009c9e:	69bb      	ldr	r3, [r7, #24]
 8009ca0:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8009ca2:	69bb      	ldr	r3, [r7, #24]
 8009ca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ca8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009cac:	0a1b      	lsrs	r3, r3, #8
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	b2da      	uxtb	r2, r3
 8009cb2:	69bb      	ldr	r3, [r7, #24]
 8009cb4:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8009cb6:	69bb      	ldr	r3, [r7, #24]
 8009cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cbc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009cc0:	b2da      	uxtb	r2, r3
 8009cc2:	69bb      	ldr	r3, [r7, #24]
 8009cc4:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	330a      	adds	r3, #10
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	330b      	adds	r3, #11
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009cd6:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	330c      	adds	r3, #12
 8009cdc:	781b      	ldrb	r3, [r3, #0]
 8009cde:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8009ce0:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	320d      	adds	r2, #13
 8009ce6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8009ce8:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009cea:	69bb      	ldr	r3, [r7, #24]
 8009cec:	60da      	str	r2, [r3, #12]

  return 0;
 8009cee:	2300      	movs	r3, #0
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3724      	adds	r7, #36	; 0x24
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd90      	pop	{r4, r7, pc}

08009cf8 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b088      	sub	sp, #32
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	460b      	mov	r3, r1
 8009d02:	607a      	str	r2, [r7, #4]
 8009d04:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	32b0      	adds	r2, #176	; 0xb0
 8009d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d14:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009d16:	69bb      	ldr	r3, [r7, #24]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d102      	bne.n	8009d22 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8009d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8009d20:	e063      	b.n	8009dea <SCSI_ReadFormatCapacity+0xf2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009d28:	68fa      	ldr	r2, [r7, #12]
 8009d2a:	33b0      	adds	r3, #176	; 0xb0
 8009d2c:	009b      	lsls	r3, r3, #2
 8009d2e:	4413      	add	r3, r2
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	f107 0214 	add.w	r2, r7, #20
 8009d38:	f107 0110 	add.w	r1, r7, #16
 8009d3c:	7af8      	ldrb	r0, [r7, #11]
 8009d3e:	4798      	blx	r3
 8009d40:	4603      	mov	r3, r0
 8009d42:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009d44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d106      	bne.n	8009d5a <SCSI_ReadFormatCapacity+0x62>
 8009d4c:	69bb      	ldr	r3, [r7, #24]
 8009d4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d52:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009d56:	2b02      	cmp	r3, #2
 8009d58:	d108      	bne.n	8009d6c <SCSI_ReadFormatCapacity+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009d5a:	7af9      	ldrb	r1, [r7, #11]
 8009d5c:	233a      	movs	r3, #58	; 0x3a
 8009d5e:	2202      	movs	r2, #2
 8009d60:	68f8      	ldr	r0, [r7, #12]
 8009d62:	f000 f941 	bl	8009fe8 <SCSI_SenseCode>
    return -1;
 8009d66:	f04f 33ff 	mov.w	r3, #4294967295
 8009d6a:	e03e      	b.n	8009dea <SCSI_ReadFormatCapacity+0xf2>
  }

  for (i = 0U; i < 12U ; i++)
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	83fb      	strh	r3, [r7, #30]
 8009d70:	e007      	b.n	8009d82 <SCSI_ReadFormatCapacity+0x8a>
  {
    hmsc->bot_data[i] = 0U;
 8009d72:	8bfb      	ldrh	r3, [r7, #30]
 8009d74:	69ba      	ldr	r2, [r7, #24]
 8009d76:	4413      	add	r3, r2
 8009d78:	2200      	movs	r2, #0
 8009d7a:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8009d7c:	8bfb      	ldrh	r3, [r7, #30]
 8009d7e:	3301      	adds	r3, #1
 8009d80:	83fb      	strh	r3, [r7, #30]
 8009d82:	8bfb      	ldrh	r3, [r7, #30]
 8009d84:	2b0b      	cmp	r3, #11
 8009d86:	d9f4      	bls.n	8009d72 <SCSI_ReadFormatCapacity+0x7a>
  }

  hmsc->bot_data[3] = 0x08U;
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	2208      	movs	r2, #8
 8009d8c:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	3b01      	subs	r3, #1
 8009d92:	0e1b      	lsrs	r3, r3, #24
 8009d94:	b2da      	uxtb	r2, r3
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	3b01      	subs	r3, #1
 8009d9e:	0c1b      	lsrs	r3, r3, #16
 8009da0:	b2da      	uxtb	r2, r3
 8009da2:	69bb      	ldr	r3, [r7, #24]
 8009da4:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	3b01      	subs	r3, #1
 8009daa:	0a1b      	lsrs	r3, r3, #8
 8009dac:	b2da      	uxtb	r2, r3
 8009dae:	69bb      	ldr	r3, [r7, #24]
 8009db0:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	3b01      	subs	r3, #1
 8009db8:	b2da      	uxtb	r2, r3
 8009dba:	69bb      	ldr	r3, [r7, #24]
 8009dbc:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8009dbe:	69bb      	ldr	r3, [r7, #24]
 8009dc0:	2202      	movs	r2, #2
 8009dc2:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8009dc4:	8abb      	ldrh	r3, [r7, #20]
 8009dc6:	141b      	asrs	r3, r3, #16
 8009dc8:	b2da      	uxtb	r2, r3
 8009dca:	69bb      	ldr	r3, [r7, #24]
 8009dcc:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8009dce:	8abb      	ldrh	r3, [r7, #20]
 8009dd0:	0a1b      	lsrs	r3, r3, #8
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	b2da      	uxtb	r2, r3
 8009dd6:	69bb      	ldr	r3, [r7, #24]
 8009dd8:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8009dda:	8abb      	ldrh	r3, [r7, #20]
 8009ddc:	b2da      	uxtb	r2, r3
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8009de2:	69bb      	ldr	r3, [r7, #24]
 8009de4:	220c      	movs	r2, #12
 8009de6:	60da      	str	r2, [r3, #12]

  return 0;
 8009de8:	2300      	movs	r3, #0
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3720      	adds	r7, #32
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
	...

08009df4 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b086      	sub	sp, #24
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	60f8      	str	r0, [r7, #12]
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	607a      	str	r2, [r7, #4]
 8009e00:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	32b0      	adds	r2, #176	; 0xb0
 8009e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e10:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8009e12:	2317      	movs	r3, #23
 8009e14:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d102      	bne.n	8009e22 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8009e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8009e20:	e011      	b.n	8009e46 <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	3304      	adds	r3, #4
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	8afa      	ldrh	r2, [r7, #22]
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d303      	bcc.n	8009e38 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	3304      	adds	r3, #4
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8009e38:	8afb      	ldrh	r3, [r7, #22]
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	4904      	ldr	r1, [pc, #16]	; (8009e50 <SCSI_ModeSense6+0x5c>)
 8009e3e:	6938      	ldr	r0, [r7, #16]
 8009e40:	f000 feb8 	bl	800abb4 <SCSI_UpdateBotData>

  return 0;
 8009e44:	2300      	movs	r3, #0
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3718      	adds	r7, #24
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	2000011c 	.word	0x2000011c

08009e54 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b086      	sub	sp, #24
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	607a      	str	r2, [r7, #4]
 8009e60:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	32b0      	adds	r2, #176	; 0xb0
 8009e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e70:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8009e72:	231b      	movs	r3, #27
 8009e74:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d102      	bne.n	8009e82 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 8009e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8009e80:	e011      	b.n	8009ea6 <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	3308      	adds	r3, #8
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	8afa      	ldrh	r2, [r7, #22]
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d303      	bcc.n	8009e98 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	3308      	adds	r3, #8
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8009e98:	8afb      	ldrh	r3, [r7, #22]
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	4904      	ldr	r1, [pc, #16]	; (8009eb0 <SCSI_ModeSense10+0x5c>)
 8009e9e:	6938      	ldr	r0, [r7, #16]
 8009ea0:	f000 fe88 	bl	800abb4 <SCSI_UpdateBotData>

  return 0;
 8009ea4:	2300      	movs	r3, #0
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3718      	adds	r7, #24
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	20000134 	.word	0x20000134

08009eb4 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b086      	sub	sp, #24
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	60f8      	str	r0, [r7, #12]
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	607a      	str	r2, [r7, #4]
 8009ec0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	32b0      	adds	r2, #176	; 0xb0
 8009ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ed0:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d102      	bne.n	8009ede <SCSI_RequestSense+0x2a>
  {
    return -1;
 8009ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8009edc:	e080      	b.n	8009fe0 <SCSI_RequestSense+0x12c>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ee4:	699b      	ldr	r3, [r3, #24]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d10b      	bne.n	8009f02 <SCSI_RequestSense+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ef0:	7f59      	ldrb	r1, [r3, #29]
 8009ef2:	2320      	movs	r3, #32
 8009ef4:	2205      	movs	r2, #5
 8009ef6:	68f8      	ldr	r0, [r7, #12]
 8009ef8:	f000 f876 	bl	8009fe8 <SCSI_SenseCode>
    return -1;
 8009efc:	f04f 33ff 	mov.w	r3, #4294967295
 8009f00:	e06e      	b.n	8009fe0 <SCSI_RequestSense+0x12c>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8009f02:	2300      	movs	r3, #0
 8009f04:	75fb      	strb	r3, [r7, #23]
 8009f06:	e007      	b.n	8009f18 <SCSI_RequestSense+0x64>
  {
    hmsc->bot_data[i] = 0U;
 8009f08:	7dfb      	ldrb	r3, [r7, #23]
 8009f0a:	693a      	ldr	r2, [r7, #16]
 8009f0c:	4413      	add	r3, r2
 8009f0e:	2200      	movs	r2, #0
 8009f10:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8009f12:	7dfb      	ldrb	r3, [r7, #23]
 8009f14:	3301      	adds	r3, #1
 8009f16:	75fb      	strb	r3, [r7, #23]
 8009f18:	7dfb      	ldrb	r3, [r7, #23]
 8009f1a:	2b11      	cmp	r3, #17
 8009f1c:	d9f4      	bls.n	8009f08 <SCSI_RequestSense+0x54>
  }

  hmsc->bot_data[0] = 0x70U;
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	2270      	movs	r2, #112	; 0x70
 8009f22:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	220c      	movs	r2, #12
 8009f28:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f30:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f3a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d03f      	beq.n	8009fc2 <SCSI_RequestSense+0x10e>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f48:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	f502 7202 	add.w	r2, r2, #520	; 0x208
 8009f54:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f62:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009f66:	693a      	ldr	r2, [r7, #16]
 8009f68:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009f6c:	00db      	lsls	r3, r3, #3
 8009f6e:	4413      	add	r3, r2
 8009f70:	791a      	ldrb	r2, [r3, #4]
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f7c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009f80:	693a      	ldr	r2, [r7, #16]
 8009f82:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009f86:	00db      	lsls	r3, r3, #3
 8009f88:	4413      	add	r3, r2
 8009f8a:	795a      	ldrb	r2, [r3, #5]
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f96:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	b2da      	uxtb	r2, r3
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fa4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fae:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009fb2:	2b04      	cmp	r3, #4
 8009fb4:	d105      	bne.n	8009fc2 <SCSI_RequestSense+0x10e>
    {
      hmsc->scsi_sense_head = 0U;
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	2212      	movs	r2, #18
 8009fc6:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	3304      	adds	r3, #4
 8009fcc:	781b      	ldrb	r3, [r3, #0]
 8009fce:	2b12      	cmp	r3, #18
 8009fd0:	d805      	bhi.n	8009fde <SCSI_RequestSense+0x12a>
  {
    hmsc->bot_data_length = params[4];
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	3304      	adds	r3, #4
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	461a      	mov	r2, r3
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8009fde:	2300      	movs	r3, #0
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3718      	adds	r7, #24
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b085      	sub	sp, #20
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	4608      	mov	r0, r1
 8009ff2:	4611      	mov	r1, r2
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	70fb      	strb	r3, [r7, #3]
 8009ffa:	460b      	mov	r3, r1
 8009ffc:	70bb      	strb	r3, [r7, #2]
 8009ffe:	4613      	mov	r3, r2
 800a000:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	32b0      	adds	r2, #176	; 0xb0
 800a00c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a010:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d03d      	beq.n	800a094 <SCSI_SenseCode+0xac>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a01e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a022:	461a      	mov	r2, r3
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f502 7202 	add.w	r2, r2, #520	; 0x208
 800a02a:	78b9      	ldrb	r1, [r7, #2]
 800a02c:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a036:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a03a:	68fa      	ldr	r2, [r7, #12]
 800a03c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a040:	00db      	lsls	r3, r3, #3
 800a042:	4413      	add	r3, r2
 800a044:	787a      	ldrb	r2, [r7, #1]
 800a046:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a04e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a052:	68fa      	ldr	r2, [r7, #12]
 800a054:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a058:	00db      	lsls	r3, r3, #3
 800a05a:	4413      	add	r3, r2
 800a05c:	2200      	movs	r2, #0
 800a05e:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a066:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a06a:	3301      	adds	r3, #1
 800a06c:	b2da      	uxtb	r2, r3
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a074:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a07e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a082:	2b04      	cmp	r3, #4
 800a084:	d107      	bne.n	800a096 <SCSI_SenseCode+0xae>
  {
    hmsc->scsi_sense_tail = 0U;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a08c:	2200      	movs	r2, #0
 800a08e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 800a092:	e000      	b.n	800a096 <SCSI_SenseCode+0xae>
    return;
 800a094:	bf00      	nop
  }
}
 800a096:	3714      	adds	r7, #20
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr

0800a0a0 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b086      	sub	sp, #24
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	60f8      	str	r0, [r7, #12]
 800a0a8:	460b      	mov	r3, r1
 800a0aa:	607a      	str	r2, [r7, #4]
 800a0ac:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	32b0      	adds	r2, #176	; 0xb0
 800a0b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0bc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d102      	bne.n	800a0ca <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 800a0c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a0c8:	e043      	b.n	800a152 <SCSI_StartStopUnit+0xb2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0d0:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d10f      	bne.n	800a0f8 <SCSI_StartStopUnit+0x58>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	3304      	adds	r3, #4
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	f003 0303 	and.w	r3, r3, #3
 800a0e2:	2b02      	cmp	r3, #2
 800a0e4:	d108      	bne.n	800a0f8 <SCSI_StartStopUnit+0x58>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800a0e6:	7af9      	ldrb	r1, [r7, #11]
 800a0e8:	2324      	movs	r3, #36	; 0x24
 800a0ea:	2205      	movs	r2, #5
 800a0ec:	68f8      	ldr	r0, [r7, #12]
 800a0ee:	f7ff ff7b 	bl	8009fe8 <SCSI_SenseCode>

    return -1;
 800a0f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a0f6:	e02c      	b.n	800a152 <SCSI_StartStopUnit+0xb2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	3304      	adds	r3, #4
 800a0fc:	781b      	ldrb	r3, [r3, #0]
 800a0fe:	f003 0303 	and.w	r3, r3, #3
 800a102:	2b01      	cmp	r3, #1
 800a104:	d106      	bne.n	800a114 <SCSI_StartStopUnit+0x74>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a10c:	2200      	movs	r2, #0
 800a10e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800a112:	e01a      	b.n	800a14a <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	3304      	adds	r3, #4
 800a118:	781b      	ldrb	r3, [r3, #0]
 800a11a:	f003 0303 	and.w	r3, r3, #3
 800a11e:	2b02      	cmp	r3, #2
 800a120:	d106      	bne.n	800a130 <SCSI_StartStopUnit+0x90>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a128:	2202      	movs	r2, #2
 800a12a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800a12e:	e00c      	b.n	800a14a <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	3304      	adds	r3, #4
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	f003 0303 	and.w	r3, r3, #3
 800a13a:	2b03      	cmp	r3, #3
 800a13c:	d105      	bne.n	800a14a <SCSI_StartStopUnit+0xaa>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a144:	2200      	movs	r2, #0
 800a146:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	2200      	movs	r2, #0
 800a14e:	60da      	str	r2, [r3, #12]

  return 0;
 800a150:	2300      	movs	r3, #0
}
 800a152:	4618      	mov	r0, r3
 800a154:	3718      	adds	r7, #24
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}

0800a15a <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a15a:	b480      	push	{r7}
 800a15c:	b087      	sub	sp, #28
 800a15e:	af00      	add	r7, sp, #0
 800a160:	60f8      	str	r0, [r7, #12]
 800a162:	460b      	mov	r3, r1
 800a164:	607a      	str	r2, [r7, #4]
 800a166:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	32b0      	adds	r2, #176	; 0xb0
 800a172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a176:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d102      	bne.n	800a184 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 800a17e:	f04f 33ff 	mov.w	r3, #4294967295
 800a182:	e015      	b.n	800a1b0 <SCSI_AllowPreventRemovable+0x56>
  }

  if (params[4] == 0U)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	3304      	adds	r3, #4
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d106      	bne.n	800a19c <SCSI_AllowPreventRemovable+0x42>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a194:	2200      	movs	r2, #0
 800a196:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800a19a:	e005      	b.n	800a1a8 <SCSI_AllowPreventRemovable+0x4e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }

  hmsc->bot_data_length = 0U;
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	60da      	str	r2, [r3, #12]

  return 0;
 800a1ae:	2300      	movs	r3, #0
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	371c      	adds	r7, #28
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr

0800a1bc <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b086      	sub	sp, #24
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	460b      	mov	r3, r1
 800a1c6:	607a      	str	r2, [r7, #4]
 800a1c8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	32b0      	adds	r2, #176	; 0xb0
 800a1d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1d8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d102      	bne.n	800a1e6 <SCSI_Read10+0x2a>
  {
    return -1;
 800a1e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a1e4:	e09d      	b.n	800a322 <SCSI_Read10+0x166>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	7a1b      	ldrb	r3, [r3, #8]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	f040 808f 	bne.w	800a30e <SCSI_Read10+0x152>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1f6:	7f1b      	ldrb	r3, [r3, #28]
 800a1f8:	b25b      	sxtb	r3, r3
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	db0b      	blt.n	800a216 <SCSI_Read10+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a204:	7f59      	ldrb	r1, [r3, #29]
 800a206:	2320      	movs	r3, #32
 800a208:	2205      	movs	r2, #5
 800a20a:	68f8      	ldr	r0, [r7, #12]
 800a20c:	f7ff feec 	bl	8009fe8 <SCSI_SenseCode>
      return -1;
 800a210:	f04f 33ff 	mov.w	r3, #4294967295
 800a214:	e085      	b.n	800a322 <SCSI_Read10+0x166>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a21c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a220:	2b02      	cmp	r3, #2
 800a222:	d108      	bne.n	800a236 <SCSI_Read10+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a224:	7af9      	ldrb	r1, [r7, #11]
 800a226:	233a      	movs	r3, #58	; 0x3a
 800a228:	2202      	movs	r2, #2
 800a22a:	68f8      	ldr	r0, [r7, #12]
 800a22c:	f7ff fedc 	bl	8009fe8 <SCSI_SenseCode>

      return -1;
 800a230:	f04f 33ff 	mov.w	r3, #4294967295
 800a234:	e075      	b.n	800a322 <SCSI_Read10+0x166>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a23c:	68fa      	ldr	r2, [r7, #12]
 800a23e:	33b0      	adds	r3, #176	; 0xb0
 800a240:	009b      	lsls	r3, r3, #2
 800a242:	4413      	add	r3, r2
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	689b      	ldr	r3, [r3, #8]
 800a248:	7afa      	ldrb	r2, [r7, #11]
 800a24a:	4610      	mov	r0, r2
 800a24c:	4798      	blx	r3
 800a24e:	4603      	mov	r3, r0
 800a250:	2b00      	cmp	r3, #0
 800a252:	d008      	beq.n	800a266 <SCSI_Read10+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a254:	7af9      	ldrb	r1, [r7, #11]
 800a256:	233a      	movs	r3, #58	; 0x3a
 800a258:	2202      	movs	r2, #2
 800a25a:	68f8      	ldr	r0, [r7, #12]
 800a25c:	f7ff fec4 	bl	8009fe8 <SCSI_SenseCode>
      return -1;
 800a260:	f04f 33ff 	mov.w	r3, #4294967295
 800a264:	e05d      	b.n	800a322 <SCSI_Read10+0x166>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	3302      	adds	r3, #2
 800a26a:	781b      	ldrb	r3, [r3, #0]
 800a26c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	3303      	adds	r3, #3
 800a272:	781b      	ldrb	r3, [r3, #0]
 800a274:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a276:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	3304      	adds	r3, #4
 800a27c:	781b      	ldrb	r3, [r3, #0]
 800a27e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a280:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a282:	687a      	ldr	r2, [r7, #4]
 800a284:	3205      	adds	r2, #5
 800a286:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800a288:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a28a:	697a      	ldr	r2, [r7, #20]
 800a28c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a290:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	3307      	adds	r3, #7
 800a296:	781b      	ldrb	r3, [r3, #0]
 800a298:	021b      	lsls	r3, r3, #8
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	3208      	adds	r2, #8
 800a29e:	7812      	ldrb	r2, [r2, #0]
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	697a      	ldr	r2, [r7, #20]
 800a2a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a2a8:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2b0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2ba:	7af9      	ldrb	r1, [r7, #11]
 800a2bc:	68f8      	ldr	r0, [r7, #12]
 800a2be:	f000 fb0c 	bl	800a8da <SCSI_CheckAddressRange>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	da02      	bge.n	800a2ce <SCSI_Read10+0x112>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a2c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a2cc:	e029      	b.n	800a322 <SCSI_Read10+0x166>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2d4:	699a      	ldr	r2, [r3, #24]
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2de:	6979      	ldr	r1, [r7, #20]
 800a2e0:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800a2e4:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 800a2e8:	fb01 f303 	mul.w	r3, r1, r3
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d00b      	beq.n	800a308 <SCSI_Read10+0x14c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2f6:	7f59      	ldrb	r1, [r3, #29]
 800a2f8:	2320      	movs	r3, #32
 800a2fa:	2205      	movs	r2, #5
 800a2fc:	68f8      	ldr	r0, [r7, #12]
 800a2fe:	f7ff fe73 	bl	8009fe8 <SCSI_SenseCode>
      return -1;
 800a302:	f04f 33ff 	mov.w	r3, #4294967295
 800a306:	e00c      	b.n	800a322 <SCSI_Read10+0x166>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	2202      	movs	r2, #2
 800a30c:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a314:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800a316:	7afb      	ldrb	r3, [r7, #11]
 800a318:	4619      	mov	r1, r3
 800a31a:	68f8      	ldr	r0, [r7, #12]
 800a31c:	f000 fb0a 	bl	800a934 <SCSI_ProcessRead>
 800a320:	4603      	mov	r3, r0
}
 800a322:	4618      	mov	r0, r3
 800a324:	3718      	adds	r7, #24
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}

0800a32a <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a32a:	b580      	push	{r7, lr}
 800a32c:	b086      	sub	sp, #24
 800a32e:	af00      	add	r7, sp, #0
 800a330:	60f8      	str	r0, [r7, #12]
 800a332:	460b      	mov	r3, r1
 800a334:	607a      	str	r2, [r7, #4]
 800a336:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	32b0      	adds	r2, #176	; 0xb0
 800a342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a346:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d102      	bne.n	800a354 <SCSI_Read12+0x2a>
  {
    return -1;
 800a34e:	f04f 33ff 	mov.w	r3, #4294967295
 800a352:	e0a7      	b.n	800a4a4 <SCSI_Read12+0x17a>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	7a1b      	ldrb	r3, [r3, #8]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	f040 8099 	bne.w	800a490 <SCSI_Read12+0x166>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a364:	7f1b      	ldrb	r3, [r3, #28]
 800a366:	b25b      	sxtb	r3, r3
 800a368:	2b00      	cmp	r3, #0
 800a36a:	db0b      	blt.n	800a384 <SCSI_Read12+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a372:	7f59      	ldrb	r1, [r3, #29]
 800a374:	2320      	movs	r3, #32
 800a376:	2205      	movs	r2, #5
 800a378:	68f8      	ldr	r0, [r7, #12]
 800a37a:	f7ff fe35 	bl	8009fe8 <SCSI_SenseCode>
      return -1;
 800a37e:	f04f 33ff 	mov.w	r3, #4294967295
 800a382:	e08f      	b.n	800a4a4 <SCSI_Read12+0x17a>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a38a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a38e:	2b02      	cmp	r3, #2
 800a390:	d108      	bne.n	800a3a4 <SCSI_Read12+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a392:	7af9      	ldrb	r1, [r7, #11]
 800a394:	233a      	movs	r3, #58	; 0x3a
 800a396:	2202      	movs	r2, #2
 800a398:	68f8      	ldr	r0, [r7, #12]
 800a39a:	f7ff fe25 	bl	8009fe8 <SCSI_SenseCode>
      return -1;
 800a39e:	f04f 33ff 	mov.w	r3, #4294967295
 800a3a2:	e07f      	b.n	800a4a4 <SCSI_Read12+0x17a>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a3aa:	68fa      	ldr	r2, [r7, #12]
 800a3ac:	33b0      	adds	r3, #176	; 0xb0
 800a3ae:	009b      	lsls	r3, r3, #2
 800a3b0:	4413      	add	r3, r2
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	7afa      	ldrb	r2, [r7, #11]
 800a3b8:	4610      	mov	r0, r2
 800a3ba:	4798      	blx	r3
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d008      	beq.n	800a3d4 <SCSI_Read12+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a3c2:	7af9      	ldrb	r1, [r7, #11]
 800a3c4:	233a      	movs	r3, #58	; 0x3a
 800a3c6:	2202      	movs	r2, #2
 800a3c8:	68f8      	ldr	r0, [r7, #12]
 800a3ca:	f7ff fe0d 	bl	8009fe8 <SCSI_SenseCode>
      return -1;
 800a3ce:	f04f 33ff 	mov.w	r3, #4294967295
 800a3d2:	e067      	b.n	800a4a4 <SCSI_Read12+0x17a>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	3302      	adds	r3, #2
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	3303      	adds	r3, #3
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a3e4:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	3304      	adds	r3, #4
 800a3ea:	781b      	ldrb	r3, [r3, #0]
 800a3ec:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a3ee:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a3f0:	687a      	ldr	r2, [r7, #4]
 800a3f2:	3205      	adds	r2, #5
 800a3f4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800a3f6:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a3f8:	697a      	ldr	r2, [r7, #20]
 800a3fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a3fe:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	3306      	adds	r3, #6
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	3307      	adds	r3, #7
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a410:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	3308      	adds	r3, #8
 800a416:	781b      	ldrb	r3, [r3, #0]
 800a418:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800a41a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800a41c:	687a      	ldr	r2, [r7, #4]
 800a41e:	3209      	adds	r2, #9
 800a420:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800a422:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a424:	697a      	ldr	r2, [r7, #20]
 800a426:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a42a:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a432:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a43a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a43c:	7af9      	ldrb	r1, [r7, #11]
 800a43e:	68f8      	ldr	r0, [r7, #12]
 800a440:	f000 fa4b 	bl	800a8da <SCSI_CheckAddressRange>
 800a444:	4603      	mov	r3, r0
 800a446:	2b00      	cmp	r3, #0
 800a448:	da02      	bge.n	800a450 <SCSI_Read12+0x126>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a44a:	f04f 33ff 	mov.w	r3, #4294967295
 800a44e:	e029      	b.n	800a4a4 <SCSI_Read12+0x17a>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a456:	699a      	ldr	r2, [r3, #24]
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a45e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a460:	6979      	ldr	r1, [r7, #20]
 800a462:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800a466:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 800a46a:	fb01 f303 	mul.w	r3, r1, r3
 800a46e:	429a      	cmp	r2, r3
 800a470:	d00b      	beq.n	800a48a <SCSI_Read12+0x160>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a478:	7f59      	ldrb	r1, [r3, #29]
 800a47a:	2320      	movs	r3, #32
 800a47c:	2205      	movs	r2, #5
 800a47e:	68f8      	ldr	r0, [r7, #12]
 800a480:	f7ff fdb2 	bl	8009fe8 <SCSI_SenseCode>
      return -1;
 800a484:	f04f 33ff 	mov.w	r3, #4294967295
 800a488:	e00c      	b.n	800a4a4 <SCSI_Read12+0x17a>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	2202      	movs	r2, #2
 800a48e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a496:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800a498:	7afb      	ldrb	r3, [r7, #11]
 800a49a:	4619      	mov	r1, r3
 800a49c:	68f8      	ldr	r0, [r7, #12]
 800a49e:	f000 fa49 	bl	800a934 <SCSI_ProcessRead>
 800a4a2:	4603      	mov	r3, r0
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3718      	adds	r7, #24
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b086      	sub	sp, #24
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	60f8      	str	r0, [r7, #12]
 800a4b4:	460b      	mov	r3, r1
 800a4b6:	607a      	str	r2, [r7, #4]
 800a4b8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	32b0      	adds	r2, #176	; 0xb0
 800a4c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4c8:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d102      	bne.n	800a4d6 <SCSI_Write10+0x2a>
  {
    return -1;
 800a4d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a4d4:	e0c7      	b.n	800a666 <SCSI_Write10+0x1ba>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	7a1b      	ldrb	r3, [r3, #8]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	f040 80bd 	bne.w	800a65a <SCSI_Write10+0x1ae>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4e6:	699b      	ldr	r3, [r3, #24]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d10b      	bne.n	800a504 <SCSI_Write10+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4f2:	7f59      	ldrb	r1, [r3, #29]
 800a4f4:	2320      	movs	r3, #32
 800a4f6:	2205      	movs	r2, #5
 800a4f8:	68f8      	ldr	r0, [r7, #12]
 800a4fa:	f7ff fd75 	bl	8009fe8 <SCSI_SenseCode>
      return -1;
 800a4fe:	f04f 33ff 	mov.w	r3, #4294967295
 800a502:	e0b0      	b.n	800a666 <SCSI_Write10+0x1ba>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a50a:	7f1b      	ldrb	r3, [r3, #28]
 800a50c:	b25b      	sxtb	r3, r3
 800a50e:	2b00      	cmp	r3, #0
 800a510:	da0b      	bge.n	800a52a <SCSI_Write10+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a518:	7f59      	ldrb	r1, [r3, #29]
 800a51a:	2320      	movs	r3, #32
 800a51c:	2205      	movs	r2, #5
 800a51e:	68f8      	ldr	r0, [r7, #12]
 800a520:	f7ff fd62 	bl	8009fe8 <SCSI_SenseCode>
      return -1;
 800a524:	f04f 33ff 	mov.w	r3, #4294967295
 800a528:	e09d      	b.n	800a666 <SCSI_Write10+0x1ba>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a530:	68fa      	ldr	r2, [r7, #12]
 800a532:	33b0      	adds	r3, #176	; 0xb0
 800a534:	009b      	lsls	r3, r3, #2
 800a536:	4413      	add	r3, r2
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	689b      	ldr	r3, [r3, #8]
 800a53c:	7afa      	ldrb	r2, [r7, #11]
 800a53e:	4610      	mov	r0, r2
 800a540:	4798      	blx	r3
 800a542:	4603      	mov	r3, r0
 800a544:	2b00      	cmp	r3, #0
 800a546:	d008      	beq.n	800a55a <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a548:	7af9      	ldrb	r1, [r7, #11]
 800a54a:	233a      	movs	r3, #58	; 0x3a
 800a54c:	2202      	movs	r2, #2
 800a54e:	68f8      	ldr	r0, [r7, #12]
 800a550:	f7ff fd4a 	bl	8009fe8 <SCSI_SenseCode>
      return -1;
 800a554:	f04f 33ff 	mov.w	r3, #4294967295
 800a558:	e085      	b.n	800a666 <SCSI_Write10+0x1ba>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a560:	68fa      	ldr	r2, [r7, #12]
 800a562:	33b0      	adds	r3, #176	; 0xb0
 800a564:	009b      	lsls	r3, r3, #2
 800a566:	4413      	add	r3, r2
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	68db      	ldr	r3, [r3, #12]
 800a56c:	7afa      	ldrb	r2, [r7, #11]
 800a56e:	4610      	mov	r0, r2
 800a570:	4798      	blx	r3
 800a572:	4603      	mov	r3, r0
 800a574:	2b00      	cmp	r3, #0
 800a576:	d008      	beq.n	800a58a <SCSI_Write10+0xde>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800a578:	7af9      	ldrb	r1, [r7, #11]
 800a57a:	2327      	movs	r3, #39	; 0x27
 800a57c:	2202      	movs	r2, #2
 800a57e:	68f8      	ldr	r0, [r7, #12]
 800a580:	f7ff fd32 	bl	8009fe8 <SCSI_SenseCode>
      return -1;
 800a584:	f04f 33ff 	mov.w	r3, #4294967295
 800a588:	e06d      	b.n	800a666 <SCSI_Write10+0x1ba>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	3302      	adds	r3, #2
 800a58e:	781b      	ldrb	r3, [r3, #0]
 800a590:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	3303      	adds	r3, #3
 800a596:	781b      	ldrb	r3, [r3, #0]
 800a598:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a59a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	3304      	adds	r3, #4
 800a5a0:	781b      	ldrb	r3, [r3, #0]
 800a5a2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a5a4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a5a6:	687a      	ldr	r2, [r7, #4]
 800a5a8:	3205      	adds	r2, #5
 800a5aa:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800a5ac:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a5ae:	697a      	ldr	r2, [r7, #20]
 800a5b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a5b4:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	3307      	adds	r3, #7
 800a5ba:	781b      	ldrb	r3, [r3, #0]
 800a5bc:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800a5be:	687a      	ldr	r2, [r7, #4]
 800a5c0:	3208      	adds	r2, #8
 800a5c2:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800a5c4:	4313      	orrs	r3, r2
 800a5c6:	697a      	ldr	r2, [r7, #20]
 800a5c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a5cc:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5d4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5de:	7af9      	ldrb	r1, [r7, #11]
 800a5e0:	68f8      	ldr	r0, [r7, #12]
 800a5e2:	f000 f97a 	bl	800a8da <SCSI_CheckAddressRange>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	da02      	bge.n	800a5f2 <SCSI_Write10+0x146>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a5ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a5f0:	e039      	b.n	800a666 <SCSI_Write10+0x1ba>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5fa:	697a      	ldr	r2, [r7, #20]
 800a5fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a600:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800a604:	fb02 f303 	mul.w	r3, r2, r3
 800a608:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a610:	699b      	ldr	r3, [r3, #24]
 800a612:	693a      	ldr	r2, [r7, #16]
 800a614:	429a      	cmp	r2, r3
 800a616:	d00b      	beq.n	800a630 <SCSI_Write10+0x184>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a61e:	7f59      	ldrb	r1, [r3, #29]
 800a620:	2320      	movs	r3, #32
 800a622:	2205      	movs	r2, #5
 800a624:	68f8      	ldr	r0, [r7, #12]
 800a626:	f7ff fcdf 	bl	8009fe8 <SCSI_SenseCode>
      return -1;
 800a62a:	f04f 33ff 	mov.w	r3, #4294967295
 800a62e:	e01a      	b.n	800a666 <SCSI_Write10+0x1ba>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a636:	bf28      	it	cs
 800a638:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800a63c:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	2201      	movs	r2, #1
 800a642:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800a644:	4b0a      	ldr	r3, [pc, #40]	; (800a670 <SCSI_Write10+0x1c4>)
 800a646:	7819      	ldrb	r1, [r3, #0]
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	f103 0210 	add.w	r2, r3, #16
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	68f8      	ldr	r0, [r7, #12]
 800a652:	f002 faf3 	bl	800cc3c <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800a656:	2300      	movs	r3, #0
 800a658:	e005      	b.n	800a666 <SCSI_Write10+0x1ba>
    return SCSI_ProcessWrite(pdev, lun);
 800a65a:	7afb      	ldrb	r3, [r7, #11]
 800a65c:	4619      	mov	r1, r3
 800a65e:	68f8      	ldr	r0, [r7, #12]
 800a660:	f000 f9fe 	bl	800aa60 <SCSI_ProcessWrite>
 800a664:	4603      	mov	r3, r0
}
 800a666:	4618      	mov	r0, r3
 800a668:	3718      	adds	r7, #24
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}
 800a66e:	bf00      	nop
 800a670:	2000010b 	.word	0x2000010b

0800a674 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b086      	sub	sp, #24
 800a678:	af00      	add	r7, sp, #0
 800a67a:	60f8      	str	r0, [r7, #12]
 800a67c:	460b      	mov	r3, r1
 800a67e:	607a      	str	r2, [r7, #4]
 800a680:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	32b0      	adds	r2, #176	; 0xb0
 800a68c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a690:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d102      	bne.n	800a69e <SCSI_Write12+0x2a>
  {
    return -1;
 800a698:	f04f 33ff 	mov.w	r3, #4294967295
 800a69c:	e0d7      	b.n	800a84e <SCSI_Write12+0x1da>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	7a1b      	ldrb	r3, [r3, #8]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	f040 80cd 	bne.w	800a842 <SCSI_Write12+0x1ce>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6ae:	699b      	ldr	r3, [r3, #24]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d10b      	bne.n	800a6cc <SCSI_Write12+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6ba:	7f59      	ldrb	r1, [r3, #29]
 800a6bc:	2320      	movs	r3, #32
 800a6be:	2205      	movs	r2, #5
 800a6c0:	68f8      	ldr	r0, [r7, #12]
 800a6c2:	f7ff fc91 	bl	8009fe8 <SCSI_SenseCode>
      return -1;
 800a6c6:	f04f 33ff 	mov.w	r3, #4294967295
 800a6ca:	e0c0      	b.n	800a84e <SCSI_Write12+0x1da>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6d2:	7f1b      	ldrb	r3, [r3, #28]
 800a6d4:	b25b      	sxtb	r3, r3
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	da0b      	bge.n	800a6f2 <SCSI_Write12+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6e0:	7f59      	ldrb	r1, [r3, #29]
 800a6e2:	2320      	movs	r3, #32
 800a6e4:	2205      	movs	r2, #5
 800a6e6:	68f8      	ldr	r0, [r7, #12]
 800a6e8:	f7ff fc7e 	bl	8009fe8 <SCSI_SenseCode>
      return -1;
 800a6ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a6f0:	e0ad      	b.n	800a84e <SCSI_Write12+0x1da>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a6f8:	68fa      	ldr	r2, [r7, #12]
 800a6fa:	33b0      	adds	r3, #176	; 0xb0
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	4413      	add	r3, r2
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	689b      	ldr	r3, [r3, #8]
 800a704:	7afa      	ldrb	r2, [r7, #11]
 800a706:	4610      	mov	r0, r2
 800a708:	4798      	blx	r3
 800a70a:	4603      	mov	r3, r0
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d00b      	beq.n	800a728 <SCSI_Write12+0xb4>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a710:	7af9      	ldrb	r1, [r7, #11]
 800a712:	233a      	movs	r3, #58	; 0x3a
 800a714:	2202      	movs	r2, #2
 800a716:	68f8      	ldr	r0, [r7, #12]
 800a718:	f7ff fc66 	bl	8009fe8 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	2205      	movs	r2, #5
 800a720:	721a      	strb	r2, [r3, #8]
      return -1;
 800a722:	f04f 33ff 	mov.w	r3, #4294967295
 800a726:	e092      	b.n	800a84e <SCSI_Write12+0x1da>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a72e:	68fa      	ldr	r2, [r7, #12]
 800a730:	33b0      	adds	r3, #176	; 0xb0
 800a732:	009b      	lsls	r3, r3, #2
 800a734:	4413      	add	r3, r2
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	68db      	ldr	r3, [r3, #12]
 800a73a:	7afa      	ldrb	r2, [r7, #11]
 800a73c:	4610      	mov	r0, r2
 800a73e:	4798      	blx	r3
 800a740:	4603      	mov	r3, r0
 800a742:	2b00      	cmp	r3, #0
 800a744:	d00b      	beq.n	800a75e <SCSI_Write12+0xea>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800a746:	7af9      	ldrb	r1, [r7, #11]
 800a748:	2327      	movs	r3, #39	; 0x27
 800a74a:	2202      	movs	r2, #2
 800a74c:	68f8      	ldr	r0, [r7, #12]
 800a74e:	f7ff fc4b 	bl	8009fe8 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	2205      	movs	r2, #5
 800a756:	721a      	strb	r2, [r3, #8]
      return -1;
 800a758:	f04f 33ff 	mov.w	r3, #4294967295
 800a75c:	e077      	b.n	800a84e <SCSI_Write12+0x1da>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	3302      	adds	r3, #2
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	3303      	adds	r3, #3
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a76e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	3304      	adds	r3, #4
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a778:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	3205      	adds	r2, #5
 800a77e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800a780:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a782:	697a      	ldr	r2, [r7, #20]
 800a784:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a788:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	3306      	adds	r3, #6
 800a78e:	781b      	ldrb	r3, [r3, #0]
 800a790:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	3307      	adds	r3, #7
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a79a:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	3308      	adds	r3, #8
 800a7a0:	781b      	ldrb	r3, [r3, #0]
 800a7a2:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800a7a4:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	3209      	adds	r2, #9
 800a7aa:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800a7ac:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a7ae:	697a      	ldr	r2, [r7, #20]
 800a7b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a7b4:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7bc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7c6:	7af9      	ldrb	r1, [r7, #11]
 800a7c8:	68f8      	ldr	r0, [r7, #12]
 800a7ca:	f000 f886 	bl	800a8da <SCSI_CheckAddressRange>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	da02      	bge.n	800a7da <SCSI_Write12+0x166>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a7d4:	f04f 33ff 	mov.w	r3, #4294967295
 800a7d8:	e039      	b.n	800a84e <SCSI_Write12+0x1da>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7e2:	697a      	ldr	r2, [r7, #20]
 800a7e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a7e8:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800a7ec:	fb02 f303 	mul.w	r3, r2, r3
 800a7f0:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7f8:	699b      	ldr	r3, [r3, #24]
 800a7fa:	693a      	ldr	r2, [r7, #16]
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d00b      	beq.n	800a818 <SCSI_Write12+0x1a4>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a806:	7f59      	ldrb	r1, [r3, #29]
 800a808:	2320      	movs	r3, #32
 800a80a:	2205      	movs	r2, #5
 800a80c:	68f8      	ldr	r0, [r7, #12]
 800a80e:	f7ff fbeb 	bl	8009fe8 <SCSI_SenseCode>
      return -1;
 800a812:	f04f 33ff 	mov.w	r3, #4294967295
 800a816:	e01a      	b.n	800a84e <SCSI_Write12+0x1da>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a81e:	bf28      	it	cs
 800a820:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800a824:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	2201      	movs	r2, #1
 800a82a:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800a82c:	4b0a      	ldr	r3, [pc, #40]	; (800a858 <SCSI_Write12+0x1e4>)
 800a82e:	7819      	ldrb	r1, [r3, #0]
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	f103 0210 	add.w	r2, r3, #16
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	68f8      	ldr	r0, [r7, #12]
 800a83a:	f002 f9ff 	bl	800cc3c <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800a83e:	2300      	movs	r3, #0
 800a840:	e005      	b.n	800a84e <SCSI_Write12+0x1da>
    return SCSI_ProcessWrite(pdev, lun);
 800a842:	7afb      	ldrb	r3, [r7, #11]
 800a844:	4619      	mov	r1, r3
 800a846:	68f8      	ldr	r0, [r7, #12]
 800a848:	f000 f90a 	bl	800aa60 <SCSI_ProcessWrite>
 800a84c:	4603      	mov	r3, r0
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3718      	adds	r7, #24
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
 800a856:	bf00      	nop
 800a858:	2000010b 	.word	0x2000010b

0800a85c <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b086      	sub	sp, #24
 800a860:	af00      	add	r7, sp, #0
 800a862:	60f8      	str	r0, [r7, #12]
 800a864:	460b      	mov	r3, r1
 800a866:	607a      	str	r2, [r7, #4]
 800a868:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	32b0      	adds	r2, #176	; 0xb0
 800a874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a878:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d102      	bne.n	800a886 <SCSI_Verify10+0x2a>
  {
    return -1;
 800a880:	f04f 33ff 	mov.w	r3, #4294967295
 800a884:	e025      	b.n	800a8d2 <SCSI_Verify10+0x76>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	3301      	adds	r3, #1
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	f003 0302 	and.w	r3, r3, #2
 800a890:	2b00      	cmp	r3, #0
 800a892:	d008      	beq.n	800a8a6 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800a894:	7af9      	ldrb	r1, [r7, #11]
 800a896:	2324      	movs	r3, #36	; 0x24
 800a898:	2205      	movs	r2, #5
 800a89a:	68f8      	ldr	r0, [r7, #12]
 800a89c:	f7ff fba4 	bl	8009fe8 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800a8a0:	f04f 33ff 	mov.w	r3, #4294967295
 800a8a4:	e015      	b.n	800a8d2 <SCSI_Verify10+0x76>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8ac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8b6:	7af9      	ldrb	r1, [r7, #11]
 800a8b8:	68f8      	ldr	r0, [r7, #12]
 800a8ba:	f000 f80e 	bl	800a8da <SCSI_CheckAddressRange>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	da02      	bge.n	800a8ca <SCSI_Verify10+0x6e>
  {
    return -1; /* error */
 800a8c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a8c8:	e003      	b.n	800a8d2 <SCSI_Verify10+0x76>
  }

  hmsc->bot_data_length = 0U;
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	60da      	str	r2, [r3, #12]

  return 0;
 800a8d0:	2300      	movs	r3, #0
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3718      	adds	r7, #24
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}

0800a8da <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800a8da:	b580      	push	{r7, lr}
 800a8dc:	b086      	sub	sp, #24
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	60f8      	str	r0, [r7, #12]
 800a8e2:	607a      	str	r2, [r7, #4]
 800a8e4:	603b      	str	r3, [r7, #0]
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	32b0      	adds	r2, #176	; 0xb0
 800a8f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8f8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d102      	bne.n	800a906 <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800a900:	f04f 33ff 	mov.w	r3, #4294967295
 800a904:	e012      	b.n	800a92c <SCSI_CheckAddressRange+0x52>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800a906:	687a      	ldr	r2, [r7, #4]
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	441a      	add	r2, r3
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a912:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a914:	429a      	cmp	r2, r3
 800a916:	d908      	bls.n	800a92a <SCSI_CheckAddressRange+0x50>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800a918:	7af9      	ldrb	r1, [r7, #11]
 800a91a:	2321      	movs	r3, #33	; 0x21
 800a91c:	2205      	movs	r2, #5
 800a91e:	68f8      	ldr	r0, [r7, #12]
 800a920:	f7ff fb62 	bl	8009fe8 <SCSI_SenseCode>
    return -1;
 800a924:	f04f 33ff 	mov.w	r3, #4294967295
 800a928:	e000      	b.n	800a92c <SCSI_CheckAddressRange+0x52>
  }

  return 0;
 800a92a:	2300      	movs	r3, #0
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3718      	adds	r7, #24
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800a934:	b590      	push	{r4, r7, lr}
 800a936:	b085      	sub	sp, #20
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	460b      	mov	r3, r1
 800a93e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	32b0      	adds	r2, #176	; 0xb0
 800a94a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a94e:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d102      	bne.n	800a95c <SCSI_ProcessRead+0x28>
  {
    return -1;
 800a956:	f04f 33ff 	mov.w	r3, #4294967295
 800a95a:	e07b      	b.n	800aa54 <SCSI_ProcessRead+0x120>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a964:	68fa      	ldr	r2, [r7, #12]
 800a966:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a96a:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800a96e:	fb02 f303 	mul.w	r3, r2, r3
 800a972:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a97a:	bf28      	it	cs
 800a97c:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800a980:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a988:	687a      	ldr	r2, [r7, #4]
 800a98a:	33b0      	adds	r3, #176	; 0xb0
 800a98c:	009b      	lsls	r3, r3, #2
 800a98e:	4413      	add	r3, r2
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	691c      	ldr	r4, [r3, #16]
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f103 0110 	add.w	r1, r3, #16
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9a0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9a8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800a9b4:	b29b      	uxth	r3, r3
 800a9b6:	78f8      	ldrb	r0, [r7, #3]
 800a9b8:	47a0      	blx	r4
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	da08      	bge.n	800a9d2 <SCSI_ProcessRead+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800a9c0:	78f9      	ldrb	r1, [r7, #3]
 800a9c2:	2311      	movs	r3, #17
 800a9c4:	2204      	movs	r2, #4
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f7ff fb0e 	bl	8009fe8 <SCSI_SenseCode>
    return -1;
 800a9cc:	f04f 33ff 	mov.w	r3, #4294967295
 800a9d0:	e040      	b.n	800aa54 <SCSI_ProcessRead+0x120>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800a9d2:	4b22      	ldr	r3, [pc, #136]	; (800aa5c <SCSI_ProcessRead+0x128>)
 800a9d4:	7819      	ldrb	r1, [r3, #0]
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	f103 0210 	add.w	r2, r3, #16
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f002 f8f4 	bl	800cbcc <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9ea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9f2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	fbb3 f3f1 	udiv	r3, r3, r1
 800a9fe:	4413      	add	r3, r2
 800aa00:	68fa      	ldr	r2, [r7, #12]
 800aa02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aa06:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa16:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	fbb3 f3f1 	udiv	r3, r3, r1
 800aa22:	1ad3      	subs	r3, r2, r3
 800aa24:	68fa      	ldr	r2, [r7, #12]
 800aa26:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aa2a:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	1ad3      	subs	r3, r2, r3
 800aa38:	68fa      	ldr	r2, [r7, #12]
 800aa3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aa3e:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d102      	bne.n	800aa52 <SCSI_ProcessRead+0x11e>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2203      	movs	r2, #3
 800aa50:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800aa52:	2300      	movs	r3, #0
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3714      	adds	r7, #20
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd90      	pop	{r4, r7, pc}
 800aa5c:	2000010a 	.word	0x2000010a

0800aa60 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800aa60:	b590      	push	{r4, r7, lr}
 800aa62:	b085      	sub	sp, #20
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	460b      	mov	r3, r1
 800aa6a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	32b0      	adds	r2, #176	; 0xb0
 800aa76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa7a:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d102      	bne.n	800aa88 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800aa82:	f04f 33ff 	mov.w	r3, #4294967295
 800aa86:	e08e      	b.n	800aba6 <SCSI_ProcessWrite+0x146>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa90:	68fa      	ldr	r2, [r7, #12]
 800aa92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aa96:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800aa9a:	fb02 f303 	mul.w	r3, r2, r3
 800aa9e:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aaa6:	bf28      	it	cs
 800aaa8:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800aaac:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aab4:	687a      	ldr	r2, [r7, #4]
 800aab6:	33b0      	adds	r3, #176	; 0xb0
 800aab8:	009b      	lsls	r3, r3, #2
 800aaba:	4413      	add	r3, r2
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	695c      	ldr	r4, [r3, #20]
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f103 0110 	add.w	r1, r3, #16
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aacc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aad4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800aad8:	4618      	mov	r0, r3
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800aae0:	b29b      	uxth	r3, r3
 800aae2:	78f8      	ldrb	r0, [r7, #3]
 800aae4:	47a0      	blx	r4
 800aae6:	4603      	mov	r3, r0
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	da08      	bge.n	800aafe <SCSI_ProcessWrite+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800aaec:	78f9      	ldrb	r1, [r7, #3]
 800aaee:	2303      	movs	r3, #3
 800aaf0:	2204      	movs	r2, #4
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f7ff fa78 	bl	8009fe8 <SCSI_SenseCode>
    return -1;
 800aaf8:	f04f 33ff 	mov.w	r3, #4294967295
 800aafc:	e053      	b.n	800aba6 <SCSI_ProcessWrite+0x146>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab04:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab0c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ab10:	4619      	mov	r1, r3
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	fbb3 f3f1 	udiv	r3, r3, r1
 800ab18:	4413      	add	r3, r2
 800ab1a:	68fa      	ldr	r2, [r7, #12]
 800ab1c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ab20:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab30:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ab34:	4619      	mov	r1, r3
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	fbb3 f3f1 	udiv	r3, r3, r1
 800ab3c:	1ad3      	subs	r3, r2, r3
 800ab3e:	68fa      	ldr	r2, [r7, #12]
 800ab40:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ab44:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	1ad3      	subs	r3, r2, r3
 800ab52:	68fa      	ldr	r2, [r7, #12]
 800ab54:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ab58:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d104      	bne.n	800ab70 <SCSI_ProcessWrite+0x110>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800ab66:	2100      	movs	r1, #0
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f7fe fc53 	bl	8009414 <MSC_BOT_SendCSW>
 800ab6e:	e019      	b.n	800aba4 <SCSI_ProcessWrite+0x144>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab78:	68fa      	ldr	r2, [r7, #12]
 800ab7a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ab7e:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800ab82:	fb02 f303 	mul.w	r3, r2, r3
 800ab86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab8a:	bf28      	it	cs
 800ab8c:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800ab90:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800ab92:	4b07      	ldr	r3, [pc, #28]	; (800abb0 <SCSI_ProcessWrite+0x150>)
 800ab94:	7819      	ldrb	r1, [r3, #0]
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f103 0210 	add.w	r2, r3, #16
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f002 f84c 	bl	800cc3c <USBD_LL_PrepareReceive>
  }

  return 0;
 800aba4:	2300      	movs	r3, #0
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3714      	adds	r7, #20
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd90      	pop	{r4, r7, pc}
 800abae:	bf00      	nop
 800abb0:	2000010b 	.word	0x2000010b

0800abb4 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b087      	sub	sp, #28
 800abb8:	af00      	add	r7, sp, #0
 800abba:	60f8      	str	r0, [r7, #12]
 800abbc:	60b9      	str	r1, [r7, #8]
 800abbe:	4613      	mov	r3, r2
 800abc0:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800abc2:	88fb      	ldrh	r3, [r7, #6]
 800abc4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d102      	bne.n	800abd2 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800abcc:	f04f 33ff 	mov.w	r3, #4294967295
 800abd0:	e013      	b.n	800abfa <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800abd2:	8afa      	ldrh	r2, [r7, #22]
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800abd8:	e00b      	b.n	800abf2 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800abda:	8afb      	ldrh	r3, [r7, #22]
 800abdc:	3b01      	subs	r3, #1
 800abde:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800abe0:	8afb      	ldrh	r3, [r7, #22]
 800abe2:	68ba      	ldr	r2, [r7, #8]
 800abe4:	441a      	add	r2, r3
 800abe6:	8afb      	ldrh	r3, [r7, #22]
 800abe8:	7811      	ldrb	r1, [r2, #0]
 800abea:	68fa      	ldr	r2, [r7, #12]
 800abec:	4413      	add	r3, r2
 800abee:	460a      	mov	r2, r1
 800abf0:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800abf2:	8afb      	ldrh	r3, [r7, #22]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d1f0      	bne.n	800abda <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800abf8:	2300      	movs	r3, #0
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	371c      	adds	r7, #28
 800abfe:	46bd      	mov	sp, r7
 800ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac04:	4770      	bx	lr

0800ac06 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ac06:	b580      	push	{r7, lr}
 800ac08:	b086      	sub	sp, #24
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	60f8      	str	r0, [r7, #12]
 800ac0e:	60b9      	str	r1, [r7, #8]
 800ac10:	4613      	mov	r3, r2
 800ac12:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d101      	bne.n	800ac1e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ac1a:	2303      	movs	r3, #3
 800ac1c:	e01f      	b.n	800ac5e <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2200      	movs	r2, #0
 800ac22:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2200      	movs	r2, #0
 800ac32:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d003      	beq.n	800ac44 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	68ba      	ldr	r2, [r7, #8]
 800ac40:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2201      	movs	r2, #1
 800ac48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	79fa      	ldrb	r2, [r7, #7]
 800ac50:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ac52:	68f8      	ldr	r0, [r7, #12]
 800ac54:	f001 fdb6 	bl	800c7c4 <USBD_LL_Init>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ac5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3718      	adds	r7, #24
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}

0800ac66 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ac66:	b580      	push	{r7, lr}
 800ac68:	b084      	sub	sp, #16
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	6078      	str	r0, [r7, #4]
 800ac6e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ac70:	2300      	movs	r3, #0
 800ac72:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d101      	bne.n	800ac7e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ac7a:	2303      	movs	r3, #3
 800ac7c:	e025      	b.n	800acca <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	683a      	ldr	r2, [r7, #0]
 800ac82:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	32ae      	adds	r2, #174	; 0xae
 800ac90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d00f      	beq.n	800acba <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	32ae      	adds	r2, #174	; 0xae
 800aca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acaa:	f107 020e 	add.w	r2, r7, #14
 800acae:	4610      	mov	r0, r2
 800acb0:	4798      	blx	r3
 800acb2:	4602      	mov	r2, r0
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800acc0:	1c5a      	adds	r2, r3, #1
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800acc8:	2300      	movs	r3, #0
}
 800acca:	4618      	mov	r0, r3
 800accc:	3710      	adds	r7, #16
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}

0800acd2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800acd2:	b580      	push	{r7, lr}
 800acd4:	b082      	sub	sp, #8
 800acd6:	af00      	add	r7, sp, #0
 800acd8:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f001 fdca 	bl	800c874 <USBD_LL_Start>
 800ace0:	4603      	mov	r3, r0
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3708      	adds	r7, #8
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}

0800acea <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800acea:	b480      	push	{r7}
 800acec:	b083      	sub	sp, #12
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800acf2:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	370c      	adds	r7, #12
 800acf8:	46bd      	mov	sp, r7
 800acfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfe:	4770      	bx	lr

0800ad00 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b084      	sub	sp, #16
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	460b      	mov	r3, r1
 800ad0a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d009      	beq.n	800ad2e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	78fa      	ldrb	r2, [r7, #3]
 800ad24:	4611      	mov	r1, r2
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	4798      	blx	r3
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ad2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	3710      	adds	r7, #16
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}

0800ad38 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b084      	sub	sp, #16
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	460b      	mov	r3, r1
 800ad42:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad44:	2300      	movs	r3, #0
 800ad46:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad4e:	685b      	ldr	r3, [r3, #4]
 800ad50:	78fa      	ldrb	r2, [r7, #3]
 800ad52:	4611      	mov	r1, r2
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	4798      	blx	r3
 800ad58:	4603      	mov	r3, r0
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d001      	beq.n	800ad62 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ad5e:	2303      	movs	r3, #3
 800ad60:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ad62:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3710      	adds	r7, #16
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b084      	sub	sp, #16
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ad7c:	6839      	ldr	r1, [r7, #0]
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f001 f8a7 	bl	800bed2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2201      	movs	r2, #1
 800ad88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ad92:	461a      	mov	r2, r3
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ada0:	f003 031f 	and.w	r3, r3, #31
 800ada4:	2b02      	cmp	r3, #2
 800ada6:	d01a      	beq.n	800adde <USBD_LL_SetupStage+0x72>
 800ada8:	2b02      	cmp	r3, #2
 800adaa:	d822      	bhi.n	800adf2 <USBD_LL_SetupStage+0x86>
 800adac:	2b00      	cmp	r3, #0
 800adae:	d002      	beq.n	800adb6 <USBD_LL_SetupStage+0x4a>
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	d00a      	beq.n	800adca <USBD_LL_SetupStage+0x5e>
 800adb4:	e01d      	b.n	800adf2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800adbc:	4619      	mov	r1, r3
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f000 fad4 	bl	800b36c <USBD_StdDevReq>
 800adc4:	4603      	mov	r3, r0
 800adc6:	73fb      	strb	r3, [r7, #15]
      break;
 800adc8:	e020      	b.n	800ae0c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800add0:	4619      	mov	r1, r3
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 fb3c 	bl	800b450 <USBD_StdItfReq>
 800add8:	4603      	mov	r3, r0
 800adda:	73fb      	strb	r3, [r7, #15]
      break;
 800addc:	e016      	b.n	800ae0c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ade4:	4619      	mov	r1, r3
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 fb9e 	bl	800b528 <USBD_StdEPReq>
 800adec:	4603      	mov	r3, r0
 800adee:	73fb      	strb	r3, [r7, #15]
      break;
 800adf0:	e00c      	b.n	800ae0c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800adf8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800adfc:	b2db      	uxtb	r3, r3
 800adfe:	4619      	mov	r1, r3
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f001 fe13 	bl	800ca2c <USBD_LL_StallEP>
 800ae06:	4603      	mov	r3, r0
 800ae08:	73fb      	strb	r3, [r7, #15]
      break;
 800ae0a:	bf00      	nop
  }

  return ret;
 800ae0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3710      	adds	r7, #16
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}

0800ae16 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ae16:	b580      	push	{r7, lr}
 800ae18:	b086      	sub	sp, #24
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	60f8      	str	r0, [r7, #12]
 800ae1e:	460b      	mov	r3, r1
 800ae20:	607a      	str	r2, [r7, #4]
 800ae22:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ae24:	2300      	movs	r3, #0
 800ae26:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ae28:	7afb      	ldrb	r3, [r7, #11]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d16e      	bne.n	800af0c <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ae34:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ae3c:	2b03      	cmp	r3, #3
 800ae3e:	f040 8098 	bne.w	800af72 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	689a      	ldr	r2, [r3, #8]
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	68db      	ldr	r3, [r3, #12]
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d913      	bls.n	800ae76 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	689a      	ldr	r2, [r3, #8]
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	68db      	ldr	r3, [r3, #12]
 800ae56:	1ad2      	subs	r2, r2, r3
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	68da      	ldr	r2, [r3, #12]
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	689b      	ldr	r3, [r3, #8]
 800ae64:	4293      	cmp	r3, r2
 800ae66:	bf28      	it	cs
 800ae68:	4613      	movcs	r3, r2
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	6879      	ldr	r1, [r7, #4]
 800ae6e:	68f8      	ldr	r0, [r7, #12]
 800ae70:	f001 f923 	bl	800c0ba <USBD_CtlContinueRx>
 800ae74:	e07d      	b.n	800af72 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ae7c:	f003 031f 	and.w	r3, r3, #31
 800ae80:	2b02      	cmp	r3, #2
 800ae82:	d014      	beq.n	800aeae <USBD_LL_DataOutStage+0x98>
 800ae84:	2b02      	cmp	r3, #2
 800ae86:	d81d      	bhi.n	800aec4 <USBD_LL_DataOutStage+0xae>
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d002      	beq.n	800ae92 <USBD_LL_DataOutStage+0x7c>
 800ae8c:	2b01      	cmp	r3, #1
 800ae8e:	d003      	beq.n	800ae98 <USBD_LL_DataOutStage+0x82>
 800ae90:	e018      	b.n	800aec4 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ae92:	2300      	movs	r3, #0
 800ae94:	75bb      	strb	r3, [r7, #22]
            break;
 800ae96:	e018      	b.n	800aeca <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ae9e:	b2db      	uxtb	r3, r3
 800aea0:	4619      	mov	r1, r3
 800aea2:	68f8      	ldr	r0, [r7, #12]
 800aea4:	f000 f9d2 	bl	800b24c <USBD_CoreFindIF>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	75bb      	strb	r3, [r7, #22]
            break;
 800aeac:	e00d      	b.n	800aeca <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800aeb4:	b2db      	uxtb	r3, r3
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	68f8      	ldr	r0, [r7, #12]
 800aeba:	f000 f9d4 	bl	800b266 <USBD_CoreFindEP>
 800aebe:	4603      	mov	r3, r0
 800aec0:	75bb      	strb	r3, [r7, #22]
            break;
 800aec2:	e002      	b.n	800aeca <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800aec4:	2300      	movs	r3, #0
 800aec6:	75bb      	strb	r3, [r7, #22]
            break;
 800aec8:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800aeca:	7dbb      	ldrb	r3, [r7, #22]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d119      	bne.n	800af04 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aed6:	b2db      	uxtb	r3, r3
 800aed8:	2b03      	cmp	r3, #3
 800aeda:	d113      	bne.n	800af04 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800aedc:	7dba      	ldrb	r2, [r7, #22]
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	32ae      	adds	r2, #174	; 0xae
 800aee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aee6:	691b      	ldr	r3, [r3, #16]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d00b      	beq.n	800af04 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800aeec:	7dba      	ldrb	r2, [r7, #22]
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800aef4:	7dba      	ldrb	r2, [r7, #22]
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	32ae      	adds	r2, #174	; 0xae
 800aefa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aefe:	691b      	ldr	r3, [r3, #16]
 800af00:	68f8      	ldr	r0, [r7, #12]
 800af02:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800af04:	68f8      	ldr	r0, [r7, #12]
 800af06:	f001 f8e9 	bl	800c0dc <USBD_CtlSendStatus>
 800af0a:	e032      	b.n	800af72 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800af0c:	7afb      	ldrb	r3, [r7, #11]
 800af0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af12:	b2db      	uxtb	r3, r3
 800af14:	4619      	mov	r1, r3
 800af16:	68f8      	ldr	r0, [r7, #12]
 800af18:	f000 f9a5 	bl	800b266 <USBD_CoreFindEP>
 800af1c:	4603      	mov	r3, r0
 800af1e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af20:	7dbb      	ldrb	r3, [r7, #22]
 800af22:	2bff      	cmp	r3, #255	; 0xff
 800af24:	d025      	beq.n	800af72 <USBD_LL_DataOutStage+0x15c>
 800af26:	7dbb      	ldrb	r3, [r7, #22]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d122      	bne.n	800af72 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af32:	b2db      	uxtb	r3, r3
 800af34:	2b03      	cmp	r3, #3
 800af36:	d117      	bne.n	800af68 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800af38:	7dba      	ldrb	r2, [r7, #22]
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	32ae      	adds	r2, #174	; 0xae
 800af3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af42:	699b      	ldr	r3, [r3, #24]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d00f      	beq.n	800af68 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800af48:	7dba      	ldrb	r2, [r7, #22]
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800af50:	7dba      	ldrb	r2, [r7, #22]
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	32ae      	adds	r2, #174	; 0xae
 800af56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af5a:	699b      	ldr	r3, [r3, #24]
 800af5c:	7afa      	ldrb	r2, [r7, #11]
 800af5e:	4611      	mov	r1, r2
 800af60:	68f8      	ldr	r0, [r7, #12]
 800af62:	4798      	blx	r3
 800af64:	4603      	mov	r3, r0
 800af66:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800af68:	7dfb      	ldrb	r3, [r7, #23]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d001      	beq.n	800af72 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800af6e:	7dfb      	ldrb	r3, [r7, #23]
 800af70:	e000      	b.n	800af74 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800af72:	2300      	movs	r3, #0
}
 800af74:	4618      	mov	r0, r3
 800af76:	3718      	adds	r7, #24
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b086      	sub	sp, #24
 800af80:	af00      	add	r7, sp, #0
 800af82:	60f8      	str	r0, [r7, #12]
 800af84:	460b      	mov	r3, r1
 800af86:	607a      	str	r2, [r7, #4]
 800af88:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800af8a:	7afb      	ldrb	r3, [r7, #11]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d16f      	bne.n	800b070 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	3314      	adds	r3, #20
 800af94:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800af9c:	2b02      	cmp	r3, #2
 800af9e:	d15a      	bne.n	800b056 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800afa0:	693b      	ldr	r3, [r7, #16]
 800afa2:	689a      	ldr	r2, [r3, #8]
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	68db      	ldr	r3, [r3, #12]
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d914      	bls.n	800afd6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	689a      	ldr	r2, [r3, #8]
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	68db      	ldr	r3, [r3, #12]
 800afb4:	1ad2      	subs	r2, r2, r3
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	689b      	ldr	r3, [r3, #8]
 800afbe:	461a      	mov	r2, r3
 800afc0:	6879      	ldr	r1, [r7, #4]
 800afc2:	68f8      	ldr	r0, [r7, #12]
 800afc4:	f001 f84b 	bl	800c05e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800afc8:	2300      	movs	r3, #0
 800afca:	2200      	movs	r2, #0
 800afcc:	2100      	movs	r1, #0
 800afce:	68f8      	ldr	r0, [r7, #12]
 800afd0:	f001 fe34 	bl	800cc3c <USBD_LL_PrepareReceive>
 800afd4:	e03f      	b.n	800b056 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	68da      	ldr	r2, [r3, #12]
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	689b      	ldr	r3, [r3, #8]
 800afde:	429a      	cmp	r2, r3
 800afe0:	d11c      	bne.n	800b01c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	685a      	ldr	r2, [r3, #4]
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800afea:	429a      	cmp	r2, r3
 800afec:	d316      	bcc.n	800b01c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	685a      	ldr	r2, [r3, #4]
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800aff8:	429a      	cmp	r2, r3
 800affa:	d20f      	bcs.n	800b01c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800affc:	2200      	movs	r2, #0
 800affe:	2100      	movs	r1, #0
 800b000:	68f8      	ldr	r0, [r7, #12]
 800b002:	f001 f82c 	bl	800c05e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	2200      	movs	r2, #0
 800b00a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b00e:	2300      	movs	r3, #0
 800b010:	2200      	movs	r2, #0
 800b012:	2100      	movs	r1, #0
 800b014:	68f8      	ldr	r0, [r7, #12]
 800b016:	f001 fe11 	bl	800cc3c <USBD_LL_PrepareReceive>
 800b01a:	e01c      	b.n	800b056 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b022:	b2db      	uxtb	r3, r3
 800b024:	2b03      	cmp	r3, #3
 800b026:	d10f      	bne.n	800b048 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b02e:	68db      	ldr	r3, [r3, #12]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d009      	beq.n	800b048 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	2200      	movs	r2, #0
 800b038:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b042:	68db      	ldr	r3, [r3, #12]
 800b044:	68f8      	ldr	r0, [r7, #12]
 800b046:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b048:	2180      	movs	r1, #128	; 0x80
 800b04a:	68f8      	ldr	r0, [r7, #12]
 800b04c:	f001 fcee 	bl	800ca2c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b050:	68f8      	ldr	r0, [r7, #12]
 800b052:	f001 f856 	bl	800c102 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d03a      	beq.n	800b0d6 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b060:	68f8      	ldr	r0, [r7, #12]
 800b062:	f7ff fe42 	bl	800acea <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	2200      	movs	r2, #0
 800b06a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b06e:	e032      	b.n	800b0d6 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b070:	7afb      	ldrb	r3, [r7, #11]
 800b072:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b076:	b2db      	uxtb	r3, r3
 800b078:	4619      	mov	r1, r3
 800b07a:	68f8      	ldr	r0, [r7, #12]
 800b07c:	f000 f8f3 	bl	800b266 <USBD_CoreFindEP>
 800b080:	4603      	mov	r3, r0
 800b082:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b084:	7dfb      	ldrb	r3, [r7, #23]
 800b086:	2bff      	cmp	r3, #255	; 0xff
 800b088:	d025      	beq.n	800b0d6 <USBD_LL_DataInStage+0x15a>
 800b08a:	7dfb      	ldrb	r3, [r7, #23]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d122      	bne.n	800b0d6 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b096:	b2db      	uxtb	r3, r3
 800b098:	2b03      	cmp	r3, #3
 800b09a:	d11c      	bne.n	800b0d6 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b09c:	7dfa      	ldrb	r2, [r7, #23]
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	32ae      	adds	r2, #174	; 0xae
 800b0a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0a6:	695b      	ldr	r3, [r3, #20]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d014      	beq.n	800b0d6 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b0ac:	7dfa      	ldrb	r2, [r7, #23]
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b0b4:	7dfa      	ldrb	r2, [r7, #23]
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	32ae      	adds	r2, #174	; 0xae
 800b0ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0be:	695b      	ldr	r3, [r3, #20]
 800b0c0:	7afa      	ldrb	r2, [r7, #11]
 800b0c2:	4611      	mov	r1, r2
 800b0c4:	68f8      	ldr	r0, [r7, #12]
 800b0c6:	4798      	blx	r3
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b0cc:	7dbb      	ldrb	r3, [r7, #22]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d001      	beq.n	800b0d6 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b0d2:	7dbb      	ldrb	r3, [r7, #22]
 800b0d4:	e000      	b.n	800b0d8 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b0d6:	2300      	movs	r3, #0
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3718      	adds	r7, #24
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b084      	sub	sp, #16
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2200      	movs	r2, #0
 800b100:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2200      	movs	r2, #0
 800b106:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2200      	movs	r2, #0
 800b10e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d014      	beq.n	800b146 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d00e      	beq.n	800b146 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b12e:	685b      	ldr	r3, [r3, #4]
 800b130:	687a      	ldr	r2, [r7, #4]
 800b132:	6852      	ldr	r2, [r2, #4]
 800b134:	b2d2      	uxtb	r2, r2
 800b136:	4611      	mov	r1, r2
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	4798      	blx	r3
 800b13c:	4603      	mov	r3, r0
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d001      	beq.n	800b146 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b142:	2303      	movs	r3, #3
 800b144:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b146:	2340      	movs	r3, #64	; 0x40
 800b148:	2200      	movs	r2, #0
 800b14a:	2100      	movs	r1, #0
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f001 fbc3 	bl	800c8d8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2201      	movs	r2, #1
 800b156:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2240      	movs	r2, #64	; 0x40
 800b15e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b162:	2340      	movs	r3, #64	; 0x40
 800b164:	2200      	movs	r2, #0
 800b166:	2180      	movs	r1, #128	; 0x80
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f001 fbb5 	bl	800c8d8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2201      	movs	r2, #1
 800b172:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2240      	movs	r2, #64	; 0x40
 800b178:	621a      	str	r2, [r3, #32]

  return ret;
 800b17a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3710      	adds	r7, #16
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}

0800b184 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b184:	b480      	push	{r7}
 800b186:	b083      	sub	sp, #12
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	460b      	mov	r3, r1
 800b18e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	78fa      	ldrb	r2, [r7, #3]
 800b194:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b196:	2300      	movs	r3, #0
}
 800b198:	4618      	mov	r0, r3
 800b19a:	370c      	adds	r7, #12
 800b19c:	46bd      	mov	sp, r7
 800b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a2:	4770      	bx	lr

0800b1a4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b083      	sub	sp, #12
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1b2:	b2db      	uxtb	r3, r3
 800b1b4:	2b04      	cmp	r3, #4
 800b1b6:	d006      	beq.n	800b1c6 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1be:	b2da      	uxtb	r2, r3
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2204      	movs	r2, #4
 800b1ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b1ce:	2300      	movs	r3, #0
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	370c      	adds	r7, #12
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1da:	4770      	bx	lr

0800b1dc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b083      	sub	sp, #12
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1ea:	b2db      	uxtb	r3, r3
 800b1ec:	2b04      	cmp	r3, #4
 800b1ee:	d106      	bne.n	800b1fe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b1f6:	b2da      	uxtb	r2, r3
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b1fe:	2300      	movs	r3, #0
}
 800b200:	4618      	mov	r0, r3
 800b202:	370c      	adds	r7, #12
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr

0800b20c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b082      	sub	sp, #8
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b21a:	b2db      	uxtb	r3, r3
 800b21c:	2b03      	cmp	r3, #3
 800b21e:	d110      	bne.n	800b242 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b226:	2b00      	cmp	r3, #0
 800b228:	d00b      	beq.n	800b242 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b230:	69db      	ldr	r3, [r3, #28]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d005      	beq.n	800b242 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b23c:	69db      	ldr	r3, [r3, #28]
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b242:	2300      	movs	r3, #0
}
 800b244:	4618      	mov	r0, r3
 800b246:	3708      	adds	r7, #8
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b083      	sub	sp, #12
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	460b      	mov	r3, r1
 800b256:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b258:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	370c      	adds	r7, #12
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr

0800b266 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b266:	b480      	push	{r7}
 800b268:	b083      	sub	sp, #12
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
 800b26e:	460b      	mov	r3, r1
 800b270:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b272:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b274:	4618      	mov	r0, r3
 800b276:	370c      	adds	r7, #12
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr

0800b280 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b086      	sub	sp, #24
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	460b      	mov	r3, r1
 800b28a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b294:	2300      	movs	r3, #0
 800b296:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	885b      	ldrh	r3, [r3, #2]
 800b29c:	b29a      	uxth	r2, r3
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	781b      	ldrb	r3, [r3, #0]
 800b2a2:	b29b      	uxth	r3, r3
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	d920      	bls.n	800b2ea <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	781b      	ldrb	r3, [r3, #0]
 800b2ac:	b29b      	uxth	r3, r3
 800b2ae:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b2b0:	e013      	b.n	800b2da <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b2b2:	f107 030a 	add.w	r3, r7, #10
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	6978      	ldr	r0, [r7, #20]
 800b2ba:	f000 f81b 	bl	800b2f4 <USBD_GetNextDesc>
 800b2be:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	785b      	ldrb	r3, [r3, #1]
 800b2c4:	2b05      	cmp	r3, #5
 800b2c6:	d108      	bne.n	800b2da <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	789b      	ldrb	r3, [r3, #2]
 800b2d0:	78fa      	ldrb	r2, [r7, #3]
 800b2d2:	429a      	cmp	r2, r3
 800b2d4:	d008      	beq.n	800b2e8 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	885b      	ldrh	r3, [r3, #2]
 800b2de:	b29a      	uxth	r2, r3
 800b2e0:	897b      	ldrh	r3, [r7, #10]
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d8e5      	bhi.n	800b2b2 <USBD_GetEpDesc+0x32>
 800b2e6:	e000      	b.n	800b2ea <USBD_GetEpDesc+0x6a>
          break;
 800b2e8:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b2ea:	693b      	ldr	r3, [r7, #16]
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3718      	adds	r7, #24
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}

0800b2f4 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b085      	sub	sp, #20
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	881a      	ldrh	r2, [r3, #0]
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	781b      	ldrb	r3, [r3, #0]
 800b30a:	b29b      	uxth	r3, r3
 800b30c:	4413      	add	r3, r2
 800b30e:	b29a      	uxth	r2, r3
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	781b      	ldrb	r3, [r3, #0]
 800b318:	461a      	mov	r2, r3
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	4413      	add	r3, r2
 800b31e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b320:	68fb      	ldr	r3, [r7, #12]
}
 800b322:	4618      	mov	r0, r3
 800b324:	3714      	adds	r7, #20
 800b326:	46bd      	mov	sp, r7
 800b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32c:	4770      	bx	lr

0800b32e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b32e:	b480      	push	{r7}
 800b330:	b087      	sub	sp, #28
 800b332:	af00      	add	r7, sp, #0
 800b334:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b340:	697b      	ldr	r3, [r7, #20]
 800b342:	3301      	adds	r3, #1
 800b344:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b34c:	8a3b      	ldrh	r3, [r7, #16]
 800b34e:	021b      	lsls	r3, r3, #8
 800b350:	b21a      	sxth	r2, r3
 800b352:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b356:	4313      	orrs	r3, r2
 800b358:	b21b      	sxth	r3, r3
 800b35a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b35c:	89fb      	ldrh	r3, [r7, #14]
}
 800b35e:	4618      	mov	r0, r3
 800b360:	371c      	adds	r7, #28
 800b362:	46bd      	mov	sp, r7
 800b364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b368:	4770      	bx	lr
	...

0800b36c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b084      	sub	sp, #16
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b376:	2300      	movs	r3, #0
 800b378:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	781b      	ldrb	r3, [r3, #0]
 800b37e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b382:	2b40      	cmp	r3, #64	; 0x40
 800b384:	d005      	beq.n	800b392 <USBD_StdDevReq+0x26>
 800b386:	2b40      	cmp	r3, #64	; 0x40
 800b388:	d857      	bhi.n	800b43a <USBD_StdDevReq+0xce>
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d00f      	beq.n	800b3ae <USBD_StdDevReq+0x42>
 800b38e:	2b20      	cmp	r3, #32
 800b390:	d153      	bne.n	800b43a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	32ae      	adds	r2, #174	; 0xae
 800b39c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3a0:	689b      	ldr	r3, [r3, #8]
 800b3a2:	6839      	ldr	r1, [r7, #0]
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	4798      	blx	r3
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	73fb      	strb	r3, [r7, #15]
      break;
 800b3ac:	e04a      	b.n	800b444 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	785b      	ldrb	r3, [r3, #1]
 800b3b2:	2b09      	cmp	r3, #9
 800b3b4:	d83b      	bhi.n	800b42e <USBD_StdDevReq+0xc2>
 800b3b6:	a201      	add	r2, pc, #4	; (adr r2, 800b3bc <USBD_StdDevReq+0x50>)
 800b3b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3bc:	0800b411 	.word	0x0800b411
 800b3c0:	0800b425 	.word	0x0800b425
 800b3c4:	0800b42f 	.word	0x0800b42f
 800b3c8:	0800b41b 	.word	0x0800b41b
 800b3cc:	0800b42f 	.word	0x0800b42f
 800b3d0:	0800b3ef 	.word	0x0800b3ef
 800b3d4:	0800b3e5 	.word	0x0800b3e5
 800b3d8:	0800b42f 	.word	0x0800b42f
 800b3dc:	0800b407 	.word	0x0800b407
 800b3e0:	0800b3f9 	.word	0x0800b3f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b3e4:	6839      	ldr	r1, [r7, #0]
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f000 fa3c 	bl	800b864 <USBD_GetDescriptor>
          break;
 800b3ec:	e024      	b.n	800b438 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b3ee:	6839      	ldr	r1, [r7, #0]
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f000 fbcb 	bl	800bb8c <USBD_SetAddress>
          break;
 800b3f6:	e01f      	b.n	800b438 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b3f8:	6839      	ldr	r1, [r7, #0]
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f000 fc0a 	bl	800bc14 <USBD_SetConfig>
 800b400:	4603      	mov	r3, r0
 800b402:	73fb      	strb	r3, [r7, #15]
          break;
 800b404:	e018      	b.n	800b438 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b406:	6839      	ldr	r1, [r7, #0]
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f000 fcad 	bl	800bd68 <USBD_GetConfig>
          break;
 800b40e:	e013      	b.n	800b438 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b410:	6839      	ldr	r1, [r7, #0]
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f000 fcde 	bl	800bdd4 <USBD_GetStatus>
          break;
 800b418:	e00e      	b.n	800b438 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b41a:	6839      	ldr	r1, [r7, #0]
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f000 fd0d 	bl	800be3c <USBD_SetFeature>
          break;
 800b422:	e009      	b.n	800b438 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b424:	6839      	ldr	r1, [r7, #0]
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f000 fd31 	bl	800be8e <USBD_ClrFeature>
          break;
 800b42c:	e004      	b.n	800b438 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b42e:	6839      	ldr	r1, [r7, #0]
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f000 fd88 	bl	800bf46 <USBD_CtlError>
          break;
 800b436:	bf00      	nop
      }
      break;
 800b438:	e004      	b.n	800b444 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b43a:	6839      	ldr	r1, [r7, #0]
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f000 fd82 	bl	800bf46 <USBD_CtlError>
      break;
 800b442:	bf00      	nop
  }

  return ret;
 800b444:	7bfb      	ldrb	r3, [r7, #15]
}
 800b446:	4618      	mov	r0, r3
 800b448:	3710      	adds	r7, #16
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
 800b44e:	bf00      	nop

0800b450 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b084      	sub	sp, #16
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b45a:	2300      	movs	r3, #0
 800b45c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	781b      	ldrb	r3, [r3, #0]
 800b462:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b466:	2b40      	cmp	r3, #64	; 0x40
 800b468:	d005      	beq.n	800b476 <USBD_StdItfReq+0x26>
 800b46a:	2b40      	cmp	r3, #64	; 0x40
 800b46c:	d852      	bhi.n	800b514 <USBD_StdItfReq+0xc4>
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d001      	beq.n	800b476 <USBD_StdItfReq+0x26>
 800b472:	2b20      	cmp	r3, #32
 800b474:	d14e      	bne.n	800b514 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b47c:	b2db      	uxtb	r3, r3
 800b47e:	3b01      	subs	r3, #1
 800b480:	2b02      	cmp	r3, #2
 800b482:	d840      	bhi.n	800b506 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	889b      	ldrh	r3, [r3, #4]
 800b488:	b2db      	uxtb	r3, r3
 800b48a:	2b01      	cmp	r3, #1
 800b48c:	d836      	bhi.n	800b4fc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	889b      	ldrh	r3, [r3, #4]
 800b492:	b2db      	uxtb	r3, r3
 800b494:	4619      	mov	r1, r3
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f7ff fed8 	bl	800b24c <USBD_CoreFindIF>
 800b49c:	4603      	mov	r3, r0
 800b49e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b4a0:	7bbb      	ldrb	r3, [r7, #14]
 800b4a2:	2bff      	cmp	r3, #255	; 0xff
 800b4a4:	d01d      	beq.n	800b4e2 <USBD_StdItfReq+0x92>
 800b4a6:	7bbb      	ldrb	r3, [r7, #14]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d11a      	bne.n	800b4e2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b4ac:	7bba      	ldrb	r2, [r7, #14]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	32ae      	adds	r2, #174	; 0xae
 800b4b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4b6:	689b      	ldr	r3, [r3, #8]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d00f      	beq.n	800b4dc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b4bc:	7bba      	ldrb	r2, [r7, #14]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b4c4:	7bba      	ldrb	r2, [r7, #14]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	32ae      	adds	r2, #174	; 0xae
 800b4ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4ce:	689b      	ldr	r3, [r3, #8]
 800b4d0:	6839      	ldr	r1, [r7, #0]
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	4798      	blx	r3
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b4da:	e004      	b.n	800b4e6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b4dc:	2303      	movs	r3, #3
 800b4de:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b4e0:	e001      	b.n	800b4e6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b4e2:	2303      	movs	r3, #3
 800b4e4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	88db      	ldrh	r3, [r3, #6]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d110      	bne.n	800b510 <USBD_StdItfReq+0xc0>
 800b4ee:	7bfb      	ldrb	r3, [r7, #15]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d10d      	bne.n	800b510 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f000 fdf1 	bl	800c0dc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b4fa:	e009      	b.n	800b510 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b4fc:	6839      	ldr	r1, [r7, #0]
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f000 fd21 	bl	800bf46 <USBD_CtlError>
          break;
 800b504:	e004      	b.n	800b510 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b506:	6839      	ldr	r1, [r7, #0]
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f000 fd1c 	bl	800bf46 <USBD_CtlError>
          break;
 800b50e:	e000      	b.n	800b512 <USBD_StdItfReq+0xc2>
          break;
 800b510:	bf00      	nop
      }
      break;
 800b512:	e004      	b.n	800b51e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b514:	6839      	ldr	r1, [r7, #0]
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f000 fd15 	bl	800bf46 <USBD_CtlError>
      break;
 800b51c:	bf00      	nop
  }

  return ret;
 800b51e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b520:	4618      	mov	r0, r3
 800b522:	3710      	adds	r7, #16
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}

0800b528 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b084      	sub	sp, #16
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
 800b530:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b532:	2300      	movs	r3, #0
 800b534:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	889b      	ldrh	r3, [r3, #4]
 800b53a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	781b      	ldrb	r3, [r3, #0]
 800b540:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b544:	2b40      	cmp	r3, #64	; 0x40
 800b546:	d007      	beq.n	800b558 <USBD_StdEPReq+0x30>
 800b548:	2b40      	cmp	r3, #64	; 0x40
 800b54a:	f200 817f 	bhi.w	800b84c <USBD_StdEPReq+0x324>
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d02a      	beq.n	800b5a8 <USBD_StdEPReq+0x80>
 800b552:	2b20      	cmp	r3, #32
 800b554:	f040 817a 	bne.w	800b84c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b558:	7bbb      	ldrb	r3, [r7, #14]
 800b55a:	4619      	mov	r1, r3
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f7ff fe82 	bl	800b266 <USBD_CoreFindEP>
 800b562:	4603      	mov	r3, r0
 800b564:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b566:	7b7b      	ldrb	r3, [r7, #13]
 800b568:	2bff      	cmp	r3, #255	; 0xff
 800b56a:	f000 8174 	beq.w	800b856 <USBD_StdEPReq+0x32e>
 800b56e:	7b7b      	ldrb	r3, [r7, #13]
 800b570:	2b00      	cmp	r3, #0
 800b572:	f040 8170 	bne.w	800b856 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b576:	7b7a      	ldrb	r2, [r7, #13]
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b57e:	7b7a      	ldrb	r2, [r7, #13]
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	32ae      	adds	r2, #174	; 0xae
 800b584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b588:	689b      	ldr	r3, [r3, #8]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	f000 8163 	beq.w	800b856 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b590:	7b7a      	ldrb	r2, [r7, #13]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	32ae      	adds	r2, #174	; 0xae
 800b596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b59a:	689b      	ldr	r3, [r3, #8]
 800b59c:	6839      	ldr	r1, [r7, #0]
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	4798      	blx	r3
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b5a6:	e156      	b.n	800b856 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	785b      	ldrb	r3, [r3, #1]
 800b5ac:	2b03      	cmp	r3, #3
 800b5ae:	d008      	beq.n	800b5c2 <USBD_StdEPReq+0x9a>
 800b5b0:	2b03      	cmp	r3, #3
 800b5b2:	f300 8145 	bgt.w	800b840 <USBD_StdEPReq+0x318>
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	f000 809b 	beq.w	800b6f2 <USBD_StdEPReq+0x1ca>
 800b5bc:	2b01      	cmp	r3, #1
 800b5be:	d03c      	beq.n	800b63a <USBD_StdEPReq+0x112>
 800b5c0:	e13e      	b.n	800b840 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5c8:	b2db      	uxtb	r3, r3
 800b5ca:	2b02      	cmp	r3, #2
 800b5cc:	d002      	beq.n	800b5d4 <USBD_StdEPReq+0xac>
 800b5ce:	2b03      	cmp	r3, #3
 800b5d0:	d016      	beq.n	800b600 <USBD_StdEPReq+0xd8>
 800b5d2:	e02c      	b.n	800b62e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b5d4:	7bbb      	ldrb	r3, [r7, #14]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d00d      	beq.n	800b5f6 <USBD_StdEPReq+0xce>
 800b5da:	7bbb      	ldrb	r3, [r7, #14]
 800b5dc:	2b80      	cmp	r3, #128	; 0x80
 800b5de:	d00a      	beq.n	800b5f6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b5e0:	7bbb      	ldrb	r3, [r7, #14]
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f001 fa21 	bl	800ca2c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b5ea:	2180      	movs	r1, #128	; 0x80
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f001 fa1d 	bl	800ca2c <USBD_LL_StallEP>
 800b5f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b5f4:	e020      	b.n	800b638 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b5f6:	6839      	ldr	r1, [r7, #0]
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f000 fca4 	bl	800bf46 <USBD_CtlError>
              break;
 800b5fe:	e01b      	b.n	800b638 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	885b      	ldrh	r3, [r3, #2]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d10e      	bne.n	800b626 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b608:	7bbb      	ldrb	r3, [r7, #14]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d00b      	beq.n	800b626 <USBD_StdEPReq+0xfe>
 800b60e:	7bbb      	ldrb	r3, [r7, #14]
 800b610:	2b80      	cmp	r3, #128	; 0x80
 800b612:	d008      	beq.n	800b626 <USBD_StdEPReq+0xfe>
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	88db      	ldrh	r3, [r3, #6]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d104      	bne.n	800b626 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b61c:	7bbb      	ldrb	r3, [r7, #14]
 800b61e:	4619      	mov	r1, r3
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f001 fa03 	bl	800ca2c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f000 fd58 	bl	800c0dc <USBD_CtlSendStatus>

              break;
 800b62c:	e004      	b.n	800b638 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b62e:	6839      	ldr	r1, [r7, #0]
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f000 fc88 	bl	800bf46 <USBD_CtlError>
              break;
 800b636:	bf00      	nop
          }
          break;
 800b638:	e107      	b.n	800b84a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b640:	b2db      	uxtb	r3, r3
 800b642:	2b02      	cmp	r3, #2
 800b644:	d002      	beq.n	800b64c <USBD_StdEPReq+0x124>
 800b646:	2b03      	cmp	r3, #3
 800b648:	d016      	beq.n	800b678 <USBD_StdEPReq+0x150>
 800b64a:	e04b      	b.n	800b6e4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b64c:	7bbb      	ldrb	r3, [r7, #14]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d00d      	beq.n	800b66e <USBD_StdEPReq+0x146>
 800b652:	7bbb      	ldrb	r3, [r7, #14]
 800b654:	2b80      	cmp	r3, #128	; 0x80
 800b656:	d00a      	beq.n	800b66e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b658:	7bbb      	ldrb	r3, [r7, #14]
 800b65a:	4619      	mov	r1, r3
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f001 f9e5 	bl	800ca2c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b662:	2180      	movs	r1, #128	; 0x80
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f001 f9e1 	bl	800ca2c <USBD_LL_StallEP>
 800b66a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b66c:	e040      	b.n	800b6f0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b66e:	6839      	ldr	r1, [r7, #0]
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f000 fc68 	bl	800bf46 <USBD_CtlError>
              break;
 800b676:	e03b      	b.n	800b6f0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	885b      	ldrh	r3, [r3, #2]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d136      	bne.n	800b6ee <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b680:	7bbb      	ldrb	r3, [r7, #14]
 800b682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b686:	2b00      	cmp	r3, #0
 800b688:	d004      	beq.n	800b694 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b68a:	7bbb      	ldrb	r3, [r7, #14]
 800b68c:	4619      	mov	r1, r3
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f001 fa02 	bl	800ca98 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f000 fd21 	bl	800c0dc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b69a:	7bbb      	ldrb	r3, [r7, #14]
 800b69c:	4619      	mov	r1, r3
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f7ff fde1 	bl	800b266 <USBD_CoreFindEP>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b6a8:	7b7b      	ldrb	r3, [r7, #13]
 800b6aa:	2bff      	cmp	r3, #255	; 0xff
 800b6ac:	d01f      	beq.n	800b6ee <USBD_StdEPReq+0x1c6>
 800b6ae:	7b7b      	ldrb	r3, [r7, #13]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d11c      	bne.n	800b6ee <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b6b4:	7b7a      	ldrb	r2, [r7, #13]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b6bc:	7b7a      	ldrb	r2, [r7, #13]
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	32ae      	adds	r2, #174	; 0xae
 800b6c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6c6:	689b      	ldr	r3, [r3, #8]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d010      	beq.n	800b6ee <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b6cc:	7b7a      	ldrb	r2, [r7, #13]
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	32ae      	adds	r2, #174	; 0xae
 800b6d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6d6:	689b      	ldr	r3, [r3, #8]
 800b6d8:	6839      	ldr	r1, [r7, #0]
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	4798      	blx	r3
 800b6de:	4603      	mov	r3, r0
 800b6e0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b6e2:	e004      	b.n	800b6ee <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b6e4:	6839      	ldr	r1, [r7, #0]
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 fc2d 	bl	800bf46 <USBD_CtlError>
              break;
 800b6ec:	e000      	b.n	800b6f0 <USBD_StdEPReq+0x1c8>
              break;
 800b6ee:	bf00      	nop
          }
          break;
 800b6f0:	e0ab      	b.n	800b84a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6f8:	b2db      	uxtb	r3, r3
 800b6fa:	2b02      	cmp	r3, #2
 800b6fc:	d002      	beq.n	800b704 <USBD_StdEPReq+0x1dc>
 800b6fe:	2b03      	cmp	r3, #3
 800b700:	d032      	beq.n	800b768 <USBD_StdEPReq+0x240>
 800b702:	e097      	b.n	800b834 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b704:	7bbb      	ldrb	r3, [r7, #14]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d007      	beq.n	800b71a <USBD_StdEPReq+0x1f2>
 800b70a:	7bbb      	ldrb	r3, [r7, #14]
 800b70c:	2b80      	cmp	r3, #128	; 0x80
 800b70e:	d004      	beq.n	800b71a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b710:	6839      	ldr	r1, [r7, #0]
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f000 fc17 	bl	800bf46 <USBD_CtlError>
                break;
 800b718:	e091      	b.n	800b83e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b71a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	da0b      	bge.n	800b73a <USBD_StdEPReq+0x212>
 800b722:	7bbb      	ldrb	r3, [r7, #14]
 800b724:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b728:	4613      	mov	r3, r2
 800b72a:	009b      	lsls	r3, r3, #2
 800b72c:	4413      	add	r3, r2
 800b72e:	009b      	lsls	r3, r3, #2
 800b730:	3310      	adds	r3, #16
 800b732:	687a      	ldr	r2, [r7, #4]
 800b734:	4413      	add	r3, r2
 800b736:	3304      	adds	r3, #4
 800b738:	e00b      	b.n	800b752 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b73a:	7bbb      	ldrb	r3, [r7, #14]
 800b73c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b740:	4613      	mov	r3, r2
 800b742:	009b      	lsls	r3, r3, #2
 800b744:	4413      	add	r3, r2
 800b746:	009b      	lsls	r3, r3, #2
 800b748:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b74c:	687a      	ldr	r2, [r7, #4]
 800b74e:	4413      	add	r3, r2
 800b750:	3304      	adds	r3, #4
 800b752:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	2200      	movs	r2, #0
 800b758:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	2202      	movs	r2, #2
 800b75e:	4619      	mov	r1, r3
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f000 fc61 	bl	800c028 <USBD_CtlSendData>
              break;
 800b766:	e06a      	b.n	800b83e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b768:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	da11      	bge.n	800b794 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b770:	7bbb      	ldrb	r3, [r7, #14]
 800b772:	f003 020f 	and.w	r2, r3, #15
 800b776:	6879      	ldr	r1, [r7, #4]
 800b778:	4613      	mov	r3, r2
 800b77a:	009b      	lsls	r3, r3, #2
 800b77c:	4413      	add	r3, r2
 800b77e:	009b      	lsls	r3, r3, #2
 800b780:	440b      	add	r3, r1
 800b782:	3324      	adds	r3, #36	; 0x24
 800b784:	881b      	ldrh	r3, [r3, #0]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d117      	bne.n	800b7ba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b78a:	6839      	ldr	r1, [r7, #0]
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f000 fbda 	bl	800bf46 <USBD_CtlError>
                  break;
 800b792:	e054      	b.n	800b83e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b794:	7bbb      	ldrb	r3, [r7, #14]
 800b796:	f003 020f 	and.w	r2, r3, #15
 800b79a:	6879      	ldr	r1, [r7, #4]
 800b79c:	4613      	mov	r3, r2
 800b79e:	009b      	lsls	r3, r3, #2
 800b7a0:	4413      	add	r3, r2
 800b7a2:	009b      	lsls	r3, r3, #2
 800b7a4:	440b      	add	r3, r1
 800b7a6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b7aa:	881b      	ldrh	r3, [r3, #0]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d104      	bne.n	800b7ba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b7b0:	6839      	ldr	r1, [r7, #0]
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f000 fbc7 	bl	800bf46 <USBD_CtlError>
                  break;
 800b7b8:	e041      	b.n	800b83e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b7ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	da0b      	bge.n	800b7da <USBD_StdEPReq+0x2b2>
 800b7c2:	7bbb      	ldrb	r3, [r7, #14]
 800b7c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b7c8:	4613      	mov	r3, r2
 800b7ca:	009b      	lsls	r3, r3, #2
 800b7cc:	4413      	add	r3, r2
 800b7ce:	009b      	lsls	r3, r3, #2
 800b7d0:	3310      	adds	r3, #16
 800b7d2:	687a      	ldr	r2, [r7, #4]
 800b7d4:	4413      	add	r3, r2
 800b7d6:	3304      	adds	r3, #4
 800b7d8:	e00b      	b.n	800b7f2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b7da:	7bbb      	ldrb	r3, [r7, #14]
 800b7dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b7e0:	4613      	mov	r3, r2
 800b7e2:	009b      	lsls	r3, r3, #2
 800b7e4:	4413      	add	r3, r2
 800b7e6:	009b      	lsls	r3, r3, #2
 800b7e8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b7ec:	687a      	ldr	r2, [r7, #4]
 800b7ee:	4413      	add	r3, r2
 800b7f0:	3304      	adds	r3, #4
 800b7f2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b7f4:	7bbb      	ldrb	r3, [r7, #14]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d002      	beq.n	800b800 <USBD_StdEPReq+0x2d8>
 800b7fa:	7bbb      	ldrb	r3, [r7, #14]
 800b7fc:	2b80      	cmp	r3, #128	; 0x80
 800b7fe:	d103      	bne.n	800b808 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	2200      	movs	r2, #0
 800b804:	601a      	str	r2, [r3, #0]
 800b806:	e00e      	b.n	800b826 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b808:	7bbb      	ldrb	r3, [r7, #14]
 800b80a:	4619      	mov	r1, r3
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f001 f979 	bl	800cb04 <USBD_LL_IsStallEP>
 800b812:	4603      	mov	r3, r0
 800b814:	2b00      	cmp	r3, #0
 800b816:	d003      	beq.n	800b820 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	2201      	movs	r2, #1
 800b81c:	601a      	str	r2, [r3, #0]
 800b81e:	e002      	b.n	800b826 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	2200      	movs	r2, #0
 800b824:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	2202      	movs	r2, #2
 800b82a:	4619      	mov	r1, r3
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f000 fbfb 	bl	800c028 <USBD_CtlSendData>
              break;
 800b832:	e004      	b.n	800b83e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b834:	6839      	ldr	r1, [r7, #0]
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f000 fb85 	bl	800bf46 <USBD_CtlError>
              break;
 800b83c:	bf00      	nop
          }
          break;
 800b83e:	e004      	b.n	800b84a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b840:	6839      	ldr	r1, [r7, #0]
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f000 fb7f 	bl	800bf46 <USBD_CtlError>
          break;
 800b848:	bf00      	nop
      }
      break;
 800b84a:	e005      	b.n	800b858 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b84c:	6839      	ldr	r1, [r7, #0]
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f000 fb79 	bl	800bf46 <USBD_CtlError>
      break;
 800b854:	e000      	b.n	800b858 <USBD_StdEPReq+0x330>
      break;
 800b856:	bf00      	nop
  }

  return ret;
 800b858:	7bfb      	ldrb	r3, [r7, #15]
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3710      	adds	r7, #16
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}
	...

0800b864 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b084      	sub	sp, #16
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b86e:	2300      	movs	r3, #0
 800b870:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b872:	2300      	movs	r3, #0
 800b874:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b876:	2300      	movs	r3, #0
 800b878:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	885b      	ldrh	r3, [r3, #2]
 800b87e:	0a1b      	lsrs	r3, r3, #8
 800b880:	b29b      	uxth	r3, r3
 800b882:	3b01      	subs	r3, #1
 800b884:	2b0e      	cmp	r3, #14
 800b886:	f200 8152 	bhi.w	800bb2e <USBD_GetDescriptor+0x2ca>
 800b88a:	a201      	add	r2, pc, #4	; (adr r2, 800b890 <USBD_GetDescriptor+0x2c>)
 800b88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b890:	0800b901 	.word	0x0800b901
 800b894:	0800b919 	.word	0x0800b919
 800b898:	0800b959 	.word	0x0800b959
 800b89c:	0800bb2f 	.word	0x0800bb2f
 800b8a0:	0800bb2f 	.word	0x0800bb2f
 800b8a4:	0800bacf 	.word	0x0800bacf
 800b8a8:	0800bafb 	.word	0x0800bafb
 800b8ac:	0800bb2f 	.word	0x0800bb2f
 800b8b0:	0800bb2f 	.word	0x0800bb2f
 800b8b4:	0800bb2f 	.word	0x0800bb2f
 800b8b8:	0800bb2f 	.word	0x0800bb2f
 800b8bc:	0800bb2f 	.word	0x0800bb2f
 800b8c0:	0800bb2f 	.word	0x0800bb2f
 800b8c4:	0800bb2f 	.word	0x0800bb2f
 800b8c8:	0800b8cd 	.word	0x0800b8cd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8d2:	69db      	ldr	r3, [r3, #28]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d00b      	beq.n	800b8f0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8de:	69db      	ldr	r3, [r3, #28]
 800b8e0:	687a      	ldr	r2, [r7, #4]
 800b8e2:	7c12      	ldrb	r2, [r2, #16]
 800b8e4:	f107 0108 	add.w	r1, r7, #8
 800b8e8:	4610      	mov	r0, r2
 800b8ea:	4798      	blx	r3
 800b8ec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b8ee:	e126      	b.n	800bb3e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b8f0:	6839      	ldr	r1, [r7, #0]
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f000 fb27 	bl	800bf46 <USBD_CtlError>
        err++;
 800b8f8:	7afb      	ldrb	r3, [r7, #11]
 800b8fa:	3301      	adds	r3, #1
 800b8fc:	72fb      	strb	r3, [r7, #11]
      break;
 800b8fe:	e11e      	b.n	800bb3e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	687a      	ldr	r2, [r7, #4]
 800b90a:	7c12      	ldrb	r2, [r2, #16]
 800b90c:	f107 0108 	add.w	r1, r7, #8
 800b910:	4610      	mov	r0, r2
 800b912:	4798      	blx	r3
 800b914:	60f8      	str	r0, [r7, #12]
      break;
 800b916:	e112      	b.n	800bb3e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	7c1b      	ldrb	r3, [r3, #16]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d10d      	bne.n	800b93c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b928:	f107 0208 	add.w	r2, r7, #8
 800b92c:	4610      	mov	r0, r2
 800b92e:	4798      	blx	r3
 800b930:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	3301      	adds	r3, #1
 800b936:	2202      	movs	r2, #2
 800b938:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b93a:	e100      	b.n	800bb3e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b944:	f107 0208 	add.w	r2, r7, #8
 800b948:	4610      	mov	r0, r2
 800b94a:	4798      	blx	r3
 800b94c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	3301      	adds	r3, #1
 800b952:	2202      	movs	r2, #2
 800b954:	701a      	strb	r2, [r3, #0]
      break;
 800b956:	e0f2      	b.n	800bb3e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	885b      	ldrh	r3, [r3, #2]
 800b95c:	b2db      	uxtb	r3, r3
 800b95e:	2b05      	cmp	r3, #5
 800b960:	f200 80ac 	bhi.w	800babc <USBD_GetDescriptor+0x258>
 800b964:	a201      	add	r2, pc, #4	; (adr r2, 800b96c <USBD_GetDescriptor+0x108>)
 800b966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b96a:	bf00      	nop
 800b96c:	0800b985 	.word	0x0800b985
 800b970:	0800b9b9 	.word	0x0800b9b9
 800b974:	0800b9ed 	.word	0x0800b9ed
 800b978:	0800ba21 	.word	0x0800ba21
 800b97c:	0800ba55 	.word	0x0800ba55
 800b980:	0800ba89 	.word	0x0800ba89
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d00b      	beq.n	800b9a8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b996:	685b      	ldr	r3, [r3, #4]
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	7c12      	ldrb	r2, [r2, #16]
 800b99c:	f107 0108 	add.w	r1, r7, #8
 800b9a0:	4610      	mov	r0, r2
 800b9a2:	4798      	blx	r3
 800b9a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b9a6:	e091      	b.n	800bacc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b9a8:	6839      	ldr	r1, [r7, #0]
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f000 facb 	bl	800bf46 <USBD_CtlError>
            err++;
 800b9b0:	7afb      	ldrb	r3, [r7, #11]
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	72fb      	strb	r3, [r7, #11]
          break;
 800b9b6:	e089      	b.n	800bacc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9be:	689b      	ldr	r3, [r3, #8]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d00b      	beq.n	800b9dc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9ca:	689b      	ldr	r3, [r3, #8]
 800b9cc:	687a      	ldr	r2, [r7, #4]
 800b9ce:	7c12      	ldrb	r2, [r2, #16]
 800b9d0:	f107 0108 	add.w	r1, r7, #8
 800b9d4:	4610      	mov	r0, r2
 800b9d6:	4798      	blx	r3
 800b9d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b9da:	e077      	b.n	800bacc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b9dc:	6839      	ldr	r1, [r7, #0]
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f000 fab1 	bl	800bf46 <USBD_CtlError>
            err++;
 800b9e4:	7afb      	ldrb	r3, [r7, #11]
 800b9e6:	3301      	adds	r3, #1
 800b9e8:	72fb      	strb	r3, [r7, #11]
          break;
 800b9ea:	e06f      	b.n	800bacc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9f2:	68db      	ldr	r3, [r3, #12]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d00b      	beq.n	800ba10 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9fe:	68db      	ldr	r3, [r3, #12]
 800ba00:	687a      	ldr	r2, [r7, #4]
 800ba02:	7c12      	ldrb	r2, [r2, #16]
 800ba04:	f107 0108 	add.w	r1, r7, #8
 800ba08:	4610      	mov	r0, r2
 800ba0a:	4798      	blx	r3
 800ba0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba0e:	e05d      	b.n	800bacc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ba10:	6839      	ldr	r1, [r7, #0]
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f000 fa97 	bl	800bf46 <USBD_CtlError>
            err++;
 800ba18:	7afb      	ldrb	r3, [r7, #11]
 800ba1a:	3301      	adds	r3, #1
 800ba1c:	72fb      	strb	r3, [r7, #11]
          break;
 800ba1e:	e055      	b.n	800bacc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba26:	691b      	ldr	r3, [r3, #16]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d00b      	beq.n	800ba44 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba32:	691b      	ldr	r3, [r3, #16]
 800ba34:	687a      	ldr	r2, [r7, #4]
 800ba36:	7c12      	ldrb	r2, [r2, #16]
 800ba38:	f107 0108 	add.w	r1, r7, #8
 800ba3c:	4610      	mov	r0, r2
 800ba3e:	4798      	blx	r3
 800ba40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba42:	e043      	b.n	800bacc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ba44:	6839      	ldr	r1, [r7, #0]
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f000 fa7d 	bl	800bf46 <USBD_CtlError>
            err++;
 800ba4c:	7afb      	ldrb	r3, [r7, #11]
 800ba4e:	3301      	adds	r3, #1
 800ba50:	72fb      	strb	r3, [r7, #11]
          break;
 800ba52:	e03b      	b.n	800bacc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba5a:	695b      	ldr	r3, [r3, #20]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d00b      	beq.n	800ba78 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba66:	695b      	ldr	r3, [r3, #20]
 800ba68:	687a      	ldr	r2, [r7, #4]
 800ba6a:	7c12      	ldrb	r2, [r2, #16]
 800ba6c:	f107 0108 	add.w	r1, r7, #8
 800ba70:	4610      	mov	r0, r2
 800ba72:	4798      	blx	r3
 800ba74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba76:	e029      	b.n	800bacc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ba78:	6839      	ldr	r1, [r7, #0]
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f000 fa63 	bl	800bf46 <USBD_CtlError>
            err++;
 800ba80:	7afb      	ldrb	r3, [r7, #11]
 800ba82:	3301      	adds	r3, #1
 800ba84:	72fb      	strb	r3, [r7, #11]
          break;
 800ba86:	e021      	b.n	800bacc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba8e:	699b      	ldr	r3, [r3, #24]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d00b      	beq.n	800baac <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba9a:	699b      	ldr	r3, [r3, #24]
 800ba9c:	687a      	ldr	r2, [r7, #4]
 800ba9e:	7c12      	ldrb	r2, [r2, #16]
 800baa0:	f107 0108 	add.w	r1, r7, #8
 800baa4:	4610      	mov	r0, r2
 800baa6:	4798      	blx	r3
 800baa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800baaa:	e00f      	b.n	800bacc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800baac:	6839      	ldr	r1, [r7, #0]
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f000 fa49 	bl	800bf46 <USBD_CtlError>
            err++;
 800bab4:	7afb      	ldrb	r3, [r7, #11]
 800bab6:	3301      	adds	r3, #1
 800bab8:	72fb      	strb	r3, [r7, #11]
          break;
 800baba:	e007      	b.n	800bacc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800babc:	6839      	ldr	r1, [r7, #0]
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 fa41 	bl	800bf46 <USBD_CtlError>
          err++;
 800bac4:	7afb      	ldrb	r3, [r7, #11]
 800bac6:	3301      	adds	r3, #1
 800bac8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800baca:	bf00      	nop
      }
      break;
 800bacc:	e037      	b.n	800bb3e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	7c1b      	ldrb	r3, [r3, #16]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d109      	bne.n	800baea <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800badc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bade:	f107 0208 	add.w	r2, r7, #8
 800bae2:	4610      	mov	r0, r2
 800bae4:	4798      	blx	r3
 800bae6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bae8:	e029      	b.n	800bb3e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800baea:	6839      	ldr	r1, [r7, #0]
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f000 fa2a 	bl	800bf46 <USBD_CtlError>
        err++;
 800baf2:	7afb      	ldrb	r3, [r7, #11]
 800baf4:	3301      	adds	r3, #1
 800baf6:	72fb      	strb	r3, [r7, #11]
      break;
 800baf8:	e021      	b.n	800bb3e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	7c1b      	ldrb	r3, [r3, #16]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d10d      	bne.n	800bb1e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb0a:	f107 0208 	add.w	r2, r7, #8
 800bb0e:	4610      	mov	r0, r2
 800bb10:	4798      	blx	r3
 800bb12:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	3301      	adds	r3, #1
 800bb18:	2207      	movs	r2, #7
 800bb1a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bb1c:	e00f      	b.n	800bb3e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bb1e:	6839      	ldr	r1, [r7, #0]
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f000 fa10 	bl	800bf46 <USBD_CtlError>
        err++;
 800bb26:	7afb      	ldrb	r3, [r7, #11]
 800bb28:	3301      	adds	r3, #1
 800bb2a:	72fb      	strb	r3, [r7, #11]
      break;
 800bb2c:	e007      	b.n	800bb3e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800bb2e:	6839      	ldr	r1, [r7, #0]
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f000 fa08 	bl	800bf46 <USBD_CtlError>
      err++;
 800bb36:	7afb      	ldrb	r3, [r7, #11]
 800bb38:	3301      	adds	r3, #1
 800bb3a:	72fb      	strb	r3, [r7, #11]
      break;
 800bb3c:	bf00      	nop
  }

  if (err != 0U)
 800bb3e:	7afb      	ldrb	r3, [r7, #11]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d11e      	bne.n	800bb82 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	88db      	ldrh	r3, [r3, #6]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d016      	beq.n	800bb7a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800bb4c:	893b      	ldrh	r3, [r7, #8]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d00e      	beq.n	800bb70 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	88da      	ldrh	r2, [r3, #6]
 800bb56:	893b      	ldrh	r3, [r7, #8]
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	bf28      	it	cs
 800bb5c:	4613      	movcs	r3, r2
 800bb5e:	b29b      	uxth	r3, r3
 800bb60:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bb62:	893b      	ldrh	r3, [r7, #8]
 800bb64:	461a      	mov	r2, r3
 800bb66:	68f9      	ldr	r1, [r7, #12]
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 fa5d 	bl	800c028 <USBD_CtlSendData>
 800bb6e:	e009      	b.n	800bb84 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bb70:	6839      	ldr	r1, [r7, #0]
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f000 f9e7 	bl	800bf46 <USBD_CtlError>
 800bb78:	e004      	b.n	800bb84 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f000 faae 	bl	800c0dc <USBD_CtlSendStatus>
 800bb80:	e000      	b.n	800bb84 <USBD_GetDescriptor+0x320>
    return;
 800bb82:	bf00      	nop
  }
}
 800bb84:	3710      	adds	r7, #16
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}
 800bb8a:	bf00      	nop

0800bb8c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b084      	sub	sp, #16
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
 800bb94:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	889b      	ldrh	r3, [r3, #4]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d131      	bne.n	800bc02 <USBD_SetAddress+0x76>
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	88db      	ldrh	r3, [r3, #6]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d12d      	bne.n	800bc02 <USBD_SetAddress+0x76>
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	885b      	ldrh	r3, [r3, #2]
 800bbaa:	2b7f      	cmp	r3, #127	; 0x7f
 800bbac:	d829      	bhi.n	800bc02 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	885b      	ldrh	r3, [r3, #2]
 800bbb2:	b2db      	uxtb	r3, r3
 800bbb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbb8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbc0:	b2db      	uxtb	r3, r3
 800bbc2:	2b03      	cmp	r3, #3
 800bbc4:	d104      	bne.n	800bbd0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bbc6:	6839      	ldr	r1, [r7, #0]
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f000 f9bc 	bl	800bf46 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbce:	e01d      	b.n	800bc0c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	7bfa      	ldrb	r2, [r7, #15]
 800bbd4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bbd8:	7bfb      	ldrb	r3, [r7, #15]
 800bbda:	4619      	mov	r1, r3
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f000 ffbf 	bl	800cb60 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f000 fa7a 	bl	800c0dc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bbe8:	7bfb      	ldrb	r3, [r7, #15]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d004      	beq.n	800bbf8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2202      	movs	r2, #2
 800bbf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbf6:	e009      	b.n	800bc0c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2201      	movs	r2, #1
 800bbfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc00:	e004      	b.n	800bc0c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bc02:	6839      	ldr	r1, [r7, #0]
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f000 f99e 	bl	800bf46 <USBD_CtlError>
  }
}
 800bc0a:	bf00      	nop
 800bc0c:	bf00      	nop
 800bc0e:	3710      	adds	r7, #16
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b084      	sub	sp, #16
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	885b      	ldrh	r3, [r3, #2]
 800bc26:	b2da      	uxtb	r2, r3
 800bc28:	4b4e      	ldr	r3, [pc, #312]	; (800bd64 <USBD_SetConfig+0x150>)
 800bc2a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bc2c:	4b4d      	ldr	r3, [pc, #308]	; (800bd64 <USBD_SetConfig+0x150>)
 800bc2e:	781b      	ldrb	r3, [r3, #0]
 800bc30:	2b01      	cmp	r3, #1
 800bc32:	d905      	bls.n	800bc40 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bc34:	6839      	ldr	r1, [r7, #0]
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f000 f985 	bl	800bf46 <USBD_CtlError>
    return USBD_FAIL;
 800bc3c:	2303      	movs	r3, #3
 800bc3e:	e08c      	b.n	800bd5a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc46:	b2db      	uxtb	r3, r3
 800bc48:	2b02      	cmp	r3, #2
 800bc4a:	d002      	beq.n	800bc52 <USBD_SetConfig+0x3e>
 800bc4c:	2b03      	cmp	r3, #3
 800bc4e:	d029      	beq.n	800bca4 <USBD_SetConfig+0x90>
 800bc50:	e075      	b.n	800bd3e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bc52:	4b44      	ldr	r3, [pc, #272]	; (800bd64 <USBD_SetConfig+0x150>)
 800bc54:	781b      	ldrb	r3, [r3, #0]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d020      	beq.n	800bc9c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bc5a:	4b42      	ldr	r3, [pc, #264]	; (800bd64 <USBD_SetConfig+0x150>)
 800bc5c:	781b      	ldrb	r3, [r3, #0]
 800bc5e:	461a      	mov	r2, r3
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bc64:	4b3f      	ldr	r3, [pc, #252]	; (800bd64 <USBD_SetConfig+0x150>)
 800bc66:	781b      	ldrb	r3, [r3, #0]
 800bc68:	4619      	mov	r1, r3
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f7ff f848 	bl	800ad00 <USBD_SetClassConfig>
 800bc70:	4603      	mov	r3, r0
 800bc72:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bc74:	7bfb      	ldrb	r3, [r7, #15]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d008      	beq.n	800bc8c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bc7a:	6839      	ldr	r1, [r7, #0]
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f000 f962 	bl	800bf46 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2202      	movs	r2, #2
 800bc86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bc8a:	e065      	b.n	800bd58 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f000 fa25 	bl	800c0dc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2203      	movs	r2, #3
 800bc96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bc9a:	e05d      	b.n	800bd58 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f000 fa1d 	bl	800c0dc <USBD_CtlSendStatus>
      break;
 800bca2:	e059      	b.n	800bd58 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bca4:	4b2f      	ldr	r3, [pc, #188]	; (800bd64 <USBD_SetConfig+0x150>)
 800bca6:	781b      	ldrb	r3, [r3, #0]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d112      	bne.n	800bcd2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2202      	movs	r2, #2
 800bcb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bcb4:	4b2b      	ldr	r3, [pc, #172]	; (800bd64 <USBD_SetConfig+0x150>)
 800bcb6:	781b      	ldrb	r3, [r3, #0]
 800bcb8:	461a      	mov	r2, r3
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bcbe:	4b29      	ldr	r3, [pc, #164]	; (800bd64 <USBD_SetConfig+0x150>)
 800bcc0:	781b      	ldrb	r3, [r3, #0]
 800bcc2:	4619      	mov	r1, r3
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f7ff f837 	bl	800ad38 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f000 fa06 	bl	800c0dc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bcd0:	e042      	b.n	800bd58 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bcd2:	4b24      	ldr	r3, [pc, #144]	; (800bd64 <USBD_SetConfig+0x150>)
 800bcd4:	781b      	ldrb	r3, [r3, #0]
 800bcd6:	461a      	mov	r2, r3
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d02a      	beq.n	800bd36 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	685b      	ldr	r3, [r3, #4]
 800bce4:	b2db      	uxtb	r3, r3
 800bce6:	4619      	mov	r1, r3
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f7ff f825 	bl	800ad38 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bcee:	4b1d      	ldr	r3, [pc, #116]	; (800bd64 <USBD_SetConfig+0x150>)
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	461a      	mov	r2, r3
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bcf8:	4b1a      	ldr	r3, [pc, #104]	; (800bd64 <USBD_SetConfig+0x150>)
 800bcfa:	781b      	ldrb	r3, [r3, #0]
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f7fe fffe 	bl	800ad00 <USBD_SetClassConfig>
 800bd04:	4603      	mov	r3, r0
 800bd06:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bd08:	7bfb      	ldrb	r3, [r7, #15]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d00f      	beq.n	800bd2e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bd0e:	6839      	ldr	r1, [r7, #0]
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f000 f918 	bl	800bf46 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	685b      	ldr	r3, [r3, #4]
 800bd1a:	b2db      	uxtb	r3, r3
 800bd1c:	4619      	mov	r1, r3
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f7ff f80a 	bl	800ad38 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2202      	movs	r2, #2
 800bd28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bd2c:	e014      	b.n	800bd58 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f000 f9d4 	bl	800c0dc <USBD_CtlSendStatus>
      break;
 800bd34:	e010      	b.n	800bd58 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f000 f9d0 	bl	800c0dc <USBD_CtlSendStatus>
      break;
 800bd3c:	e00c      	b.n	800bd58 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bd3e:	6839      	ldr	r1, [r7, #0]
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f000 f900 	bl	800bf46 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bd46:	4b07      	ldr	r3, [pc, #28]	; (800bd64 <USBD_SetConfig+0x150>)
 800bd48:	781b      	ldrb	r3, [r3, #0]
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f7fe fff3 	bl	800ad38 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bd52:	2303      	movs	r3, #3
 800bd54:	73fb      	strb	r3, [r7, #15]
      break;
 800bd56:	bf00      	nop
  }

  return ret;
 800bd58:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3710      	adds	r7, #16
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
 800bd62:	bf00      	nop
 800bd64:	200003bc 	.word	0x200003bc

0800bd68 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b082      	sub	sp, #8
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	88db      	ldrh	r3, [r3, #6]
 800bd76:	2b01      	cmp	r3, #1
 800bd78:	d004      	beq.n	800bd84 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bd7a:	6839      	ldr	r1, [r7, #0]
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	f000 f8e2 	bl	800bf46 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bd82:	e023      	b.n	800bdcc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd8a:	b2db      	uxtb	r3, r3
 800bd8c:	2b02      	cmp	r3, #2
 800bd8e:	dc02      	bgt.n	800bd96 <USBD_GetConfig+0x2e>
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	dc03      	bgt.n	800bd9c <USBD_GetConfig+0x34>
 800bd94:	e015      	b.n	800bdc2 <USBD_GetConfig+0x5a>
 800bd96:	2b03      	cmp	r3, #3
 800bd98:	d00b      	beq.n	800bdb2 <USBD_GetConfig+0x4a>
 800bd9a:	e012      	b.n	800bdc2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2200      	movs	r2, #0
 800bda0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	3308      	adds	r3, #8
 800bda6:	2201      	movs	r2, #1
 800bda8:	4619      	mov	r1, r3
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f000 f93c 	bl	800c028 <USBD_CtlSendData>
        break;
 800bdb0:	e00c      	b.n	800bdcc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	3304      	adds	r3, #4
 800bdb6:	2201      	movs	r2, #1
 800bdb8:	4619      	mov	r1, r3
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f000 f934 	bl	800c028 <USBD_CtlSendData>
        break;
 800bdc0:	e004      	b.n	800bdcc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bdc2:	6839      	ldr	r1, [r7, #0]
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f000 f8be 	bl	800bf46 <USBD_CtlError>
        break;
 800bdca:	bf00      	nop
}
 800bdcc:	bf00      	nop
 800bdce:	3708      	adds	r7, #8
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}

0800bdd4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b082      	sub	sp, #8
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bde4:	b2db      	uxtb	r3, r3
 800bde6:	3b01      	subs	r3, #1
 800bde8:	2b02      	cmp	r3, #2
 800bdea:	d81e      	bhi.n	800be2a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	88db      	ldrh	r3, [r3, #6]
 800bdf0:	2b02      	cmp	r3, #2
 800bdf2:	d004      	beq.n	800bdfe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bdf4:	6839      	ldr	r1, [r7, #0]
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f000 f8a5 	bl	800bf46 <USBD_CtlError>
        break;
 800bdfc:	e01a      	b.n	800be34 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2201      	movs	r2, #1
 800be02:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d005      	beq.n	800be1a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	68db      	ldr	r3, [r3, #12]
 800be12:	f043 0202 	orr.w	r2, r3, #2
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	330c      	adds	r3, #12
 800be1e:	2202      	movs	r2, #2
 800be20:	4619      	mov	r1, r3
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f000 f900 	bl	800c028 <USBD_CtlSendData>
      break;
 800be28:	e004      	b.n	800be34 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800be2a:	6839      	ldr	r1, [r7, #0]
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f000 f88a 	bl	800bf46 <USBD_CtlError>
      break;
 800be32:	bf00      	nop
  }
}
 800be34:	bf00      	nop
 800be36:	3708      	adds	r7, #8
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}

0800be3c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b082      	sub	sp, #8
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
 800be44:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	885b      	ldrh	r3, [r3, #2]
 800be4a:	2b01      	cmp	r3, #1
 800be4c:	d107      	bne.n	800be5e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2201      	movs	r2, #1
 800be52:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f000 f940 	bl	800c0dc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800be5c:	e013      	b.n	800be86 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	885b      	ldrh	r3, [r3, #2]
 800be62:	2b02      	cmp	r3, #2
 800be64:	d10b      	bne.n	800be7e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	889b      	ldrh	r3, [r3, #4]
 800be6a:	0a1b      	lsrs	r3, r3, #8
 800be6c:	b29b      	uxth	r3, r3
 800be6e:	b2da      	uxtb	r2, r3
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f000 f930 	bl	800c0dc <USBD_CtlSendStatus>
}
 800be7c:	e003      	b.n	800be86 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800be7e:	6839      	ldr	r1, [r7, #0]
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f000 f860 	bl	800bf46 <USBD_CtlError>
}
 800be86:	bf00      	nop
 800be88:	3708      	adds	r7, #8
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}

0800be8e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be8e:	b580      	push	{r7, lr}
 800be90:	b082      	sub	sp, #8
 800be92:	af00      	add	r7, sp, #0
 800be94:	6078      	str	r0, [r7, #4]
 800be96:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be9e:	b2db      	uxtb	r3, r3
 800bea0:	3b01      	subs	r3, #1
 800bea2:	2b02      	cmp	r3, #2
 800bea4:	d80b      	bhi.n	800bebe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	885b      	ldrh	r3, [r3, #2]
 800beaa:	2b01      	cmp	r3, #1
 800beac:	d10c      	bne.n	800bec8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2200      	movs	r2, #0
 800beb2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f000 f910 	bl	800c0dc <USBD_CtlSendStatus>
      }
      break;
 800bebc:	e004      	b.n	800bec8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bebe:	6839      	ldr	r1, [r7, #0]
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f000 f840 	bl	800bf46 <USBD_CtlError>
      break;
 800bec6:	e000      	b.n	800beca <USBD_ClrFeature+0x3c>
      break;
 800bec8:	bf00      	nop
  }
}
 800beca:	bf00      	nop
 800becc:	3708      	adds	r7, #8
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}

0800bed2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bed2:	b580      	push	{r7, lr}
 800bed4:	b084      	sub	sp, #16
 800bed6:	af00      	add	r7, sp, #0
 800bed8:	6078      	str	r0, [r7, #4]
 800beda:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	781a      	ldrb	r2, [r3, #0]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	3301      	adds	r3, #1
 800beec:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	781a      	ldrb	r2, [r3, #0]
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	3301      	adds	r3, #1
 800befa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800befc:	68f8      	ldr	r0, [r7, #12]
 800befe:	f7ff fa16 	bl	800b32e <SWAPBYTE>
 800bf02:	4603      	mov	r3, r0
 800bf04:	461a      	mov	r2, r3
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	3301      	adds	r3, #1
 800bf0e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	3301      	adds	r3, #1
 800bf14:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bf16:	68f8      	ldr	r0, [r7, #12]
 800bf18:	f7ff fa09 	bl	800b32e <SWAPBYTE>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	461a      	mov	r2, r3
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	3301      	adds	r3, #1
 800bf28:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	3301      	adds	r3, #1
 800bf2e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bf30:	68f8      	ldr	r0, [r7, #12]
 800bf32:	f7ff f9fc 	bl	800b32e <SWAPBYTE>
 800bf36:	4603      	mov	r3, r0
 800bf38:	461a      	mov	r2, r3
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	80da      	strh	r2, [r3, #6]
}
 800bf3e:	bf00      	nop
 800bf40:	3710      	adds	r7, #16
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}

0800bf46 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf46:	b580      	push	{r7, lr}
 800bf48:	b082      	sub	sp, #8
 800bf4a:	af00      	add	r7, sp, #0
 800bf4c:	6078      	str	r0, [r7, #4]
 800bf4e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf50:	2180      	movs	r1, #128	; 0x80
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f000 fd6a 	bl	800ca2c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bf58:	2100      	movs	r1, #0
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f000 fd66 	bl	800ca2c <USBD_LL_StallEP>
}
 800bf60:	bf00      	nop
 800bf62:	3708      	adds	r7, #8
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}

0800bf68 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b086      	sub	sp, #24
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	60f8      	str	r0, [r7, #12]
 800bf70:	60b9      	str	r1, [r7, #8]
 800bf72:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bf74:	2300      	movs	r3, #0
 800bf76:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d036      	beq.n	800bfec <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bf82:	6938      	ldr	r0, [r7, #16]
 800bf84:	f000 f836 	bl	800bff4 <USBD_GetLen>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	3301      	adds	r3, #1
 800bf8c:	b29b      	uxth	r3, r3
 800bf8e:	005b      	lsls	r3, r3, #1
 800bf90:	b29a      	uxth	r2, r3
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bf96:	7dfb      	ldrb	r3, [r7, #23]
 800bf98:	68ba      	ldr	r2, [r7, #8]
 800bf9a:	4413      	add	r3, r2
 800bf9c:	687a      	ldr	r2, [r7, #4]
 800bf9e:	7812      	ldrb	r2, [r2, #0]
 800bfa0:	701a      	strb	r2, [r3, #0]
  idx++;
 800bfa2:	7dfb      	ldrb	r3, [r7, #23]
 800bfa4:	3301      	adds	r3, #1
 800bfa6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bfa8:	7dfb      	ldrb	r3, [r7, #23]
 800bfaa:	68ba      	ldr	r2, [r7, #8]
 800bfac:	4413      	add	r3, r2
 800bfae:	2203      	movs	r2, #3
 800bfb0:	701a      	strb	r2, [r3, #0]
  idx++;
 800bfb2:	7dfb      	ldrb	r3, [r7, #23]
 800bfb4:	3301      	adds	r3, #1
 800bfb6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bfb8:	e013      	b.n	800bfe2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bfba:	7dfb      	ldrb	r3, [r7, #23]
 800bfbc:	68ba      	ldr	r2, [r7, #8]
 800bfbe:	4413      	add	r3, r2
 800bfc0:	693a      	ldr	r2, [r7, #16]
 800bfc2:	7812      	ldrb	r2, [r2, #0]
 800bfc4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	3301      	adds	r3, #1
 800bfca:	613b      	str	r3, [r7, #16]
    idx++;
 800bfcc:	7dfb      	ldrb	r3, [r7, #23]
 800bfce:	3301      	adds	r3, #1
 800bfd0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bfd2:	7dfb      	ldrb	r3, [r7, #23]
 800bfd4:	68ba      	ldr	r2, [r7, #8]
 800bfd6:	4413      	add	r3, r2
 800bfd8:	2200      	movs	r2, #0
 800bfda:	701a      	strb	r2, [r3, #0]
    idx++;
 800bfdc:	7dfb      	ldrb	r3, [r7, #23]
 800bfde:	3301      	adds	r3, #1
 800bfe0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	781b      	ldrb	r3, [r3, #0]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d1e7      	bne.n	800bfba <USBD_GetString+0x52>
 800bfea:	e000      	b.n	800bfee <USBD_GetString+0x86>
    return;
 800bfec:	bf00      	nop
  }
}
 800bfee:	3718      	adds	r7, #24
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}

0800bff4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bff4:	b480      	push	{r7}
 800bff6:	b085      	sub	sp, #20
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bffc:	2300      	movs	r3, #0
 800bffe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c004:	e005      	b.n	800c012 <USBD_GetLen+0x1e>
  {
    len++;
 800c006:	7bfb      	ldrb	r3, [r7, #15]
 800c008:	3301      	adds	r3, #1
 800c00a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	3301      	adds	r3, #1
 800c010:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c012:	68bb      	ldr	r3, [r7, #8]
 800c014:	781b      	ldrb	r3, [r3, #0]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d1f5      	bne.n	800c006 <USBD_GetLen+0x12>
  }

  return len;
 800c01a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	3714      	adds	r7, #20
 800c020:	46bd      	mov	sp, r7
 800c022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c026:	4770      	bx	lr

0800c028 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b084      	sub	sp, #16
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	60f8      	str	r0, [r7, #12]
 800c030:	60b9      	str	r1, [r7, #8]
 800c032:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	2202      	movs	r2, #2
 800c038:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	687a      	ldr	r2, [r7, #4]
 800c040:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	687a      	ldr	r2, [r7, #4]
 800c046:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	68ba      	ldr	r2, [r7, #8]
 800c04c:	2100      	movs	r1, #0
 800c04e:	68f8      	ldr	r0, [r7, #12]
 800c050:	f000 fdbc 	bl	800cbcc <USBD_LL_Transmit>

  return USBD_OK;
 800c054:	2300      	movs	r3, #0
}
 800c056:	4618      	mov	r0, r3
 800c058:	3710      	adds	r7, #16
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}

0800c05e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c05e:	b580      	push	{r7, lr}
 800c060:	b084      	sub	sp, #16
 800c062:	af00      	add	r7, sp, #0
 800c064:	60f8      	str	r0, [r7, #12]
 800c066:	60b9      	str	r1, [r7, #8]
 800c068:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	68ba      	ldr	r2, [r7, #8]
 800c06e:	2100      	movs	r1, #0
 800c070:	68f8      	ldr	r0, [r7, #12]
 800c072:	f000 fdab 	bl	800cbcc <USBD_LL_Transmit>

  return USBD_OK;
 800c076:	2300      	movs	r3, #0
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3710      	adds	r7, #16
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}

0800c080 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b084      	sub	sp, #16
 800c084:	af00      	add	r7, sp, #0
 800c086:	60f8      	str	r0, [r7, #12]
 800c088:	60b9      	str	r1, [r7, #8]
 800c08a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	2203      	movs	r2, #3
 800c090:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	687a      	ldr	r2, [r7, #4]
 800c098:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	687a      	ldr	r2, [r7, #4]
 800c0a0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	68ba      	ldr	r2, [r7, #8]
 800c0a8:	2100      	movs	r1, #0
 800c0aa:	68f8      	ldr	r0, [r7, #12]
 800c0ac:	f000 fdc6 	bl	800cc3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c0b0:	2300      	movs	r3, #0
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3710      	adds	r7, #16
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}

0800c0ba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c0ba:	b580      	push	{r7, lr}
 800c0bc:	b084      	sub	sp, #16
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	60f8      	str	r0, [r7, #12]
 800c0c2:	60b9      	str	r1, [r7, #8]
 800c0c4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	68ba      	ldr	r2, [r7, #8]
 800c0ca:	2100      	movs	r1, #0
 800c0cc:	68f8      	ldr	r0, [r7, #12]
 800c0ce:	f000 fdb5 	bl	800cc3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c0d2:	2300      	movs	r3, #0
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3710      	adds	r7, #16
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b082      	sub	sp, #8
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2204      	movs	r2, #4
 800c0e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	2100      	movs	r1, #0
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f000 fd6a 	bl	800cbcc <USBD_LL_Transmit>

  return USBD_OK;
 800c0f8:	2300      	movs	r3, #0
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	3708      	adds	r7, #8
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}

0800c102 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c102:	b580      	push	{r7, lr}
 800c104:	b082      	sub	sp, #8
 800c106:	af00      	add	r7, sp, #0
 800c108:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2205      	movs	r2, #5
 800c10e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c112:	2300      	movs	r3, #0
 800c114:	2200      	movs	r2, #0
 800c116:	2100      	movs	r1, #0
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f000 fd8f 	bl	800cc3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c11e:	2300      	movs	r3, #0
}
 800c120:	4618      	mov	r0, r3
 800c122:	3708      	adds	r7, #8
 800c124:	46bd      	mov	sp, r7
 800c126:	bd80      	pop	{r7, pc}

0800c128 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c12c:	2200      	movs	r2, #0
 800c12e:	4912      	ldr	r1, [pc, #72]	; (800c178 <MX_USB_DEVICE_Init+0x50>)
 800c130:	4812      	ldr	r0, [pc, #72]	; (800c17c <MX_USB_DEVICE_Init+0x54>)
 800c132:	f7fe fd68 	bl	800ac06 <USBD_Init>
 800c136:	4603      	mov	r3, r0
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d001      	beq.n	800c140 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c13c:	f7f4 fc7e 	bl	8000a3c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800c140:	490f      	ldr	r1, [pc, #60]	; (800c180 <MX_USB_DEVICE_Init+0x58>)
 800c142:	480e      	ldr	r0, [pc, #56]	; (800c17c <MX_USB_DEVICE_Init+0x54>)
 800c144:	f7fe fd8f 	bl	800ac66 <USBD_RegisterClass>
 800c148:	4603      	mov	r3, r0
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d001      	beq.n	800c152 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c14e:	f7f4 fc75 	bl	8000a3c <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800c152:	490c      	ldr	r1, [pc, #48]	; (800c184 <MX_USB_DEVICE_Init+0x5c>)
 800c154:	4809      	ldr	r0, [pc, #36]	; (800c17c <MX_USB_DEVICE_Init+0x54>)
 800c156:	f7fc fca5 	bl	8008aa4 <USBD_CUSTOM_HID_RegisterInterface>
 800c15a:	4603      	mov	r3, r0
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d001      	beq.n	800c164 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c160:	f7f4 fc6c 	bl	8000a3c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c164:	4805      	ldr	r0, [pc, #20]	; (800c17c <MX_USB_DEVICE_Init+0x54>)
 800c166:	f7fe fdb4 	bl	800acd2 <USBD_Start>
 800c16a:	4603      	mov	r3, r0
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d001      	beq.n	800c174 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c170:	f7f4 fc64 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c174:	bf00      	nop
 800c176:	bd80      	pop	{r7, pc}
 800c178:	200001ac 	.word	0x200001ac
 800c17c:	200003c0 	.word	0x200003c0
 800c180:	2000002c 	.word	0x2000002c
 800c184:	2000019c 	.word	0x2000019c

0800c188 <MX_USB_DEVICE_Init_MSC>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init_MSC(void)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS_MSC, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c18c:	2200      	movs	r2, #0
 800c18e:	4912      	ldr	r1, [pc, #72]	; (800c1d8 <MX_USB_DEVICE_Init_MSC+0x50>)
 800c190:	4812      	ldr	r0, [pc, #72]	; (800c1dc <MX_USB_DEVICE_Init_MSC+0x54>)
 800c192:	f7fe fd38 	bl	800ac06 <USBD_Init>
 800c196:	4603      	mov	r3, r0
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d001      	beq.n	800c1a0 <MX_USB_DEVICE_Init_MSC+0x18>
  {
    Error_Handler();
 800c19c:	f7f4 fc4e 	bl	8000a3c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS_MSC, &USBD_MSC) != USBD_OK)
 800c1a0:	490f      	ldr	r1, [pc, #60]	; (800c1e0 <MX_USB_DEVICE_Init_MSC+0x58>)
 800c1a2:	480e      	ldr	r0, [pc, #56]	; (800c1dc <MX_USB_DEVICE_Init_MSC+0x54>)
 800c1a4:	f7fe fd5f 	bl	800ac66 <USBD_RegisterClass>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d001      	beq.n	800c1b2 <MX_USB_DEVICE_Init_MSC+0x2a>
  {
    Error_Handler();
 800c1ae:	f7f4 fc45 	bl	8000a3c <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS_MSC, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800c1b2:	490c      	ldr	r1, [pc, #48]	; (800c1e4 <MX_USB_DEVICE_Init_MSC+0x5c>)
 800c1b4:	4809      	ldr	r0, [pc, #36]	; (800c1dc <MX_USB_DEVICE_Init_MSC+0x54>)
 800c1b6:	f7fc ff27 	bl	8009008 <USBD_MSC_RegisterStorage>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d001      	beq.n	800c1c4 <MX_USB_DEVICE_Init_MSC+0x3c>
  {
    Error_Handler();
 800c1c0:	f7f4 fc3c 	bl	8000a3c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS_MSC) != USBD_OK)
 800c1c4:	4805      	ldr	r0, [pc, #20]	; (800c1dc <MX_USB_DEVICE_Init_MSC+0x54>)
 800c1c6:	f7fe fd84 	bl	800acd2 <USBD_Start>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d001      	beq.n	800c1d4 <MX_USB_DEVICE_Init_MSC+0x4c>
  {
    Error_Handler();
 800c1d0:	f7f4 fc34 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c1d4:	bf00      	nop
 800c1d6:	bd80      	pop	{r7, pc}
 800c1d8:	200001ac 	.word	0x200001ac
 800c1dc:	2000069c 	.word	0x2000069c
 800c1e0:	200000a8 	.word	0x200000a8
 800c1e4:	20000220 	.word	0x20000220

0800c1e8 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c1ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f6:	4770      	bx	lr

0800c1f8 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800c1fc:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	46bd      	mov	sp, r7
 800c202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c206:	4770      	bx	lr

0800c208 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b082      	sub	sp, #8
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	4603      	mov	r3, r0
 800c210:	460a      	mov	r2, r1
 800c212:	71fb      	strb	r3, [r7, #7]
 800c214:	4613      	mov	r3, r2
 800c216:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 800c218:	4803      	ldr	r0, [pc, #12]	; (800c228 <CUSTOM_HID_OutEvent_FS+0x20>)
 800c21a:	f7fc fbd1 	bl	80089c0 <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 800c21e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c220:	4618      	mov	r0, r3
 800c222:	3708      	adds	r7, #8
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}
 800c228:	200003c0 	.word	0x200003c0

0800c22c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c22c:	b480      	push	{r7}
 800c22e:	b083      	sub	sp, #12
 800c230:	af00      	add	r7, sp, #0
 800c232:	4603      	mov	r3, r0
 800c234:	6039      	str	r1, [r7, #0]
 800c236:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	2212      	movs	r2, #18
 800c23c:	801a      	strh	r2, [r3, #0]
  if(isMSC == 1)
 800c23e:	4b06      	ldr	r3, [pc, #24]	; (800c258 <USBD_FS_DeviceDescriptor+0x2c>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	2b01      	cmp	r3, #1
 800c244:	d101      	bne.n	800c24a <USBD_FS_DeviceDescriptor+0x1e>
	  return USBD_FS_DeviceDesc;
 800c246:	4b05      	ldr	r3, [pc, #20]	; (800c25c <USBD_FS_DeviceDescriptor+0x30>)
 800c248:	e000      	b.n	800c24c <USBD_FS_DeviceDescriptor+0x20>
  else
	  return USBD_FS_DeviceDesc_HID;
 800c24a:	4b05      	ldr	r3, [pc, #20]	; (800c260 <USBD_FS_DeviceDescriptor+0x34>)
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	370c      	adds	r7, #12
 800c250:	46bd      	mov	sp, r7
 800c252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c256:	4770      	bx	lr
 800c258:	20000978 	.word	0x20000978
 800c25c:	200001cc 	.word	0x200001cc
 800c260:	200001e0 	.word	0x200001e0

0800c264 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c264:	b480      	push	{r7}
 800c266:	b083      	sub	sp, #12
 800c268:	af00      	add	r7, sp, #0
 800c26a:	4603      	mov	r3, r0
 800c26c:	6039      	str	r1, [r7, #0]
 800c26e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	2204      	movs	r2, #4
 800c274:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c276:	4b03      	ldr	r3, [pc, #12]	; (800c284 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c278:	4618      	mov	r0, r3
 800c27a:	370c      	adds	r7, #12
 800c27c:	46bd      	mov	sp, r7
 800c27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c282:	4770      	bx	lr
 800c284:	20000200 	.word	0x20000200

0800c288 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b082      	sub	sp, #8
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	4603      	mov	r3, r0
 800c290:	6039      	str	r1, [r7, #0]
 800c292:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c294:	79fb      	ldrb	r3, [r7, #7]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d105      	bne.n	800c2a6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c29a:	683a      	ldr	r2, [r7, #0]
 800c29c:	4907      	ldr	r1, [pc, #28]	; (800c2bc <USBD_FS_ProductStrDescriptor+0x34>)
 800c29e:	4808      	ldr	r0, [pc, #32]	; (800c2c0 <USBD_FS_ProductStrDescriptor+0x38>)
 800c2a0:	f7ff fe62 	bl	800bf68 <USBD_GetString>
 800c2a4:	e004      	b.n	800c2b0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c2a6:	683a      	ldr	r2, [r7, #0]
 800c2a8:	4904      	ldr	r1, [pc, #16]	; (800c2bc <USBD_FS_ProductStrDescriptor+0x34>)
 800c2aa:	4805      	ldr	r0, [pc, #20]	; (800c2c0 <USBD_FS_ProductStrDescriptor+0x38>)
 800c2ac:	f7ff fe5c 	bl	800bf68 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c2b0:	4b02      	ldr	r3, [pc, #8]	; (800c2bc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3708      	adds	r7, #8
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}
 800c2ba:	bf00      	nop
 800c2bc:	2000097c 	.word	0x2000097c
 800c2c0:	0800cef8 	.word	0x0800cef8

0800c2c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b082      	sub	sp, #8
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	6039      	str	r1, [r7, #0]
 800c2ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c2d0:	683a      	ldr	r2, [r7, #0]
 800c2d2:	4904      	ldr	r1, [pc, #16]	; (800c2e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c2d4:	4804      	ldr	r0, [pc, #16]	; (800c2e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c2d6:	f7ff fe47 	bl	800bf68 <USBD_GetString>
  return USBD_StrDesc;
 800c2da:	4b02      	ldr	r3, [pc, #8]	; (800c2e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3708      	adds	r7, #8
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}
 800c2e4:	2000097c 	.word	0x2000097c
 800c2e8:	0800cf0c 	.word	0x0800cf0c

0800c2ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b082      	sub	sp, #8
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	6039      	str	r1, [r7, #0]
 800c2f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	221a      	movs	r2, #26
 800c2fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c2fe:	f000 f855 	bl	800c3ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c302:	4b02      	ldr	r3, [pc, #8]	; (800c30c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c304:	4618      	mov	r0, r3
 800c306:	3708      	adds	r7, #8
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}
 800c30c:	20000204 	.word	0x20000204

0800c310 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b082      	sub	sp, #8
 800c314:	af00      	add	r7, sp, #0
 800c316:	4603      	mov	r3, r0
 800c318:	6039      	str	r1, [r7, #0]
 800c31a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c31c:	79fb      	ldrb	r3, [r7, #7]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d105      	bne.n	800c32e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c322:	683a      	ldr	r2, [r7, #0]
 800c324:	4907      	ldr	r1, [pc, #28]	; (800c344 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c326:	4808      	ldr	r0, [pc, #32]	; (800c348 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c328:	f7ff fe1e 	bl	800bf68 <USBD_GetString>
 800c32c:	e004      	b.n	800c338 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c32e:	683a      	ldr	r2, [r7, #0]
 800c330:	4904      	ldr	r1, [pc, #16]	; (800c344 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c332:	4805      	ldr	r0, [pc, #20]	; (800c348 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c334:	f7ff fe18 	bl	800bf68 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c338:	4b02      	ldr	r3, [pc, #8]	; (800c344 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	3708      	adds	r7, #8
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}
 800c342:	bf00      	nop
 800c344:	2000097c 	.word	0x2000097c
 800c348:	0800cf10 	.word	0x0800cf10

0800c34c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b082      	sub	sp, #8
 800c350:	af00      	add	r7, sp, #0
 800c352:	4603      	mov	r3, r0
 800c354:	6039      	str	r1, [r7, #0]
 800c356:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c358:	79fb      	ldrb	r3, [r7, #7]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d105      	bne.n	800c36a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c35e:	683a      	ldr	r2, [r7, #0]
 800c360:	4907      	ldr	r1, [pc, #28]	; (800c380 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c362:	4808      	ldr	r0, [pc, #32]	; (800c384 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c364:	f7ff fe00 	bl	800bf68 <USBD_GetString>
 800c368:	e004      	b.n	800c374 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c36a:	683a      	ldr	r2, [r7, #0]
 800c36c:	4904      	ldr	r1, [pc, #16]	; (800c380 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c36e:	4805      	ldr	r0, [pc, #20]	; (800c384 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c370:	f7ff fdfa 	bl	800bf68 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c374:	4b02      	ldr	r3, [pc, #8]	; (800c380 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c376:	4618      	mov	r0, r3
 800c378:	3708      	adds	r7, #8
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}
 800c37e:	bf00      	nop
 800c380:	2000097c 	.word	0x2000097c
 800c384:	0800cf1c 	.word	0x0800cf1c

0800c388 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c388:	b480      	push	{r7}
 800c38a:	b083      	sub	sp, #12
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	4603      	mov	r3, r0
 800c390:	6039      	str	r1, [r7, #0]
 800c392:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	220c      	movs	r2, #12
 800c398:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800c39a:	4b03      	ldr	r3, [pc, #12]	; (800c3a8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	370c      	adds	r7, #12
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a6:	4770      	bx	lr
 800c3a8:	200001f4 	.word	0x200001f4

0800c3ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b084      	sub	sp, #16
 800c3b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c3b2:	4b0f      	ldr	r3, [pc, #60]	; (800c3f0 <Get_SerialNum+0x44>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c3b8:	4b0e      	ldr	r3, [pc, #56]	; (800c3f4 <Get_SerialNum+0x48>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c3be:	4b0e      	ldr	r3, [pc, #56]	; (800c3f8 <Get_SerialNum+0x4c>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c3c4:	68fa      	ldr	r2, [r7, #12]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	4413      	add	r3, r2
 800c3ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d009      	beq.n	800c3e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c3d2:	2208      	movs	r2, #8
 800c3d4:	4909      	ldr	r1, [pc, #36]	; (800c3fc <Get_SerialNum+0x50>)
 800c3d6:	68f8      	ldr	r0, [r7, #12]
 800c3d8:	f000 f814 	bl	800c404 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c3dc:	2204      	movs	r2, #4
 800c3de:	4908      	ldr	r1, [pc, #32]	; (800c400 <Get_SerialNum+0x54>)
 800c3e0:	68b8      	ldr	r0, [r7, #8]
 800c3e2:	f000 f80f 	bl	800c404 <IntToUnicode>
  }
}
 800c3e6:	bf00      	nop
 800c3e8:	3710      	adds	r7, #16
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}
 800c3ee:	bf00      	nop
 800c3f0:	1fff7590 	.word	0x1fff7590
 800c3f4:	1fff7594 	.word	0x1fff7594
 800c3f8:	1fff7598 	.word	0x1fff7598
 800c3fc:	20000206 	.word	0x20000206
 800c400:	20000216 	.word	0x20000216

0800c404 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c404:	b480      	push	{r7}
 800c406:	b087      	sub	sp, #28
 800c408:	af00      	add	r7, sp, #0
 800c40a:	60f8      	str	r0, [r7, #12]
 800c40c:	60b9      	str	r1, [r7, #8]
 800c40e:	4613      	mov	r3, r2
 800c410:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c412:	2300      	movs	r3, #0
 800c414:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c416:	2300      	movs	r3, #0
 800c418:	75fb      	strb	r3, [r7, #23]
 800c41a:	e027      	b.n	800c46c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	0f1b      	lsrs	r3, r3, #28
 800c420:	2b09      	cmp	r3, #9
 800c422:	d80b      	bhi.n	800c43c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	0f1b      	lsrs	r3, r3, #28
 800c428:	b2da      	uxtb	r2, r3
 800c42a:	7dfb      	ldrb	r3, [r7, #23]
 800c42c:	005b      	lsls	r3, r3, #1
 800c42e:	4619      	mov	r1, r3
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	440b      	add	r3, r1
 800c434:	3230      	adds	r2, #48	; 0x30
 800c436:	b2d2      	uxtb	r2, r2
 800c438:	701a      	strb	r2, [r3, #0]
 800c43a:	e00a      	b.n	800c452 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	0f1b      	lsrs	r3, r3, #28
 800c440:	b2da      	uxtb	r2, r3
 800c442:	7dfb      	ldrb	r3, [r7, #23]
 800c444:	005b      	lsls	r3, r3, #1
 800c446:	4619      	mov	r1, r3
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	440b      	add	r3, r1
 800c44c:	3237      	adds	r2, #55	; 0x37
 800c44e:	b2d2      	uxtb	r2, r2
 800c450:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	011b      	lsls	r3, r3, #4
 800c456:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c458:	7dfb      	ldrb	r3, [r7, #23]
 800c45a:	005b      	lsls	r3, r3, #1
 800c45c:	3301      	adds	r3, #1
 800c45e:	68ba      	ldr	r2, [r7, #8]
 800c460:	4413      	add	r3, r2
 800c462:	2200      	movs	r2, #0
 800c464:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c466:	7dfb      	ldrb	r3, [r7, #23]
 800c468:	3301      	adds	r3, #1
 800c46a:	75fb      	strb	r3, [r7, #23]
 800c46c:	7dfa      	ldrb	r2, [r7, #23]
 800c46e:	79fb      	ldrb	r3, [r7, #7]
 800c470:	429a      	cmp	r2, r3
 800c472:	d3d3      	bcc.n	800c41c <IntToUnicode+0x18>
  }
}
 800c474:	bf00      	nop
 800c476:	bf00      	nop
 800c478:	371c      	adds	r7, #28
 800c47a:	46bd      	mov	sp, r7
 800c47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c480:	4770      	bx	lr

0800c482 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800c482:	b480      	push	{r7}
 800c484:	b083      	sub	sp, #12
 800c486:	af00      	add	r7, sp, #0
 800c488:	4603      	mov	r3, r0
 800c48a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 800c48c:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800c48e:	4618      	mov	r0, r3
 800c490:	370c      	adds	r7, #12
 800c492:	46bd      	mov	sp, r7
 800c494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c498:	4770      	bx	lr

0800c49a <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800c49a:	b480      	push	{r7}
 800c49c:	b085      	sub	sp, #20
 800c49e:	af00      	add	r7, sp, #0
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	60b9      	str	r1, [r7, #8]
 800c4a4:	607a      	str	r2, [r7, #4]
 800c4a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	*block_num  = FLASH_PAGE_NBR;
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	2240      	movs	r2, #64	; 0x40
 800c4ac:	601a      	str	r2, [r3, #0]
	*block_size = FLASH_PAGE_SIZE;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c4b4:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800c4b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3714      	adds	r7, #20
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c2:	4770      	bx	lr

0800c4c4 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b083      	sub	sp, #12
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c4ce:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	370c      	adds	r7, #12
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr

0800c4dc <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b083      	sub	sp, #12
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800c4e6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	370c      	adds	r7, #12
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr

0800c4f4 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b084      	sub	sp, #16
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	60b9      	str	r1, [r7, #8]
 800c4fc:	607a      	str	r2, [r7, #4]
 800c4fe:	461a      	mov	r2, r3
 800c500:	4603      	mov	r3, r0
 800c502:	73fb      	strb	r3, [r7, #15]
 800c504:	4613      	mov	r3, r2
 800c506:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	if(lun == 0){
 800c508:	7bfb      	ldrb	r3, [r7, #15]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d10d      	bne.n	800c52a <STORAGE_Read_FS+0x36>
		memcpy(buf, (uint8_t*)(FLASH_START_ADDR + blk_addr * FLASH_PAGE_SIZE), blk_len * FLASH_PAGE_SIZE);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c514:	3340      	adds	r3, #64	; 0x40
 800c516:	02db      	lsls	r3, r3, #11
 800c518:	4619      	mov	r1, r3
 800c51a:	89bb      	ldrh	r3, [r7, #12]
 800c51c:	02db      	lsls	r3, r3, #11
 800c51e:	461a      	mov	r2, r3
 800c520:	68b8      	ldr	r0, [r7, #8]
 800c522:	f000 fc65 	bl	800cdf0 <memcpy>
		return (USBD_OK);
 800c526:	2300      	movs	r3, #0
 800c528:	e000      	b.n	800c52c <STORAGE_Read_FS+0x38>
	}
  return (USBD_FAIL);
 800c52a:	2303      	movs	r3, #3
  /* USER CODE END 6 */
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3710      	adds	r7, #16
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}

0800c534 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b08a      	sub	sp, #40	; 0x28
 800c538:	af00      	add	r7, sp, #0
 800c53a:	60b9      	str	r1, [r7, #8]
 800c53c:	607a      	str	r2, [r7, #4]
 800c53e:	461a      	mov	r2, r3
 800c540:	4603      	mov	r3, r0
 800c542:	73fb      	strb	r3, [r7, #15]
 800c544:	4613      	mov	r3, r2
 800c546:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	if(lun == 0){
 800c548:	7bfb      	ldrb	r3, [r7, #15]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d136      	bne.n	800c5bc <STORAGE_Write_FS+0x88>
		uint16_t i;
		HAL_FLASH_Unlock();
 800c54e:	f7f4 febb 	bl	80012c8 <HAL_FLASH_Unlock>
		FLASH_EraseInitTypeDef f;
		f.TypeErase = FLASH_TYPEERASE_PAGES;
 800c552:	2300      	movs	r3, #0
 800c554:	617b      	str	r3, [r7, #20]
		f.Banks = FLASH_BANK_BOTH;
 800c556:	2301      	movs	r3, #1
 800c558:	61bb      	str	r3, [r7, #24]
		f.Page = (FLASH_START_ADDR + blk_addr*FLASH_PAGE_SIZE)/FLASH_PAGE_SIZE;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c560:	3340      	adds	r3, #64	; 0x40
 800c562:	f3c3 0314 	ubfx	r3, r3, #0, #21
 800c566:	61fb      	str	r3, [r7, #28]
		f.NbPages = blk_len;
 800c568:	89bb      	ldrh	r3, [r7, #12]
 800c56a:	623b      	str	r3, [r7, #32]
		uint32_t PageError = 0;
 800c56c:	2300      	movs	r3, #0
 800c56e:	613b      	str	r3, [r7, #16]
		HAL_FLASHEx_Erase(&f, &PageError);
 800c570:	f107 0210 	add.w	r2, r7, #16
 800c574:	f107 0314 	add.w	r3, r7, #20
 800c578:	4611      	mov	r1, r2
 800c57a:	4618      	mov	r0, r3
 800c57c:	f7f4 ff8a 	bl	8001494 <HAL_FLASHEx_Erase>

		for(i=0;i<blk_len*FLASH_PAGE_SIZE;i+=8)
 800c580:	2300      	movs	r3, #0
 800c582:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c584:	e011      	b.n	800c5aa <STORAGE_Write_FS+0x76>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
					FLASH_START_ADDR + blk_addr*FLASH_PAGE_SIZE + i,
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c58c:	3340      	adds	r3, #64	; 0x40
 800c58e:	02da      	lsls	r2, r3, #11
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 800c590:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c592:	18d1      	adds	r1, r2, r3
					*(uint64_t *)(&buf[i]));
 800c594:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c596:	68ba      	ldr	r2, [r7, #8]
 800c598:	4413      	add	r3, r2
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 800c59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c59e:	2000      	movs	r0, #0
 800c5a0:	f7f4 fe26 	bl	80011f0 <HAL_FLASH_Program>
		for(i=0;i<blk_len*FLASH_PAGE_SIZE;i+=8)
 800c5a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c5a6:	3308      	adds	r3, #8
 800c5a8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c5aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c5ac:	89bb      	ldrh	r3, [r7, #12]
 800c5ae:	02db      	lsls	r3, r3, #11
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d3e8      	bcc.n	800c586 <STORAGE_Write_FS+0x52>

		HAL_FLASH_Lock();
 800c5b4:	f7f4 feaa 	bl	800130c <HAL_FLASH_Lock>
		return USBD_OK;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	e000      	b.n	800c5be <STORAGE_Write_FS+0x8a>
	}
  return (USBD_FAIL);
 800c5bc:	2303      	movs	r3, #3
  /* USER CODE END 7 */
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3728      	adds	r7, #40	; 0x28
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}

0800c5c6 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800c5c6:	b480      	push	{r7}
 800c5c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800c5ca:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d4:	4770      	bx	lr
	...

0800c5d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b098      	sub	sp, #96	; 0x60
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c5e0:	f107 030c 	add.w	r3, r7, #12
 800c5e4:	2254      	movs	r2, #84	; 0x54
 800c5e6:	2100      	movs	r1, #0
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	f000 fbd5 	bl	800cd98 <memset>
  if(pcdHandle->Instance==USB)
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	4a1d      	ldr	r2, [pc, #116]	; (800c668 <HAL_PCD_MspInit+0x90>)
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	d132      	bne.n	800c65e <HAL_PCD_MspInit+0x86>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c5f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c5fc:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800c5fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c602:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800c604:	2301      	movs	r3, #1
 800c606:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800c608:	2301      	movs	r3, #1
 800c60a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800c60c:	2318      	movs	r3, #24
 800c60e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800c610:	2307      	movs	r3, #7
 800c612:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800c614:	2302      	movs	r3, #2
 800c616:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800c618:	2302      	movs	r3, #2
 800c61a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800c61c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c620:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c622:	f107 030c 	add.w	r3, r7, #12
 800c626:	4618      	mov	r0, r3
 800c628:	f7f7 fe5c 	bl	80042e4 <HAL_RCCEx_PeriphCLKConfig>
 800c62c:	4603      	mov	r3, r0
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d001      	beq.n	800c636 <HAL_PCD_MspInit+0x5e>
    {
      Error_Handler();
 800c632:	f7f4 fa03 	bl	8000a3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c636:	4b0d      	ldr	r3, [pc, #52]	; (800c66c <HAL_PCD_MspInit+0x94>)
 800c638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c63a:	4a0c      	ldr	r2, [pc, #48]	; (800c66c <HAL_PCD_MspInit+0x94>)
 800c63c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c640:	6593      	str	r3, [r2, #88]	; 0x58
 800c642:	4b0a      	ldr	r3, [pc, #40]	; (800c66c <HAL_PCD_MspInit+0x94>)
 800c644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c646:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c64a:	60bb      	str	r3, [r7, #8]
 800c64c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800c64e:	2200      	movs	r2, #0
 800c650:	2100      	movs	r1, #0
 800c652:	2043      	movs	r0, #67	; 0x43
 800c654:	f7f4 fd95 	bl	8001182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800c658:	2043      	movs	r0, #67	; 0x43
 800c65a:	f7f4 fdae 	bl	80011ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c65e:	bf00      	nop
 800c660:	3760      	adds	r7, #96	; 0x60
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}
 800c666:	bf00      	nop
 800c668:	40006800 	.word	0x40006800
 800c66c:	40021000 	.word	0x40021000

0800c670 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b082      	sub	sp, #8
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c684:	4619      	mov	r1, r3
 800c686:	4610      	mov	r0, r2
 800c688:	f7fe fb70 	bl	800ad6c <USBD_LL_SetupStage>
}
 800c68c:	bf00      	nop
 800c68e:	3708      	adds	r7, #8
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}

0800c694 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b082      	sub	sp, #8
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
 800c69c:	460b      	mov	r3, r1
 800c69e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800c6a6:	78fa      	ldrb	r2, [r7, #3]
 800c6a8:	6879      	ldr	r1, [r7, #4]
 800c6aa:	4613      	mov	r3, r2
 800c6ac:	009b      	lsls	r3, r3, #2
 800c6ae:	4413      	add	r3, r2
 800c6b0:	00db      	lsls	r3, r3, #3
 800c6b2:	440b      	add	r3, r1
 800c6b4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c6b8:	681a      	ldr	r2, [r3, #0]
 800c6ba:	78fb      	ldrb	r3, [r7, #3]
 800c6bc:	4619      	mov	r1, r3
 800c6be:	f7fe fbaa 	bl	800ae16 <USBD_LL_DataOutStage>
}
 800c6c2:	bf00      	nop
 800c6c4:	3708      	adds	r7, #8
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}

0800c6ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6ca:	b580      	push	{r7, lr}
 800c6cc:	b082      	sub	sp, #8
 800c6ce:	af00      	add	r7, sp, #0
 800c6d0:	6078      	str	r0, [r7, #4]
 800c6d2:	460b      	mov	r3, r1
 800c6d4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800c6dc:	78fa      	ldrb	r2, [r7, #3]
 800c6de:	6879      	ldr	r1, [r7, #4]
 800c6e0:	4613      	mov	r3, r2
 800c6e2:	009b      	lsls	r3, r3, #2
 800c6e4:	4413      	add	r3, r2
 800c6e6:	00db      	lsls	r3, r3, #3
 800c6e8:	440b      	add	r3, r1
 800c6ea:	333c      	adds	r3, #60	; 0x3c
 800c6ec:	681a      	ldr	r2, [r3, #0]
 800c6ee:	78fb      	ldrb	r3, [r7, #3]
 800c6f0:	4619      	mov	r1, r3
 800c6f2:	f7fe fc43 	bl	800af7c <USBD_LL_DataInStage>
}
 800c6f6:	bf00      	nop
 800c6f8:	3708      	adds	r7, #8
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}

0800c6fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6fe:	b580      	push	{r7, lr}
 800c700:	b082      	sub	sp, #8
 800c702:	af00      	add	r7, sp, #0
 800c704:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c70c:	4618      	mov	r0, r3
 800c70e:	f7fe fd7d 	bl	800b20c <USBD_LL_SOF>
}
 800c712:	bf00      	nop
 800c714:	3708      	adds	r7, #8
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}

0800c71a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c71a:	b580      	push	{r7, lr}
 800c71c:	b084      	sub	sp, #16
 800c71e:	af00      	add	r7, sp, #0
 800c720:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c722:	2301      	movs	r3, #1
 800c724:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	689b      	ldr	r3, [r3, #8]
 800c72a:	2b02      	cmp	r3, #2
 800c72c:	d001      	beq.n	800c732 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c72e:	f7f4 f985 	bl	8000a3c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c738:	7bfa      	ldrb	r2, [r7, #15]
 800c73a:	4611      	mov	r1, r2
 800c73c:	4618      	mov	r0, r3
 800c73e:	f7fe fd21 	bl	800b184 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c748:	4618      	mov	r0, r3
 800c74a:	f7fe fcc9 	bl	800b0e0 <USBD_LL_Reset>
}
 800c74e:	bf00      	nop
 800c750:	3710      	adds	r7, #16
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
	...

0800c758 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b082      	sub	sp, #8
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c766:	4618      	mov	r0, r3
 800c768:	f7fe fd1c 	bl	800b1a4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	699b      	ldr	r3, [r3, #24]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d005      	beq.n	800c780 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c774:	4b04      	ldr	r3, [pc, #16]	; (800c788 <HAL_PCD_SuspendCallback+0x30>)
 800c776:	691b      	ldr	r3, [r3, #16]
 800c778:	4a03      	ldr	r2, [pc, #12]	; (800c788 <HAL_PCD_SuspendCallback+0x30>)
 800c77a:	f043 0306 	orr.w	r3, r3, #6
 800c77e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c780:	bf00      	nop
 800c782:	3708      	adds	r7, #8
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}
 800c788:	e000ed00 	.word	0xe000ed00

0800c78c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b082      	sub	sp, #8
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	699b      	ldr	r3, [r3, #24]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d007      	beq.n	800c7ac <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c79c:	4b08      	ldr	r3, [pc, #32]	; (800c7c0 <HAL_PCD_ResumeCallback+0x34>)
 800c79e:	691b      	ldr	r3, [r3, #16]
 800c7a0:	4a07      	ldr	r2, [pc, #28]	; (800c7c0 <HAL_PCD_ResumeCallback+0x34>)
 800c7a2:	f023 0306 	bic.w	r3, r3, #6
 800c7a6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c7a8:	f000 faf0 	bl	800cd8c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f7fe fd12 	bl	800b1dc <USBD_LL_Resume>
}
 800c7b8:	bf00      	nop
 800c7ba:	3708      	adds	r7, #8
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}
 800c7c0:	e000ed00 	.word	0xe000ed00

0800c7c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b082      	sub	sp, #8
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800c7cc:	f7f6 ff42 	bl	8003654 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c7d0:	4a26      	ldr	r2, [pc, #152]	; (800c86c <USBD_LL_Init+0xa8>)
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	4a24      	ldr	r2, [pc, #144]	; (800c86c <USBD_LL_Init+0xa8>)
 800c7dc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 800c7e0:	4b22      	ldr	r3, [pc, #136]	; (800c86c <USBD_LL_Init+0xa8>)
 800c7e2:	4a23      	ldr	r2, [pc, #140]	; (800c870 <USBD_LL_Init+0xac>)
 800c7e4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c7e6:	4b21      	ldr	r3, [pc, #132]	; (800c86c <USBD_LL_Init+0xa8>)
 800c7e8:	2208      	movs	r2, #8
 800c7ea:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c7ec:	4b1f      	ldr	r3, [pc, #124]	; (800c86c <USBD_LL_Init+0xa8>)
 800c7ee:	2202      	movs	r2, #2
 800c7f0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c7f2:	4b1e      	ldr	r3, [pc, #120]	; (800c86c <USBD_LL_Init+0xa8>)
 800c7f4:	2202      	movs	r2, #2
 800c7f6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800c7f8:	4b1c      	ldr	r3, [pc, #112]	; (800c86c <USBD_LL_Init+0xa8>)
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c7fe:	4b1b      	ldr	r3, [pc, #108]	; (800c86c <USBD_LL_Init+0xa8>)
 800c800:	2200      	movs	r2, #0
 800c802:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c804:	4b19      	ldr	r3, [pc, #100]	; (800c86c <USBD_LL_Init+0xa8>)
 800c806:	2200      	movs	r2, #0
 800c808:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c80a:	4b18      	ldr	r3, [pc, #96]	; (800c86c <USBD_LL_Init+0xa8>)
 800c80c:	2200      	movs	r2, #0
 800c80e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c810:	4816      	ldr	r0, [pc, #88]	; (800c86c <USBD_LL_Init+0xa8>)
 800c812:	f7f5 f8e7 	bl	80019e4 <HAL_PCD_Init>
 800c816:	4603      	mov	r3, r0
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d001      	beq.n	800c820 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800c81c:	f7f4 f90e 	bl	8000a3c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c826:	2318      	movs	r3, #24
 800c828:	2200      	movs	r2, #0
 800c82a:	2100      	movs	r1, #0
 800c82c:	f7f6 fe31 	bl	8003492 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c836:	2358      	movs	r3, #88	; 0x58
 800c838:	2200      	movs	r2, #0
 800c83a:	2180      	movs	r1, #128	; 0x80
 800c83c:	f7f6 fe29 	bl	8003492 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c846:	2398      	movs	r3, #152	; 0x98
 800c848:	2200      	movs	r2, #0
 800c84a:	2181      	movs	r1, #129	; 0x81
 800c84c:	f7f6 fe21 	bl	8003492 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c856:	23d8      	movs	r3, #216	; 0xd8
 800c858:	2200      	movs	r2, #0
 800c85a:	2101      	movs	r1, #1
 800c85c:	f7f6 fe19 	bl	8003492 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800c860:	2300      	movs	r3, #0
}
 800c862:	4618      	mov	r0, r3
 800c864:	3708      	adds	r7, #8
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
 800c86a:	bf00      	nop
 800c86c:	20000b7c 	.word	0x20000b7c
 800c870:	40006800 	.word	0x40006800

0800c874 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b084      	sub	sp, #16
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c87c:	2300      	movs	r3, #0
 800c87e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c880:	2300      	movs	r3, #0
 800c882:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c88a:	4618      	mov	r0, r3
 800c88c:	f7f5 f9b0 	bl	8001bf0 <HAL_PCD_Start>
 800c890:	4603      	mov	r3, r0
 800c892:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c894:	7bbb      	ldrb	r3, [r7, #14]
 800c896:	2b03      	cmp	r3, #3
 800c898:	d816      	bhi.n	800c8c8 <USBD_LL_Start+0x54>
 800c89a:	a201      	add	r2, pc, #4	; (adr r2, 800c8a0 <USBD_LL_Start+0x2c>)
 800c89c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8a0:	0800c8b1 	.word	0x0800c8b1
 800c8a4:	0800c8b7 	.word	0x0800c8b7
 800c8a8:	0800c8bd 	.word	0x0800c8bd
 800c8ac:	0800c8c3 	.word	0x0800c8c3
    case HAL_OK :
      usb_status = USBD_OK;
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	73fb      	strb	r3, [r7, #15]
    break;
 800c8b4:	e00b      	b.n	800c8ce <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c8b6:	2303      	movs	r3, #3
 800c8b8:	73fb      	strb	r3, [r7, #15]
    break;
 800c8ba:	e008      	b.n	800c8ce <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c8bc:	2301      	movs	r3, #1
 800c8be:	73fb      	strb	r3, [r7, #15]
    break;
 800c8c0:	e005      	b.n	800c8ce <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c8c2:	2303      	movs	r3, #3
 800c8c4:	73fb      	strb	r3, [r7, #15]
    break;
 800c8c6:	e002      	b.n	800c8ce <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800c8c8:	2303      	movs	r3, #3
 800c8ca:	73fb      	strb	r3, [r7, #15]
    break;
 800c8cc:	bf00      	nop
  }
  return usb_status;
 800c8ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	3710      	adds	r7, #16
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}

0800c8d8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b084      	sub	sp, #16
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
 800c8e0:	4608      	mov	r0, r1
 800c8e2:	4611      	mov	r1, r2
 800c8e4:	461a      	mov	r2, r3
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	70fb      	strb	r3, [r7, #3]
 800c8ea:	460b      	mov	r3, r1
 800c8ec:	70bb      	strb	r3, [r7, #2]
 800c8ee:	4613      	mov	r3, r2
 800c8f0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c900:	78bb      	ldrb	r3, [r7, #2]
 800c902:	883a      	ldrh	r2, [r7, #0]
 800c904:	78f9      	ldrb	r1, [r7, #3]
 800c906:	f7f5 fae1 	bl	8001ecc <HAL_PCD_EP_Open>
 800c90a:	4603      	mov	r3, r0
 800c90c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c90e:	7bbb      	ldrb	r3, [r7, #14]
 800c910:	2b03      	cmp	r3, #3
 800c912:	d817      	bhi.n	800c944 <USBD_LL_OpenEP+0x6c>
 800c914:	a201      	add	r2, pc, #4	; (adr r2, 800c91c <USBD_LL_OpenEP+0x44>)
 800c916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c91a:	bf00      	nop
 800c91c:	0800c92d 	.word	0x0800c92d
 800c920:	0800c933 	.word	0x0800c933
 800c924:	0800c939 	.word	0x0800c939
 800c928:	0800c93f 	.word	0x0800c93f
    case HAL_OK :
      usb_status = USBD_OK;
 800c92c:	2300      	movs	r3, #0
 800c92e:	73fb      	strb	r3, [r7, #15]
    break;
 800c930:	e00b      	b.n	800c94a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c932:	2303      	movs	r3, #3
 800c934:	73fb      	strb	r3, [r7, #15]
    break;
 800c936:	e008      	b.n	800c94a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c938:	2301      	movs	r3, #1
 800c93a:	73fb      	strb	r3, [r7, #15]
    break;
 800c93c:	e005      	b.n	800c94a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c93e:	2303      	movs	r3, #3
 800c940:	73fb      	strb	r3, [r7, #15]
    break;
 800c942:	e002      	b.n	800c94a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800c944:	2303      	movs	r3, #3
 800c946:	73fb      	strb	r3, [r7, #15]
    break;
 800c948:	bf00      	nop
  }
  return usb_status;
 800c94a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3710      	adds	r7, #16
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}

0800c954 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b084      	sub	sp, #16
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
 800c95c:	460b      	mov	r3, r1
 800c95e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c960:	2300      	movs	r3, #0
 800c962:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c964:	2300      	movs	r3, #0
 800c966:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c96e:	78fa      	ldrb	r2, [r7, #3]
 800c970:	4611      	mov	r1, r2
 800c972:	4618      	mov	r0, r3
 800c974:	f7f5 fb07 	bl	8001f86 <HAL_PCD_EP_Close>
 800c978:	4603      	mov	r3, r0
 800c97a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c97c:	7bbb      	ldrb	r3, [r7, #14]
 800c97e:	2b03      	cmp	r3, #3
 800c980:	d816      	bhi.n	800c9b0 <USBD_LL_CloseEP+0x5c>
 800c982:	a201      	add	r2, pc, #4	; (adr r2, 800c988 <USBD_LL_CloseEP+0x34>)
 800c984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c988:	0800c999 	.word	0x0800c999
 800c98c:	0800c99f 	.word	0x0800c99f
 800c990:	0800c9a5 	.word	0x0800c9a5
 800c994:	0800c9ab 	.word	0x0800c9ab
    case HAL_OK :
      usb_status = USBD_OK;
 800c998:	2300      	movs	r3, #0
 800c99a:	73fb      	strb	r3, [r7, #15]
    break;
 800c99c:	e00b      	b.n	800c9b6 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c99e:	2303      	movs	r3, #3
 800c9a0:	73fb      	strb	r3, [r7, #15]
    break;
 800c9a2:	e008      	b.n	800c9b6 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	73fb      	strb	r3, [r7, #15]
    break;
 800c9a8:	e005      	b.n	800c9b6 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c9aa:	2303      	movs	r3, #3
 800c9ac:	73fb      	strb	r3, [r7, #15]
    break;
 800c9ae:	e002      	b.n	800c9b6 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c9b0:	2303      	movs	r3, #3
 800c9b2:	73fb      	strb	r3, [r7, #15]
    break;
 800c9b4:	bf00      	nop
  }
  return usb_status;
 800c9b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3710      	adds	r7, #16
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}

0800c9c0 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b084      	sub	sp, #16
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
 800c9c8:	460b      	mov	r3, r1
 800c9ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c9da:	78fa      	ldrb	r2, [r7, #3]
 800c9dc:	4611      	mov	r1, r2
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f7f5 fc66 	bl	80022b0 <HAL_PCD_EP_Flush>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c9e8:	7bbb      	ldrb	r3, [r7, #14]
 800c9ea:	2b03      	cmp	r3, #3
 800c9ec:	d816      	bhi.n	800ca1c <USBD_LL_FlushEP+0x5c>
 800c9ee:	a201      	add	r2, pc, #4	; (adr r2, 800c9f4 <USBD_LL_FlushEP+0x34>)
 800c9f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9f4:	0800ca05 	.word	0x0800ca05
 800c9f8:	0800ca0b 	.word	0x0800ca0b
 800c9fc:	0800ca11 	.word	0x0800ca11
 800ca00:	0800ca17 	.word	0x0800ca17
    case HAL_OK :
      usb_status = USBD_OK;
 800ca04:	2300      	movs	r3, #0
 800ca06:	73fb      	strb	r3, [r7, #15]
    break;
 800ca08:	e00b      	b.n	800ca22 <USBD_LL_FlushEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ca0a:	2303      	movs	r3, #3
 800ca0c:	73fb      	strb	r3, [r7, #15]
    break;
 800ca0e:	e008      	b.n	800ca22 <USBD_LL_FlushEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ca10:	2301      	movs	r3, #1
 800ca12:	73fb      	strb	r3, [r7, #15]
    break;
 800ca14:	e005      	b.n	800ca22 <USBD_LL_FlushEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ca16:	2303      	movs	r3, #3
 800ca18:	73fb      	strb	r3, [r7, #15]
    break;
 800ca1a:	e002      	b.n	800ca22 <USBD_LL_FlushEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ca1c:	2303      	movs	r3, #3
 800ca1e:	73fb      	strb	r3, [r7, #15]
    break;
 800ca20:	bf00      	nop
  }
  return usb_status;
 800ca22:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3710      	adds	r7, #16
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}

0800ca2c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b084      	sub	sp, #16
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
 800ca34:	460b      	mov	r3, r1
 800ca36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca38:	2300      	movs	r3, #0
 800ca3a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ca46:	78fa      	ldrb	r2, [r7, #3]
 800ca48:	4611      	mov	r1, r2
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f7f5 fb7c 	bl	8002148 <HAL_PCD_EP_SetStall>
 800ca50:	4603      	mov	r3, r0
 800ca52:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ca54:	7bbb      	ldrb	r3, [r7, #14]
 800ca56:	2b03      	cmp	r3, #3
 800ca58:	d816      	bhi.n	800ca88 <USBD_LL_StallEP+0x5c>
 800ca5a:	a201      	add	r2, pc, #4	; (adr r2, 800ca60 <USBD_LL_StallEP+0x34>)
 800ca5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca60:	0800ca71 	.word	0x0800ca71
 800ca64:	0800ca77 	.word	0x0800ca77
 800ca68:	0800ca7d 	.word	0x0800ca7d
 800ca6c:	0800ca83 	.word	0x0800ca83
    case HAL_OK :
      usb_status = USBD_OK;
 800ca70:	2300      	movs	r3, #0
 800ca72:	73fb      	strb	r3, [r7, #15]
    break;
 800ca74:	e00b      	b.n	800ca8e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ca76:	2303      	movs	r3, #3
 800ca78:	73fb      	strb	r3, [r7, #15]
    break;
 800ca7a:	e008      	b.n	800ca8e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ca7c:	2301      	movs	r3, #1
 800ca7e:	73fb      	strb	r3, [r7, #15]
    break;
 800ca80:	e005      	b.n	800ca8e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ca82:	2303      	movs	r3, #3
 800ca84:	73fb      	strb	r3, [r7, #15]
    break;
 800ca86:	e002      	b.n	800ca8e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ca88:	2303      	movs	r3, #3
 800ca8a:	73fb      	strb	r3, [r7, #15]
    break;
 800ca8c:	bf00      	nop
  }
  return usb_status;
 800ca8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca90:	4618      	mov	r0, r3
 800ca92:	3710      	adds	r7, #16
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd80      	pop	{r7, pc}

0800ca98 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b084      	sub	sp, #16
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
 800caa0:	460b      	mov	r3, r1
 800caa2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800caa4:	2300      	movs	r3, #0
 800caa6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800caa8:	2300      	movs	r3, #0
 800caaa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cab2:	78fa      	ldrb	r2, [r7, #3]
 800cab4:	4611      	mov	r1, r2
 800cab6:	4618      	mov	r0, r3
 800cab8:	f7f5 fba6 	bl	8002208 <HAL_PCD_EP_ClrStall>
 800cabc:	4603      	mov	r3, r0
 800cabe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cac0:	7bbb      	ldrb	r3, [r7, #14]
 800cac2:	2b03      	cmp	r3, #3
 800cac4:	d816      	bhi.n	800caf4 <USBD_LL_ClearStallEP+0x5c>
 800cac6:	a201      	add	r2, pc, #4	; (adr r2, 800cacc <USBD_LL_ClearStallEP+0x34>)
 800cac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cacc:	0800cadd 	.word	0x0800cadd
 800cad0:	0800cae3 	.word	0x0800cae3
 800cad4:	0800cae9 	.word	0x0800cae9
 800cad8:	0800caef 	.word	0x0800caef
    case HAL_OK :
      usb_status = USBD_OK;
 800cadc:	2300      	movs	r3, #0
 800cade:	73fb      	strb	r3, [r7, #15]
    break;
 800cae0:	e00b      	b.n	800cafa <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cae2:	2303      	movs	r3, #3
 800cae4:	73fb      	strb	r3, [r7, #15]
    break;
 800cae6:	e008      	b.n	800cafa <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cae8:	2301      	movs	r3, #1
 800caea:	73fb      	strb	r3, [r7, #15]
    break;
 800caec:	e005      	b.n	800cafa <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800caee:	2303      	movs	r3, #3
 800caf0:	73fb      	strb	r3, [r7, #15]
    break;
 800caf2:	e002      	b.n	800cafa <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800caf4:	2303      	movs	r3, #3
 800caf6:	73fb      	strb	r3, [r7, #15]
    break;
 800caf8:	bf00      	nop
  }
  return usb_status;
 800cafa:	7bfb      	ldrb	r3, [r7, #15]
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3710      	adds	r7, #16
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb04:	b480      	push	{r7}
 800cb06:	b085      	sub	sp, #20
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	460b      	mov	r3, r1
 800cb0e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cb16:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cb18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	da0c      	bge.n	800cb3a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cb20:	78fb      	ldrb	r3, [r7, #3]
 800cb22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb26:	68f9      	ldr	r1, [r7, #12]
 800cb28:	1c5a      	adds	r2, r3, #1
 800cb2a:	4613      	mov	r3, r2
 800cb2c:	009b      	lsls	r3, r3, #2
 800cb2e:	4413      	add	r3, r2
 800cb30:	00db      	lsls	r3, r3, #3
 800cb32:	440b      	add	r3, r1
 800cb34:	3302      	adds	r3, #2
 800cb36:	781b      	ldrb	r3, [r3, #0]
 800cb38:	e00b      	b.n	800cb52 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cb3a:	78fb      	ldrb	r3, [r7, #3]
 800cb3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cb40:	68f9      	ldr	r1, [r7, #12]
 800cb42:	4613      	mov	r3, r2
 800cb44:	009b      	lsls	r3, r3, #2
 800cb46:	4413      	add	r3, r2
 800cb48:	00db      	lsls	r3, r3, #3
 800cb4a:	440b      	add	r3, r1
 800cb4c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800cb50:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3714      	adds	r7, #20
 800cb56:	46bd      	mov	sp, r7
 800cb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5c:	4770      	bx	lr
	...

0800cb60 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b084      	sub	sp, #16
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
 800cb68:	460b      	mov	r3, r1
 800cb6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb70:	2300      	movs	r3, #0
 800cb72:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cb7a:	78fa      	ldrb	r2, [r7, #3]
 800cb7c:	4611      	mov	r1, r2
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f7f5 f97f 	bl	8001e82 <HAL_PCD_SetAddress>
 800cb84:	4603      	mov	r3, r0
 800cb86:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cb88:	7bbb      	ldrb	r3, [r7, #14]
 800cb8a:	2b03      	cmp	r3, #3
 800cb8c:	d816      	bhi.n	800cbbc <USBD_LL_SetUSBAddress+0x5c>
 800cb8e:	a201      	add	r2, pc, #4	; (adr r2, 800cb94 <USBD_LL_SetUSBAddress+0x34>)
 800cb90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb94:	0800cba5 	.word	0x0800cba5
 800cb98:	0800cbab 	.word	0x0800cbab
 800cb9c:	0800cbb1 	.word	0x0800cbb1
 800cba0:	0800cbb7 	.word	0x0800cbb7
    case HAL_OK :
      usb_status = USBD_OK;
 800cba4:	2300      	movs	r3, #0
 800cba6:	73fb      	strb	r3, [r7, #15]
    break;
 800cba8:	e00b      	b.n	800cbc2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cbaa:	2303      	movs	r3, #3
 800cbac:	73fb      	strb	r3, [r7, #15]
    break;
 800cbae:	e008      	b.n	800cbc2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	73fb      	strb	r3, [r7, #15]
    break;
 800cbb4:	e005      	b.n	800cbc2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cbb6:	2303      	movs	r3, #3
 800cbb8:	73fb      	strb	r3, [r7, #15]
    break;
 800cbba:	e002      	b.n	800cbc2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800cbbc:	2303      	movs	r3, #3
 800cbbe:	73fb      	strb	r3, [r7, #15]
    break;
 800cbc0:	bf00      	nop
  }
  return usb_status;
 800cbc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	3710      	adds	r7, #16
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}

0800cbcc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b086      	sub	sp, #24
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	60f8      	str	r0, [r7, #12]
 800cbd4:	607a      	str	r2, [r7, #4]
 800cbd6:	603b      	str	r3, [r7, #0]
 800cbd8:	460b      	mov	r3, r1
 800cbda:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cbea:	7af9      	ldrb	r1, [r7, #11]
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	687a      	ldr	r2, [r7, #4]
 800cbf0:	f7f5 fa5a 	bl	80020a8 <HAL_PCD_EP_Transmit>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800cbf8:	7dbb      	ldrb	r3, [r7, #22]
 800cbfa:	2b03      	cmp	r3, #3
 800cbfc:	d816      	bhi.n	800cc2c <USBD_LL_Transmit+0x60>
 800cbfe:	a201      	add	r2, pc, #4	; (adr r2, 800cc04 <USBD_LL_Transmit+0x38>)
 800cc00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc04:	0800cc15 	.word	0x0800cc15
 800cc08:	0800cc1b 	.word	0x0800cc1b
 800cc0c:	0800cc21 	.word	0x0800cc21
 800cc10:	0800cc27 	.word	0x0800cc27
    case HAL_OK :
      usb_status = USBD_OK;
 800cc14:	2300      	movs	r3, #0
 800cc16:	75fb      	strb	r3, [r7, #23]
    break;
 800cc18:	e00b      	b.n	800cc32 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cc1a:	2303      	movs	r3, #3
 800cc1c:	75fb      	strb	r3, [r7, #23]
    break;
 800cc1e:	e008      	b.n	800cc32 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cc20:	2301      	movs	r3, #1
 800cc22:	75fb      	strb	r3, [r7, #23]
    break;
 800cc24:	e005      	b.n	800cc32 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cc26:	2303      	movs	r3, #3
 800cc28:	75fb      	strb	r3, [r7, #23]
    break;
 800cc2a:	e002      	b.n	800cc32 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800cc2c:	2303      	movs	r3, #3
 800cc2e:	75fb      	strb	r3, [r7, #23]
    break;
 800cc30:	bf00      	nop
  }
  return usb_status;
 800cc32:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	3718      	adds	r7, #24
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bd80      	pop	{r7, pc}

0800cc3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b086      	sub	sp, #24
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	60f8      	str	r0, [r7, #12]
 800cc44:	607a      	str	r2, [r7, #4]
 800cc46:	603b      	str	r3, [r7, #0]
 800cc48:	460b      	mov	r3, r1
 800cc4a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc50:	2300      	movs	r3, #0
 800cc52:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cc5a:	7af9      	ldrb	r1, [r7, #11]
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	687a      	ldr	r2, [r7, #4]
 800cc60:	f7f5 f9d9 	bl	8002016 <HAL_PCD_EP_Receive>
 800cc64:	4603      	mov	r3, r0
 800cc66:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800cc68:	7dbb      	ldrb	r3, [r7, #22]
 800cc6a:	2b03      	cmp	r3, #3
 800cc6c:	d816      	bhi.n	800cc9c <USBD_LL_PrepareReceive+0x60>
 800cc6e:	a201      	add	r2, pc, #4	; (adr r2, 800cc74 <USBD_LL_PrepareReceive+0x38>)
 800cc70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc74:	0800cc85 	.word	0x0800cc85
 800cc78:	0800cc8b 	.word	0x0800cc8b
 800cc7c:	0800cc91 	.word	0x0800cc91
 800cc80:	0800cc97 	.word	0x0800cc97
    case HAL_OK :
      usb_status = USBD_OK;
 800cc84:	2300      	movs	r3, #0
 800cc86:	75fb      	strb	r3, [r7, #23]
    break;
 800cc88:	e00b      	b.n	800cca2 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cc8a:	2303      	movs	r3, #3
 800cc8c:	75fb      	strb	r3, [r7, #23]
    break;
 800cc8e:	e008      	b.n	800cca2 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cc90:	2301      	movs	r3, #1
 800cc92:	75fb      	strb	r3, [r7, #23]
    break;
 800cc94:	e005      	b.n	800cca2 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cc96:	2303      	movs	r3, #3
 800cc98:	75fb      	strb	r3, [r7, #23]
    break;
 800cc9a:	e002      	b.n	800cca2 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800cc9c:	2303      	movs	r3, #3
 800cc9e:	75fb      	strb	r3, [r7, #23]
    break;
 800cca0:	bf00      	nop
  }
  return usb_status;
 800cca2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cca4:	4618      	mov	r0, r3
 800cca6:	3718      	adds	r7, #24
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}

0800ccac <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b082      	sub	sp, #8
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
 800ccb4:	460b      	mov	r3, r1
 800ccb6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ccbe:	78fa      	ldrb	r2, [r7, #3]
 800ccc0:	4611      	mov	r1, r2
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f7f5 f9d8 	bl	8002078 <HAL_PCD_EP_GetRxCount>
 800ccc8:	4603      	mov	r3, r0
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3708      	adds	r7, #8
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}
	...

0800ccd4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b082      	sub	sp, #8
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
 800ccdc:	460b      	mov	r3, r1
 800ccde:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800cce0:	78fb      	ldrb	r3, [r7, #3]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d002      	beq.n	800ccec <HAL_PCDEx_LPM_Callback+0x18>
 800cce6:	2b01      	cmp	r3, #1
 800cce8:	d013      	beq.n	800cd12 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800ccea:	e023      	b.n	800cd34 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	699b      	ldr	r3, [r3, #24]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d007      	beq.n	800cd04 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ccf4:	f000 f84a 	bl	800cd8c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ccf8:	4b10      	ldr	r3, [pc, #64]	; (800cd3c <HAL_PCDEx_LPM_Callback+0x68>)
 800ccfa:	691b      	ldr	r3, [r3, #16]
 800ccfc:	4a0f      	ldr	r2, [pc, #60]	; (800cd3c <HAL_PCDEx_LPM_Callback+0x68>)
 800ccfe:	f023 0306 	bic.w	r3, r3, #6
 800cd02:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f7fe fa66 	bl	800b1dc <USBD_LL_Resume>
    break;
 800cd10:	e010      	b.n	800cd34 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f7fe fa43 	bl	800b1a4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	699b      	ldr	r3, [r3, #24]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d005      	beq.n	800cd32 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cd26:	4b05      	ldr	r3, [pc, #20]	; (800cd3c <HAL_PCDEx_LPM_Callback+0x68>)
 800cd28:	691b      	ldr	r3, [r3, #16]
 800cd2a:	4a04      	ldr	r2, [pc, #16]	; (800cd3c <HAL_PCDEx_LPM_Callback+0x68>)
 800cd2c:	f043 0306 	orr.w	r3, r3, #6
 800cd30:	6113      	str	r3, [r2, #16]
    break;
 800cd32:	bf00      	nop
}
 800cd34:	bf00      	nop
 800cd36:	3708      	adds	r7, #8
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}
 800cd3c:	e000ed00 	.word	0xe000ed00

0800cd40 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cd40:	b480      	push	{r7}
 800cd42:	b083      	sub	sp, #12
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800cd48:	4b03      	ldr	r3, [pc, #12]	; (800cd58 <USBD_static_malloc+0x18>)
}
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	370c      	adds	r7, #12
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd54:	4770      	bx	lr
 800cd56:	bf00      	nop
 800cd58:	20000e74 	.word	0x20000e74

0800cd5c <USBD_static_malloc_MSC>:

void *USBD_static_malloc_MSC(uint32_t size)
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	b083      	sub	sp, #12
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800cd64:	4b03      	ldr	r3, [pc, #12]	; (800cd74 <USBD_static_malloc_MSC+0x18>)
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	370c      	adds	r7, #12
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd70:	4770      	bx	lr
 800cd72:	bf00      	nop
 800cd74:	20000e9c 	.word	0x20000e9c

0800cd78 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cd78:	b480      	push	{r7}
 800cd7a:	b083      	sub	sp, #12
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]

}
 800cd80:	bf00      	nop
 800cd82:	370c      	adds	r7, #12
 800cd84:	46bd      	mov	sp, r7
 800cd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8a:	4770      	bx	lr

0800cd8c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800cd90:	f7f3 fc56 	bl	8000640 <SystemClock_Config>
}
 800cd94:	bf00      	nop
 800cd96:	bd80      	pop	{r7, pc}

0800cd98 <memset>:
 800cd98:	4402      	add	r2, r0
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	4293      	cmp	r3, r2
 800cd9e:	d100      	bne.n	800cda2 <memset+0xa>
 800cda0:	4770      	bx	lr
 800cda2:	f803 1b01 	strb.w	r1, [r3], #1
 800cda6:	e7f9      	b.n	800cd9c <memset+0x4>

0800cda8 <__libc_init_array>:
 800cda8:	b570      	push	{r4, r5, r6, lr}
 800cdaa:	4d0d      	ldr	r5, [pc, #52]	; (800cde0 <__libc_init_array+0x38>)
 800cdac:	4c0d      	ldr	r4, [pc, #52]	; (800cde4 <__libc_init_array+0x3c>)
 800cdae:	1b64      	subs	r4, r4, r5
 800cdb0:	10a4      	asrs	r4, r4, #2
 800cdb2:	2600      	movs	r6, #0
 800cdb4:	42a6      	cmp	r6, r4
 800cdb6:	d109      	bne.n	800cdcc <__libc_init_array+0x24>
 800cdb8:	4d0b      	ldr	r5, [pc, #44]	; (800cde8 <__libc_init_array+0x40>)
 800cdba:	4c0c      	ldr	r4, [pc, #48]	; (800cdec <__libc_init_array+0x44>)
 800cdbc:	f000 f826 	bl	800ce0c <_init>
 800cdc0:	1b64      	subs	r4, r4, r5
 800cdc2:	10a4      	asrs	r4, r4, #2
 800cdc4:	2600      	movs	r6, #0
 800cdc6:	42a6      	cmp	r6, r4
 800cdc8:	d105      	bne.n	800cdd6 <__libc_init_array+0x2e>
 800cdca:	bd70      	pop	{r4, r5, r6, pc}
 800cdcc:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdd0:	4798      	blx	r3
 800cdd2:	3601      	adds	r6, #1
 800cdd4:	e7ee      	b.n	800cdb4 <__libc_init_array+0xc>
 800cdd6:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdda:	4798      	blx	r3
 800cddc:	3601      	adds	r6, #1
 800cdde:	e7f2      	b.n	800cdc6 <__libc_init_array+0x1e>
 800cde0:	0800cfa0 	.word	0x0800cfa0
 800cde4:	0800cfa0 	.word	0x0800cfa0
 800cde8:	0800cfa0 	.word	0x0800cfa0
 800cdec:	0800cfa4 	.word	0x0800cfa4

0800cdf0 <memcpy>:
 800cdf0:	440a      	add	r2, r1
 800cdf2:	4291      	cmp	r1, r2
 800cdf4:	f100 33ff 	add.w	r3, r0, #4294967295
 800cdf8:	d100      	bne.n	800cdfc <memcpy+0xc>
 800cdfa:	4770      	bx	lr
 800cdfc:	b510      	push	{r4, lr}
 800cdfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce06:	4291      	cmp	r1, r2
 800ce08:	d1f9      	bne.n	800cdfe <memcpy+0xe>
 800ce0a:	bd10      	pop	{r4, pc}

0800ce0c <_init>:
 800ce0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce0e:	bf00      	nop
 800ce10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce12:	bc08      	pop	{r3}
 800ce14:	469e      	mov	lr, r3
 800ce16:	4770      	bx	lr

0800ce18 <_fini>:
 800ce18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce1a:	bf00      	nop
 800ce1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce1e:	bc08      	pop	{r3}
 800ce20:	469e      	mov	lr, r3
 800ce22:	4770      	bx	lr
