
KeyBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038d4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08003994  08003994  00013994  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a6c  08003a6c  00020210  2**0
                  CONTENTS
  4 .ARM          00000000  08003a6c  08003a6c  00020210  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a6c  08003a6c  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a6c  08003a6c  00013a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a70  08003a70  00013a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08003a74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000089c  20000210  08003c84  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000aac  08003c84  00020aac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 13 .debug_info   000138a6  00000000  00000000  0002027b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000395e  00000000  00000000  00033b21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b08  00000000  00000000  00037480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000da4  00000000  00000000  00037f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001adf7  00000000  00000000  00038d2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016808  00000000  00000000  00053b23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008de05  00000000  00000000  0006a32b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001cec  00000000  00000000  000f8130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 000066cb  00000000  00000000  000f9e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  001004e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000210 	.word	0x20000210
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800397c 	.word	0x0800397c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000214 	.word	0x20000214
 8000104:	0800397c 	.word	0x0800397c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_uhi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5a09      	ldrh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f806 	bl	8000254 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__aeabi_idiv0>:
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000258:	b530      	push	{r4, r5, lr}
 800025a:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800025c:	2214      	movs	r2, #20
 800025e:	2100      	movs	r1, #0
 8000260:	a803      	add	r0, sp, #12
 8000262:	f003 fb56 	bl	8003912 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000266:	2180      	movs	r1, #128	; 0x80
 8000268:	4b20      	ldr	r3, [pc, #128]	; (80002ec <MX_GPIO_Init+0x94>)
 800026a:	03c9      	lsls	r1, r1, #15
 800026c:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_SET);
 800026e:	4d20      	ldr	r5, [pc, #128]	; (80002f0 <MX_GPIO_Init+0x98>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000270:	430a      	orrs	r2, r1
 8000272:	615a      	str	r2, [r3, #20]
 8000274:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_SET);
 8000276:	0028      	movs	r0, r5
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000278:	400a      	ands	r2, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800027a:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800027c:	9200      	str	r2, [sp, #0]
 800027e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000280:	695a      	ldr	r2, [r3, #20]
 8000282:	0289      	lsls	r1, r1, #10
 8000284:	430a      	orrs	r2, r1
 8000286:	615a      	str	r2, [r3, #20]
 8000288:	695a      	ldr	r2, [r3, #20]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Key_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800028a:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800028c:	400a      	ands	r2, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800028e:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000290:	9201      	str	r2, [sp, #4]
 8000292:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000294:	695a      	ldr	r2, [r3, #20]
 8000296:	02c9      	lsls	r1, r1, #11
 8000298:	430a      	orrs	r2, r1
 800029a:	615a      	str	r2, [r3, #20]
 800029c:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_SET);
 800029e:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002a0:	400b      	ands	r3, r1
 80002a2:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_SET);
 80002a4:	2108      	movs	r1, #8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002a6:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_SET);
 80002a8:	f000 fb44 	bl	8000934 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Key_Pin;
 80002ac:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(Key_GPIO_Port, &GPIO_InitStruct);
 80002ae:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = Key_Pin;
 80002b0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002b2:	2388      	movs	r3, #136	; 0x88
  HAL_GPIO_Init(Key_GPIO_Port, &GPIO_InitStruct);
 80002b4:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002b6:	035b      	lsls	r3, r3, #13
  HAL_GPIO_Init(Key_GPIO_Port, &GPIO_InitStruct);
 80002b8:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002ba:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002bc:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(Key_GPIO_Port, &GPIO_InitStruct);
 80002be:	f000 fa81 	bl	80007c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Green_Pin;
 80002c2:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_Green_GPIO_Port, &GPIO_InitStruct);
 80002c4:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = LED_Green_Pin;
 80002c6:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(LED_Green_GPIO_Port, &GPIO_InitStruct);
 80002c8:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ca:	3b07      	subs	r3, #7
 80002cc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002ce:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002d0:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LED_Green_GPIO_Port, &GPIO_InitStruct);
 80002d2:	f000 fa77 	bl	80007c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80002d6:	0022      	movs	r2, r4
 80002d8:	0021      	movs	r1, r4
 80002da:	2007      	movs	r0, #7
 80002dc:	f000 fa22 	bl	8000724 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80002e0:	2007      	movs	r0, #7
 80002e2:	f000 fa49 	bl	8000778 <HAL_NVIC_EnableIRQ>

}
 80002e6:	b009      	add	sp, #36	; 0x24
 80002e8:	bd30      	pop	{r4, r5, pc}
 80002ea:	46c0      	nop			; (mov r8, r8)
 80002ec:	40021000 	.word	0x40021000
 80002f0:	48000400 	.word	0x48000400

080002f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f4:	b510      	push	{r4, lr}
 80002f6:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f8:	2230      	movs	r2, #48	; 0x30
 80002fa:	2100      	movs	r1, #0
 80002fc:	a80c      	add	r0, sp, #48	; 0x30
 80002fe:	f003 fb08 	bl	8003912 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000302:	2210      	movs	r2, #16
 8000304:	2100      	movs	r1, #0
 8000306:	a801      	add	r0, sp, #4
 8000308:	f003 fb03 	bl	8003912 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800030c:	2218      	movs	r2, #24
 800030e:	2100      	movs	r1, #0
 8000310:	a805      	add	r0, sp, #20
 8000312:	f003 fafe 	bl	8003912 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000316:	2401      	movs	r4, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000318:	2320      	movs	r3, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031a:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800031c:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800031e:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000320:	f001 f99a 	bl	8001658 <HAL_RCC_OscConfig>
 8000324:	2800      	cmp	r0, #0
 8000326:	d001      	beq.n	800032c <SystemClock_Config+0x38>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000328:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800032a:	e7fe      	b.n	800032a <SystemClock_Config+0x36>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032c:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032e:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000330:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000332:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000334:	3b04      	subs	r3, #4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000336:	0021      	movs	r1, r4
 8000338:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800033a:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800033c:	f001 fc12 	bl	8001b64 <HAL_RCC_ClockConfig>
 8000340:	2800      	cmp	r0, #0
 8000342:	d001      	beq.n	8000348 <SystemClock_Config+0x54>
 8000344:	b672      	cpsid	i
  while (1)
 8000346:	e7fe      	b.n	8000346 <SystemClock_Config+0x52>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000348:	2380      	movs	r3, #128	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800034a:	900a      	str	r0, [sp, #40]	; 0x28
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800034c:	029b      	lsls	r3, r3, #10
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800034e:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000350:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000352:	f001 fca1 	bl	8001c98 <HAL_RCCEx_PeriphCLKConfig>
 8000356:	2800      	cmp	r0, #0
 8000358:	d001      	beq.n	800035e <SystemClock_Config+0x6a>
 800035a:	b672      	cpsid	i
  while (1)
 800035c:	e7fe      	b.n	800035c <SystemClock_Config+0x68>
}
 800035e:	b018      	add	sp, #96	; 0x60
 8000360:	bd10      	pop	{r4, pc}
	...

08000364 <Get_Descriptor>:
void Get_Descriptor(uint8_t ascii){
 8000364:	b570      	push	{r4, r5, r6, lr}
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8000366:	4c0b      	ldr	r4, [pc, #44]	; (8000394 <Get_Descriptor+0x30>)
void Get_Descriptor(uint8_t ascii){
 8000368:	0005      	movs	r5, r0
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800036a:	220f      	movs	r2, #15
 800036c:	2100      	movs	r1, #0
 800036e:	0020      	movs	r0, r4
 8000370:	f003 facf 	bl	8003912 <memset>
	sent_buffer[(uint8_t)(pos>>4)] |= (1<<((uint8_t)(pos&0x07)));
 8000374:	2107      	movs	r1, #7
 8000376:	2201      	movs	r2, #1
	uint8_t pos = map[ascii];
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <Get_Descriptor+0x34>)
 800037a:	5d5b      	ldrb	r3, [r3, r5]
	sent_buffer[(uint8_t)(pos>>4)] |= (1<<((uint8_t)(pos&0x07)));
 800037c:	4019      	ands	r1, r3
 800037e:	408a      	lsls	r2, r1
 8000380:	0918      	lsrs	r0, r3, #4
 8000382:	5422      	strb	r2, [r4, r0]
	if((pos&0x08) == 8)
 8000384:	071b      	lsls	r3, r3, #28
 8000386:	d503      	bpl.n	8000390 <Get_Descriptor+0x2c>
		sent_buffer[0] |= 0x02;
 8000388:	2302      	movs	r3, #2
 800038a:	7822      	ldrb	r2, [r4, #0]
 800038c:	4313      	orrs	r3, r2
 800038e:	7023      	strb	r3, [r4, #0]
}
 8000390:	bd70      	pop	{r4, r5, r6, pc}
 8000392:	46c0      	nop			; (mov r8, r8)
 8000394:	2000022d 	.word	0x2000022d
 8000398:	20000000 	.word	0x20000000

0800039c <SimulateKeyPress>:
void SimulateKeyPress(uint8_t ascii){
 800039c:	b510      	push	{r4, lr}
    Get_Descriptor(ascii);
 800039e:	f7ff ffe1 	bl	8000364 <Get_Descriptor>
    USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80003a2:	220f      	movs	r2, #15
 80003a4:	4902      	ldr	r1, [pc, #8]	; (80003b0 <SimulateKeyPress+0x14>)
 80003a6:	4803      	ldr	r0, [pc, #12]	; (80003b4 <SimulateKeyPress+0x18>)
 80003a8:	f002 fccc 	bl	8002d44 <USBD_CUSTOM_HID_SendReport>
}
 80003ac:	bd10      	pop	{r4, pc}
 80003ae:	46c0      	nop			; (mov r8, r8)
 80003b0:	2000022d 	.word	0x2000022d
 80003b4:	200002cc 	.word	0x200002cc

080003b8 <SimulateKeyRelease>:
void SimulateKeyRelease(){
 80003b8:	b570      	push	{r4, r5, r6, lr}
	memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80003ba:	250f      	movs	r5, #15
 80003bc:	4c05      	ldr	r4, [pc, #20]	; (80003d4 <SimulateKeyRelease+0x1c>)
 80003be:	002a      	movs	r2, r5
 80003c0:	2100      	movs	r1, #0
 80003c2:	0020      	movs	r0, r4
 80003c4:	f003 faa5 	bl	8003912 <memset>
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, sent_buffer, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80003c8:	002a      	movs	r2, r5
 80003ca:	0021      	movs	r1, r4
 80003cc:	4802      	ldr	r0, [pc, #8]	; (80003d8 <SimulateKeyRelease+0x20>)
 80003ce:	f002 fcb9 	bl	8002d44 <USBD_CUSTOM_HID_SendReport>
}
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	2000022d 	.word	0x2000022d
 80003d8:	200002cc 	.word	0x200002cc

080003dc <SimulateKeyStroke>:
void SimulateKeyStroke(uint8_t ascii){
 80003dc:	b510      	push	{r4, lr}
    SimulateKeyPress(ascii);
 80003de:	f7ff ffdd 	bl	800039c <SimulateKeyPress>
    HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 80003e2:	2032      	movs	r0, #50	; 0x32
 80003e4:	f000 f98c 	bl	8000700 <HAL_Delay>
    SimulateKeyRelease();
 80003e8:	f7ff ffe6 	bl	80003b8 <SimulateKeyRelease>
    HAL_Delay(StrokeSlot); //Wait StrokeSlot time
 80003ec:	2032      	movs	r0, #50	; 0x32
 80003ee:	f000 f987 	bl	8000700 <HAL_Delay>
}
 80003f2:	bd10      	pop	{r4, pc}

080003f4 <SimulateKeyStrokes>:
void SimulateKeyStrokes(char *str, int len){
 80003f4:	b570      	push	{r4, r5, r6, lr}
 80003f6:	0006      	movs	r6, r0
 80003f8:	000d      	movs	r5, r1
    for(int i = 0; i < len; i++){
 80003fa:	2400      	movs	r4, #0
 80003fc:	42ac      	cmp	r4, r5
 80003fe:	db00      	blt.n	8000402 <SimulateKeyStrokes+0xe>
}
 8000400:	bd70      	pop	{r4, r5, r6, pc}
    	SimulateKeyStroke(str[i]);
 8000402:	5d30      	ldrb	r0, [r6, r4]
 8000404:	f7ff ffea 	bl	80003dc <SimulateKeyStroke>
    for(int i = 0; i < len; i++){
 8000408:	3401      	adds	r4, #1
 800040a:	e7f7      	b.n	80003fc <SimulateKeyStrokes+0x8>

0800040c <PrintRecvBuf>:
void PrintRecvBuf(uint8_t Recv_Buf[USBD_CUSTOMHID_INREPORT_BUF_SIZE]){
 800040c:	b570      	push	{r4, r5, r6, lr}
 800040e:	0005      	movs	r5, r0
		for(int j = 0; j < 8; j++){
 8000410:	2400      	movs	r4, #0
			SimulateKeyStroke(((Recv_Buf[i]&(uint8_t)(0x01<<j))>>j)+'0');
 8000412:	2601      	movs	r6, #1
 8000414:	0030      	movs	r0, r6
 8000416:	40a0      	lsls	r0, r4
 8000418:	782b      	ldrb	r3, [r5, #0]
 800041a:	4018      	ands	r0, r3
 800041c:	4120      	asrs	r0, r4
 800041e:	3030      	adds	r0, #48	; 0x30
 8000420:	b2c0      	uxtb	r0, r0
		for(int j = 0; j < 8; j++){
 8000422:	3401      	adds	r4, #1
			SimulateKeyStroke(((Recv_Buf[i]&(uint8_t)(0x01<<j))>>j)+'0');
 8000424:	f7ff ffda 	bl	80003dc <SimulateKeyStroke>
		for(int j = 0; j < 8; j++){
 8000428:	2c08      	cmp	r4, #8
 800042a:	d1f3      	bne.n	8000414 <PrintRecvBuf+0x8>
}
 800042c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000430 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000430:	0001      	movs	r1, r0
	GPIO_PinState key_pin = HAL_GPIO_ReadPin(GPIOA, GPIO_Pin);
 8000432:	2090      	movs	r0, #144	; 0x90
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_PinState key_pin = HAL_GPIO_ReadPin(GPIOA, GPIO_Pin);
 8000436:	05c0      	lsls	r0, r0, #23
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000438:	b0c1      	sub	sp, #260	; 0x104
	GPIO_PinState key_pin = HAL_GPIO_ReadPin(GPIOA, GPIO_Pin);
 800043a:	f000 fa75 	bl	8000928 <HAL_GPIO_ReadPin>
 800043e:	0004      	movs	r4, r0
	if(key_pin == GPIO_PIN_SET){
 8000440:	2801      	cmp	r0, #1
 8000442:	d137      	bne.n	80004b4 <HAL_GPIO_EXTI_Callback+0x84>
		HAL_Delay(500);
 8000444:	20fa      	movs	r0, #250	; 0xfa
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	f000 f95a 	bl	8000700 <HAL_Delay>
		str[0] = 128;
 800044c:	2380      	movs	r3, #128	; 0x80
 800044e:	466a      	mov	r2, sp
		SimulateKeyStrokes(str, strlen(str));
 8000450:	4668      	mov	r0, sp
		str[0] = 128;
 8000452:	8013      	strh	r3, [r2, #0]
		SimulateKeyStrokes(str, strlen(str));
 8000454:	f7ff fe58 	bl	8000108 <strlen>
 8000458:	0001      	movs	r1, r0
 800045a:	4668      	mov	r0, sp
 800045c:	f7ff ffca 	bl	80003f4 <SimulateKeyStrokes>
		HAL_Delay(2000);
 8000460:	20fa      	movs	r0, #250	; 0xfa
 8000462:	00c0      	lsls	r0, r0, #3
 8000464:	f000 f94c 	bl	8000700 <HAL_Delay>
		if((recv_buffer[0]&0x02) == 0x02){
 8000468:	4e13      	ldr	r6, [pc, #76]	; (80004b8 <HAL_GPIO_EXTI_Callback+0x88>)
 800046a:	4f14      	ldr	r7, [pc, #80]	; (80004bc <HAL_GPIO_EXTI_Callback+0x8c>)
 800046c:	7833      	ldrb	r3, [r6, #0]
 800046e:	079b      	lsls	r3, r3, #30
 8000470:	d515      	bpl.n	800049e <HAL_GPIO_EXTI_Callback+0x6e>
			PrintRecvBuf(recv_buffer);
 8000472:	0030      	movs	r0, r6
 8000474:	f7ff ffca 	bl	800040c <PrintRecvBuf>
			SimulateKeyStrokes("\n", 1);
 8000478:	4d11      	ldr	r5, [pc, #68]	; (80004c0 <HAL_GPIO_EXTI_Callback+0x90>)
 800047a:	0021      	movs	r1, r4
 800047c:	0028      	movs	r0, r5
 800047e:	f7ff ffb9 	bl	80003f4 <SimulateKeyStrokes>
			SimulateKeyStrokes(str, strlen(str));
 8000482:	4668      	mov	r0, sp
 8000484:	f7ff fe40 	bl	8000108 <strlen>
 8000488:	0001      	movs	r1, r0
 800048a:	4668      	mov	r0, sp
 800048c:	f7ff ffb2 	bl	80003f4 <SimulateKeyStrokes>
			PrintRecvBuf(recv_buffer);
 8000490:	0030      	movs	r0, r6
 8000492:	f7ff ffbb 	bl	800040c <PrintRecvBuf>
			SimulateKeyStrokes("\n", 1);
 8000496:	0021      	movs	r1, r4
 8000498:	0028      	movs	r0, r5
 800049a:	f7ff ffab 	bl	80003f4 <SimulateKeyStrokes>
			strcpy(str, "!@#$%^&*()_+1234567890~`{}|:\"<>?[];',./ashdahskdhasjdeuwhuASDJDHJAJKDHBSXAHE\n");
 800049e:	0039      	movs	r1, r7
 80004a0:	4668      	mov	r0, sp
 80004a2:	f003 fa63 	bl	800396c <strcpy>
			SimulateKeyStrokes(str, strlen(str));
 80004a6:	4668      	mov	r0, sp
 80004a8:	f7ff fe2e 	bl	8000108 <strlen>
 80004ac:	0001      	movs	r1, r0
 80004ae:	4668      	mov	r0, sp
 80004b0:	f7ff ffa0 	bl	80003f4 <SimulateKeyStrokes>
}
 80004b4:	b041      	add	sp, #260	; 0x104
 80004b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004b8:	2000022c 	.word	0x2000022c
 80004bc:	08003994 	.word	0x08003994
 80004c0:	080039e0 	.word	0x080039e0

080004c4 <main>:
{
 80004c4:	b510      	push	{r4, lr}
  HAL_Init();
 80004c6:	f000 f8f9 	bl	80006bc <HAL_Init>
  SystemClock_Config();
 80004ca:	f7ff ff13 	bl	80002f4 <SystemClock_Config>
  MX_GPIO_Init();
 80004ce:	f7ff fec3 	bl	8000258 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d2:	f000 f83f 	bl	8000554 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80004d6:	f003 f841 	bl	800355c <MX_USB_DEVICE_Init>
  memset(sent_buffer, 0x00, sizeof(uint8_t)*USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80004da:	220f      	movs	r2, #15
 80004dc:	2100      	movs	r1, #0
 80004de:	4803      	ldr	r0, [pc, #12]	; (80004ec <main+0x28>)
 80004e0:	f003 fa17 	bl	8003912 <memset>
	  HAL_GPIO_EXTI_Callback(Key_Pin);
 80004e4:	2040      	movs	r0, #64	; 0x40
 80004e6:	f7ff ffa3 	bl	8000430 <HAL_GPIO_EXTI_Callback>
  while(1){
 80004ea:	e7fb      	b.n	80004e4 <main+0x20>
 80004ec:	2000022d 	.word	0x2000022d

080004f0 <Error_Handler>:
 80004f0:	b672      	cpsid	i
  while (1)
 80004f2:	e7fe      	b.n	80004f2 <Error_Handler+0x2>

080004f4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004f4:	2101      	movs	r1, #1
 80004f6:	4b0a      	ldr	r3, [pc, #40]	; (8000520 <HAL_MspInit+0x2c>)
{
 80004f8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004fa:	699a      	ldr	r2, [r3, #24]
 80004fc:	430a      	orrs	r2, r1
 80004fe:	619a      	str	r2, [r3, #24]
 8000500:	699a      	ldr	r2, [r3, #24]
 8000502:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000504:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000506:	9200      	str	r2, [sp, #0]
 8000508:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800050a:	69da      	ldr	r2, [r3, #28]
 800050c:	0549      	lsls	r1, r1, #21
 800050e:	430a      	orrs	r2, r1
 8000510:	61da      	str	r2, [r3, #28]
 8000512:	69db      	ldr	r3, [r3, #28]
 8000514:	400b      	ands	r3, r1
 8000516:	9301      	str	r3, [sp, #4]
 8000518:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800051a:	b002      	add	sp, #8
 800051c:	4770      	bx	lr
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	40021000 	.word	0x40021000

08000524 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000524:	e7fe      	b.n	8000524 <NMI_Handler>

08000526 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000526:	e7fe      	b.n	8000526 <HardFault_Handler>

08000528 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000528:	4770      	bx	lr

0800052a <PendSV_Handler>:
 800052a:	4770      	bx	lr

0800052c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800052c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800052e:	f000 f8d5 	bl	80006dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000532:	bd10      	pop	{r4, pc}

08000534 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000534:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Key_Pin);
 8000536:	2040      	movs	r0, #64	; 0x40
 8000538:	f000 fa02 	bl	8000940 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800053c:	bd10      	pop	{r4, pc}
	...

08000540 <USB_IRQHandler>:

/**
  * @brief This function handles USB global Interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8000540:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000542:	4802      	ldr	r0, [pc, #8]	; (800054c <USB_IRQHandler+0xc>)
 8000544:	f000 fa98 	bl	8000a78 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000548:	bd10      	pop	{r4, pc}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	20000790 	.word	0x20000790

08000550 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000550:	4770      	bx	lr
	...

08000554 <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000554:	480b      	ldr	r0, [pc, #44]	; (8000584 <MX_USART2_UART_Init+0x30>)
 8000556:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <MX_USART2_UART_Init+0x34>)
{
 8000558:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800055a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 38400;
 800055c:	2396      	movs	r3, #150	; 0x96
 800055e:	021b      	lsls	r3, r3, #8
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000560:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 38400;
 8000562:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000564:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000566:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000568:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800056a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800056c:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800056e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000570:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000572:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000574:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000576:	f001 fdfb 	bl	8002170 <HAL_UART_Init>
 800057a:	2800      	cmp	r0, #0
 800057c:	d001      	beq.n	8000582 <MX_USART2_UART_Init+0x2e>
  {
    Error_Handler();
 800057e:	f7ff ffb7 	bl	80004f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000582:	bd10      	pop	{r4, pc}
 8000584:	2000023c 	.word	0x2000023c
 8000588:	40004400 	.word	0x40004400

0800058c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800058c:	b510      	push	{r4, lr}
 800058e:	0004      	movs	r4, r0
 8000590:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000592:	2214      	movs	r2, #20
 8000594:	2100      	movs	r1, #0
 8000596:	a803      	add	r0, sp, #12
 8000598:	f003 f9bb 	bl	8003912 <memset>
  if(uartHandle->Instance==USART2)
 800059c:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <HAL_UART_MspInit+0x58>)
 800059e:	6822      	ldr	r2, [r4, #0]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d11d      	bne.n	80005e0 <HAL_UART_MspInit+0x54>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005a4:	2280      	movs	r2, #128	; 0x80
 80005a6:	4b10      	ldr	r3, [pc, #64]	; (80005e8 <HAL_UART_MspInit+0x5c>)
 80005a8:	0292      	lsls	r2, r2, #10
 80005aa:	69d9      	ldr	r1, [r3, #28]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ac:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_USART2_CLK_ENABLE();
 80005ae:	4311      	orrs	r1, r2
 80005b0:	61d9      	str	r1, [r3, #28]
 80005b2:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b4:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_ENABLE();
 80005b6:	4011      	ands	r1, r2
 80005b8:	9101      	str	r1, [sp, #4]
 80005ba:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005bc:	6959      	ldr	r1, [r3, #20]
 80005be:	4311      	orrs	r1, r2
 80005c0:	6159      	str	r1, [r3, #20]
 80005c2:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c4:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	4013      	ands	r3, r2
 80005c8:	9302      	str	r3, [sp, #8]
 80005ca:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80005cc:	4b07      	ldr	r3, [pc, #28]	; (80005ec <HAL_UART_MspInit+0x60>)
 80005ce:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d0:	2302      	movs	r3, #2
 80005d2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005d4:	3301      	adds	r3, #1
 80005d6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80005d8:	3b02      	subs	r3, #2
 80005da:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005dc:	f000 f8f2 	bl	80007c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80005e0:	b008      	add	sp, #32
 80005e2:	bd10      	pop	{r4, pc}
 80005e4:	40004400 	.word	0x40004400
 80005e8:	40021000 	.word	0x40021000
 80005ec:	00008004 	.word	0x00008004

080005f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005f0:	4813      	ldr	r0, [pc, #76]	; (8000640 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005f2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005f4:	f7ff ffac 	bl	8000550 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80005f8:	4812      	ldr	r0, [pc, #72]	; (8000644 <LoopForever+0x6>)
    LDR R1, [R0]
 80005fa:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80005fc:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80005fe:	4a12      	ldr	r2, [pc, #72]	; (8000648 <LoopForever+0xa>)
    CMP R1, R2
 8000600:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000602:	d105      	bne.n	8000610 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000604:	4811      	ldr	r0, [pc, #68]	; (800064c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000606:	4912      	ldr	r1, [pc, #72]	; (8000650 <LoopForever+0x12>)
    STR R1, [R0]
 8000608:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800060a:	4812      	ldr	r0, [pc, #72]	; (8000654 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800060c:	4912      	ldr	r1, [pc, #72]	; (8000658 <LoopForever+0x1a>)
    STR R1, [R0]
 800060e:	6001      	str	r1, [r0, #0]

08000610 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000610:	4812      	ldr	r0, [pc, #72]	; (800065c <LoopForever+0x1e>)
  ldr r1, =_edata
 8000612:	4913      	ldr	r1, [pc, #76]	; (8000660 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000614:	4a13      	ldr	r2, [pc, #76]	; (8000664 <LoopForever+0x26>)
  movs r3, #0
 8000616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000618:	e002      	b.n	8000620 <LoopCopyDataInit>

0800061a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800061a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800061c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800061e:	3304      	adds	r3, #4

08000620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000624:	d3f9      	bcc.n	800061a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000626:	4a10      	ldr	r2, [pc, #64]	; (8000668 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000628:	4c10      	ldr	r4, [pc, #64]	; (800066c <LoopForever+0x2e>)
  movs r3, #0
 800062a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800062c:	e001      	b.n	8000632 <LoopFillZerobss>

0800062e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800062e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000630:	3204      	adds	r2, #4

08000632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000634:	d3fb      	bcc.n	800062e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000636:	f003 f975 	bl	8003924 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800063a:	f7ff ff43 	bl	80004c4 <main>

0800063e <LoopForever>:

LoopForever:
    b LoopForever
 800063e:	e7fe      	b.n	800063e <LoopForever>
  ldr   r0, =_estack
 8000640:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000644:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000648:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 800064c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000650:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000654:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000658:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 800065c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000660:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8000664:	08003a74 	.word	0x08003a74
  ldr r2, =_sbss
 8000668:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 800066c:	20000aac 	.word	0x20000aac

08000670 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000670:	e7fe      	b.n	8000670 <ADC1_IRQHandler>
	...

08000674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000674:	b570      	push	{r4, r5, r6, lr}
 8000676:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000678:	20fa      	movs	r0, #250	; 0xfa
 800067a:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <HAL_InitTick+0x3c>)
 800067c:	0080      	lsls	r0, r0, #2
 800067e:	7819      	ldrb	r1, [r3, #0]
 8000680:	f7ff fd5e 	bl	8000140 <__udivsi3>
 8000684:	4c0b      	ldr	r4, [pc, #44]	; (80006b4 <HAL_InitTick+0x40>)
 8000686:	0001      	movs	r1, r0
 8000688:	6820      	ldr	r0, [r4, #0]
 800068a:	f7ff fd59 	bl	8000140 <__udivsi3>
 800068e:	f000 f87f 	bl	8000790 <HAL_SYSTICK_Config>
 8000692:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8000694:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000696:	2c00      	cmp	r4, #0
 8000698:	d109      	bne.n	80006ae <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800069a:	2d03      	cmp	r5, #3
 800069c:	d807      	bhi.n	80006ae <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800069e:	3802      	subs	r0, #2
 80006a0:	0022      	movs	r2, r4
 80006a2:	0029      	movs	r1, r5
 80006a4:	f000 f83e 	bl	8000724 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006a8:	0020      	movs	r0, r4
 80006aa:	4b03      	ldr	r3, [pc, #12]	; (80006b8 <HAL_InitTick+0x44>)
 80006ac:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	20000088 	.word	0x20000088
 80006b4:	20000084 	.word	0x20000084
 80006b8:	2000008c 	.word	0x2000008c

080006bc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006bc:	2310      	movs	r3, #16
 80006be:	4a06      	ldr	r2, [pc, #24]	; (80006d8 <HAL_Init+0x1c>)
{
 80006c0:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006c2:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80006c4:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006c6:	430b      	orrs	r3, r1
 80006c8:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ca:	f7ff ffd3 	bl	8000674 <HAL_InitTick>
  HAL_MspInit();
 80006ce:	f7ff ff11 	bl	80004f4 <HAL_MspInit>
}
 80006d2:	2000      	movs	r0, #0
 80006d4:	bd10      	pop	{r4, pc}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	40022000 	.word	0x40022000

080006dc <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80006dc:	4a03      	ldr	r2, [pc, #12]	; (80006ec <HAL_IncTick+0x10>)
 80006de:	4b04      	ldr	r3, [pc, #16]	; (80006f0 <HAL_IncTick+0x14>)
 80006e0:	6811      	ldr	r1, [r2, #0]
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	185b      	adds	r3, r3, r1
 80006e6:	6013      	str	r3, [r2, #0]
}
 80006e8:	4770      	bx	lr
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	200002c4 	.word	0x200002c4
 80006f0:	20000088 	.word	0x20000088

080006f4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80006f4:	4b01      	ldr	r3, [pc, #4]	; (80006fc <HAL_GetTick+0x8>)
 80006f6:	6818      	ldr	r0, [r3, #0]
}
 80006f8:	4770      	bx	lr
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	200002c4 	.word	0x200002c4

08000700 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000700:	b570      	push	{r4, r5, r6, lr}
 8000702:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000704:	f7ff fff6 	bl	80006f4 <HAL_GetTick>
 8000708:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800070a:	1c63      	adds	r3, r4, #1
 800070c:	d002      	beq.n	8000714 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800070e:	4b04      	ldr	r3, [pc, #16]	; (8000720 <HAL_Delay+0x20>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000714:	f7ff ffee 	bl	80006f4 <HAL_GetTick>
 8000718:	1b40      	subs	r0, r0, r5
 800071a:	42a0      	cmp	r0, r4
 800071c:	d3fa      	bcc.n	8000714 <HAL_Delay+0x14>
  {
  }
}
 800071e:	bd70      	pop	{r4, r5, r6, pc}
 8000720:	20000088 	.word	0x20000088

08000724 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000724:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000726:	25ff      	movs	r5, #255	; 0xff
 8000728:	2403      	movs	r4, #3
 800072a:	002a      	movs	r2, r5
 800072c:	4004      	ands	r4, r0
 800072e:	00e4      	lsls	r4, r4, #3
 8000730:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000732:	0189      	lsls	r1, r1, #6
 8000734:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000736:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000738:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800073a:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 800073c:	2800      	cmp	r0, #0
 800073e:	db0a      	blt.n	8000756 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000740:	24c0      	movs	r4, #192	; 0xc0
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <HAL_NVIC_SetPriority+0x4c>)
 8000744:	0880      	lsrs	r0, r0, #2
 8000746:	0080      	lsls	r0, r0, #2
 8000748:	18c0      	adds	r0, r0, r3
 800074a:	00a4      	lsls	r4, r4, #2
 800074c:	5903      	ldr	r3, [r0, r4]
 800074e:	4013      	ands	r3, r2
 8000750:	430b      	orrs	r3, r1
 8000752:	5103      	str	r3, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000754:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000756:	200f      	movs	r0, #15
 8000758:	4003      	ands	r3, r0
 800075a:	3b08      	subs	r3, #8
 800075c:	4805      	ldr	r0, [pc, #20]	; (8000774 <HAL_NVIC_SetPriority+0x50>)
 800075e:	089b      	lsrs	r3, r3, #2
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	181b      	adds	r3, r3, r0
 8000764:	69d8      	ldr	r0, [r3, #28]
 8000766:	4002      	ands	r2, r0
 8000768:	430a      	orrs	r2, r1
 800076a:	61da      	str	r2, [r3, #28]
 800076c:	e7f2      	b.n	8000754 <HAL_NVIC_SetPriority+0x30>
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	e000e100 	.word	0xe000e100
 8000774:	e000ed00 	.word	0xe000ed00

08000778 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000778:	2800      	cmp	r0, #0
 800077a:	db05      	blt.n	8000788 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800077c:	231f      	movs	r3, #31
 800077e:	4018      	ands	r0, r3
 8000780:	3b1e      	subs	r3, #30
 8000782:	4083      	lsls	r3, r0
 8000784:	4a01      	ldr	r2, [pc, #4]	; (800078c <HAL_NVIC_EnableIRQ+0x14>)
 8000786:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000788:	4770      	bx	lr
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	e000e100 	.word	0xe000e100

08000790 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000790:	2280      	movs	r2, #128	; 0x80
 8000792:	1e43      	subs	r3, r0, #1
 8000794:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000796:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000798:	4293      	cmp	r3, r2
 800079a:	d20d      	bcs.n	80007b8 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800079c:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800079e:	4a07      	ldr	r2, [pc, #28]	; (80007bc <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007a0:	4807      	ldr	r0, [pc, #28]	; (80007c0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007a2:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007a4:	6a03      	ldr	r3, [r0, #32]
 80007a6:	0609      	lsls	r1, r1, #24
 80007a8:	021b      	lsls	r3, r3, #8
 80007aa:	0a1b      	lsrs	r3, r3, #8
 80007ac:	430b      	orrs	r3, r1
 80007ae:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007b0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007b2:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007b4:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007b6:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80007b8:	4770      	bx	lr
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	e000e010 	.word	0xe000e010
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 80007c4:	2300      	movs	r3, #0
{
 80007c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007c8:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007ca:	680a      	ldr	r2, [r1, #0]
 80007cc:	0014      	movs	r4, r2
 80007ce:	40dc      	lsrs	r4, r3
 80007d0:	d101      	bne.n	80007d6 <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 80007d2:	b007      	add	sp, #28
 80007d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007d6:	2501      	movs	r5, #1
 80007d8:	0014      	movs	r4, r2
 80007da:	409d      	lsls	r5, r3
 80007dc:	402c      	ands	r4, r5
 80007de:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 80007e0:	422a      	tst	r2, r5
 80007e2:	d100      	bne.n	80007e6 <HAL_GPIO_Init+0x22>
 80007e4:	e094      	b.n	8000910 <HAL_GPIO_Init+0x14c>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80007e6:	684a      	ldr	r2, [r1, #4]
 80007e8:	005f      	lsls	r7, r3, #1
 80007ea:	4694      	mov	ip, r2
 80007ec:	2203      	movs	r2, #3
 80007ee:	4664      	mov	r4, ip
 80007f0:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80007f2:	2403      	movs	r4, #3
 80007f4:	40bc      	lsls	r4, r7
 80007f6:	43e4      	mvns	r4, r4
 80007f8:	9401      	str	r4, [sp, #4]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80007fa:	1e54      	subs	r4, r2, #1
 80007fc:	2c01      	cmp	r4, #1
 80007fe:	d82e      	bhi.n	800085e <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 8000800:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000802:	9c01      	ldr	r4, [sp, #4]
 8000804:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000806:	68cc      	ldr	r4, [r1, #12]
 8000808:	40bc      	lsls	r4, r7
 800080a:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 800080c:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800080e:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000810:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000812:	43ac      	bics	r4, r5
 8000814:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000816:	4664      	mov	r4, ip
 8000818:	0924      	lsrs	r4, r4, #4
 800081a:	4034      	ands	r4, r6
 800081c:	409c      	lsls	r4, r3
 800081e:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8000820:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8000822:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000824:	9c01      	ldr	r4, [sp, #4]
 8000826:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000828:	688c      	ldr	r4, [r1, #8]
 800082a:	40bc      	lsls	r4, r7
 800082c:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 800082e:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000830:	2a02      	cmp	r2, #2
 8000832:	d116      	bne.n	8000862 <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000834:	2507      	movs	r5, #7
 8000836:	260f      	movs	r6, #15
 8000838:	401d      	ands	r5, r3
 800083a:	00ad      	lsls	r5, r5, #2
 800083c:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 800083e:	08dc      	lsrs	r4, r3, #3
 8000840:	00a4      	lsls	r4, r4, #2
 8000842:	1904      	adds	r4, r0, r4
 8000844:	9402      	str	r4, [sp, #8]
 8000846:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000848:	9603      	str	r6, [sp, #12]
 800084a:	0026      	movs	r6, r4
 800084c:	9c03      	ldr	r4, [sp, #12]
 800084e:	43a6      	bics	r6, r4
 8000850:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000852:	690e      	ldr	r6, [r1, #16]
 8000854:	40ae      	lsls	r6, r5
 8000856:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 8000858:	9c02      	ldr	r4, [sp, #8]
 800085a:	6226      	str	r6, [r4, #32]
 800085c:	e001      	b.n	8000862 <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800085e:	2a03      	cmp	r2, #3
 8000860:	d1df      	bne.n	8000822 <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000862:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8000864:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000866:	9d01      	ldr	r5, [sp, #4]
 8000868:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800086a:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800086c:	24c0      	movs	r4, #192	; 0xc0
      GPIOx->MODER = temp;
 800086e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000870:	4662      	mov	r2, ip
 8000872:	02a4      	lsls	r4, r4, #10
 8000874:	4222      	tst	r2, r4
 8000876:	d04b      	beq.n	8000910 <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000878:	2501      	movs	r5, #1
 800087a:	4a26      	ldr	r2, [pc, #152]	; (8000914 <HAL_GPIO_Init+0x150>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800087c:	2790      	movs	r7, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087e:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000880:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000882:	432c      	orrs	r4, r5
 8000884:	6194      	str	r4, [r2, #24]
 8000886:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000888:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088a:	402a      	ands	r2, r5
 800088c:	9205      	str	r2, [sp, #20]
 800088e:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000890:	4a21      	ldr	r2, [pc, #132]	; (8000918 <HAL_GPIO_Init+0x154>)
 8000892:	00a4      	lsls	r4, r4, #2
 8000894:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000896:	220f      	movs	r2, #15
 8000898:	3502      	adds	r5, #2
 800089a:	401d      	ands	r5, r3
 800089c:	00ad      	lsls	r5, r5, #2
 800089e:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 80008a0:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80008a2:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80008a4:	2200      	movs	r2, #0
 80008a6:	42b8      	cmp	r0, r7
 80008a8:	d008      	beq.n	80008bc <HAL_GPIO_Init+0xf8>
 80008aa:	4f1c      	ldr	r7, [pc, #112]	; (800091c <HAL_GPIO_Init+0x158>)
 80008ac:	3201      	adds	r2, #1
 80008ae:	42b8      	cmp	r0, r7
 80008b0:	d004      	beq.n	80008bc <HAL_GPIO_Init+0xf8>
 80008b2:	4f1b      	ldr	r7, [pc, #108]	; (8000920 <HAL_GPIO_Init+0x15c>)
 80008b4:	3201      	adds	r2, #1
 80008b6:	42b8      	cmp	r0, r7
 80008b8:	d000      	beq.n	80008bc <HAL_GPIO_Init+0xf8>
 80008ba:	3203      	adds	r2, #3
 80008bc:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80008be:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80008c0:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 80008c2:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 80008c4:	4a17      	ldr	r2, [pc, #92]	; (8000924 <HAL_GPIO_Init+0x160>)
        temp &= ~(iocurrent);
 80008c6:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 80008c8:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 80008ca:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 80008cc:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 80008ce:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80008d0:	02ff      	lsls	r7, r7, #11
 80008d2:	d401      	bmi.n	80008d8 <HAL_GPIO_Init+0x114>
        temp &= ~(iocurrent);
 80008d4:	0035      	movs	r5, r6
 80008d6:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80008d8:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 80008da:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80008dc:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 80008de:	9d00      	ldr	r5, [sp, #0]
 80008e0:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80008e2:	02bf      	lsls	r7, r7, #10
 80008e4:	d401      	bmi.n	80008ea <HAL_GPIO_Init+0x126>
        temp &= ~(iocurrent);
 80008e6:	0035      	movs	r5, r6
 80008e8:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80008ea:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 80008ec:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 80008ee:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80008f0:	9d00      	ldr	r5, [sp, #0]
 80008f2:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80008f4:	03bf      	lsls	r7, r7, #14
 80008f6:	d401      	bmi.n	80008fc <HAL_GPIO_Init+0x138>
        temp &= ~(iocurrent);
 80008f8:	0035      	movs	r5, r6
 80008fa:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80008fc:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 80008fe:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 8000900:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 8000902:	9e00      	ldr	r6, [sp, #0]
 8000904:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000906:	03ff      	lsls	r7, r7, #15
 8000908:	d401      	bmi.n	800090e <HAL_GPIO_Init+0x14a>
        temp &= ~(iocurrent);
 800090a:	4025      	ands	r5, r4
 800090c:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 800090e:	6016      	str	r6, [r2, #0]
    position++;
 8000910:	3301      	adds	r3, #1
 8000912:	e75a      	b.n	80007ca <HAL_GPIO_Init+0x6>
 8000914:	40021000 	.word	0x40021000
 8000918:	40010000 	.word	0x40010000
 800091c:	48000400 	.word	0x48000400
 8000920:	48000800 	.word	0x48000800
 8000924:	40010400 	.word	0x40010400

08000928 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000928:	6900      	ldr	r0, [r0, #16]
 800092a:	4008      	ands	r0, r1
 800092c:	1e43      	subs	r3, r0, #1
 800092e:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8000930:	b2c0      	uxtb	r0, r0
  }
 8000932:	4770      	bx	lr

08000934 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000934:	2a00      	cmp	r2, #0
 8000936:	d001      	beq.n	800093c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000938:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800093a:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800093c:	6281      	str	r1, [r0, #40]	; 0x28
}
 800093e:	e7fc      	b.n	800093a <HAL_GPIO_WritePin+0x6>

08000940 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000940:	4b04      	ldr	r3, [pc, #16]	; (8000954 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8000942:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000944:	695a      	ldr	r2, [r3, #20]
 8000946:	4210      	tst	r0, r2
 8000948:	d002      	beq.n	8000950 <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800094a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800094c:	f7ff fd70 	bl	8000430 <HAL_GPIO_EXTI_Callback>
  }
}
 8000950:	bd10      	pop	{r4, pc}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	40010400 	.word	0x40010400

08000958 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800095a:	0004      	movs	r4, r0
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
  {
    return HAL_ERROR;
 800095c:	2501      	movs	r5, #1
{
 800095e:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8000960:	2800      	cmp	r0, #0
 8000962:	d032      	beq.n	80009ca <HAL_PCD_Init+0x72>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000964:	4d30      	ldr	r5, [pc, #192]	; (8000a28 <HAL_PCD_Init+0xd0>)
 8000966:	5d43      	ldrb	r3, [r0, r5]
 8000968:	b2da      	uxtb	r2, r3
 800096a:	2b00      	cmp	r3, #0
 800096c:	d104      	bne.n	8000978 <HAL_PCD_Init+0x20>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800096e:	23aa      	movs	r3, #170	; 0xaa
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	54c2      	strb	r2, [r0, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000974:	f002 feb4 	bl	80036e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000978:	2303      	movs	r3, #3
 800097a:	5563      	strb	r3, [r4, r5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800097c:	6820      	ldr	r0, [r4, #0]
 800097e:	f001 fc33 	bl	80021e8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000982:	2300      	movs	r3, #0
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000984:	2701      	movs	r7, #1
    hpcd->IN_ep[i].num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000986:	0019      	movs	r1, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000988:	6860      	ldr	r0, [r4, #4]
 800098a:	4283      	cmp	r3, r0
 800098c:	d320      	bcc.n	80009d0 <HAL_PCD_Init+0x78>
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800098e:	2200      	movs	r2, #0
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000990:	2628      	movs	r6, #40	; 0x28
 8000992:	0011      	movs	r1, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000994:	4290      	cmp	r0, r2
 8000996:	d833      	bhi.n	8000a00 <HAL_PCD_Init+0xa8>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000998:	0023      	movs	r3, r4
 800099a:	466a      	mov	r2, sp
 800099c:	3310      	adds	r3, #16
 800099e:	cb43      	ldmia	r3!, {r0, r1, r6}
 80009a0:	c243      	stmia	r2!, {r0, r1, r6}
 80009a2:	cb03      	ldmia	r3!, {r0, r1}
 80009a4:	c203      	stmia	r2!, {r0, r1}
 80009a6:	68a2      	ldr	r2, [r4, #8]
 80009a8:	68e3      	ldr	r3, [r4, #12]
 80009aa:	6861      	ldr	r1, [r4, #4]
 80009ac:	6820      	ldr	r0, [r4, #0]
 80009ae:	f001 fc25 	bl	80021fc <USB_DevInit>

  hpcd->USB_Address = 0U;
 80009b2:	2300      	movs	r3, #0
 80009b4:	1d62      	adds	r2, r4, #5
 80009b6:	77d3      	strb	r3, [r2, #31]
  hpcd->State = HAL_PCD_STATE_READY;
 80009b8:	2201      	movs	r2, #1
 80009ba:	5562      	strb	r2, [r4, r5]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80009bc:	69e2      	ldr	r2, [r4, #28]
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }

  return HAL_OK;
 80009be:	001d      	movs	r5, r3
  if (hpcd->Init.lpm_enable == 1U)
 80009c0:	2a01      	cmp	r2, #1
 80009c2:	d102      	bne.n	80009ca <HAL_PCD_Init+0x72>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80009c4:	0020      	movs	r0, r4
 80009c6:	f000 fe31 	bl	800162c <HAL_PCDEx_ActivateLPM>
}
 80009ca:	0028      	movs	r0, r5
 80009cc:	b007      	add	sp, #28
 80009ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->IN_ep[i].is_in = 1U;
 80009d0:	2629      	movs	r6, #41	; 0x29
 80009d2:	2228      	movs	r2, #40	; 0x28
 80009d4:	46b4      	mov	ip, r6
 80009d6:	435a      	muls	r2, r3
 80009d8:	18a2      	adds	r2, r4, r2
 80009da:	4494      	add	ip, r2
 80009dc:	4666      	mov	r6, ip
 80009de:	7037      	strb	r7, [r6, #0]
    hpcd->IN_ep[i].num = i;
 80009e0:	2628      	movs	r6, #40	; 0x28
 80009e2:	46b4      	mov	ip, r6
 80009e4:	4494      	add	ip, r2
 80009e6:	4666      	mov	r6, ip
 80009e8:	7033      	strb	r3, [r6, #0]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80009ea:	262b      	movs	r6, #43	; 0x2b
 80009ec:	46b4      	mov	ip, r6
 80009ee:	4494      	add	ip, r2
 80009f0:	4666      	mov	r6, ip
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80009f2:	3301      	adds	r3, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80009f4:	7031      	strb	r1, [r6, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80009f6:	b2db      	uxtb	r3, r3
    hpcd->IN_ep[i].maxpacket = 0U;
 80009f8:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 80009fa:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 80009fc:	6411      	str	r1, [r2, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80009fe:	e7c4      	b.n	800098a <HAL_PCD_Init+0x32>
    hpcd->OUT_ep[i].is_in = 0U;
 8000a00:	0033      	movs	r3, r6
 8000a02:	4353      	muls	r3, r2
 8000a04:	18e3      	adds	r3, r4, r3
 8000a06:	001f      	movs	r7, r3
 8000a08:	376a      	adds	r7, #106	; 0x6a
 8000a0a:	37ff      	adds	r7, #255	; 0xff
 8000a0c:	7039      	strb	r1, [r7, #0]
    hpcd->OUT_ep[i].num = i;
 8000a0e:	3f01      	subs	r7, #1
 8000a10:	703a      	strb	r2, [r7, #0]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000a12:	70f9      	strb	r1, [r7, #3]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000a14:	3381      	adds	r3, #129	; 0x81
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000a16:	3f6c      	subs	r7, #108	; 0x6c
 8000a18:	67f9      	str	r1, [r7, #124]	; 0x7c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000a1a:	33ff      	adds	r3, #255	; 0xff
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000a1c:	3780      	adds	r7, #128	; 0x80
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a1e:	3201      	adds	r2, #1
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000a20:	6039      	str	r1, [r7, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a22:	b2d2      	uxtb	r2, r2
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000a24:	6019      	str	r1, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a26:	e7b5      	b.n	8000994 <HAL_PCD_Init+0x3c>
 8000a28:	000002a9 	.word	0x000002a9

08000a2c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000a2c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 8000a2e:	25aa      	movs	r5, #170	; 0xaa
 8000a30:	00ad      	lsls	r5, r5, #2
 8000a32:	5d43      	ldrb	r3, [r0, r5]
{
 8000a34:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 8000a36:	2002      	movs	r0, #2
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d009      	beq.n	8000a50 <HAL_PCD_Start+0x24>
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	5563      	strb	r3, [r4, r5]
  __HAL_PCD_ENABLE(hpcd);
 8000a40:	6820      	ldr	r0, [r4, #0]
 8000a42:	f001 fbc7 	bl	80021d4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000a46:	6820      	ldr	r0, [r4, #0]
 8000a48:	f001 fdd5 	bl	80025f6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	5560      	strb	r0, [r4, r5]

  return HAL_OK;
}
 8000a50:	bd70      	pop	{r4, r5, r6, pc}

08000a52 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000a52:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 8000a54:	25aa      	movs	r5, #170	; 0xaa
 8000a56:	00ad      	lsls	r5, r5, #2
 8000a58:	5d43      	ldrb	r3, [r0, r5]
{
 8000a5a:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 8000a5c:	2002      	movs	r0, #2
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d008      	beq.n	8000a74 <HAL_PCD_SetAddress+0x22>
 8000a62:	2301      	movs	r3, #1
 8000a64:	5563      	strb	r3, [r4, r5]
  hpcd->USB_Address = address;
 8000a66:	1d63      	adds	r3, r4, #5
 8000a68:	77d9      	strb	r1, [r3, #31]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000a6a:	6820      	ldr	r0, [r4, #0]
 8000a6c:	f001 fdbc 	bl	80025e8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000a70:	2000      	movs	r0, #0
 8000a72:	5560      	strb	r0, [r4, r5]

  return HAL_OK;
}
 8000a74:	bd70      	pop	{r4, r5, r6, pc}
	...

08000a78 <HAL_PCD_IRQHandler>:
{
 8000a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a7a:	0004      	movs	r4, r0
 8000a7c:	b085      	sub	sp, #20
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000a7e:	6800      	ldr	r0, [r0, #0]
 8000a80:	f001 fdc1 	bl	8002606 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000a84:	2380      	movs	r3, #128	; 0x80
 8000a86:	0005      	movs	r5, r0
 8000a88:	021b      	lsls	r3, r3, #8
 8000a8a:	401d      	ands	r5, r3
 8000a8c:	4218      	tst	r0, r3
 8000a8e:	d101      	bne.n	8000a94 <HAL_PCD_IRQHandler+0x1c>
 8000a90:	f000 fc17 	bl	80012c2 <HAL_PCD_IRQHandler+0x84a>
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000a94:	6820      	ldr	r0, [r4, #0]
 8000a96:	1d82      	adds	r2, r0, #6
 8000a98:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 8000a9a:	b21b      	sxth	r3, r3
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	db01      	blt.n	8000aa4 <HAL_PCD_IRQHandler+0x2c>
}
 8000aa0:	b005      	add	sp, #20
 8000aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  {
    wIstr = hpcd->Instance->ISTR;

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000aa4:	210f      	movs	r1, #15
    wIstr = hpcd->Instance->ISTR;
 8000aa6:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000aa8:	4019      	ands	r1, r3
 8000aaa:	9101      	str	r1, [sp, #4]

    if (epindex == 0U)
 8000aac:	210f      	movs	r1, #15
    wIstr = hpcd->Instance->ISTR;
 8000aae:	b29a      	uxth	r2, r3
    if (epindex == 0U)
 8000ab0:	420b      	tst	r3, r1
 8000ab2:	d000      	beq.n	8000ab6 <HAL_PCD_IRQHandler+0x3e>
 8000ab4:	e0c3      	b.n	8000c3e <HAL_PCD_IRQHandler+0x1c6>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000ab6:	2310      	movs	r3, #16
 8000ab8:	0011      	movs	r1, r2
 8000aba:	4019      	ands	r1, r3
 8000abc:	421a      	tst	r2, r3
 8000abe:	d12a      	bne.n	8000b16 <HAL_PCD_IRQHandler+0x9e>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000ac0:	8803      	ldrh	r3, [r0, #0]
 8000ac2:	4ab8      	ldr	r2, [pc, #736]	; (8000da4 <HAL_PCD_IRQHandler+0x32c>)
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	2280      	movs	r2, #128	; 0x80
 8000ac8:	0212      	lsls	r2, r2, #8
 8000aca:	4313      	orrs	r3, r2
 8000acc:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000ace:	0003      	movs	r3, r0
 8000ad0:	3350      	adds	r3, #80	; 0x50
 8000ad2:	881a      	ldrh	r2, [r3, #0]
 8000ad4:	0023      	movs	r3, r4
 8000ad6:	3328      	adds	r3, #40	; 0x28
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	00db      	lsls	r3, r3, #3
 8000adc:	18c3      	adds	r3, r0, r3
 8000ade:	189b      	adds	r3, r3, r2
 8000ae0:	4ab1      	ldr	r2, [pc, #708]	; (8000da8 <HAL_PCD_IRQHandler+0x330>)

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000ae2:	0020      	movs	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000ae4:	189b      	adds	r3, r3, r2
 8000ae6:	881b      	ldrh	r3, [r3, #0]
        ep->xfer_buff += ep->xfer_count;
 8000ae8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000aea:	059b      	lsls	r3, r3, #22
 8000aec:	0d9b      	lsrs	r3, r3, #22
 8000aee:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000af0:	18d3      	adds	r3, r2, r3
 8000af2:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000af4:	f002 fe26 	bl	8003744 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000af8:	1d63      	adds	r3, r4, #5
 8000afa:	7fda      	ldrb	r2, [r3, #31]
 8000afc:	2a00      	cmp	r2, #0
 8000afe:	d0c9      	beq.n	8000a94 <HAL_PCD_IRQHandler+0x1c>
 8000b00:	6c20      	ldr	r0, [r4, #64]	; 0x40
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000b02:	6822      	ldr	r2, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000b04:	2800      	cmp	r0, #0
 8000b06:	d1c5      	bne.n	8000a94 <HAL_PCD_IRQHandler+0x1c>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000b08:	2580      	movs	r5, #128	; 0x80
 8000b0a:	7fd9      	ldrb	r1, [r3, #31]
 8000b0c:	324c      	adds	r2, #76	; 0x4c
 8000b0e:	4329      	orrs	r1, r5
 8000b10:	8011      	strh	r1, [r2, #0]
          hpcd->USB_Address = 0U;
 8000b12:	77d8      	strb	r0, [r3, #31]
 8000b14:	e7be      	b.n	8000a94 <HAL_PCD_IRQHandler+0x1c>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000b16:	8802      	ldrh	r2, [r0, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000b18:	2180      	movs	r1, #128	; 0x80
 8000b1a:	0016      	movs	r6, r2
 8000b1c:	0109      	lsls	r1, r1, #4
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000b1e:	b293      	uxth	r3, r2
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000b20:	400e      	ands	r6, r1
 8000b22:	420a      	tst	r2, r1
 8000b24:	d022      	beq.n	8000b6c <HAL_PCD_IRQHandler+0xf4>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000b26:	0003      	movs	r3, r0
 8000b28:	3350      	adds	r3, #80	; 0x50
 8000b2a:	881a      	ldrh	r2, [r3, #0]
 8000b2c:	23b4      	movs	r3, #180	; 0xb4
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	5ce3      	ldrb	r3, [r4, r3]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000b32:	21ac      	movs	r1, #172	; 0xac
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000b34:	00db      	lsls	r3, r3, #3
 8000b36:	18c3      	adds	r3, r0, r3
 8000b38:	189b      	adds	r3, r3, r2
 8000b3a:	4a9c      	ldr	r2, [pc, #624]	; (8000dac <HAL_PCD_IRQHandler+0x334>)
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000b3c:	0089      	lsls	r1, r1, #2
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000b3e:	189b      	adds	r3, r3, r2
 8000b40:	0022      	movs	r2, r4
 8000b42:	881b      	ldrh	r3, [r3, #0]
 8000b44:	3269      	adds	r2, #105	; 0x69
 8000b46:	059b      	lsls	r3, r3, #22
 8000b48:	0d9b      	lsrs	r3, r3, #22
 8000b4a:	32ff      	adds	r2, #255	; 0xff
 8000b4c:	61d3      	str	r3, [r2, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000b4e:	1861      	adds	r1, r4, r1
 8000b50:	88d2      	ldrh	r2, [r2, #6]
 8000b52:	f001 ffc5 	bl	8002ae0 <USB_ReadPMA>
                      ep->pmaadress, (uint16_t)ep->xfer_count);

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000b56:	6822      	ldr	r2, [r4, #0]
 8000b58:	4995      	ldr	r1, [pc, #596]	; (8000db0 <HAL_PCD_IRQHandler+0x338>)
 8000b5a:	8813      	ldrh	r3, [r2, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8000b5c:	0020      	movs	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000b5e:	400b      	ands	r3, r1
 8000b60:	2180      	movs	r1, #128	; 0x80
 8000b62:	430b      	orrs	r3, r1
 8000b64:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000b66:	f002 fdd7 	bl	8003718 <HAL_PCD_SetupStageCallback>
 8000b6a:	e793      	b.n	8000a94 <HAL_PCD_IRQHandler+0x1c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000b6c:	b21b      	sxth	r3, r3
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	db00      	blt.n	8000b74 <HAL_PCD_IRQHandler+0xfc>
 8000b72:	e78f      	b.n	8000a94 <HAL_PCD_IRQHandler+0x1c>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000b74:	8803      	ldrh	r3, [r0, #0]
 8000b76:	4a8e      	ldr	r2, [pc, #568]	; (8000db0 <HAL_PCD_IRQHandler+0x338>)

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000b78:	0025      	movs	r5, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	2280      	movs	r2, #128	; 0x80
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000b82:	0003      	movs	r3, r0
 8000b84:	3350      	adds	r3, #80	; 0x50
 8000b86:	881a      	ldrh	r2, [r3, #0]
 8000b88:	23b4      	movs	r3, #180	; 0xb4
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	5ce3      	ldrb	r3, [r4, r3]
 8000b8e:	3569      	adds	r5, #105	; 0x69
 8000b90:	00db      	lsls	r3, r3, #3
 8000b92:	18c3      	adds	r3, r0, r3
 8000b94:	189b      	adds	r3, r3, r2
 8000b96:	4a85      	ldr	r2, [pc, #532]	; (8000dac <HAL_PCD_IRQHandler+0x334>)
 8000b98:	35ff      	adds	r5, #255	; 0xff
 8000b9a:	189b      	adds	r3, r3, r2
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	059b      	lsls	r3, r3, #22
 8000ba0:	0d9b      	lsrs	r3, r3, #22
 8000ba2:	61eb      	str	r3, [r5, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8000ba4:	d00d      	beq.n	8000bc2 <HAL_PCD_IRQHandler+0x14a>
 8000ba6:	6969      	ldr	r1, [r5, #20]
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	d00a      	beq.n	8000bc2 <HAL_PCD_IRQHandler+0x14a>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8000bac:	88ea      	ldrh	r2, [r5, #6]
 8000bae:	f001 ff97 	bl	8002ae0 <USB_ReadPMA>
                        ep->pmaadress, (uint16_t)ep->xfer_count);

            ep->xfer_buff += ep->xfer_count;
 8000bb2:	696b      	ldr	r3, [r5, #20]
 8000bb4:	69ea      	ldr	r2, [r5, #28]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000bb6:	0031      	movs	r1, r6
            ep->xfer_buff += ep->xfer_count;
 8000bb8:	189b      	adds	r3, r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000bba:	0020      	movs	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8000bbc:	616b      	str	r3, [r5, #20]
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000bbe:	f002 fdb4 	bl	800372a <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000bc2:	6821      	ldr	r1, [r4, #0]
 8000bc4:	880a      	ldrh	r2, [r1, #0]
 8000bc6:	b293      	uxth	r3, r2

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8000bc8:	0512      	lsls	r2, r2, #20
 8000bca:	d500      	bpl.n	8000bce <HAL_PCD_IRQHandler+0x156>
 8000bcc:	e762      	b.n	8000a94 <HAL_PCD_IRQHandler+0x1c>
 8000bce:	22c0      	movs	r2, #192	; 0xc0
 8000bd0:	0192      	lsls	r2, r2, #6
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d100      	bne.n	8000bda <HAL_PCD_IRQHandler+0x162>
 8000bd8:	e75c      	b.n	8000a94 <HAL_PCD_IRQHandler+0x1c>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000bda:	000b      	movs	r3, r1
 8000bdc:	3350      	adds	r3, #80	; 0x50
 8000bde:	881a      	ldrh	r2, [r3, #0]
 8000be0:	4b72      	ldr	r3, [pc, #456]	; (8000dac <HAL_PCD_IRQHandler+0x334>)
 8000be2:	18cb      	adds	r3, r1, r3
 8000be4:	189b      	adds	r3, r3, r2
 8000be6:	881a      	ldrh	r2, [r3, #0]
 8000be8:	0592      	lsls	r2, r2, #22
 8000bea:	0d92      	lsrs	r2, r2, #22
 8000bec:	801a      	strh	r2, [r3, #0]
 8000bee:	692a      	ldr	r2, [r5, #16]
 8000bf0:	2a3e      	cmp	r2, #62	; 0x3e
 8000bf2:	d90c      	bls.n	8000c0e <HAL_PCD_IRQHandler+0x196>
 8000bf4:	251f      	movs	r5, #31
 8000bf6:	0950      	lsrs	r0, r2, #5
 8000bf8:	402a      	ands	r2, r5
 8000bfa:	4255      	negs	r5, r2
 8000bfc:	416a      	adcs	r2, r5
 8000bfe:	1a80      	subs	r0, r0, r2
 8000c00:	881a      	ldrh	r2, [r3, #0]
 8000c02:	0280      	lsls	r0, r0, #10
 8000c04:	4310      	orrs	r0, r2
 8000c06:	4a6b      	ldr	r2, [pc, #428]	; (8000db4 <HAL_PCD_IRQHandler+0x33c>)
 8000c08:	4302      	orrs	r2, r0
 8000c0a:	b292      	uxth	r2, r2
 8000c0c:	e005      	b.n	8000c1a <HAL_PCD_IRQHandler+0x1a2>
 8000c0e:	2a00      	cmp	r2, #0
 8000c10:	d10e      	bne.n	8000c30 <HAL_PCD_IRQHandler+0x1b8>
 8000c12:	2080      	movs	r0, #128	; 0x80
 8000c14:	881a      	ldrh	r2, [r3, #0]
 8000c16:	0200      	lsls	r0, r0, #8
 8000c18:	4302      	orrs	r2, r0
 8000c1a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000c1c:	880a      	ldrh	r2, [r1, #0]
 8000c1e:	4b66      	ldr	r3, [pc, #408]	; (8000db8 <HAL_PCD_IRQHandler+0x340>)
 8000c20:	401a      	ands	r2, r3
 8000c22:	23c0      	movs	r3, #192	; 0xc0
 8000c24:	019b      	lsls	r3, r3, #6
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8000c26:	4053      	eors	r3, r2
 8000c28:	4a64      	ldr	r2, [pc, #400]	; (8000dbc <HAL_PCD_IRQHandler+0x344>)
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	800b      	strh	r3, [r1, #0]

  return HAL_OK;
 8000c2e:	e731      	b.n	8000a94 <HAL_PCD_IRQHandler+0x1c>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000c30:	2501      	movs	r5, #1
 8000c32:	0850      	lsrs	r0, r2, #1
 8000c34:	402a      	ands	r2, r5
 8000c36:	1880      	adds	r0, r0, r2
 8000c38:	0280      	lsls	r0, r0, #10
 8000c3a:	881a      	ldrh	r2, [r3, #0]
 8000c3c:	e7e4      	b.n	8000c08 <HAL_PCD_IRQHandler+0x190>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000c3e:	9b01      	ldr	r3, [sp, #4]
 8000c40:	009f      	lsls	r7, r3, #2
 8000c42:	19c2      	adds	r2, r0, r7
 8000c44:	8813      	ldrh	r3, [r2, #0]
 8000c46:	b299      	uxth	r1, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000c48:	b21b      	sxth	r3, r3
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000c4a:	9102      	str	r1, [sp, #8]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	db00      	blt.n	8000c52 <HAL_PCD_IRQHandler+0x1da>
 8000c50:	e0f6      	b.n	8000e40 <HAL_PCD_IRQHandler+0x3c8>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000c52:	8813      	ldrh	r3, [r2, #0]
 8000c54:	4956      	ldr	r1, [pc, #344]	; (8000db0 <HAL_PCD_IRQHandler+0x338>)
 8000c56:	400b      	ands	r3, r1
 8000c58:	2180      	movs	r1, #128	; 0x80
 8000c5a:	430b      	orrs	r3, r1
 8000c5c:	8013      	strh	r3, [r2, #0]
        if (ep->doublebuffer == 0U)
 8000c5e:	2328      	movs	r3, #40	; 0x28
 8000c60:	9a01      	ldr	r2, [sp, #4]
 8000c62:	4353      	muls	r3, r2
 8000c64:	18e3      	adds	r3, r4, r3
 8000c66:	001a      	movs	r2, r3
 8000c68:	001d      	movs	r5, r3
 8000c6a:	3275      	adds	r2, #117	; 0x75
 8000c6c:	32ff      	adds	r2, #255	; 0xff
 8000c6e:	7812      	ldrb	r2, [r2, #0]
 8000c70:	3569      	adds	r5, #105	; 0x69
 8000c72:	35ff      	adds	r5, #255	; 0xff
 8000c74:	2a00      	cmp	r2, #0
 8000c76:	d11a      	bne.n	8000cae <HAL_PCD_IRQHandler+0x236>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000c78:	0002      	movs	r2, r0
 8000c7a:	3250      	adds	r2, #80	; 0x50
 8000c7c:	8811      	ldrh	r1, [r2, #0]
 8000c7e:	782a      	ldrb	r2, [r5, #0]
 8000c80:	00d2      	lsls	r2, r2, #3
 8000c82:	1852      	adds	r2, r2, r1
 8000c84:	4949      	ldr	r1, [pc, #292]	; (8000dac <HAL_PCD_IRQHandler+0x334>)
 8000c86:	1812      	adds	r2, r2, r0
 8000c88:	1852      	adds	r2, r2, r1
 8000c8a:	8812      	ldrh	r2, [r2, #0]
 8000c8c:	0592      	lsls	r2, r2, #22
 8000c8e:	0d95      	lsrs	r5, r2, #22
          if (count != 0U)
 8000c90:	2a00      	cmp	r2, #0
 8000c92:	d100      	bne.n	8000c96 <HAL_PCD_IRQHandler+0x21e>
 8000c94:	e0b3      	b.n	8000dfe <HAL_PCD_IRQHandler+0x386>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000c96:	001a      	movs	r2, r3
 8000c98:	326f      	adds	r2, #111	; 0x6f
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000c9a:	337d      	adds	r3, #125	; 0x7d
 8000c9c:	33ff      	adds	r3, #255	; 0xff
 8000c9e:	0019      	movs	r1, r3
 8000ca0:	32ff      	adds	r2, #255	; 0xff
 8000ca2:	002b      	movs	r3, r5
 8000ca4:	8812      	ldrh	r2, [r2, #0]
 8000ca6:	6809      	ldr	r1, [r1, #0]
 8000ca8:	f001 ff1a 	bl	8002ae0 <USB_ReadPMA>
 8000cac:	e0a7      	b.n	8000dfe <HAL_PCD_IRQHandler+0x386>
          if (ep->type == EP_TYPE_BULK)
 8000cae:	0019      	movs	r1, r3
 8000cb0:	316c      	adds	r1, #108	; 0x6c
 8000cb2:	31ff      	adds	r1, #255	; 0xff
 8000cb4:	7809      	ldrb	r1, [r1, #0]
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000cb6:	782a      	ldrb	r2, [r5, #0]
          if (ep->type == EP_TYPE_BULK)
 8000cb8:	2902      	cmp	r1, #2
 8000cba:	d000      	beq.n	8000cbe <HAL_PCD_IRQHandler+0x246>
 8000cbc:	e084      	b.n	8000dc8 <HAL_PCD_IRQHandler+0x350>
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8000cbe:	2680      	movs	r6, #128	; 0x80
 8000cc0:	01f6      	lsls	r6, r6, #7
 8000cc2:	46b4      	mov	ip, r6
 8000cc4:	4665      	mov	r5, ip
 8000cc6:	9e02      	ldr	r6, [sp, #8]
    if (ep->xfer_len >= count)
 8000cc8:	3381      	adds	r3, #129	; 0x81
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8000cca:	402e      	ands	r6, r5
 8000ccc:	9603      	str	r6, [sp, #12]
 8000cce:	0006      	movs	r6, r0
 8000cd0:	3650      	adds	r6, #80	; 0x50
 8000cd2:	9600      	str	r6, [sp, #0]
 8000cd4:	4666      	mov	r6, ip
 8000cd6:	9d02      	ldr	r5, [sp, #8]
    if (ep->xfer_len >= count)
 8000cd8:	33ff      	adds	r3, #255	; 0xff
 8000cda:	6819      	ldr	r1, [r3, #0]
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8000cdc:	4235      	tst	r5, r6
 8000cde:	d030      	beq.n	8000d42 <HAL_PCD_IRQHandler+0x2ca>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000ce0:	9d00      	ldr	r5, [sp, #0]
 8000ce2:	882e      	ldrh	r6, [r5, #0]
 8000ce4:	00d5      	lsls	r5, r2, #3
 8000ce6:	1976      	adds	r6, r6, r5
 8000ce8:	4d2f      	ldr	r5, [pc, #188]	; (8000da8 <HAL_PCD_IRQHandler+0x330>)
 8000cea:	1836      	adds	r6, r6, r0
 8000cec:	1976      	adds	r6, r6, r5
 8000cee:	8835      	ldrh	r5, [r6, #0]
 8000cf0:	05ad      	lsls	r5, r5, #22
 8000cf2:	0dad      	lsrs	r5, r5, #22
    if (ep->xfer_len >= count)
 8000cf4:	428d      	cmp	r5, r1
 8000cf6:	d90d      	bls.n	8000d14 <HAL_PCD_IRQHandler+0x29c>
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	6019      	str	r1, [r3, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8000cfc:	0091      	lsls	r1, r2, #2
 8000cfe:	1841      	adds	r1, r0, r1
 8000d00:	880e      	ldrh	r6, [r1, #0]
 8000d02:	4b2d      	ldr	r3, [pc, #180]	; (8000db8 <HAL_PCD_IRQHandler+0x340>)
 8000d04:	401e      	ands	r6, r3
 8000d06:	2380      	movs	r3, #128	; 0x80
 8000d08:	019b      	lsls	r3, r3, #6
 8000d0a:	4073      	eors	r3, r6
 8000d0c:	4e2b      	ldr	r6, [pc, #172]	; (8000dbc <HAL_PCD_IRQHandler+0x344>)
 8000d0e:	4333      	orrs	r3, r6
 8000d10:	800b      	strh	r3, [r1, #0]
 8000d12:	e002      	b.n	8000d1a <HAL_PCD_IRQHandler+0x2a2>
      ep->xfer_len -= count;
 8000d14:	1b49      	subs	r1, r1, r5
 8000d16:	6019      	str	r1, [r3, #0]
    if (ep->xfer_len == 0U)
 8000d18:	d0f0      	beq.n	8000cfc <HAL_PCD_IRQHandler+0x284>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8000d1a:	9b02      	ldr	r3, [sp, #8]
 8000d1c:	065b      	lsls	r3, r3, #25
 8000d1e:	d507      	bpl.n	8000d30 <HAL_PCD_IRQHandler+0x2b8>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8000d20:	0092      	lsls	r2, r2, #2
 8000d22:	1882      	adds	r2, r0, r2
 8000d24:	8813      	ldrh	r3, [r2, #0]
 8000d26:	4926      	ldr	r1, [pc, #152]	; (8000dc0 <HAL_PCD_IRQHandler+0x348>)
 8000d28:	400b      	ands	r3, r1
 8000d2a:	4926      	ldr	r1, [pc, #152]	; (8000dc4 <HAL_PCD_IRQHandler+0x34c>)
 8000d2c:	430b      	orrs	r3, r1
 8000d2e:	8013      	strh	r3, [r2, #0]
    if (count != 0U)
 8000d30:	2d00      	cmp	r5, #0
 8000d32:	d064      	beq.n	8000dfe <HAL_PCD_IRQHandler+0x386>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000d34:	2328      	movs	r3, #40	; 0x28
 8000d36:	9a01      	ldr	r2, [sp, #4]
 8000d38:	4353      	muls	r3, r2
 8000d3a:	18e3      	adds	r3, r4, r3
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000d3c:	001a      	movs	r2, r3
 8000d3e:	3271      	adds	r2, #113	; 0x71
 8000d40:	e7ab      	b.n	8000c9a <HAL_PCD_IRQHandler+0x222>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000d42:	9d00      	ldr	r5, [sp, #0]
 8000d44:	882e      	ldrh	r6, [r5, #0]
 8000d46:	00d5      	lsls	r5, r2, #3
 8000d48:	1976      	adds	r6, r6, r5
 8000d4a:	4d18      	ldr	r5, [pc, #96]	; (8000dac <HAL_PCD_IRQHandler+0x334>)
 8000d4c:	1836      	adds	r6, r6, r0
 8000d4e:	1976      	adds	r6, r6, r5
 8000d50:	8835      	ldrh	r5, [r6, #0]
 8000d52:	05ad      	lsls	r5, r5, #22
 8000d54:	0dad      	lsrs	r5, r5, #22
    if (ep->xfer_len >= count)
 8000d56:	428d      	cmp	r5, r1
 8000d58:	d90d      	bls.n	8000d76 <HAL_PCD_IRQHandler+0x2fe>
 8000d5a:	9903      	ldr	r1, [sp, #12]
 8000d5c:	6019      	str	r1, [r3, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8000d5e:	0091      	lsls	r1, r2, #2
 8000d60:	1841      	adds	r1, r0, r1
 8000d62:	880e      	ldrh	r6, [r1, #0]
 8000d64:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <HAL_PCD_IRQHandler+0x340>)
 8000d66:	401e      	ands	r6, r3
 8000d68:	2380      	movs	r3, #128	; 0x80
 8000d6a:	019b      	lsls	r3, r3, #6
 8000d6c:	4073      	eors	r3, r6
 8000d6e:	4e13      	ldr	r6, [pc, #76]	; (8000dbc <HAL_PCD_IRQHandler+0x344>)
 8000d70:	4333      	orrs	r3, r6
 8000d72:	800b      	strh	r3, [r1, #0]
 8000d74:	e002      	b.n	8000d7c <HAL_PCD_IRQHandler+0x304>
      ep->xfer_len -= count;
 8000d76:	1b49      	subs	r1, r1, r5
 8000d78:	6019      	str	r1, [r3, #0]
    if (ep->xfer_len == 0U)
 8000d7a:	d0f0      	beq.n	8000d5e <HAL_PCD_IRQHandler+0x2e6>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8000d7c:	9b02      	ldr	r3, [sp, #8]
 8000d7e:	065b      	lsls	r3, r3, #25
 8000d80:	d407      	bmi.n	8000d92 <HAL_PCD_IRQHandler+0x31a>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8000d82:	0092      	lsls	r2, r2, #2
 8000d84:	1882      	adds	r2, r0, r2
 8000d86:	8813      	ldrh	r3, [r2, #0]
 8000d88:	490d      	ldr	r1, [pc, #52]	; (8000dc0 <HAL_PCD_IRQHandler+0x348>)
 8000d8a:	400b      	ands	r3, r1
 8000d8c:	490d      	ldr	r1, [pc, #52]	; (8000dc4 <HAL_PCD_IRQHandler+0x34c>)
 8000d8e:	430b      	orrs	r3, r1
 8000d90:	8013      	strh	r3, [r2, #0]
    if (count != 0U)
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	d033      	beq.n	8000dfe <HAL_PCD_IRQHandler+0x386>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000d96:	2328      	movs	r3, #40	; 0x28
 8000d98:	9a01      	ldr	r2, [sp, #4]
 8000d9a:	4353      	muls	r3, r2
 8000d9c:	18e3      	adds	r3, r4, r3
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000d9e:	001a      	movs	r2, r3
 8000da0:	3273      	adds	r2, #115	; 0x73
 8000da2:	e77a      	b.n	8000c9a <HAL_PCD_IRQHandler+0x222>
 8000da4:	ffff8f0f 	.word	0xffff8f0f
 8000da8:	00000402 	.word	0x00000402
 8000dac:	00000406 	.word	0x00000406
 8000db0:	00000f8f 	.word	0x00000f8f
 8000db4:	ffff8000 	.word	0xffff8000
 8000db8:	ffffbf8f 	.word	0xffffbf8f
 8000dbc:	00008080 	.word	0x00008080
 8000dc0:	ffff8f8f 	.word	0xffff8f8f
 8000dc4:	000080c0 	.word	0x000080c0
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8000dc8:	0092      	lsls	r2, r2, #2
 8000dca:	1882      	adds	r2, r0, r2
 8000dcc:	8816      	ldrh	r6, [r2, #0]
 8000dce:	49ce      	ldr	r1, [pc, #824]	; (8001108 <HAL_PCD_IRQHandler+0x690>)
 8000dd0:	4031      	ands	r1, r6
 8000dd2:	4ece      	ldr	r6, [pc, #824]	; (800110c <HAL_PCD_IRQHandler+0x694>)
 8000dd4:	4331      	orrs	r1, r6
 8000dd6:	8011      	strh	r1, [r2, #0]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8000dd8:	782a      	ldrb	r2, [r5, #0]
 8000dda:	0091      	lsls	r1, r2, #2
 8000ddc:	1841      	adds	r1, r0, r1
 8000dde:	880d      	ldrh	r5, [r1, #0]
 8000de0:	0001      	movs	r1, r0
 8000de2:	3150      	adds	r1, #80	; 0x50
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000de4:	8809      	ldrh	r1, [r1, #0]
 8000de6:	00d2      	lsls	r2, r2, #3
 8000de8:	1852      	adds	r2, r2, r1
 8000dea:	1812      	adds	r2, r2, r0
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8000dec:	046d      	lsls	r5, r5, #17
 8000dee:	d562      	bpl.n	8000eb6 <HAL_PCD_IRQHandler+0x43e>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000df0:	49c7      	ldr	r1, [pc, #796]	; (8001110 <HAL_PCD_IRQHandler+0x698>)
 8000df2:	1852      	adds	r2, r2, r1
 8000df4:	8812      	ldrh	r2, [r2, #0]
 8000df6:	0592      	lsls	r2, r2, #22
 8000df8:	0d95      	lsrs	r5, r2, #22
              if (count != 0U)
 8000dfa:	2a00      	cmp	r2, #0
 8000dfc:	d19e      	bne.n	8000d3c <HAL_PCD_IRQHandler+0x2c4>
        ep->xfer_count += count;
 8000dfe:	2328      	movs	r3, #40	; 0x28
 8000e00:	9901      	ldr	r1, [sp, #4]
 8000e02:	4359      	muls	r1, r3
 8000e04:	1862      	adds	r2, r4, r1
 8000e06:	0016      	movs	r6, r2
 8000e08:	3685      	adds	r6, #133	; 0x85
 8000e0a:	36ff      	adds	r6, #255	; 0xff
 8000e0c:	6830      	ldr	r0, [r6, #0]
        ep->xfer_buff += count;
 8000e0e:	3e08      	subs	r6, #8
        ep->xfer_count += count;
 8000e10:	1940      	adds	r0, r0, r5
 8000e12:	60b0      	str	r0, [r6, #8]
        ep->xfer_buff += count;
 8000e14:	6830      	ldr	r0, [r6, #0]
 8000e16:	1940      	adds	r0, r0, r5
 8000e18:	6030      	str	r0, [r6, #0]
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000e1a:	0010      	movs	r0, r2
 8000e1c:	3081      	adds	r0, #129	; 0x81
 8000e1e:	30ff      	adds	r0, #255	; 0xff
 8000e20:	6800      	ldr	r0, [r0, #0]
 8000e22:	2800      	cmp	r0, #0
 8000e24:	d003      	beq.n	8000e2e <HAL_PCD_IRQHandler+0x3b6>
 8000e26:	32fc      	adds	r2, #252	; 0xfc
 8000e28:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8000e2a:	4295      	cmp	r5, r2
 8000e2c:	d24b      	bcs.n	8000ec6 <HAL_PCD_IRQHandler+0x44e>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8000e2e:	9a01      	ldr	r2, [sp, #4]
 8000e30:	0020      	movs	r0, r4
 8000e32:	4353      	muls	r3, r2
 8000e34:	18e3      	adds	r3, r4, r3
 8000e36:	3369      	adds	r3, #105	; 0x69
 8000e38:	33ff      	adds	r3, #255	; 0xff
 8000e3a:	7819      	ldrb	r1, [r3, #0]
 8000e3c:	f002 fc75 	bl	800372a <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000e40:	2280      	movs	r2, #128	; 0x80
 8000e42:	9b02      	ldr	r3, [sp, #8]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000e44:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000e46:	4213      	tst	r3, r2
 8000e48:	d100      	bne.n	8000e4c <HAL_PCD_IRQHandler+0x3d4>
 8000e4a:	e623      	b.n	8000a94 <HAL_PCD_IRQHandler+0x1c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000e4c:	19c2      	adds	r2, r0, r7
 8000e4e:	8813      	ldrh	r3, [r2, #0]
 8000e50:	49b0      	ldr	r1, [pc, #704]	; (8001114 <HAL_PCD_IRQHandler+0x69c>)
 8000e52:	9d01      	ldr	r5, [sp, #4]
 8000e54:	400b      	ands	r3, r1
 8000e56:	49b0      	ldr	r1, [pc, #704]	; (8001118 <HAL_PCD_IRQHandler+0x6a0>)
 8000e58:	430b      	orrs	r3, r1
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	8013      	strh	r3, [r2, #0]
        if (ep->type == EP_TYPE_ISOC)
 8000e5e:	2328      	movs	r3, #40	; 0x28
 8000e60:	435d      	muls	r5, r3
 8000e62:	1965      	adds	r5, r4, r5
 8000e64:	002a      	movs	r2, r5
 8000e66:	322b      	adds	r2, #43	; 0x2b
 8000e68:	7811      	ldrb	r1, [r2, #0]
 8000e6a:	18ea      	adds	r2, r5, r3
 8000e6c:	2901      	cmp	r1, #1
 8000e6e:	d159      	bne.n	8000f24 <HAL_PCD_IRQHandler+0x4ac>
          ep->xfer_len = 0U;
 8000e70:	2300      	movs	r3, #0
          if (ep->doublebuffer != 0U)
 8000e72:	0029      	movs	r1, r5
          ep->xfer_len = 0U;
 8000e74:	642b      	str	r3, [r5, #64]	; 0x40
          if (ep->doublebuffer != 0U)
 8000e76:	3134      	adds	r1, #52	; 0x34
 8000e78:	7809      	ldrb	r1, [r1, #0]
 8000e7a:	4299      	cmp	r1, r3
 8000e7c:	d036      	beq.n	8000eec <HAL_PCD_IRQHandler+0x474>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8000e7e:	2140      	movs	r1, #64	; 0x40
 8000e80:	9e02      	ldr	r6, [sp, #8]
 8000e82:	9f02      	ldr	r7, [sp, #8]
 8000e84:	400e      	ands	r6, r1
 8000e86:	3529      	adds	r5, #41	; 0x29
 8000e88:	420f      	tst	r7, r1
 8000e8a:	d034      	beq.n	8000ef6 <HAL_PCD_IRQHandler+0x47e>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000e8c:	7829      	ldrb	r1, [r5, #0]
 8000e8e:	4299      	cmp	r1, r3
 8000e90:	d120      	bne.n	8000ed4 <HAL_PCD_IRQHandler+0x45c>
 8000e92:	0003      	movs	r3, r0
 8000e94:	7811      	ldrb	r1, [r2, #0]
 8000e96:	3350      	adds	r3, #80	; 0x50
 8000e98:	881d      	ldrh	r5, [r3, #0]
 8000e9a:	4b9d      	ldr	r3, [pc, #628]	; (8001110 <HAL_PCD_IRQHandler+0x698>)
 8000e9c:	00c9      	lsls	r1, r1, #3
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000e9e:	18c3      	adds	r3, r0, r3
 8000ea0:	195b      	adds	r3, r3, r5
 8000ea2:	18c9      	adds	r1, r1, r3
 8000ea4:	880b      	ldrh	r3, [r1, #0]
 8000ea6:	489c      	ldr	r0, [pc, #624]	; (8001118 <HAL_PCD_IRQHandler+0x6a0>)
 8000ea8:	059b      	lsls	r3, r3, #22
 8000eaa:	0d9b      	lsrs	r3, r3, #22
 8000eac:	800b      	strh	r3, [r1, #0]
 8000eae:	880b      	ldrh	r3, [r1, #0]
 8000eb0:	4303      	orrs	r3, r0
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	e019      	b.n	8000eea <HAL_PCD_IRQHandler+0x472>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000eb6:	4999      	ldr	r1, [pc, #612]	; (800111c <HAL_PCD_IRQHandler+0x6a4>)
 8000eb8:	1852      	adds	r2, r2, r1
 8000eba:	8812      	ldrh	r2, [r2, #0]
 8000ebc:	0592      	lsls	r2, r2, #22
 8000ebe:	0d95      	lsrs	r5, r2, #22
              if (count != 0U)
 8000ec0:	2a00      	cmp	r2, #0
 8000ec2:	d09c      	beq.n	8000dfe <HAL_PCD_IRQHandler+0x386>
 8000ec4:	e76b      	b.n	8000d9e <HAL_PCD_IRQHandler+0x326>
        ep = &hpcd->OUT_ep[epindex];
 8000ec6:	3169      	adds	r1, #105	; 0x69
 8000ec8:	31ff      	adds	r1, #255	; 0xff
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000eca:	6820      	ldr	r0, [r4, #0]
        ep = &hpcd->OUT_ep[epindex];
 8000ecc:	1861      	adds	r1, r4, r1
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000ece:	f001 fbb3 	bl	8002638 <USB_EPStartXfer>
 8000ed2:	e7b5      	b.n	8000e40 <HAL_PCD_IRQHandler+0x3c8>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000ed4:	2901      	cmp	r1, #1
 8000ed6:	d109      	bne.n	8000eec <HAL_PCD_IRQHandler+0x474>
 8000ed8:	0001      	movs	r1, r0
 8000eda:	4e8d      	ldr	r6, [pc, #564]	; (8001110 <HAL_PCD_IRQHandler+0x698>)
 8000edc:	3150      	adds	r1, #80	; 0x50
 8000ede:	880d      	ldrh	r5, [r1, #0]
 8000ee0:	7811      	ldrb	r1, [r2, #0]
 8000ee2:	1980      	adds	r0, r0, r6
 8000ee4:	00c9      	lsls	r1, r1, #3
 8000ee6:	1940      	adds	r0, r0, r5
 8000ee8:	1809      	adds	r1, r1, r0
 8000eea:	800b      	strh	r3, [r1, #0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000eec:	7811      	ldrb	r1, [r2, #0]
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000eee:	0020      	movs	r0, r4
 8000ef0:	f002 fc28 	bl	8003744 <HAL_PCD_DataInStageCallback>
 8000ef4:	e5ce      	b.n	8000a94 <HAL_PCD_IRQHandler+0x1c>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000ef6:	782b      	ldrb	r3, [r5, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d106      	bne.n	8000f0a <HAL_PCD_IRQHandler+0x492>
 8000efc:	0003      	movs	r3, r0
 8000efe:	7811      	ldrb	r1, [r2, #0]
 8000f00:	3350      	adds	r3, #80	; 0x50
 8000f02:	881d      	ldrh	r5, [r3, #0]
 8000f04:	00c9      	lsls	r1, r1, #3
 8000f06:	4b85      	ldr	r3, [pc, #532]	; (800111c <HAL_PCD_IRQHandler+0x6a4>)
 8000f08:	e7c9      	b.n	8000e9e <HAL_PCD_IRQHandler+0x426>
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d1ee      	bne.n	8000eec <HAL_PCD_IRQHandler+0x474>
 8000f0e:	0003      	movs	r3, r0
 8000f10:	4d82      	ldr	r5, [pc, #520]	; (800111c <HAL_PCD_IRQHandler+0x6a4>)
 8000f12:	3350      	adds	r3, #80	; 0x50
 8000f14:	8819      	ldrh	r1, [r3, #0]
 8000f16:	7813      	ldrb	r3, [r2, #0]
 8000f18:	1940      	adds	r0, r0, r5
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	1840      	adds	r0, r0, r1
 8000f1e:	181b      	adds	r3, r3, r0
 8000f20:	801e      	strh	r6, [r3, #0]
 8000f22:	e7e3      	b.n	8000eec <HAL_PCD_IRQHandler+0x474>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000f24:	7812      	ldrb	r2, [r2, #0]
          if ((wEPVal & USB_EP_KIND) == 0U)
 8000f26:	9f02      	ldr	r7, [sp, #8]
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000f28:	9203      	str	r2, [sp, #12]
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000f2a:	00d2      	lsls	r2, r2, #3
 8000f2c:	9200      	str	r2, [sp, #0]
          if ((wEPVal & USB_EP_KIND) == 0U)
 8000f2e:	2280      	movs	r2, #128	; 0x80
 8000f30:	9902      	ldr	r1, [sp, #8]
 8000f32:	0052      	lsls	r2, r2, #1
            if (ep->xfer_len > TxPctSize)
 8000f34:	6c2e      	ldr	r6, [r5, #64]	; 0x40
          if ((wEPVal & USB_EP_KIND) == 0U)
 8000f36:	4017      	ands	r7, r2
 8000f38:	4211      	tst	r1, r2
 8000f3a:	d11e      	bne.n	8000f7a <HAL_PCD_IRQHandler+0x502>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000f3c:	0002      	movs	r2, r0
 8000f3e:	3250      	adds	r2, #80	; 0x50
 8000f40:	8812      	ldrh	r2, [r2, #0]
 8000f42:	9900      	ldr	r1, [sp, #0]
 8000f44:	1882      	adds	r2, r0, r2
 8000f46:	1852      	adds	r2, r2, r1
 8000f48:	4971      	ldr	r1, [pc, #452]	; (8001110 <HAL_PCD_IRQHandler+0x698>)
 8000f4a:	1852      	adds	r2, r2, r1
 8000f4c:	8812      	ldrh	r2, [r2, #0]
 8000f4e:	0592      	lsls	r2, r2, #22
            if (ep->xfer_len > TxPctSize)
 8000f50:	0d92      	lsrs	r2, r2, #22
 8000f52:	42b2      	cmp	r2, r6
 8000f54:	d302      	bcc.n	8000f5c <HAL_PCD_IRQHandler+0x4e4>
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000f56:	9903      	ldr	r1, [sp, #12]
 8000f58:	642f      	str	r7, [r5, #64]	; 0x40
 8000f5a:	e7c8      	b.n	8000eee <HAL_PCD_IRQHandler+0x476>
              ep->xfer_buff += TxPctSize;
 8000f5c:	6be9      	ldr	r1, [r5, #60]	; 0x3c
              ep->xfer_len -= TxPctSize;
 8000f5e:	1ab6      	subs	r6, r6, r2
              ep->xfer_buff += TxPctSize;
 8000f60:	1889      	adds	r1, r1, r2
 8000f62:	63e9      	str	r1, [r5, #60]	; 0x3c
              ep->xfer_count += TxPctSize;
 8000f64:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8000f66:	642e      	str	r6, [r5, #64]	; 0x40
 8000f68:	188a      	adds	r2, r1, r2
        ep = &hpcd->IN_ep[epindex];
 8000f6a:	9901      	ldr	r1, [sp, #4]
              ep->xfer_count += TxPctSize;
 8000f6c:	646a      	str	r2, [r5, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 8000f6e:	3101      	adds	r1, #1
 8000f70:	4359      	muls	r1, r3
 8000f72:	1861      	adds	r1, r4, r1
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000f74:	f001 fb60 	bl	8002638 <USB_EPStartXfer>
 8000f78:	e58c      	b.n	8000a94 <HAL_PCD_IRQHandler+0x1c>
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8000f7a:	2240      	movs	r2, #64	; 0x40
 8000f7c:	0003      	movs	r3, r0
 8000f7e:	9f02      	ldr	r7, [sp, #8]
 8000f80:	9902      	ldr	r1, [sp, #8]
 8000f82:	4017      	ands	r7, r2
 8000f84:	3350      	adds	r3, #80	; 0x50
 8000f86:	4211      	tst	r1, r2
 8000f88:	d100      	bne.n	8000f8c <HAL_PCD_IRQHandler+0x514>
 8000f8a:	e0dc      	b.n	8001146 <HAL_PCD_IRQHandler+0x6ce>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000f8c:	4960      	ldr	r1, [pc, #384]	; (8001110 <HAL_PCD_IRQHandler+0x698>)
 8000f8e:	881a      	ldrh	r2, [r3, #0]
 8000f90:	1847      	adds	r7, r0, r1
 8000f92:	9900      	ldr	r1, [sp, #0]
 8000f94:	18ba      	adds	r2, r7, r2
 8000f96:	5a52      	ldrh	r2, [r2, r1]
 8000f98:	0592      	lsls	r2, r2, #22
    if (ep->xfer_len > TxPctSize)
 8000f9a:	0d92      	lsrs	r2, r2, #22
 8000f9c:	4694      	mov	ip, r2
      ep->xfer_len = 0U;
 8000f9e:	2200      	movs	r2, #0
    if (ep->xfer_len > TxPctSize)
 8000fa0:	45b4      	cmp	ip, r6
 8000fa2:	d201      	bcs.n	8000fa8 <HAL_PCD_IRQHandler+0x530>
      ep->xfer_len -= TxPctSize;
 8000fa4:	4662      	mov	r2, ip
 8000fa6:	1ab2      	subs	r2, r6, r2
 8000fa8:	2628      	movs	r6, #40	; 0x28
 8000faa:	9901      	ldr	r1, [sp, #4]
 8000fac:	434e      	muls	r6, r1
 8000fae:	19a6      	adds	r6, r4, r6
 8000fb0:	6432      	str	r2, [r6, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8000fb2:	2680      	movs	r6, #128	; 0x80
 8000fb4:	9902      	ldr	r1, [sp, #8]
 8000fb6:	01f6      	lsls	r6, r6, #7
 8000fb8:	4031      	ands	r1, r6
 8000fba:	000e      	movs	r6, r1
 8000fbc:	2a00      	cmp	r2, #0
 8000fbe:	d14a      	bne.n	8001056 <HAL_PCD_IRQHandler+0x5de>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000fc0:	2129      	movs	r1, #41	; 0x29
 8000fc2:	468c      	mov	ip, r1
 8000fc4:	44ac      	add	ip, r5
 8000fc6:	4661      	mov	r1, ip
 8000fc8:	7809      	ldrb	r1, [r1, #0]
 8000fca:	2900      	cmp	r1, #0
 8000fcc:	d12e      	bne.n	800102c <HAL_PCD_IRQHandler+0x5b4>
 8000fce:	881a      	ldrh	r2, [r3, #0]
 8000fd0:	9900      	ldr	r1, [sp, #0]
 8000fd2:	18ba      	adds	r2, r7, r2
 8000fd4:	1852      	adds	r2, r2, r1
 8000fd6:	8817      	ldrh	r7, [r2, #0]
 8000fd8:	494f      	ldr	r1, [pc, #316]	; (8001118 <HAL_PCD_IRQHandler+0x6a0>)
 8000fda:	05bf      	lsls	r7, r7, #22
 8000fdc:	0dbf      	lsrs	r7, r7, #22
 8000fde:	8017      	strh	r7, [r2, #0]
 8000fe0:	8817      	ldrh	r7, [r2, #0]
 8000fe2:	430f      	orrs	r7, r1
 8000fe4:	b2bf      	uxth	r7, r7
 8000fe6:	8017      	strh	r7, [r2, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000fe8:	4a4c      	ldr	r2, [pc, #304]	; (800111c <HAL_PCD_IRQHandler+0x6a4>)
 8000fea:	881b      	ldrh	r3, [r3, #0]
 8000fec:	1880      	adds	r0, r0, r2
 8000fee:	18c0      	adds	r0, r0, r3
 8000ff0:	9b00      	ldr	r3, [sp, #0]
 8000ff2:	18c0      	adds	r0, r0, r3
 8000ff4:	8803      	ldrh	r3, [r0, #0]
 8000ff6:	059b      	lsls	r3, r3, #22
 8000ff8:	0d9b      	lsrs	r3, r3, #22
 8000ffa:	8003      	strh	r3, [r0, #0]
 8000ffc:	8803      	ldrh	r3, [r0, #0]
 8000ffe:	430b      	orrs	r3, r1
 8001000:	b29b      	uxth	r3, r3
 8001002:	8003      	strh	r3, [r0, #0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001004:	0020      	movs	r0, r4
 8001006:	9903      	ldr	r1, [sp, #12]
 8001008:	f002 fb9c 	bl	8003744 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800100c:	2e00      	cmp	r6, #0
 800100e:	d100      	bne.n	8001012 <HAL_PCD_IRQHandler+0x59a>
 8001010:	e0d8      	b.n	80011c4 <HAL_PCD_IRQHandler+0x74c>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001012:	002b      	movs	r3, r5
 8001014:	3328      	adds	r3, #40	; 0x28
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	6822      	ldr	r2, [r4, #0]
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	18d2      	adds	r2, r2, r3
 800101e:	8813      	ldrh	r3, [r2, #0]
 8001020:	4939      	ldr	r1, [pc, #228]	; (8001108 <HAL_PCD_IRQHandler+0x690>)
 8001022:	400b      	ands	r3, r1
 8001024:	493e      	ldr	r1, [pc, #248]	; (8001120 <HAL_PCD_IRQHandler+0x6a8>)
 8001026:	430b      	orrs	r3, r1
 8001028:	8013      	strh	r3, [r2, #0]
 800102a:	e0cb      	b.n	80011c4 <HAL_PCD_IRQHandler+0x74c>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800102c:	000b      	movs	r3, r1
 800102e:	2901      	cmp	r1, #1
 8001030:	d1e8      	bne.n	8001004 <HAL_PCD_IRQHandler+0x58c>
 8001032:	334f      	adds	r3, #79	; 0x4f
 8001034:	469c      	mov	ip, r3
 8001036:	4484      	add	ip, r0
 8001038:	4663      	mov	r3, ip
 800103a:	881b      	ldrh	r3, [r3, #0]
 800103c:	9900      	ldr	r1, [sp, #0]
 800103e:	18fb      	adds	r3, r7, r3
 8001040:	185b      	adds	r3, r3, r1
 8001042:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001044:	4663      	mov	r3, ip
 8001046:	4935      	ldr	r1, [pc, #212]	; (800111c <HAL_PCD_IRQHandler+0x6a4>)
 8001048:	881b      	ldrh	r3, [r3, #0]
 800104a:	1840      	adds	r0, r0, r1
 800104c:	18c0      	adds	r0, r0, r3
 800104e:	9b00      	ldr	r3, [sp, #0]
 8001050:	18c0      	adds	r0, r0, r3
 8001052:	8002      	strh	r2, [r0, #0]
 8001054:	e7d6      	b.n	8001004 <HAL_PCD_IRQHandler+0x58c>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001056:	2900      	cmp	r1, #0
 8001058:	d008      	beq.n	800106c <HAL_PCD_IRQHandler+0x5f4>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800105a:	9b03      	ldr	r3, [sp, #12]
 800105c:	0099      	lsls	r1, r3, #2
 800105e:	1841      	adds	r1, r0, r1
 8001060:	880a      	ldrh	r2, [r1, #0]
 8001062:	4b29      	ldr	r3, [pc, #164]	; (8001108 <HAL_PCD_IRQHandler+0x690>)
 8001064:	4013      	ands	r3, r2
 8001066:	4a2e      	ldr	r2, [pc, #184]	; (8001120 <HAL_PCD_IRQHandler+0x6a8>)
 8001068:	4313      	orrs	r3, r2
 800106a:	800b      	strh	r3, [r1, #0]
      if (ep->xfer_fill_db == 1U)
 800106c:	2328      	movs	r3, #40	; 0x28
 800106e:	9a01      	ldr	r2, [sp, #4]
 8001070:	4353      	muls	r3, r2
 8001072:	18e3      	adds	r3, r4, r3
 8001074:	001e      	movs	r6, r3
 8001076:	364c      	adds	r6, #76	; 0x4c
 8001078:	7832      	ldrb	r2, [r6, #0]
 800107a:	2a01      	cmp	r2, #1
 800107c:	d000      	beq.n	8001080 <HAL_PCD_IRQHandler+0x608>
 800107e:	e0a1      	b.n	80011c4 <HAL_PCD_IRQHandler+0x74c>
        ep->xfer_buff += TxPctSize;
 8001080:	6bda      	ldr	r2, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8001082:	6c99      	ldr	r1, [r3, #72]	; 0x48
        ep->xfer_buff += TxPctSize;
 8001084:	4462      	add	r2, ip
 8001086:	9202      	str	r2, [sp, #8]
 8001088:	63da      	str	r2, [r3, #60]	; 0x3c
        ep->xfer_count += TxPctSize;
 800108a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800108c:	4462      	add	r2, ip
 800108e:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8001090:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001092:	4291      	cmp	r1, r2
 8001094:	d329      	bcc.n	80010ea <HAL_PCD_IRQHandler+0x672>
          ep->xfer_len_db -= len;
 8001096:	1a89      	subs	r1, r1, r2
 8001098:	6499      	str	r1, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800109a:	002b      	movs	r3, r5
 800109c:	3329      	adds	r3, #41	; 0x29
 800109e:	7819      	ldrb	r1, [r3, #0]
 80010a0:	b293      	uxth	r3, r2
 80010a2:	2900      	cmp	r1, #0
 80010a4:	d145      	bne.n	8001132 <HAL_PCD_IRQHandler+0x6ba>
 80010a6:	0001      	movs	r1, r0
 80010a8:	3150      	adds	r1, #80	; 0x50
 80010aa:	8809      	ldrh	r1, [r1, #0]
 80010ac:	9e00      	ldr	r6, [sp, #0]
 80010ae:	1879      	adds	r1, r7, r1
 80010b0:	1989      	adds	r1, r1, r6
 80010b2:	880e      	ldrh	r6, [r1, #0]
 80010b4:	05b6      	lsls	r6, r6, #22
 80010b6:	0db6      	lsrs	r6, r6, #22
 80010b8:	800e      	strh	r6, [r1, #0]
 80010ba:	2a3e      	cmp	r2, #62	; 0x3e
 80010bc:	d91f      	bls.n	80010fe <HAL_PCD_IRQHandler+0x686>
 80010be:	271f      	movs	r7, #31
 80010c0:	0956      	lsrs	r6, r2, #5
 80010c2:	403a      	ands	r2, r7
 80010c4:	4257      	negs	r7, r2
 80010c6:	417a      	adcs	r2, r7
 80010c8:	1ab6      	subs	r6, r6, r2
 80010ca:	880a      	ldrh	r2, [r1, #0]
 80010cc:	02b6      	lsls	r6, r6, #10
 80010ce:	4332      	orrs	r2, r6
 80010d0:	4e11      	ldr	r6, [pc, #68]	; (8001118 <HAL_PCD_IRQHandler+0x6a0>)
 80010d2:	4332      	orrs	r2, r6
 80010d4:	b292      	uxth	r2, r2
 80010d6:	800a      	strh	r2, [r1, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80010d8:	2228      	movs	r2, #40	; 0x28
 80010da:	9901      	ldr	r1, [sp, #4]
 80010dc:	434a      	muls	r2, r1
 80010de:	18a2      	adds	r2, r4, r2
 80010e0:	8e12      	ldrh	r2, [r2, #48]	; 0x30
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80010e2:	9902      	ldr	r1, [sp, #8]
 80010e4:	f001 fa93 	bl	800260e <USB_WritePMA>
 80010e8:	e06c      	b.n	80011c4 <HAL_PCD_IRQHandler+0x74c>
        else if (ep->xfer_len_db == 0U)
 80010ea:	2900      	cmp	r1, #0
 80010ec:	d102      	bne.n	80010f4 <HAL_PCD_IRQHandler+0x67c>
    if (ep->xfer_len > TxPctSize)
 80010ee:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 80010f0:	7031      	strb	r1, [r6, #0]
 80010f2:	e7d2      	b.n	800109a <HAL_PCD_IRQHandler+0x622>
          ep->xfer_fill_db = 0U;
 80010f4:	2200      	movs	r2, #0
 80010f6:	7032      	strb	r2, [r6, #0]
          ep->xfer_len_db = 0U;
 80010f8:	649a      	str	r2, [r3, #72]	; 0x48
 80010fa:	000a      	movs	r2, r1
 80010fc:	e7cd      	b.n	800109a <HAL_PCD_IRQHandler+0x622>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80010fe:	2a00      	cmp	r2, #0
 8001100:	d110      	bne.n	8001124 <HAL_PCD_IRQHandler+0x6ac>
 8001102:	880a      	ldrh	r2, [r1, #0]
 8001104:	e7e4      	b.n	80010d0 <HAL_PCD_IRQHandler+0x658>
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	ffff8f8f 	.word	0xffff8f8f
 800110c:	000080c0 	.word	0x000080c0
 8001110:	00000402 	.word	0x00000402
 8001114:	ffff8f0f 	.word	0xffff8f0f
 8001118:	ffff8000 	.word	0xffff8000
 800111c:	00000406 	.word	0x00000406
 8001120:	0000c080 	.word	0x0000c080
 8001124:	2701      	movs	r7, #1
 8001126:	0856      	lsrs	r6, r2, #1
 8001128:	403a      	ands	r2, r7
 800112a:	18b6      	adds	r6, r6, r2
 800112c:	02b6      	lsls	r6, r6, #10
 800112e:	880a      	ldrh	r2, [r1, #0]
 8001130:	e7cf      	b.n	80010d2 <HAL_PCD_IRQHandler+0x65a>
 8001132:	2901      	cmp	r1, #1
 8001134:	d1d0      	bne.n	80010d8 <HAL_PCD_IRQHandler+0x660>
 8001136:	0002      	movs	r2, r0
 8001138:	3250      	adds	r2, #80	; 0x50
 800113a:	8812      	ldrh	r2, [r2, #0]
 800113c:	18bf      	adds	r7, r7, r2
 800113e:	9a00      	ldr	r2, [sp, #0]
 8001140:	18bf      	adds	r7, r7, r2
 8001142:	803b      	strh	r3, [r7, #0]
 8001144:	e7c8      	b.n	80010d8 <HAL_PCD_IRQHandler+0x660>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001146:	49a9      	ldr	r1, [pc, #676]	; (80013ec <HAL_PCD_IRQHandler+0x974>)
 8001148:	881a      	ldrh	r2, [r3, #0]
 800114a:	468c      	mov	ip, r1
 800114c:	9900      	ldr	r1, [sp, #0]
 800114e:	4484      	add	ip, r0
 8001150:	4462      	add	r2, ip
 8001152:	5a52      	ldrh	r2, [r2, r1]
 8001154:	0592      	lsls	r2, r2, #22
    if (ep->xfer_len >= TxPctSize)
 8001156:	0d92      	lsrs	r2, r2, #22
 8001158:	42b2      	cmp	r2, r6
 800115a:	d800      	bhi.n	800115e <HAL_PCD_IRQHandler+0x6e6>
      ep->xfer_len -= TxPctSize;
 800115c:	1ab7      	subs	r7, r6, r2
 800115e:	2628      	movs	r6, #40	; 0x28
 8001160:	9901      	ldr	r1, [sp, #4]
 8001162:	434e      	muls	r6, r1
 8001164:	19a6      	adds	r6, r4, r6
 8001166:	6437      	str	r7, [r6, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8001168:	2680      	movs	r6, #128	; 0x80
 800116a:	9902      	ldr	r1, [sp, #8]
 800116c:	01f6      	lsls	r6, r6, #7
 800116e:	4031      	ands	r1, r6
 8001170:	000e      	movs	r6, r1
 8001172:	2f00      	cmp	r7, #0
 8001174:	d140      	bne.n	80011f8 <HAL_PCD_IRQHandler+0x780>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001176:	002a      	movs	r2, r5
 8001178:	3229      	adds	r2, #41	; 0x29
 800117a:	7812      	ldrb	r2, [r2, #0]
 800117c:	2a00      	cmp	r2, #0
 800117e:	d12b      	bne.n	80011d8 <HAL_PCD_IRQHandler+0x760>
 8001180:	499b      	ldr	r1, [pc, #620]	; (80013f0 <HAL_PCD_IRQHandler+0x978>)
 8001182:	881a      	ldrh	r2, [r3, #0]
 8001184:	1840      	adds	r0, r0, r1
 8001186:	1880      	adds	r0, r0, r2
 8001188:	9a00      	ldr	r2, [sp, #0]
 800118a:	499a      	ldr	r1, [pc, #616]	; (80013f4 <HAL_PCD_IRQHandler+0x97c>)
 800118c:	1880      	adds	r0, r0, r2
 800118e:	8802      	ldrh	r2, [r0, #0]
 8001190:	0592      	lsls	r2, r2, #22
 8001192:	0d92      	lsrs	r2, r2, #22
 8001194:	8002      	strh	r2, [r0, #0]
 8001196:	8802      	ldrh	r2, [r0, #0]
 8001198:	430a      	orrs	r2, r1
 800119a:	b292      	uxth	r2, r2
 800119c:	8002      	strh	r2, [r0, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	9a00      	ldr	r2, [sp, #0]
 80011a2:	4463      	add	r3, ip
 80011a4:	189b      	adds	r3, r3, r2
 80011a6:	881a      	ldrh	r2, [r3, #0]
 80011a8:	0592      	lsls	r2, r2, #22
 80011aa:	0d92      	lsrs	r2, r2, #22
 80011ac:	801a      	strh	r2, [r3, #0]
 80011ae:	881a      	ldrh	r2, [r3, #0]
 80011b0:	430a      	orrs	r2, r1
 80011b2:	b292      	uxth	r2, r2
 80011b4:	801a      	strh	r2, [r3, #0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80011b6:	0020      	movs	r0, r4
 80011b8:	9903      	ldr	r1, [sp, #12]
 80011ba:	f002 fac3 	bl	8003744 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80011be:	2e00      	cmp	r6, #0
 80011c0:	d100      	bne.n	80011c4 <HAL_PCD_IRQHandler+0x74c>
 80011c2:	e726      	b.n	8001012 <HAL_PCD_IRQHandler+0x59a>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80011c4:	3528      	adds	r5, #40	; 0x28
 80011c6:	782b      	ldrb	r3, [r5, #0]
 80011c8:	6821      	ldr	r1, [r4, #0]
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	18c9      	adds	r1, r1, r3
 80011ce:	880a      	ldrh	r2, [r1, #0]
 80011d0:	4b89      	ldr	r3, [pc, #548]	; (80013f8 <HAL_PCD_IRQHandler+0x980>)
 80011d2:	401a      	ands	r2, r3
 80011d4:	2330      	movs	r3, #48	; 0x30
 80011d6:	e526      	b.n	8000c26 <HAL_PCD_IRQHandler+0x1ae>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80011d8:	2a01      	cmp	r2, #1
 80011da:	d1ec      	bne.n	80011b6 <HAL_PCD_IRQHandler+0x73e>
 80011dc:	0003      	movs	r3, r0
 80011de:	4984      	ldr	r1, [pc, #528]	; (80013f0 <HAL_PCD_IRQHandler+0x978>)
 80011e0:	3350      	adds	r3, #80	; 0x50
 80011e2:	881a      	ldrh	r2, [r3, #0]
 80011e4:	1840      	adds	r0, r0, r1
 80011e6:	1880      	adds	r0, r0, r2
 80011e8:	9a00      	ldr	r2, [sp, #0]
 80011ea:	1880      	adds	r0, r0, r2
 80011ec:	8007      	strh	r7, [r0, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80011ee:	881b      	ldrh	r3, [r3, #0]
 80011f0:	4463      	add	r3, ip
 80011f2:	189b      	adds	r3, r3, r2
 80011f4:	801f      	strh	r7, [r3, #0]
 80011f6:	e7de      	b.n	80011b6 <HAL_PCD_IRQHandler+0x73e>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80011f8:	2900      	cmp	r1, #0
 80011fa:	d108      	bne.n	800120e <HAL_PCD_IRQHandler+0x796>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80011fc:	9b03      	ldr	r3, [sp, #12]
 80011fe:	0099      	lsls	r1, r3, #2
 8001200:	1841      	adds	r1, r0, r1
 8001202:	880e      	ldrh	r6, [r1, #0]
 8001204:	4b7d      	ldr	r3, [pc, #500]	; (80013fc <HAL_PCD_IRQHandler+0x984>)
 8001206:	4033      	ands	r3, r6
 8001208:	4e7d      	ldr	r6, [pc, #500]	; (8001400 <HAL_PCD_IRQHandler+0x988>)
 800120a:	4333      	orrs	r3, r6
 800120c:	800b      	strh	r3, [r1, #0]
      if (ep->xfer_fill_db == 1U)
 800120e:	2328      	movs	r3, #40	; 0x28
 8001210:	9901      	ldr	r1, [sp, #4]
 8001212:	434b      	muls	r3, r1
 8001214:	18e3      	adds	r3, r4, r3
 8001216:	001f      	movs	r7, r3
 8001218:	374c      	adds	r7, #76	; 0x4c
 800121a:	7839      	ldrb	r1, [r7, #0]
 800121c:	2901      	cmp	r1, #1
 800121e:	d1d1      	bne.n	80011c4 <HAL_PCD_IRQHandler+0x74c>
        ep->xfer_buff += TxPctSize;
 8001220:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8001222:	6c9e      	ldr	r6, [r3, #72]	; 0x48
        ep->xfer_buff += TxPctSize;
 8001224:	1889      	adds	r1, r1, r2
 8001226:	9102      	str	r1, [sp, #8]
 8001228:	63d9      	str	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxPctSize;
 800122a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800122c:	1889      	adds	r1, r1, r2
 800122e:	6459      	str	r1, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8001230:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001232:	428e      	cmp	r6, r1
 8001234:	d326      	bcc.n	8001284 <HAL_PCD_IRQHandler+0x80c>
          ep->xfer_len_db -= len;
 8001236:	1a76      	subs	r6, r6, r1
 8001238:	649e      	str	r6, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800123a:	002b      	movs	r3, r5
 800123c:	3329      	adds	r3, #41	; 0x29
 800123e:	781a      	ldrb	r2, [r3, #0]
 8001240:	b28b      	uxth	r3, r1
 8001242:	2a00      	cmp	r2, #0
 8001244:	d133      	bne.n	80012ae <HAL_PCD_IRQHandler+0x836>
 8001246:	0002      	movs	r2, r0
 8001248:	3250      	adds	r2, #80	; 0x50
 800124a:	8812      	ldrh	r2, [r2, #0]
 800124c:	9e00      	ldr	r6, [sp, #0]
 800124e:	4462      	add	r2, ip
 8001250:	1992      	adds	r2, r2, r6
 8001252:	8816      	ldrh	r6, [r2, #0]
 8001254:	05b6      	lsls	r6, r6, #22
 8001256:	0db6      	lsrs	r6, r6, #22
 8001258:	8016      	strh	r6, [r2, #0]
 800125a:	293e      	cmp	r1, #62	; 0x3e
 800125c:	d91c      	bls.n	8001298 <HAL_PCD_IRQHandler+0x820>
 800125e:	271f      	movs	r7, #31
 8001260:	094e      	lsrs	r6, r1, #5
 8001262:	4039      	ands	r1, r7
 8001264:	424f      	negs	r7, r1
 8001266:	4179      	adcs	r1, r7
 8001268:	1a76      	subs	r6, r6, r1
 800126a:	8811      	ldrh	r1, [r2, #0]
 800126c:	02b6      	lsls	r6, r6, #10
 800126e:	4331      	orrs	r1, r6
 8001270:	4e60      	ldr	r6, [pc, #384]	; (80013f4 <HAL_PCD_IRQHandler+0x97c>)
 8001272:	4331      	orrs	r1, r6
 8001274:	b289      	uxth	r1, r1
 8001276:	8011      	strh	r1, [r2, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001278:	2228      	movs	r2, #40	; 0x28
 800127a:	9901      	ldr	r1, [sp, #4]
 800127c:	434a      	muls	r2, r1
 800127e:	18a2      	adds	r2, r4, r2
 8001280:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8001282:	e72e      	b.n	80010e2 <HAL_PCD_IRQHandler+0x66a>
        else if (ep->xfer_len_db == 0U)
 8001284:	2e00      	cmp	r6, #0
 8001286:	d102      	bne.n	800128e <HAL_PCD_IRQHandler+0x816>
    if (ep->xfer_len >= TxPctSize)
 8001288:	0011      	movs	r1, r2
          ep->xfer_fill_db = 0U;
 800128a:	703e      	strb	r6, [r7, #0]
 800128c:	e7d5      	b.n	800123a <HAL_PCD_IRQHandler+0x7c2>
          ep->xfer_len_db = 0U;
 800128e:	2200      	movs	r2, #0
          ep->xfer_fill_db = 0;
 8001290:	0031      	movs	r1, r6
          ep->xfer_len_db = 0U;
 8001292:	649a      	str	r2, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 8001294:	703a      	strb	r2, [r7, #0]
 8001296:	e7d0      	b.n	800123a <HAL_PCD_IRQHandler+0x7c2>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001298:	2900      	cmp	r1, #0
 800129a:	d101      	bne.n	80012a0 <HAL_PCD_IRQHandler+0x828>
 800129c:	8811      	ldrh	r1, [r2, #0]
 800129e:	e7e7      	b.n	8001270 <HAL_PCD_IRQHandler+0x7f8>
 80012a0:	2701      	movs	r7, #1
 80012a2:	084e      	lsrs	r6, r1, #1
 80012a4:	4039      	ands	r1, r7
 80012a6:	1876      	adds	r6, r6, r1
 80012a8:	02b6      	lsls	r6, r6, #10
 80012aa:	8811      	ldrh	r1, [r2, #0]
 80012ac:	e7e1      	b.n	8001272 <HAL_PCD_IRQHandler+0x7fa>
 80012ae:	2a01      	cmp	r2, #1
 80012b0:	d1e2      	bne.n	8001278 <HAL_PCD_IRQHandler+0x800>
 80012b2:	0002      	movs	r2, r0
 80012b4:	3250      	adds	r2, #80	; 0x50
 80012b6:	8812      	ldrh	r2, [r2, #0]
 80012b8:	9900      	ldr	r1, [sp, #0]
 80012ba:	4462      	add	r2, ip
 80012bc:	1852      	adds	r2, r2, r1
 80012be:	8013      	strh	r3, [r2, #0]
 80012c0:	e7da      	b.n	8001278 <HAL_PCD_IRQHandler+0x800>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80012c2:	0543      	lsls	r3, r0, #21
 80012c4:	d50e      	bpl.n	80012e4 <HAL_PCD_IRQHandler+0x86c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80012c6:	6823      	ldr	r3, [r4, #0]
 80012c8:	494e      	ldr	r1, [pc, #312]	; (8001404 <HAL_PCD_IRQHandler+0x98c>)
 80012ca:	3306      	adds	r3, #6
 80012cc:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    HAL_PCD_ResetCallback(hpcd);
 80012ce:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80012d0:	400a      	ands	r2, r1
 80012d2:	87da      	strh	r2, [r3, #62]	; 0x3e
    HAL_PCD_ResetCallback(hpcd);
 80012d4:	f002 fa48 	bl	8003768 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80012d8:	0029      	movs	r1, r5
 80012da:	0020      	movs	r0, r4
 80012dc:	f7ff fbb9 	bl	8000a52 <HAL_PCD_SetAddress>
    return;
 80012e0:	f7ff fbde 	bl	8000aa0 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80012e4:	0443      	lsls	r3, r0, #17
 80012e6:	d507      	bpl.n	80012f8 <HAL_PCD_IRQHandler+0x880>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80012e8:	6823      	ldr	r3, [r4, #0]
 80012ea:	4947      	ldr	r1, [pc, #284]	; (8001408 <HAL_PCD_IRQHandler+0x990>)
 80012ec:	3306      	adds	r3, #6
 80012ee:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80012f0:	400a      	ands	r2, r1
 80012f2:	87da      	strh	r2, [r3, #62]	; 0x3e
    return;
 80012f4:	f7ff fbd4 	bl	8000aa0 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	0001      	movs	r1, r0
 80012fc:	019b      	lsls	r3, r3, #6
 80012fe:	4019      	ands	r1, r3
 8001300:	4218      	tst	r0, r3
 8001302:	d004      	beq.n	800130e <HAL_PCD_IRQHandler+0x896>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001304:	6823      	ldr	r3, [r4, #0]
 8001306:	4941      	ldr	r1, [pc, #260]	; (800140c <HAL_PCD_IRQHandler+0x994>)
 8001308:	3306      	adds	r3, #6
 800130a:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800130c:	e7f0      	b.n	80012f0 <HAL_PCD_IRQHandler+0x878>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800130e:	04c3      	lsls	r3, r0, #19
 8001310:	d51a      	bpl.n	8001348 <HAL_PCD_IRQHandler+0x8d0>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001312:	2004      	movs	r0, #4
 8001314:	6823      	ldr	r3, [r4, #0]
 8001316:	3302      	adds	r3, #2
 8001318:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800131a:	4382      	bics	r2, r0
 800131c:	87da      	strh	r2, [r3, #62]	; 0x3e
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800131e:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8001320:	1800      	adds	r0, r0, r0
 8001322:	4382      	bics	r2, r0
 8001324:	87da      	strh	r2, [r3, #62]	; 0x3e
    if (hpcd->LPM_State == LPM_L1)
 8001326:	23b8      	movs	r3, #184	; 0xb8
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	5ce2      	ldrb	r2, [r4, r3]
 800132c:	2a01      	cmp	r2, #1
 800132e:	d103      	bne.n	8001338 <HAL_PCD_IRQHandler+0x8c0>
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001330:	0020      	movs	r0, r4
      hpcd->LPM_State = LPM_L0;
 8001332:	54e1      	strb	r1, [r4, r3]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001334:	f000 f98e 	bl	8001654 <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 8001338:	0020      	movs	r0, r4
 800133a:	f002 fa39 	bl	80037b0 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800133e:	6823      	ldr	r3, [r4, #0]
 8001340:	4933      	ldr	r1, [pc, #204]	; (8001410 <HAL_PCD_IRQHandler+0x998>)
 8001342:	3306      	adds	r3, #6
 8001344:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8001346:	e7d3      	b.n	80012f0 <HAL_PCD_IRQHandler+0x878>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001348:	0503      	lsls	r3, r0, #20
 800134a:	d513      	bpl.n	8001374 <HAL_PCD_IRQHandler+0x8fc>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800134c:	2108      	movs	r1, #8
 800134e:	6823      	ldr	r3, [r4, #0]
 8001350:	1c9a      	adds	r2, r3, #2
 8001352:	8fd0      	ldrh	r0, [r2, #62]	; 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001354:	3306      	adds	r3, #6
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001356:	4301      	orrs	r1, r0
 8001358:	87d1      	strh	r1, [r2, #62]	; 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800135a:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 800135c:	482d      	ldr	r0, [pc, #180]	; (8001414 <HAL_PCD_IRQHandler+0x99c>)
 800135e:	4001      	ands	r1, r0
 8001360:	87d9      	strh	r1, [r3, #62]	; 0x3e
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001362:	2304      	movs	r3, #4
 8001364:	8fd1      	ldrh	r1, [r2, #62]	; 0x3e
 8001366:	430b      	orrs	r3, r1
 8001368:	87d3      	strh	r3, [r2, #62]	; 0x3e
      HAL_PCD_SuspendCallback(hpcd);
 800136a:	0020      	movs	r0, r4
 800136c:	f002 fa0e 	bl	800378c <HAL_PCD_SuspendCallback>
 8001370:	f7ff fb96 	bl	8000aa0 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001374:	2580      	movs	r5, #128	; 0x80
 8001376:	4228      	tst	r0, r5
 8001378:	d021      	beq.n	80013be <HAL_PCD_IRQHandler+0x946>
    if (hpcd->LPM_State == LPM_L0)
 800137a:	20b8      	movs	r0, #184	; 0xb8
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800137c:	6823      	ldr	r3, [r4, #0]
    if (hpcd->LPM_State == LPM_L0)
 800137e:	0080      	lsls	r0, r0, #2
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001380:	1d99      	adds	r1, r3, #6
 8001382:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
 8001384:	43aa      	bics	r2, r5
 8001386:	87ca      	strh	r2, [r1, #62]	; 0x3e
    if (hpcd->LPM_State == LPM_L0)
 8001388:	5c22      	ldrb	r2, [r4, r0]
 800138a:	2a00      	cmp	r2, #0
 800138c:	d1ed      	bne.n	800136a <HAL_PCD_IRQHandler+0x8f2>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800138e:	1c99      	adds	r1, r3, #2
 8001390:	8fcd      	ldrh	r5, [r1, #62]	; 0x3e
 8001392:	3204      	adds	r2, #4
 8001394:	432a      	orrs	r2, r5
 8001396:	87ca      	strh	r2, [r1, #62]	; 0x3e
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001398:	2208      	movs	r2, #8
 800139a:	8fcd      	ldrh	r5, [r1, #62]	; 0x3e
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800139c:	3354      	adds	r3, #84	; 0x54
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800139e:	432a      	orrs	r2, r5
 80013a0:	87ca      	strh	r2, [r1, #62]	; 0x3e
      hpcd->LPM_State = LPM_L1;
 80013a2:	2101      	movs	r1, #1
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80013a4:	223c      	movs	r2, #60	; 0x3c
      hpcd->LPM_State = LPM_L1;
 80013a6:	5421      	strb	r1, [r4, r0]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80013a8:	881b      	ldrh	r3, [r3, #0]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80013aa:	0020      	movs	r0, r4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80013ac:	089b      	lsrs	r3, r3, #2
 80013ae:	4013      	ands	r3, r2
 80013b0:	22b9      	movs	r2, #185	; 0xb9
 80013b2:	0092      	lsls	r2, r2, #2
 80013b4:	50a3      	str	r3, [r4, r2]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80013b6:	f000 f94d 	bl	8001654 <HAL_PCDEx_LPM_Callback>
 80013ba:	f7ff fb71 	bl	8000aa0 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80013be:	0583      	lsls	r3, r0, #22
 80013c0:	d50a      	bpl.n	80013d8 <HAL_PCD_IRQHandler+0x960>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80013c2:	6823      	ldr	r3, [r4, #0]
 80013c4:	4914      	ldr	r1, [pc, #80]	; (8001418 <HAL_PCD_IRQHandler+0x9a0>)
 80013c6:	3306      	adds	r3, #6
 80013c8:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    HAL_PCD_SOFCallback(hpcd);
 80013ca:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80013cc:	400a      	ands	r2, r1
 80013ce:	87da      	strh	r2, [r3, #62]	; 0x3e
    HAL_PCD_SOFCallback(hpcd);
 80013d0:	f002 f9c3 	bl	800375a <HAL_PCD_SOFCallback>
    return;
 80013d4:	f7ff fb64 	bl	8000aa0 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80013d8:	05c0      	lsls	r0, r0, #23
 80013da:	d401      	bmi.n	80013e0 <HAL_PCD_IRQHandler+0x968>
 80013dc:	f7ff fb60 	bl	8000aa0 <HAL_PCD_IRQHandler+0x28>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80013e0:	6823      	ldr	r3, [r4, #0]
 80013e2:	490e      	ldr	r1, [pc, #56]	; (800141c <HAL_PCD_IRQHandler+0x9a4>)
 80013e4:	3306      	adds	r3, #6
 80013e6:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80013e8:	e782      	b.n	80012f0 <HAL_PCD_IRQHandler+0x878>
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	00000406 	.word	0x00000406
 80013f0:	00000402 	.word	0x00000402
 80013f4:	ffff8000 	.word	0xffff8000
 80013f8:	ffff8fbf 	.word	0xffff8fbf
 80013fc:	ffff8f8f 	.word	0xffff8f8f
 8001400:	0000c080 	.word	0x0000c080
 8001404:	fffffbff 	.word	0xfffffbff
 8001408:	ffffbfff 	.word	0xffffbfff
 800140c:	ffffdfff 	.word	0xffffdfff
 8001410:	ffffefff 	.word	0xffffefff
 8001414:	fffff7ff 	.word	0xfffff7ff
 8001418:	fffffdff 	.word	0xfffffdff
 800141c:	fffffeff 	.word	0xfffffeff

08001420 <HAL_PCD_EP_Open>:
{
 8001420:	b570      	push	{r4, r5, r6, lr}
 8001422:	0005      	movs	r5, r0
 8001424:	2007      	movs	r0, #7
 8001426:	4008      	ands	r0, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8001428:	b249      	sxtb	r1, r1
 800142a:	2428      	movs	r4, #40	; 0x28
 800142c:	2900      	cmp	r1, #0
 800142e:	da19      	bge.n	8001464 <HAL_PCD_EP_Open+0x44>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001430:	1c41      	adds	r1, r0, #1
 8001432:	4361      	muls	r1, r4
    ep->is_in = 1U;
 8001434:	3c27      	subs	r4, #39	; 0x27
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001436:	1869      	adds	r1, r5, r1
    ep->is_in = 1U;
 8001438:	704c      	strb	r4, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800143a:	7008      	strb	r0, [r1, #0]
  ep->maxpacket = ep_mps;
 800143c:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 800143e:	70cb      	strb	r3, [r1, #3]
  if (ep_type == EP_TYPE_BULK)
 8001440:	2b02      	cmp	r3, #2
 8001442:	d101      	bne.n	8001448 <HAL_PCD_EP_Open+0x28>
    ep->data_pid_start = 0U;
 8001444:	2300      	movs	r3, #0
 8001446:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8001448:	24aa      	movs	r4, #170	; 0xaa
 800144a:	00a4      	lsls	r4, r4, #2
 800144c:	5d2b      	ldrb	r3, [r5, r4]
 800144e:	2002      	movs	r0, #2
 8001450:	2b01      	cmp	r3, #1
 8001452:	d006      	beq.n	8001462 <HAL_PCD_EP_Open+0x42>
 8001454:	2301      	movs	r3, #1
 8001456:	552b      	strb	r3, [r5, r4]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001458:	6828      	ldr	r0, [r5, #0]
 800145a:	f000 fee3 	bl	8002224 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800145e:	2000      	movs	r0, #0
 8001460:	5528      	strb	r0, [r5, r4]
}
 8001462:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001464:	4344      	muls	r4, r0
 8001466:	0021      	movs	r1, r4
    ep->is_in = 0U;
 8001468:	2600      	movs	r6, #0
 800146a:	192c      	adds	r4, r5, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800146c:	3169      	adds	r1, #105	; 0x69
    ep->is_in = 0U;
 800146e:	346a      	adds	r4, #106	; 0x6a
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001470:	31ff      	adds	r1, #255	; 0xff
    ep->is_in = 0U;
 8001472:	34ff      	adds	r4, #255	; 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001474:	1869      	adds	r1, r5, r1
    ep->is_in = 0U;
 8001476:	7026      	strb	r6, [r4, #0]
 8001478:	e7df      	b.n	800143a <HAL_PCD_EP_Open+0x1a>

0800147a <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 800147a:	2207      	movs	r2, #7
 800147c:	400a      	ands	r2, r1
 800147e:	b249      	sxtb	r1, r1
{
 8001480:	b570      	push	{r4, r5, r6, lr}
 8001482:	2328      	movs	r3, #40	; 0x28
 8001484:	0004      	movs	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8001486:	2900      	cmp	r1, #0
 8001488:	da13      	bge.n	80014b2 <HAL_PCD_EP_Close+0x38>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800148a:	1c51      	adds	r1, r2, #1
 800148c:	4359      	muls	r1, r3
    ep->is_in = 1U;
 800148e:	3b27      	subs	r3, #39	; 0x27
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001490:	1841      	adds	r1, r0, r1
    ep->is_in = 1U;
 8001492:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 8001494:	25aa      	movs	r5, #170	; 0xaa
  ep->num = ep_addr & EP_ADDR_MSK;
 8001496:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8001498:	00ad      	lsls	r5, r5, #2
 800149a:	5d63      	ldrb	r3, [r4, r5]
 800149c:	2002      	movs	r0, #2
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d006      	beq.n	80014b0 <HAL_PCD_EP_Close+0x36>
 80014a2:	2301      	movs	r3, #1
 80014a4:	5563      	strb	r3, [r4, r5]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80014a6:	6820      	ldr	r0, [r4, #0]
 80014a8:	f000 ffca 	bl	8002440 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80014ac:	2000      	movs	r0, #0
 80014ae:	5560      	strb	r0, [r4, r5]
}
 80014b0:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014b2:	4353      	muls	r3, r2
 80014b4:	0019      	movs	r1, r3
 80014b6:	3169      	adds	r1, #105	; 0x69
 80014b8:	31ff      	adds	r1, #255	; 0xff
    ep->is_in = 0U;
 80014ba:	18c3      	adds	r3, r0, r3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014bc:	1841      	adds	r1, r0, r1
    ep->is_in = 0U;
 80014be:	2000      	movs	r0, #0
 80014c0:	336a      	adds	r3, #106	; 0x6a
 80014c2:	33ff      	adds	r3, #255	; 0xff
 80014c4:	7018      	strb	r0, [r3, #0]
 80014c6:	e7e5      	b.n	8001494 <HAL_PCD_EP_Close+0x1a>

080014c8 <HAL_PCD_EP_Receive>:
{
 80014c8:	b570      	push	{r4, r5, r6, lr}
 80014ca:	2407      	movs	r4, #7
}
 80014cc:	4021      	ands	r1, r4
  ep->xfer_buff = pBuf;
 80014ce:	3421      	adds	r4, #33	; 0x21
 80014d0:	434c      	muls	r4, r1
 80014d2:	1905      	adds	r5, r0, r4
 80014d4:	002e      	movs	r6, r5
 80014d6:	367d      	adds	r6, #125	; 0x7d
 80014d8:	36ff      	adds	r6, #255	; 0xff
 80014da:	6032      	str	r2, [r6, #0]
  ep->xfer_len = len;
 80014dc:	002a      	movs	r2, r5
 80014de:	3281      	adds	r2, #129	; 0x81
 80014e0:	32ff      	adds	r2, #255	; 0xff
 80014e2:	6013      	str	r3, [r2, #0]
  ep->xfer_count = 0U;
 80014e4:	002b      	movs	r3, r5
 80014e6:	2600      	movs	r6, #0
 80014e8:	3385      	adds	r3, #133	; 0x85
 80014ea:	33ff      	adds	r3, #255	; 0xff
  ep->num = ep_addr & EP_ADDR_MSK;
 80014ec:	3569      	adds	r5, #105	; 0x69
  ep->xfer_count = 0U;
 80014ee:	601e      	str	r6, [r3, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014f0:	35ff      	adds	r5, #255	; 0xff
  ep->is_in = 0U;
 80014f2:	3b1b      	subs	r3, #27
 80014f4:	701e      	strb	r6, [r3, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014f6:	7029      	strb	r1, [r5, #0]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014f8:	0021      	movs	r1, r4
 80014fa:	3169      	adds	r1, #105	; 0x69
 80014fc:	31ff      	adds	r1, #255	; 0xff
 80014fe:	1841      	adds	r1, r0, r1
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001500:	6800      	ldr	r0, [r0, #0]
 8001502:	f001 f899 	bl	8002638 <USB_EPStartXfer>
}
 8001506:	0030      	movs	r0, r6
 8001508:	bd70      	pop	{r4, r5, r6, pc}

0800150a <HAL_PCD_EP_Transmit>:
{
 800150a:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 800150c:	2628      	movs	r6, #40	; 0x28
}
 800150e:	2407      	movs	r4, #7
 8001510:	4021      	ands	r1, r4
  ep->xfer_buff = pBuf;
 8001512:	0034      	movs	r4, r6
 8001514:	434c      	muls	r4, r1
 8001516:	1904      	adds	r4, r0, r4
  ep->xfer_fill_db = 1U;
 8001518:	0025      	movs	r5, r4
  ep->xfer_buff = pBuf;
 800151a:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_fill_db = 1U;
 800151c:	2201      	movs	r2, #1
 800151e:	354c      	adds	r5, #76	; 0x4c
  ep->xfer_len = len;
 8001520:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 8001522:	702a      	strb	r2, [r5, #0]
  ep->xfer_count = 0U;
 8001524:	2500      	movs	r5, #0
  ep->xfer_len_db = len;
 8001526:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->is_in = 1U;
 8001528:	0023      	movs	r3, r4
  ep->xfer_count = 0U;
 800152a:	6465      	str	r5, [r4, #68]	; 0x44
  ep->is_in = 1U;
 800152c:	3329      	adds	r3, #41	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 800152e:	19a4      	adds	r4, r4, r6
  ep->is_in = 1U;
 8001530:	701a      	strb	r2, [r3, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001532:	7021      	strb	r1, [r4, #0]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001534:	1889      	adds	r1, r1, r2
 8001536:	4371      	muls	r1, r6
 8001538:	1841      	adds	r1, r0, r1
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800153a:	6800      	ldr	r0, [r0, #0]
 800153c:	f001 f87c 	bl	8002638 <USB_EPStartXfer>
}
 8001540:	0028      	movs	r0, r5
 8001542:	bd70      	pop	{r4, r5, r6, pc}

08001544 <HAL_PCD_EP_SetStall>:
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001544:	2207      	movs	r2, #7
 8001546:	6843      	ldr	r3, [r0, #4]
{
 8001548:	b570      	push	{r4, r5, r6, lr}
 800154a:	400a      	ands	r2, r1
 800154c:	0004      	movs	r4, r0
    return HAL_ERROR;
 800154e:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001550:	429a      	cmp	r2, r3
 8001552:	d817      	bhi.n	8001584 <HAL_PCD_EP_SetStall+0x40>
  if ((0x80U & ep_addr) == 0x80U)
 8001554:	b248      	sxtb	r0, r1
 8001556:	2328      	movs	r3, #40	; 0x28
 8001558:	2800      	cmp	r0, #0
 800155a:	da14      	bge.n	8001586 <HAL_PCD_EP_SetStall+0x42>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800155c:	1c51      	adds	r1, r2, #1
 800155e:	4359      	muls	r1, r3
    ep->is_in = 1U;
 8001560:	3b27      	subs	r3, #39	; 0x27
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001562:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8001564:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 1U;
 8001566:	2301      	movs	r3, #1
  __HAL_LOCK(hpcd);
 8001568:	25aa      	movs	r5, #170	; 0xaa
  ep->is_stall = 1U;
 800156a:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800156c:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800156e:	00ad      	lsls	r5, r5, #2
 8001570:	5d62      	ldrb	r2, [r4, r5]
 8001572:	2002      	movs	r0, #2
 8001574:	429a      	cmp	r2, r3
 8001576:	d005      	beq.n	8001584 <HAL_PCD_EP_SetStall+0x40>
 8001578:	5563      	strb	r3, [r4, r5]
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800157a:	6820      	ldr	r0, [r4, #0]
 800157c:	f000 ffda 	bl	8002534 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 8001580:	2000      	movs	r0, #0
 8001582:	5560      	strb	r0, [r4, r5]
}
 8001584:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8001586:	434b      	muls	r3, r1
 8001588:	0019      	movs	r1, r3
    ep->is_in = 0U;
 800158a:	2000      	movs	r0, #0
 800158c:	18e3      	adds	r3, r4, r3
    ep = &hpcd->OUT_ep[ep_addr];
 800158e:	3169      	adds	r1, #105	; 0x69
    ep->is_in = 0U;
 8001590:	336a      	adds	r3, #106	; 0x6a
    ep = &hpcd->OUT_ep[ep_addr];
 8001592:	31ff      	adds	r1, #255	; 0xff
    ep->is_in = 0U;
 8001594:	33ff      	adds	r3, #255	; 0xff
    ep = &hpcd->OUT_ep[ep_addr];
 8001596:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8001598:	7018      	strb	r0, [r3, #0]
 800159a:	e7e4      	b.n	8001566 <HAL_PCD_EP_SetStall+0x22>

0800159c <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800159c:	230f      	movs	r3, #15
 800159e:	6842      	ldr	r2, [r0, #4]
{
 80015a0:	b570      	push	{r4, r5, r6, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80015a2:	400b      	ands	r3, r1
{
 80015a4:	0004      	movs	r4, r0
    return HAL_ERROR;
 80015a6:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d819      	bhi.n	80015e0 <HAL_PCD_EP_ClrStall+0x44>
  if ((0x80U & ep_addr) == 0x80U)
 80015ac:	2207      	movs	r2, #7
 80015ae:	400a      	ands	r2, r1
 80015b0:	b249      	sxtb	r1, r1
 80015b2:	2328      	movs	r3, #40	; 0x28
 80015b4:	2900      	cmp	r1, #0
 80015b6:	da14      	bge.n	80015e2 <HAL_PCD_EP_ClrStall+0x46>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015b8:	1811      	adds	r1, r2, r0
 80015ba:	4359      	muls	r1, r3
 80015bc:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 80015be:	7048      	strb	r0, [r1, #1]
  ep->is_stall = 0U;
 80015c0:	2500      	movs	r5, #0
  __HAL_LOCK(hpcd);
 80015c2:	26aa      	movs	r6, #170	; 0xaa
  ep->is_stall = 0U;
 80015c4:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015c6:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80015c8:	00b6      	lsls	r6, r6, #2
 80015ca:	5da3      	ldrb	r3, [r4, r6]
 80015cc:	2002      	movs	r0, #2
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d006      	beq.n	80015e0 <HAL_PCD_EP_ClrStall+0x44>
 80015d2:	2301      	movs	r3, #1
 80015d4:	55a3      	strb	r3, [r4, r6]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80015d6:	6820      	ldr	r0, [r4, #0]
 80015d8:	f000 ffcc 	bl	8002574 <USB_EPClearStall>
  return HAL_OK;
 80015dc:	0028      	movs	r0, r5
  __HAL_UNLOCK(hpcd);
 80015de:	55a5      	strb	r5, [r4, r6]
}
 80015e0:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015e2:	4353      	muls	r3, r2
 80015e4:	0019      	movs	r1, r3
    ep->is_in = 0U;
 80015e6:	2000      	movs	r0, #0
 80015e8:	18e3      	adds	r3, r4, r3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015ea:	3169      	adds	r1, #105	; 0x69
    ep->is_in = 0U;
 80015ec:	336a      	adds	r3, #106	; 0x6a
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015ee:	31ff      	adds	r1, #255	; 0xff
    ep->is_in = 0U;
 80015f0:	33ff      	adds	r3, #255	; 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015f2:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 80015f4:	7018      	strb	r0, [r3, #0]
 80015f6:	e7e3      	b.n	80015c0 <HAL_PCD_EP_ClrStall+0x24>

080015f8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80015f8:	b510      	push	{r4, lr}
 80015fa:	000c      	movs	r4, r1
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80015fc:	0621      	lsls	r1, r4, #24
 80015fe:	d50c      	bpl.n	800161a <HAL_PCDEx_PMAConfig+0x22>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001600:	2107      	movs	r1, #7
 8001602:	4021      	ands	r1, r4
 8001604:	2428      	movs	r4, #40	; 0x28
 8001606:	3101      	adds	r1, #1
 8001608:	4361      	muls	r1, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800160a:	1840      	adds	r0, r0, r1
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800160c:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 800160e:	2a00      	cmp	r2, #0
 8001610:	d108      	bne.n	8001624 <HAL_PCDEx_PMAConfig+0x2c>
    ep->doublebuffer = 0U;
 8001612:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 8001614:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8001616:	2000      	movs	r0, #0
 8001618:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 800161a:	2128      	movs	r1, #40	; 0x28
 800161c:	4361      	muls	r1, r4
 800161e:	3169      	adds	r1, #105	; 0x69
 8001620:	31ff      	adds	r1, #255	; 0xff
 8001622:	e7f2      	b.n	800160a <HAL_PCDEx_PMAConfig+0x12>
    ep->doublebuffer = 1U;
 8001624:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001626:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 8001628:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800162a:	e7f4      	b.n	8001616 <HAL_PCDEx_PMAConfig+0x1e>

0800162c <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 800162c:	6803      	ldr	r3, [r0, #0]
{
 800162e:	0002      	movs	r2, r0
  hpcd->lpm_active = 1U;
 8001630:	20ba      	movs	r0, #186	; 0xba
 8001632:	2101      	movs	r1, #1
{
 8001634:	b510      	push	{r4, lr}
  hpcd->lpm_active = 1U;
 8001636:	0080      	lsls	r0, r0, #2
  hpcd->LPM_State = LPM_L0;
 8001638:	24b8      	movs	r4, #184	; 0xb8
  hpcd->lpm_active = 1U;
 800163a:	5011      	str	r1, [r2, r0]
  hpcd->LPM_State = LPM_L0;
 800163c:	2000      	movs	r0, #0
 800163e:	00a4      	lsls	r4, r4, #2
 8001640:	5510      	strb	r0, [r2, r4]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001642:	3354      	adds	r3, #84	; 0x54
 8001644:	881a      	ldrh	r2, [r3, #0]
 8001646:	4311      	orrs	r1, r2
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001648:	2202      	movs	r2, #2
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800164a:	8019      	strh	r1, [r3, #0]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800164c:	8819      	ldrh	r1, [r3, #0]
 800164e:	430a      	orrs	r2, r1
 8001650:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
}
 8001652:	bd10      	pop	{r4, pc}

08001654 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8001654:	4770      	bx	lr
	...

08001658 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800165a:	0004      	movs	r4, r0
 800165c:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800165e:	2800      	cmp	r0, #0
 8001660:	d04e      	beq.n	8001700 <HAL_RCC_OscConfig+0xa8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001662:	6803      	ldr	r3, [r0, #0]
 8001664:	07db      	lsls	r3, r3, #31
 8001666:	d433      	bmi.n	80016d0 <HAL_RCC_OscConfig+0x78>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001668:	6823      	ldr	r3, [r4, #0]
 800166a:	079b      	lsls	r3, r3, #30
 800166c:	d500      	bpl.n	8001670 <HAL_RCC_OscConfig+0x18>
 800166e:	e08a      	b.n	8001786 <HAL_RCC_OscConfig+0x12e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001670:	6823      	ldr	r3, [r4, #0]
 8001672:	071b      	lsls	r3, r3, #28
 8001674:	d500      	bpl.n	8001678 <HAL_RCC_OscConfig+0x20>
 8001676:	e0ca      	b.n	800180e <HAL_RCC_OscConfig+0x1b6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001678:	6823      	ldr	r3, [r4, #0]
 800167a:	075b      	lsls	r3, r3, #29
 800167c:	d500      	bpl.n	8001680 <HAL_RCC_OscConfig+0x28>
 800167e:	e0ed      	b.n	800185c <HAL_RCC_OscConfig+0x204>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001680:	6823      	ldr	r3, [r4, #0]
 8001682:	06db      	lsls	r3, r3, #27
 8001684:	d51a      	bpl.n	80016bc <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001686:	6962      	ldr	r2, [r4, #20]
 8001688:	2304      	movs	r3, #4
 800168a:	4dbb      	ldr	r5, [pc, #748]	; (8001978 <HAL_RCC_OscConfig+0x320>)
 800168c:	2a01      	cmp	r2, #1
 800168e:	d000      	beq.n	8001692 <HAL_RCC_OscConfig+0x3a>
 8001690:	e156      	b.n	8001940 <HAL_RCC_OscConfig+0x2e8>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001692:	6b69      	ldr	r1, [r5, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001694:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001696:	430b      	orrs	r3, r1
 8001698:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 800169a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800169c:	431a      	orrs	r2, r3
 800169e:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80016a0:	f7ff f828 	bl	80006f4 <HAL_GetTick>
 80016a4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80016a6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80016a8:	423b      	tst	r3, r7
 80016aa:	d100      	bne.n	80016ae <HAL_RCC_OscConfig+0x56>
 80016ac:	e141      	b.n	8001932 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80016ae:	21f8      	movs	r1, #248	; 0xf8
 80016b0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80016b2:	69a3      	ldr	r3, [r4, #24]
 80016b4:	438a      	bics	r2, r1
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	4313      	orrs	r3, r2
 80016ba:	636b      	str	r3, [r5, #52]	; 0x34
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016bc:	6823      	ldr	r3, [r4, #0]
 80016be:	069b      	lsls	r3, r3, #26
 80016c0:	d500      	bpl.n	80016c4 <HAL_RCC_OscConfig+0x6c>
 80016c2:	e165      	b.n	8001990 <HAL_RCC_OscConfig+0x338>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d000      	beq.n	80016cc <HAL_RCC_OscConfig+0x74>
 80016ca:	e1a4      	b.n	8001a16 <HAL_RCC_OscConfig+0x3be>
        }
      }
    }
  }

  return HAL_OK;
 80016cc:	2000      	movs	r0, #0
 80016ce:	e02f      	b.n	8001730 <HAL_RCC_OscConfig+0xd8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016d0:	220c      	movs	r2, #12
 80016d2:	4da9      	ldr	r5, [pc, #676]	; (8001978 <HAL_RCC_OscConfig+0x320>)
 80016d4:	686b      	ldr	r3, [r5, #4]
 80016d6:	4013      	ands	r3, r2
 80016d8:	2b04      	cmp	r3, #4
 80016da:	d00b      	beq.n	80016f4 <HAL_RCC_OscConfig+0x9c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016dc:	686b      	ldr	r3, [r5, #4]
 80016de:	4013      	ands	r3, r2
 80016e0:	2b08      	cmp	r3, #8
 80016e2:	d10f      	bne.n	8001704 <HAL_RCC_OscConfig+0xac>
 80016e4:	22c0      	movs	r2, #192	; 0xc0
 80016e6:	686b      	ldr	r3, [r5, #4]
 80016e8:	0252      	lsls	r2, r2, #9
 80016ea:	4013      	ands	r3, r2
 80016ec:	2280      	movs	r2, #128	; 0x80
 80016ee:	0252      	lsls	r2, r2, #9
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d107      	bne.n	8001704 <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f4:	682b      	ldr	r3, [r5, #0]
 80016f6:	039b      	lsls	r3, r3, #14
 80016f8:	d5b6      	bpl.n	8001668 <HAL_RCC_OscConfig+0x10>
 80016fa:	6863      	ldr	r3, [r4, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1b3      	bne.n	8001668 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 8001700:	2001      	movs	r0, #1
 8001702:	e015      	b.n	8001730 <HAL_RCC_OscConfig+0xd8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001704:	6863      	ldr	r3, [r4, #4]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d114      	bne.n	8001734 <HAL_RCC_OscConfig+0xdc>
 800170a:	2380      	movs	r3, #128	; 0x80
 800170c:	682a      	ldr	r2, [r5, #0]
 800170e:	025b      	lsls	r3, r3, #9
 8001710:	4313      	orrs	r3, r2
 8001712:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001714:	f7fe ffee 	bl	80006f4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001718:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 800171a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171c:	02bf      	lsls	r7, r7, #10
 800171e:	682b      	ldr	r3, [r5, #0]
 8001720:	423b      	tst	r3, r7
 8001722:	d1a1      	bne.n	8001668 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001724:	f7fe ffe6 	bl	80006f4 <HAL_GetTick>
 8001728:	1b80      	subs	r0, r0, r6
 800172a:	2864      	cmp	r0, #100	; 0x64
 800172c:	d9f7      	bls.n	800171e <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 800172e:	2003      	movs	r0, #3
}
 8001730:	b005      	add	sp, #20
 8001732:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001734:	2b00      	cmp	r3, #0
 8001736:	d116      	bne.n	8001766 <HAL_RCC_OscConfig+0x10e>
 8001738:	682b      	ldr	r3, [r5, #0]
 800173a:	4a90      	ldr	r2, [pc, #576]	; (800197c <HAL_RCC_OscConfig+0x324>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800173c:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800173e:	4013      	ands	r3, r2
 8001740:	602b      	str	r3, [r5, #0]
 8001742:	682b      	ldr	r3, [r5, #0]
 8001744:	4a8e      	ldr	r2, [pc, #568]	; (8001980 <HAL_RCC_OscConfig+0x328>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001746:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001748:	4013      	ands	r3, r2
 800174a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800174c:	f7fe ffd2 	bl	80006f4 <HAL_GetTick>
 8001750:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001752:	682b      	ldr	r3, [r5, #0]
 8001754:	423b      	tst	r3, r7
 8001756:	d100      	bne.n	800175a <HAL_RCC_OscConfig+0x102>
 8001758:	e786      	b.n	8001668 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800175a:	f7fe ffcb 	bl	80006f4 <HAL_GetTick>
 800175e:	1b80      	subs	r0, r0, r6
 8001760:	2864      	cmp	r0, #100	; 0x64
 8001762:	d9f6      	bls.n	8001752 <HAL_RCC_OscConfig+0xfa>
 8001764:	e7e3      	b.n	800172e <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001766:	2b05      	cmp	r3, #5
 8001768:	d105      	bne.n	8001776 <HAL_RCC_OscConfig+0x11e>
 800176a:	2380      	movs	r3, #128	; 0x80
 800176c:	682a      	ldr	r2, [r5, #0]
 800176e:	02db      	lsls	r3, r3, #11
 8001770:	4313      	orrs	r3, r2
 8001772:	602b      	str	r3, [r5, #0]
 8001774:	e7c9      	b.n	800170a <HAL_RCC_OscConfig+0xb2>
 8001776:	682b      	ldr	r3, [r5, #0]
 8001778:	4a80      	ldr	r2, [pc, #512]	; (800197c <HAL_RCC_OscConfig+0x324>)
 800177a:	4013      	ands	r3, r2
 800177c:	602b      	str	r3, [r5, #0]
 800177e:	682b      	ldr	r3, [r5, #0]
 8001780:	4a7f      	ldr	r2, [pc, #508]	; (8001980 <HAL_RCC_OscConfig+0x328>)
 8001782:	4013      	ands	r3, r2
 8001784:	e7c5      	b.n	8001712 <HAL_RCC_OscConfig+0xba>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001786:	220c      	movs	r2, #12
 8001788:	4d7b      	ldr	r5, [pc, #492]	; (8001978 <HAL_RCC_OscConfig+0x320>)
 800178a:	686b      	ldr	r3, [r5, #4]
 800178c:	4213      	tst	r3, r2
 800178e:	d00b      	beq.n	80017a8 <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001790:	686b      	ldr	r3, [r5, #4]
 8001792:	4013      	ands	r3, r2
 8001794:	2b08      	cmp	r3, #8
 8001796:	d115      	bne.n	80017c4 <HAL_RCC_OscConfig+0x16c>
 8001798:	22c0      	movs	r2, #192	; 0xc0
 800179a:	686b      	ldr	r3, [r5, #4]
 800179c:	0252      	lsls	r2, r2, #9
 800179e:	4013      	ands	r3, r2
 80017a0:	2280      	movs	r2, #128	; 0x80
 80017a2:	0212      	lsls	r2, r2, #8
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d10d      	bne.n	80017c4 <HAL_RCC_OscConfig+0x16c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017a8:	682b      	ldr	r3, [r5, #0]
 80017aa:	079b      	lsls	r3, r3, #30
 80017ac:	d502      	bpl.n	80017b4 <HAL_RCC_OscConfig+0x15c>
 80017ae:	68e3      	ldr	r3, [r4, #12]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d1a5      	bne.n	8001700 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b4:	21f8      	movs	r1, #248	; 0xf8
 80017b6:	682a      	ldr	r2, [r5, #0]
 80017b8:	6923      	ldr	r3, [r4, #16]
 80017ba:	438a      	bics	r2, r1
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	4313      	orrs	r3, r2
 80017c0:	602b      	str	r3, [r5, #0]
 80017c2:	e755      	b.n	8001670 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017c4:	68e2      	ldr	r2, [r4, #12]
 80017c6:	2301      	movs	r3, #1
 80017c8:	2a00      	cmp	r2, #0
 80017ca:	d00f      	beq.n	80017ec <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_ENABLE();
 80017cc:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ce:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 80017d0:	4313      	orrs	r3, r2
 80017d2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80017d4:	f7fe ff8e 	bl	80006f4 <HAL_GetTick>
 80017d8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017da:	682b      	ldr	r3, [r5, #0]
 80017dc:	423b      	tst	r3, r7
 80017de:	d1e9      	bne.n	80017b4 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017e0:	f7fe ff88 	bl	80006f4 <HAL_GetTick>
 80017e4:	1b80      	subs	r0, r0, r6
 80017e6:	2802      	cmp	r0, #2
 80017e8:	d9f7      	bls.n	80017da <HAL_RCC_OscConfig+0x182>
 80017ea:	e7a0      	b.n	800172e <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_HSI_DISABLE();
 80017ec:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ee:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 80017f0:	439a      	bics	r2, r3
 80017f2:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 80017f4:	f7fe ff7e 	bl	80006f4 <HAL_GetTick>
 80017f8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017fa:	682b      	ldr	r3, [r5, #0]
 80017fc:	423b      	tst	r3, r7
 80017fe:	d100      	bne.n	8001802 <HAL_RCC_OscConfig+0x1aa>
 8001800:	e736      	b.n	8001670 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001802:	f7fe ff77 	bl	80006f4 <HAL_GetTick>
 8001806:	1b80      	subs	r0, r0, r6
 8001808:	2802      	cmp	r0, #2
 800180a:	d9f6      	bls.n	80017fa <HAL_RCC_OscConfig+0x1a2>
 800180c:	e78f      	b.n	800172e <HAL_RCC_OscConfig+0xd6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800180e:	69e2      	ldr	r2, [r4, #28]
 8001810:	2301      	movs	r3, #1
 8001812:	4d59      	ldr	r5, [pc, #356]	; (8001978 <HAL_RCC_OscConfig+0x320>)
 8001814:	2a00      	cmp	r2, #0
 8001816:	d010      	beq.n	800183a <HAL_RCC_OscConfig+0x1e2>
      __HAL_RCC_LSI_ENABLE();
 8001818:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800181a:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 800181c:	4313      	orrs	r3, r2
 800181e:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001820:	f7fe ff68 	bl	80006f4 <HAL_GetTick>
 8001824:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001826:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001828:	423b      	tst	r3, r7
 800182a:	d000      	beq.n	800182e <HAL_RCC_OscConfig+0x1d6>
 800182c:	e724      	b.n	8001678 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800182e:	f7fe ff61 	bl	80006f4 <HAL_GetTick>
 8001832:	1b80      	subs	r0, r0, r6
 8001834:	2802      	cmp	r0, #2
 8001836:	d9f6      	bls.n	8001826 <HAL_RCC_OscConfig+0x1ce>
 8001838:	e779      	b.n	800172e <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_LSI_DISABLE();
 800183a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800183c:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 800183e:	439a      	bics	r2, r3
 8001840:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001842:	f7fe ff57 	bl	80006f4 <HAL_GetTick>
 8001846:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001848:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800184a:	423b      	tst	r3, r7
 800184c:	d100      	bne.n	8001850 <HAL_RCC_OscConfig+0x1f8>
 800184e:	e713      	b.n	8001678 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001850:	f7fe ff50 	bl	80006f4 <HAL_GetTick>
 8001854:	1b80      	subs	r0, r0, r6
 8001856:	2802      	cmp	r0, #2
 8001858:	d9f6      	bls.n	8001848 <HAL_RCC_OscConfig+0x1f0>
 800185a:	e768      	b.n	800172e <HAL_RCC_OscConfig+0xd6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800185c:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800185e:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001860:	4d45      	ldr	r5, [pc, #276]	; (8001978 <HAL_RCC_OscConfig+0x320>)
 8001862:	0552      	lsls	r2, r2, #21
 8001864:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001866:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001868:	4213      	tst	r3, r2
 800186a:	d108      	bne.n	800187e <HAL_RCC_OscConfig+0x226>
      __HAL_RCC_PWR_CLK_ENABLE();
 800186c:	69eb      	ldr	r3, [r5, #28]
 800186e:	4313      	orrs	r3, r2
 8001870:	61eb      	str	r3, [r5, #28]
 8001872:	69eb      	ldr	r3, [r5, #28]
 8001874:	4013      	ands	r3, r2
 8001876:	9303      	str	r3, [sp, #12]
 8001878:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800187a:	2301      	movs	r3, #1
 800187c:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800187e:	2780      	movs	r7, #128	; 0x80
 8001880:	4e40      	ldr	r6, [pc, #256]	; (8001984 <HAL_RCC_OscConfig+0x32c>)
 8001882:	007f      	lsls	r7, r7, #1
 8001884:	6833      	ldr	r3, [r6, #0]
 8001886:	423b      	tst	r3, r7
 8001888:	d015      	beq.n	80018b6 <HAL_RCC_OscConfig+0x25e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800188a:	68a3      	ldr	r3, [r4, #8]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d122      	bne.n	80018d6 <HAL_RCC_OscConfig+0x27e>
 8001890:	6a2a      	ldr	r2, [r5, #32]
 8001892:	4313      	orrs	r3, r2
 8001894:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001896:	f7fe ff2d 	bl	80006f4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800189a:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 800189c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800189e:	6a2b      	ldr	r3, [r5, #32]
 80018a0:	423b      	tst	r3, r7
 80018a2:	d03f      	beq.n	8001924 <HAL_RCC_OscConfig+0x2cc>
    if(pwrclkchanged == SET)
 80018a4:	9b00      	ldr	r3, [sp, #0]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d000      	beq.n	80018ac <HAL_RCC_OscConfig+0x254>
 80018aa:	e6e9      	b.n	8001680 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ac:	69eb      	ldr	r3, [r5, #28]
 80018ae:	4a36      	ldr	r2, [pc, #216]	; (8001988 <HAL_RCC_OscConfig+0x330>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	61eb      	str	r3, [r5, #28]
 80018b4:	e6e4      	b.n	8001680 <HAL_RCC_OscConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018b6:	6833      	ldr	r3, [r6, #0]
 80018b8:	433b      	orrs	r3, r7
 80018ba:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80018bc:	f7fe ff1a 	bl	80006f4 <HAL_GetTick>
 80018c0:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c2:	6833      	ldr	r3, [r6, #0]
 80018c4:	423b      	tst	r3, r7
 80018c6:	d1e0      	bne.n	800188a <HAL_RCC_OscConfig+0x232>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c8:	f7fe ff14 	bl	80006f4 <HAL_GetTick>
 80018cc:	9b01      	ldr	r3, [sp, #4]
 80018ce:	1ac0      	subs	r0, r0, r3
 80018d0:	2864      	cmp	r0, #100	; 0x64
 80018d2:	d9f6      	bls.n	80018c2 <HAL_RCC_OscConfig+0x26a>
 80018d4:	e72b      	b.n	800172e <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d6:	2201      	movs	r2, #1
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d114      	bne.n	8001906 <HAL_RCC_OscConfig+0x2ae>
 80018dc:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018de:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e0:	4393      	bics	r3, r2
 80018e2:	622b      	str	r3, [r5, #32]
 80018e4:	6a2b      	ldr	r3, [r5, #32]
 80018e6:	3203      	adds	r2, #3
 80018e8:	4393      	bics	r3, r2
 80018ea:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80018ec:	f7fe ff02 	bl	80006f4 <HAL_GetTick>
 80018f0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f2:	6a2b      	ldr	r3, [r5, #32]
 80018f4:	423b      	tst	r3, r7
 80018f6:	d0d5      	beq.n	80018a4 <HAL_RCC_OscConfig+0x24c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f8:	f7fe fefc 	bl	80006f4 <HAL_GetTick>
 80018fc:	4b23      	ldr	r3, [pc, #140]	; (800198c <HAL_RCC_OscConfig+0x334>)
 80018fe:	1b80      	subs	r0, r0, r6
 8001900:	4298      	cmp	r0, r3
 8001902:	d9f6      	bls.n	80018f2 <HAL_RCC_OscConfig+0x29a>
 8001904:	e713      	b.n	800172e <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001906:	2b05      	cmp	r3, #5
 8001908:	d105      	bne.n	8001916 <HAL_RCC_OscConfig+0x2be>
 800190a:	6a29      	ldr	r1, [r5, #32]
 800190c:	3b01      	subs	r3, #1
 800190e:	430b      	orrs	r3, r1
 8001910:	622b      	str	r3, [r5, #32]
 8001912:	6a2b      	ldr	r3, [r5, #32]
 8001914:	e7bd      	b.n	8001892 <HAL_RCC_OscConfig+0x23a>
 8001916:	6a2b      	ldr	r3, [r5, #32]
 8001918:	4393      	bics	r3, r2
 800191a:	2204      	movs	r2, #4
 800191c:	622b      	str	r3, [r5, #32]
 800191e:	6a2b      	ldr	r3, [r5, #32]
 8001920:	4393      	bics	r3, r2
 8001922:	e7b7      	b.n	8001894 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001924:	f7fe fee6 	bl	80006f4 <HAL_GetTick>
 8001928:	4b18      	ldr	r3, [pc, #96]	; (800198c <HAL_RCC_OscConfig+0x334>)
 800192a:	1b80      	subs	r0, r0, r6
 800192c:	4298      	cmp	r0, r3
 800192e:	d9b6      	bls.n	800189e <HAL_RCC_OscConfig+0x246>
 8001930:	e6fd      	b.n	800172e <HAL_RCC_OscConfig+0xd6>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001932:	f7fe fedf 	bl	80006f4 <HAL_GetTick>
 8001936:	1b80      	subs	r0, r0, r6
 8001938:	2802      	cmp	r0, #2
 800193a:	d800      	bhi.n	800193e <HAL_RCC_OscConfig+0x2e6>
 800193c:	e6b3      	b.n	80016a6 <HAL_RCC_OscConfig+0x4e>
 800193e:	e6f6      	b.n	800172e <HAL_RCC_OscConfig+0xd6>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001940:	3205      	adds	r2, #5
 8001942:	d103      	bne.n	800194c <HAL_RCC_OscConfig+0x2f4>
      __HAL_RCC_HSI14ADC_ENABLE();
 8001944:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001946:	439a      	bics	r2, r3
 8001948:	636a      	str	r2, [r5, #52]	; 0x34
 800194a:	e6b0      	b.n	80016ae <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_HSI14ADC_DISABLE();
 800194c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800194e:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001950:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8001952:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8001954:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001956:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001958:	4393      	bics	r3, r2
 800195a:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 800195c:	f7fe feca 	bl	80006f4 <HAL_GetTick>
 8001960:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001962:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001964:	423b      	tst	r3, r7
 8001966:	d100      	bne.n	800196a <HAL_RCC_OscConfig+0x312>
 8001968:	e6a8      	b.n	80016bc <HAL_RCC_OscConfig+0x64>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800196a:	f7fe fec3 	bl	80006f4 <HAL_GetTick>
 800196e:	1b80      	subs	r0, r0, r6
 8001970:	2802      	cmp	r0, #2
 8001972:	d9f6      	bls.n	8001962 <HAL_RCC_OscConfig+0x30a>
 8001974:	e6db      	b.n	800172e <HAL_RCC_OscConfig+0xd6>
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	40021000 	.word	0x40021000
 800197c:	fffeffff 	.word	0xfffeffff
 8001980:	fffbffff 	.word	0xfffbffff
 8001984:	40007000 	.word	0x40007000
 8001988:	efffffff 	.word	0xefffffff
 800198c:	00001388 	.word	0x00001388
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001990:	220c      	movs	r2, #12
 8001992:	4d55      	ldr	r5, [pc, #340]	; (8001ae8 <HAL_RCC_OscConfig+0x490>)
 8001994:	686b      	ldr	r3, [r5, #4]
 8001996:	4013      	ands	r3, r2
 8001998:	4293      	cmp	r3, r2
 800199a:	d009      	beq.n	80019b0 <HAL_RCC_OscConfig+0x358>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800199c:	686b      	ldr	r3, [r5, #4]
 800199e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80019a0:	2b08      	cmp	r3, #8
 80019a2:	d10e      	bne.n	80019c2 <HAL_RCC_OscConfig+0x36a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80019a4:	22c0      	movs	r2, #192	; 0xc0
 80019a6:	686b      	ldr	r3, [r5, #4]
 80019a8:	0252      	lsls	r2, r2, #9
 80019aa:	4013      	ands	r3, r2
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d108      	bne.n	80019c2 <HAL_RCC_OscConfig+0x36a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80019b0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80019b2:	039b      	lsls	r3, r3, #14
 80019b4:	d400      	bmi.n	80019b8 <HAL_RCC_OscConfig+0x360>
 80019b6:	e685      	b.n	80016c4 <HAL_RCC_OscConfig+0x6c>
 80019b8:	6a23      	ldr	r3, [r4, #32]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d000      	beq.n	80019c0 <HAL_RCC_OscConfig+0x368>
 80019be:	e69f      	b.n	8001700 <HAL_RCC_OscConfig+0xa8>
 80019c0:	e680      	b.n	80016c4 <HAL_RCC_OscConfig+0x6c>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019c2:	6a23      	ldr	r3, [r4, #32]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d013      	beq.n	80019f0 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_HSI48_ENABLE();
 80019c8:	2380      	movs	r3, #128	; 0x80
 80019ca:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80019cc:	025b      	lsls	r3, r3, #9
 80019ce:	4313      	orrs	r3, r2
 80019d0:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 80019d2:	f7fe fe8f 	bl	80006f4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80019d6:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 80019d8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80019da:	02bf      	lsls	r7, r7, #10
 80019dc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80019de:	423b      	tst	r3, r7
 80019e0:	d000      	beq.n	80019e4 <HAL_RCC_OscConfig+0x38c>
 80019e2:	e66f      	b.n	80016c4 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019e4:	f7fe fe86 	bl	80006f4 <HAL_GetTick>
 80019e8:	1b80      	subs	r0, r0, r6
 80019ea:	2802      	cmp	r0, #2
 80019ec:	d9f6      	bls.n	80019dc <HAL_RCC_OscConfig+0x384>
 80019ee:	e69e      	b.n	800172e <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_HSI48_DISABLE();
 80019f0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80019f2:	4a3e      	ldr	r2, [pc, #248]	; (8001aec <HAL_RCC_OscConfig+0x494>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80019f4:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 80019f6:	4013      	ands	r3, r2
 80019f8:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 80019fa:	f7fe fe7b 	bl	80006f4 <HAL_GetTick>
 80019fe:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001a00:	02bf      	lsls	r7, r7, #10
 8001a02:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001a04:	423b      	tst	r3, r7
 8001a06:	d100      	bne.n	8001a0a <HAL_RCC_OscConfig+0x3b2>
 8001a08:	e65c      	b.n	80016c4 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a0a:	f7fe fe73 	bl	80006f4 <HAL_GetTick>
 8001a0e:	1b80      	subs	r0, r0, r6
 8001a10:	2802      	cmp	r0, #2
 8001a12:	d9f6      	bls.n	8001a02 <HAL_RCC_OscConfig+0x3aa>
 8001a14:	e68b      	b.n	800172e <HAL_RCC_OscConfig+0xd6>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a16:	210c      	movs	r1, #12
 8001a18:	4d33      	ldr	r5, [pc, #204]	; (8001ae8 <HAL_RCC_OscConfig+0x490>)
 8001a1a:	686a      	ldr	r2, [r5, #4]
 8001a1c:	400a      	ands	r2, r1
 8001a1e:	2a08      	cmp	r2, #8
 8001a20:	d047      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x45a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a22:	4a33      	ldr	r2, [pc, #204]	; (8001af0 <HAL_RCC_OscConfig+0x498>)
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d132      	bne.n	8001a8e <HAL_RCC_OscConfig+0x436>
        __HAL_RCC_PLL_DISABLE();
 8001a28:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a2a:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001a30:	f7fe fe60 	bl	80006f4 <HAL_GetTick>
 8001a34:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a36:	04bf      	lsls	r7, r7, #18
 8001a38:	682b      	ldr	r3, [r5, #0]
 8001a3a:	423b      	tst	r3, r7
 8001a3c:	d121      	bne.n	8001a82 <HAL_RCC_OscConfig+0x42a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a3e:	220f      	movs	r2, #15
 8001a40:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a42:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a44:	4393      	bics	r3, r2
 8001a46:	6b22      	ldr	r2, [r4, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a48:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001a4e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001a50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a52:	686a      	ldr	r2, [r5, #4]
 8001a54:	430b      	orrs	r3, r1
 8001a56:	4927      	ldr	r1, [pc, #156]	; (8001af4 <HAL_RCC_OscConfig+0x49c>)
 8001a58:	400a      	ands	r2, r1
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001a5e:	2380      	movs	r3, #128	; 0x80
 8001a60:	682a      	ldr	r2, [r5, #0]
 8001a62:	045b      	lsls	r3, r3, #17
 8001a64:	4313      	orrs	r3, r2
 8001a66:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001a68:	f7fe fe44 	bl	80006f4 <HAL_GetTick>
 8001a6c:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a6e:	682b      	ldr	r3, [r5, #0]
 8001a70:	4233      	tst	r3, r6
 8001a72:	d000      	beq.n	8001a76 <HAL_RCC_OscConfig+0x41e>
 8001a74:	e62a      	b.n	80016cc <HAL_RCC_OscConfig+0x74>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a76:	f7fe fe3d 	bl	80006f4 <HAL_GetTick>
 8001a7a:	1b00      	subs	r0, r0, r4
 8001a7c:	2802      	cmp	r0, #2
 8001a7e:	d9f6      	bls.n	8001a6e <HAL_RCC_OscConfig+0x416>
 8001a80:	e655      	b.n	800172e <HAL_RCC_OscConfig+0xd6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a82:	f7fe fe37 	bl	80006f4 <HAL_GetTick>
 8001a86:	1b80      	subs	r0, r0, r6
 8001a88:	2802      	cmp	r0, #2
 8001a8a:	d9d5      	bls.n	8001a38 <HAL_RCC_OscConfig+0x3e0>
 8001a8c:	e64f      	b.n	800172e <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_PLL_DISABLE();
 8001a8e:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a90:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001a92:	4013      	ands	r3, r2
 8001a94:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001a96:	f7fe fe2d 	bl	80006f4 <HAL_GetTick>
 8001a9a:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a9c:	04b6      	lsls	r6, r6, #18
 8001a9e:	682b      	ldr	r3, [r5, #0]
 8001aa0:	4233      	tst	r3, r6
 8001aa2:	d100      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x44e>
 8001aa4:	e612      	b.n	80016cc <HAL_RCC_OscConfig+0x74>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa6:	f7fe fe25 	bl	80006f4 <HAL_GetTick>
 8001aaa:	1b00      	subs	r0, r0, r4
 8001aac:	2802      	cmp	r0, #2
 8001aae:	d9f6      	bls.n	8001a9e <HAL_RCC_OscConfig+0x446>
 8001ab0:	e63d      	b.n	800172e <HAL_RCC_OscConfig+0xd6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d100      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x460>
 8001ab6:	e623      	b.n	8001700 <HAL_RCC_OscConfig+0xa8>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab8:	21c0      	movs	r1, #192	; 0xc0
        pll_config  = RCC->CFGR;
 8001aba:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001abc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001abe:	0249      	lsls	r1, r1, #9
        pll_config2 = RCC->CFGR2;
 8001ac0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac2:	4019      	ands	r1, r3
 8001ac4:	4281      	cmp	r1, r0
 8001ac6:	d000      	beq.n	8001aca <HAL_RCC_OscConfig+0x472>
 8001ac8:	e61a      	b.n	8001700 <HAL_RCC_OscConfig+0xa8>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001aca:	210f      	movs	r1, #15
 8001acc:	400a      	ands	r2, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ace:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001ad0:	428a      	cmp	r2, r1
 8001ad2:	d000      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x47e>
 8001ad4:	e614      	b.n	8001700 <HAL_RCC_OscConfig+0xa8>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001ad6:	22f0      	movs	r2, #240	; 0xf0
 8001ad8:	0392      	lsls	r2, r2, #14
 8001ada:	4013      	ands	r3, r2
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001adc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d100      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x48c>
 8001ae2:	e5f3      	b.n	80016cc <HAL_RCC_OscConfig+0x74>
 8001ae4:	e60c      	b.n	8001700 <HAL_RCC_OscConfig+0xa8>
 8001ae6:	46c0      	nop			; (mov r8, r8)
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	fffeffff 	.word	0xfffeffff
 8001af0:	feffffff 	.word	0xfeffffff
 8001af4:	ffc27fff 	.word	0xffc27fff

08001af8 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001af8:	200c      	movs	r0, #12
{
 8001afa:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8001afc:	4d13      	ldr	r5, [pc, #76]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x54>)
 8001afe:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001b00:	4018      	ands	r0, r3
 8001b02:	2808      	cmp	r0, #8
 8001b04:	d008      	beq.n	8001b18 <HAL_RCC_GetSysClockFreq+0x20>
 8001b06:	380c      	subs	r0, #12
 8001b08:	1e43      	subs	r3, r0, #1
 8001b0a:	4198      	sbcs	r0, r3
 8001b0c:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x58>)
 8001b0e:	4240      	negs	r0, r0
 8001b10:	4018      	ands	r0, r3
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001b14:	18c0      	adds	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001b16:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001b18:	200f      	movs	r0, #15
 8001b1a:	490f      	ldr	r1, [pc, #60]	; (8001b58 <HAL_RCC_GetSysClockFreq+0x60>)
 8001b1c:	0c9a      	lsrs	r2, r3, #18
 8001b1e:	4002      	ands	r2, r0
 8001b20:	5c8c      	ldrb	r4, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001b22:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001b24:	490d      	ldr	r1, [pc, #52]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x64>)
 8001b26:	4002      	ands	r2, r0
 8001b28:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001b2a:	22c0      	movs	r2, #192	; 0xc0
 8001b2c:	2080      	movs	r0, #128	; 0x80
 8001b2e:	0252      	lsls	r2, r2, #9
 8001b30:	4013      	ands	r3, r2
 8001b32:	0240      	lsls	r0, r0, #9
 8001b34:	4283      	cmp	r3, r0
 8001b36:	d101      	bne.n	8001b3c <HAL_RCC_GetSysClockFreq+0x44>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b38:	4809      	ldr	r0, [pc, #36]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x68>)
 8001b3a:	e002      	b.n	8001b42 <HAL_RCC_GetSysClockFreq+0x4a>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d1fb      	bne.n	8001b38 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b40:	4804      	ldr	r0, [pc, #16]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x5c>)
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b42:	f7fe fafd 	bl	8000140 <__udivsi3>
 8001b46:	4360      	muls	r0, r4
 8001b48:	e7e5      	b.n	8001b16 <HAL_RCC_GetSysClockFreq+0x1e>
 8001b4a:	46c0      	nop			; (mov r8, r8)
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	fd9da600 	.word	0xfd9da600
 8001b54:	02dc6c00 	.word	0x02dc6c00
 8001b58:	080039fa 	.word	0x080039fa
 8001b5c:	08003a0a 	.word	0x08003a0a
 8001b60:	007a1200 	.word	0x007a1200

08001b64 <HAL_RCC_ClockConfig>:
{
 8001b64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001b66:	0004      	movs	r4, r0
 8001b68:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 8001b6a:	2800      	cmp	r0, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8001b6e:	2001      	movs	r0, #1
}
 8001b70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b72:	2201      	movs	r2, #1
 8001b74:	4d3a      	ldr	r5, [pc, #232]	; (8001c60 <HAL_RCC_ClockConfig+0xfc>)
 8001b76:	682b      	ldr	r3, [r5, #0]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	428b      	cmp	r3, r1
 8001b7c:	d31c      	bcc.n	8001bb8 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b7e:	6822      	ldr	r2, [r4, #0]
 8001b80:	0793      	lsls	r3, r2, #30
 8001b82:	d422      	bmi.n	8001bca <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b84:	07d2      	lsls	r2, r2, #31
 8001b86:	d42f      	bmi.n	8001be8 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b88:	2301      	movs	r3, #1
 8001b8a:	682a      	ldr	r2, [r5, #0]
 8001b8c:	401a      	ands	r2, r3
 8001b8e:	42ba      	cmp	r2, r7
 8001b90:	d857      	bhi.n	8001c42 <HAL_RCC_ClockConfig+0xde>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b92:	6823      	ldr	r3, [r4, #0]
 8001b94:	4d33      	ldr	r5, [pc, #204]	; (8001c64 <HAL_RCC_ClockConfig+0x100>)
 8001b96:	075b      	lsls	r3, r3, #29
 8001b98:	d45a      	bmi.n	8001c50 <HAL_RCC_ClockConfig+0xec>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001b9a:	f7ff ffad 	bl	8001af8 <HAL_RCC_GetSysClockFreq>
 8001b9e:	686b      	ldr	r3, [r5, #4]
 8001ba0:	4a31      	ldr	r2, [pc, #196]	; (8001c68 <HAL_RCC_ClockConfig+0x104>)
 8001ba2:	061b      	lsls	r3, r3, #24
 8001ba4:	0f1b      	lsrs	r3, r3, #28
 8001ba6:	5cd3      	ldrb	r3, [r2, r3]
 8001ba8:	4930      	ldr	r1, [pc, #192]	; (8001c6c <HAL_RCC_ClockConfig+0x108>)
 8001baa:	40d8      	lsrs	r0, r3
 8001bac:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001bae:	2000      	movs	r0, #0
 8001bb0:	f7fe fd60 	bl	8000674 <HAL_InitTick>
  return HAL_OK;
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	e7db      	b.n	8001b70 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb8:	682b      	ldr	r3, [r5, #0]
 8001bba:	4393      	bics	r3, r2
 8001bbc:	430b      	orrs	r3, r1
 8001bbe:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc0:	682b      	ldr	r3, [r5, #0]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	428b      	cmp	r3, r1
 8001bc6:	d1d2      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xa>
 8001bc8:	e7d9      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bca:	4926      	ldr	r1, [pc, #152]	; (8001c64 <HAL_RCC_ClockConfig+0x100>)
 8001bcc:	0753      	lsls	r3, r2, #29
 8001bce:	d504      	bpl.n	8001bda <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001bd0:	23e0      	movs	r3, #224	; 0xe0
 8001bd2:	6848      	ldr	r0, [r1, #4]
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	4303      	orrs	r3, r0
 8001bd8:	604b      	str	r3, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bda:	20f0      	movs	r0, #240	; 0xf0
 8001bdc:	684b      	ldr	r3, [r1, #4]
 8001bde:	4383      	bics	r3, r0
 8001be0:	68a0      	ldr	r0, [r4, #8]
 8001be2:	4303      	orrs	r3, r0
 8001be4:	604b      	str	r3, [r1, #4]
 8001be6:	e7cd      	b.n	8001b84 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be8:	6862      	ldr	r2, [r4, #4]
 8001bea:	4e1e      	ldr	r6, [pc, #120]	; (8001c64 <HAL_RCC_ClockConfig+0x100>)
 8001bec:	2a01      	cmp	r2, #1
 8001bee:	d103      	bne.n	8001bf8 <HAL_RCC_ClockConfig+0x94>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf0:	6833      	ldr	r3, [r6, #0]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001bf2:	039b      	lsls	r3, r3, #14
 8001bf4:	d405      	bmi.n	8001c02 <HAL_RCC_ClockConfig+0x9e>
 8001bf6:	e7ba      	b.n	8001b6e <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bf8:	2a02      	cmp	r2, #2
 8001bfa:	d11a      	bne.n	8001c32 <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bfc:	6833      	ldr	r3, [r6, #0]
 8001bfe:	019b      	lsls	r3, r3, #6
 8001c00:	d5b5      	bpl.n	8001b6e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c02:	2103      	movs	r1, #3
 8001c04:	6873      	ldr	r3, [r6, #4]
 8001c06:	438b      	bics	r3, r1
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001c0c:	f7fe fd72 	bl	80006f4 <HAL_GetTick>
 8001c10:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c12:	230c      	movs	r3, #12
 8001c14:	6872      	ldr	r2, [r6, #4]
 8001c16:	401a      	ands	r2, r3
 8001c18:	6863      	ldr	r3, [r4, #4]
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d0b3      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c20:	f7fe fd68 	bl	80006f4 <HAL_GetTick>
 8001c24:	9b01      	ldr	r3, [sp, #4]
 8001c26:	1ac0      	subs	r0, r0, r3
 8001c28:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <HAL_RCC_ClockConfig+0x10c>)
 8001c2a:	4298      	cmp	r0, r3
 8001c2c:	d9f1      	bls.n	8001c12 <HAL_RCC_ClockConfig+0xae>
        return HAL_TIMEOUT;
 8001c2e:	2003      	movs	r0, #3
 8001c30:	e79e      	b.n	8001b70 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001c32:	2a03      	cmp	r2, #3
 8001c34:	d101      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xd6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001c36:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8001c38:	e7db      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x8e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c3a:	6833      	ldr	r3, [r6, #0]
 8001c3c:	079b      	lsls	r3, r3, #30
 8001c3e:	d4e0      	bmi.n	8001c02 <HAL_RCC_ClockConfig+0x9e>
 8001c40:	e795      	b.n	8001b6e <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c42:	682a      	ldr	r2, [r5, #0]
 8001c44:	439a      	bics	r2, r3
 8001c46:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c48:	682a      	ldr	r2, [r5, #0]
 8001c4a:	421a      	tst	r2, r3
 8001c4c:	d0a1      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x2e>
 8001c4e:	e78e      	b.n	8001b6e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c50:	686b      	ldr	r3, [r5, #4]
 8001c52:	4a08      	ldr	r2, [pc, #32]	; (8001c74 <HAL_RCC_ClockConfig+0x110>)
 8001c54:	4013      	ands	r3, r2
 8001c56:	68e2      	ldr	r2, [r4, #12]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	606b      	str	r3, [r5, #4]
 8001c5c:	e79d      	b.n	8001b9a <HAL_RCC_ClockConfig+0x36>
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	40022000 	.word	0x40022000
 8001c64:	40021000 	.word	0x40021000
 8001c68:	080039e2 	.word	0x080039e2
 8001c6c:	20000084 	.word	0x20000084
 8001c70:	00001388 	.word	0x00001388
 8001c74:	fffff8ff 	.word	0xfffff8ff

08001c78 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001c78:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8001c7a:	4a05      	ldr	r2, [pc, #20]	; (8001c90 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	4905      	ldr	r1, [pc, #20]	; (8001c94 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001c80:	055b      	lsls	r3, r3, #21
 8001c82:	0f5b      	lsrs	r3, r3, #29
 8001c84:	5ccb      	ldrb	r3, [r1, r3]
 8001c86:	6810      	ldr	r0, [r2, #0]
 8001c88:	40d8      	lsrs	r0, r3
}    
 8001c8a:	4770      	bx	lr
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	20000084 	.word	0x20000084
 8001c94:	080039f2 	.word	0x080039f2

08001c98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c98:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c9a:	6803      	ldr	r3, [r0, #0]
{
 8001c9c:	0005      	movs	r5, r0
 8001c9e:	b085      	sub	sp, #20
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ca0:	03db      	lsls	r3, r3, #15
 8001ca2:	d52b      	bpl.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x64>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ca4:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001ca6:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ca8:	4c41      	ldr	r4, [pc, #260]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001caa:	0552      	lsls	r2, r2, #21
 8001cac:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001cae:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cb0:	4213      	tst	r3, r2
 8001cb2:	d108      	bne.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cb4:	69e3      	ldr	r3, [r4, #28]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61e3      	str	r3, [r4, #28]
 8001cba:	69e3      	ldr	r3, [r4, #28]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	9303      	str	r3, [sp, #12]
 8001cc0:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc6:	2780      	movs	r7, #128	; 0x80
 8001cc8:	4e3a      	ldr	r6, [pc, #232]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8001cca:	007f      	lsls	r7, r7, #1
 8001ccc:	6833      	ldr	r3, [r6, #0]
 8001cce:	423b      	tst	r3, r7
 8001cd0:	d03b      	beq.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001cd2:	6a21      	ldr	r1, [r4, #32]
 8001cd4:	22c0      	movs	r2, #192	; 0xc0
 8001cd6:	0008      	movs	r0, r1
 8001cd8:	0092      	lsls	r2, r2, #2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cda:	686b      	ldr	r3, [r5, #4]
 8001cdc:	4e36      	ldr	r6, [pc, #216]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001cde:	4010      	ands	r0, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ce0:	4211      	tst	r1, r2
 8001ce2:	d144      	bne.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0xd6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ce4:	6a23      	ldr	r3, [r4, #32]
 8001ce6:	686a      	ldr	r2, [r5, #4]
 8001ce8:	4033      	ands	r3, r6
 8001cea:	4313      	orrs	r3, r2
 8001cec:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001cee:	9b00      	ldr	r3, [sp, #0]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d103      	bne.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cf4:	69e3      	ldr	r3, [r4, #28]
 8001cf6:	4a31      	ldr	r2, [pc, #196]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001cfc:	682b      	ldr	r3, [r5, #0]
 8001cfe:	07da      	lsls	r2, r3, #31
 8001d00:	d506      	bpl.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d02:	2003      	movs	r0, #3
 8001d04:	492a      	ldr	r1, [pc, #168]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001d06:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8001d08:	4382      	bics	r2, r0
 8001d0a:	68a8      	ldr	r0, [r5, #8]
 8001d0c:	4302      	orrs	r2, r0
 8001d0e:	630a      	str	r2, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d10:	069a      	lsls	r2, r3, #26
 8001d12:	d506      	bpl.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d14:	2010      	movs	r0, #16
 8001d16:	4926      	ldr	r1, [pc, #152]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001d18:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8001d1a:	4382      	bics	r2, r0
 8001d1c:	68e8      	ldr	r0, [r5, #12]
 8001d1e:	4302      	orrs	r2, r0
 8001d20:	630a      	str	r2, [r1, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001d22:	039a      	lsls	r2, r3, #14
 8001d24:	d506      	bpl.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d26:	2080      	movs	r0, #128	; 0x80
 8001d28:	4921      	ldr	r1, [pc, #132]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001d2a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8001d2c:	4382      	bics	r2, r0
 8001d2e:	6968      	ldr	r0, [r5, #20]
 8001d30:	4302      	orrs	r2, r0
 8001d32:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001d34:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001d36:	055b      	lsls	r3, r3, #21
 8001d38:	d517      	bpl.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001d3a:	2140      	movs	r1, #64	; 0x40
 8001d3c:	4a1c      	ldr	r2, [pc, #112]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001d3e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001d40:	438b      	bics	r3, r1
 8001d42:	6929      	ldr	r1, [r5, #16]
 8001d44:	430b      	orrs	r3, r1
 8001d46:	6313      	str	r3, [r2, #48]	; 0x30
 8001d48:	e00f      	b.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d4a:	6833      	ldr	r3, [r6, #0]
 8001d4c:	433b      	orrs	r3, r7
 8001d4e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001d50:	f7fe fcd0 	bl	80006f4 <HAL_GetTick>
 8001d54:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d56:	6833      	ldr	r3, [r6, #0]
 8001d58:	423b      	tst	r3, r7
 8001d5a:	d1ba      	bne.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d5c:	f7fe fcca 	bl	80006f4 <HAL_GetTick>
 8001d60:	9b01      	ldr	r3, [sp, #4]
 8001d62:	1ac0      	subs	r0, r0, r3
 8001d64:	2864      	cmp	r0, #100	; 0x64
 8001d66:	d9f6      	bls.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 8001d68:	2003      	movs	r0, #3
}
 8001d6a:	b005      	add	sp, #20
 8001d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d6e:	4013      	ands	r3, r2
 8001d70:	4283      	cmp	r3, r0
 8001d72:	d0b7      	beq.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d74:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d76:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d78:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d7a:	0019      	movs	r1, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d7c:	0252      	lsls	r2, r2, #9
 8001d7e:	4302      	orrs	r2, r0
 8001d80:	6222      	str	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d82:	6a22      	ldr	r2, [r4, #32]
 8001d84:	480e      	ldr	r0, [pc, #56]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d86:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d88:	4002      	ands	r2, r0
 8001d8a:	6222      	str	r2, [r4, #32]
      RCC->BDCR = temp_reg;
 8001d8c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d8e:	07db      	lsls	r3, r3, #31
 8001d90:	d5a8      	bpl.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x4c>
        tickstart = HAL_GetTick();
 8001d92:	f7fe fcaf 	bl	80006f4 <HAL_GetTick>
 8001d96:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d98:	2202      	movs	r2, #2
 8001d9a:	6a23      	ldr	r3, [r4, #32]
 8001d9c:	4213      	tst	r3, r2
 8001d9e:	d1a1      	bne.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x4c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da0:	f7fe fca8 	bl	80006f4 <HAL_GetTick>
 8001da4:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8001da6:	1bc0      	subs	r0, r0, r7
 8001da8:	4298      	cmp	r0, r3
 8001daa:	d9f5      	bls.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8001dac:	e7dc      	b.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001dae:	46c0      	nop			; (mov r8, r8)
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40007000 	.word	0x40007000
 8001db8:	fffffcff 	.word	0xfffffcff
 8001dbc:	efffffff 	.word	0xefffffff
 8001dc0:	fffeffff 	.word	0xfffeffff
 8001dc4:	00001388 	.word	0x00001388

08001dc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001dc8:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001dca:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001dd4:	6801      	ldr	r1, [r0, #0]
 8001dd6:	4d12      	ldr	r5, [pc, #72]	; (8001e20 <UART_EndRxTransfer+0x58>)
 8001dd8:	680b      	ldr	r3, [r1, #0]
 8001dda:	402b      	ands	r3, r5
 8001ddc:	600b      	str	r3, [r1, #0]
 8001dde:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001de2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001de6:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dea:	6801      	ldr	r1, [r0, #0]
 8001dec:	688b      	ldr	r3, [r1, #8]
 8001dee:	4393      	bics	r3, r2
 8001df0:	608b      	str	r3, [r1, #8]
 8001df2:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001df6:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d10a      	bne.n	8001e12 <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001dfc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e00:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e04:	2410      	movs	r4, #16
 8001e06:	6802      	ldr	r2, [r0, #0]
 8001e08:	6813      	ldr	r3, [r2, #0]
 8001e0a:	43a3      	bics	r3, r4
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001e12:	2220      	movs	r2, #32
 8001e14:	1d03      	adds	r3, r0, #4
 8001e16:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001e1c:	6683      	str	r3, [r0, #104]	; 0x68
}
 8001e1e:	bd30      	pop	{r4, r5, pc}
 8001e20:	fffffedf 	.word	0xfffffedf

08001e24 <UART_SetConfig>:
{
 8001e24:	b570      	push	{r4, r5, r6, lr}
 8001e26:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e28:	6925      	ldr	r5, [r4, #16]
 8001e2a:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e2c:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e2e:	432a      	orrs	r2, r5
 8001e30:	6965      	ldr	r5, [r4, #20]
 8001e32:	69c3      	ldr	r3, [r0, #28]
 8001e34:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e36:	6808      	ldr	r0, [r1, #0]
 8001e38:	4d3d      	ldr	r5, [pc, #244]	; (8001f30 <UART_SetConfig+0x10c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e3a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e3c:	4028      	ands	r0, r5
 8001e3e:	4302      	orrs	r2, r0
 8001e40:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e42:	684a      	ldr	r2, [r1, #4]
 8001e44:	483b      	ldr	r0, [pc, #236]	; (8001f34 <UART_SetConfig+0x110>)
  tmpreg |= huart->Init.OneBitSampling;
 8001e46:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e48:	4002      	ands	r2, r0
 8001e4a:	68e0      	ldr	r0, [r4, #12]
 8001e4c:	4302      	orrs	r2, r0
 8001e4e:	604a      	str	r2, [r1, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001e50:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001e52:	6888      	ldr	r0, [r1, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8001e54:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001e56:	4d38      	ldr	r5, [pc, #224]	; (8001f38 <UART_SetConfig+0x114>)
 8001e58:	4028      	ands	r0, r5
 8001e5a:	4302      	orrs	r2, r0
 8001e5c:	608a      	str	r2, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e5e:	4a37      	ldr	r2, [pc, #220]	; (8001f3c <UART_SetConfig+0x118>)
 8001e60:	4291      	cmp	r1, r2
 8001e62:	d115      	bne.n	8001e90 <UART_SetConfig+0x6c>
 8001e64:	2103      	movs	r1, #3
 8001e66:	4a36      	ldr	r2, [pc, #216]	; (8001f40 <UART_SetConfig+0x11c>)
 8001e68:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e6a:	400a      	ands	r2, r1
 8001e6c:	2180      	movs	r1, #128	; 0x80
 8001e6e:	3a01      	subs	r2, #1
 8001e70:	0209      	lsls	r1, r1, #8
 8001e72:	2a02      	cmp	r2, #2
 8001e74:	d850      	bhi.n	8001f18 <UART_SetConfig+0xf4>
 8001e76:	4833      	ldr	r0, [pc, #204]	; (8001f44 <UART_SetConfig+0x120>)
 8001e78:	5c80      	ldrb	r0, [r0, r2]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e7a:	428b      	cmp	r3, r1
 8001e7c:	d014      	beq.n	8001ea8 <UART_SetConfig+0x84>
    switch (clocksource)
 8001e7e:	2808      	cmp	r0, #8
 8001e80:	d848      	bhi.n	8001f14 <UART_SetConfig+0xf0>
 8001e82:	f7fe f949 	bl	8000118 <__gnu_thumb1_case_uqi>
 8001e86:	470c      	.short	0x470c
 8001e88:	47424745 	.word	0x47424745
 8001e8c:	4747      	.short	0x4747
 8001e8e:	33          	.byte	0x33
 8001e8f:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e90:	4a2d      	ldr	r2, [pc, #180]	; (8001f48 <UART_SetConfig+0x124>)
 8001e92:	4291      	cmp	r1, r2
 8001e94:	d13e      	bne.n	8001f14 <UART_SetConfig+0xf0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e96:	2280      	movs	r2, #128	; 0x80
 8001e98:	0212      	lsls	r2, r2, #8
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d03e      	beq.n	8001f1c <UART_SetConfig+0xf8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001e9e:	f7ff feeb 	bl	8001c78 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8001ea2:	2800      	cmp	r0, #0
 8001ea4:	d03e      	beq.n	8001f24 <UART_SetConfig+0x100>
 8001ea6:	e023      	b.n	8001ef0 <UART_SetConfig+0xcc>
    switch (clocksource)
 8001ea8:	2808      	cmp	r0, #8
 8001eaa:	d833      	bhi.n	8001f14 <UART_SetConfig+0xf0>
 8001eac:	f7fe f934 	bl	8000118 <__gnu_thumb1_case_uqi>
 8001eb0:	32083236 	.word	0x32083236
 8001eb4:	32323205 	.word	0x32323205
 8001eb8:	09          	.byte	0x09
 8001eb9:	00          	.byte	0x00
        pclk = HAL_RCC_GetSysClockFreq();
 8001eba:	f7ff fe1d 	bl	8001af8 <HAL_RCC_GetSysClockFreq>
 8001ebe:	e02f      	b.n	8001f20 <UART_SetConfig+0xfc>
    switch (clocksource)
 8001ec0:	4b22      	ldr	r3, [pc, #136]	; (8001f4c <UART_SetConfig+0x128>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001ec2:	6861      	ldr	r1, [r4, #4]
 8001ec4:	0058      	lsls	r0, r3, #1
 8001ec6:	084b      	lsrs	r3, r1, #1
 8001ec8:	18c0      	adds	r0, r0, r3
 8001eca:	f7fe f939 	bl	8000140 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001ece:	0002      	movs	r2, r0
 8001ed0:	4b1f      	ldr	r3, [pc, #124]	; (8001f50 <UART_SetConfig+0x12c>)
 8001ed2:	3a10      	subs	r2, #16
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d81d      	bhi.n	8001f14 <UART_SetConfig+0xf0>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001ed8:	230f      	movs	r3, #15
 8001eda:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001edc:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001ede:	439a      	bics	r2, r3
 8001ee0:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001ee2:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8001ee4:	6822      	ldr	r2, [r4, #0]
 8001ee6:	4303      	orrs	r3, r0
 8001ee8:	60d3      	str	r3, [r2, #12]
 8001eea:	e01b      	b.n	8001f24 <UART_SetConfig+0x100>
    switch (clocksource)
 8001eec:	2080      	movs	r0, #128	; 0x80
 8001eee:	0200      	lsls	r0, r0, #8
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001ef0:	6861      	ldr	r1, [r4, #4]
 8001ef2:	084b      	lsrs	r3, r1, #1
 8001ef4:	1818      	adds	r0, r3, r0
 8001ef6:	f7fe f923 	bl	8000140 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001efa:	0002      	movs	r2, r0
 8001efc:	4b14      	ldr	r3, [pc, #80]	; (8001f50 <UART_SetConfig+0x12c>)
 8001efe:	3a10      	subs	r2, #16
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d807      	bhi.n	8001f14 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001f04:	6823      	ldr	r3, [r4, #0]
 8001f06:	60d8      	str	r0, [r3, #12]
 8001f08:	e00c      	b.n	8001f24 <UART_SetConfig+0x100>
        pclk = HAL_RCC_GetSysClockFreq();
 8001f0a:	f7ff fdf5 	bl	8001af8 <HAL_RCC_GetSysClockFreq>
        break;
 8001f0e:	e7c8      	b.n	8001ea2 <UART_SetConfig+0x7e>
        pclk = (uint32_t) HSI_VALUE;
 8001f10:	480e      	ldr	r0, [pc, #56]	; (8001f4c <UART_SetConfig+0x128>)
 8001f12:	e7ed      	b.n	8001ef0 <UART_SetConfig+0xcc>
    switch (clocksource)
 8001f14:	2001      	movs	r0, #1
 8001f16:	e006      	b.n	8001f26 <UART_SetConfig+0x102>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f18:	428b      	cmp	r3, r1
 8001f1a:	d1c0      	bne.n	8001e9e <UART_SetConfig+0x7a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001f1c:	f7ff feac 	bl	8001c78 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8001f20:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8001f22:	d1ce      	bne.n	8001ec2 <UART_SetConfig+0x9e>
 8001f24:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8001f2a:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8001f2c:	bd70      	pop	{r4, r5, r6, pc}
 8001f2e:	46c0      	nop			; (mov r8, r8)
 8001f30:	efff69f3 	.word	0xefff69f3
 8001f34:	ffffcfff 	.word	0xffffcfff
 8001f38:	fffff4ff 	.word	0xfffff4ff
 8001f3c:	40013800 	.word	0x40013800
 8001f40:	40021000 	.word	0x40021000
 8001f44:	08003a1a 	.word	0x08003a1a
 8001f48:	40004400 	.word	0x40004400
 8001f4c:	007a1200 	.word	0x007a1200
 8001f50:	0000ffef 	.word	0x0000ffef

08001f54 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001f54:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001f56:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001f58:	07da      	lsls	r2, r3, #31
 8001f5a:	d506      	bpl.n	8001f6a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001f5c:	6801      	ldr	r1, [r0, #0]
 8001f5e:	4c28      	ldr	r4, [pc, #160]	; (8002000 <UART_AdvFeatureConfig+0xac>)
 8001f60:	684a      	ldr	r2, [r1, #4]
 8001f62:	4022      	ands	r2, r4
 8001f64:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001f66:	4322      	orrs	r2, r4
 8001f68:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001f6a:	079a      	lsls	r2, r3, #30
 8001f6c:	d506      	bpl.n	8001f7c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001f6e:	6801      	ldr	r1, [r0, #0]
 8001f70:	4c24      	ldr	r4, [pc, #144]	; (8002004 <UART_AdvFeatureConfig+0xb0>)
 8001f72:	684a      	ldr	r2, [r1, #4]
 8001f74:	4022      	ands	r2, r4
 8001f76:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001f78:	4322      	orrs	r2, r4
 8001f7a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001f7c:	075a      	lsls	r2, r3, #29
 8001f7e:	d506      	bpl.n	8001f8e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001f80:	6801      	ldr	r1, [r0, #0]
 8001f82:	4c21      	ldr	r4, [pc, #132]	; (8002008 <UART_AdvFeatureConfig+0xb4>)
 8001f84:	684a      	ldr	r2, [r1, #4]
 8001f86:	4022      	ands	r2, r4
 8001f88:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001f8a:	4322      	orrs	r2, r4
 8001f8c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001f8e:	071a      	lsls	r2, r3, #28
 8001f90:	d506      	bpl.n	8001fa0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001f92:	6801      	ldr	r1, [r0, #0]
 8001f94:	4c1d      	ldr	r4, [pc, #116]	; (800200c <UART_AdvFeatureConfig+0xb8>)
 8001f96:	684a      	ldr	r2, [r1, #4]
 8001f98:	4022      	ands	r2, r4
 8001f9a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001f9c:	4322      	orrs	r2, r4
 8001f9e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001fa0:	06da      	lsls	r2, r3, #27
 8001fa2:	d506      	bpl.n	8001fb2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001fa4:	6801      	ldr	r1, [r0, #0]
 8001fa6:	4c1a      	ldr	r4, [pc, #104]	; (8002010 <UART_AdvFeatureConfig+0xbc>)
 8001fa8:	688a      	ldr	r2, [r1, #8]
 8001faa:	4022      	ands	r2, r4
 8001fac:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001fae:	4322      	orrs	r2, r4
 8001fb0:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001fb2:	069a      	lsls	r2, r3, #26
 8001fb4:	d506      	bpl.n	8001fc4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001fb6:	6801      	ldr	r1, [r0, #0]
 8001fb8:	4c16      	ldr	r4, [pc, #88]	; (8002014 <UART_AdvFeatureConfig+0xc0>)
 8001fba:	688a      	ldr	r2, [r1, #8]
 8001fbc:	4022      	ands	r2, r4
 8001fbe:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001fc0:	4322      	orrs	r2, r4
 8001fc2:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001fc4:	065a      	lsls	r2, r3, #25
 8001fc6:	d510      	bpl.n	8001fea <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001fc8:	6801      	ldr	r1, [r0, #0]
 8001fca:	4d13      	ldr	r5, [pc, #76]	; (8002018 <UART_AdvFeatureConfig+0xc4>)
 8001fcc:	684a      	ldr	r2, [r1, #4]
 8001fce:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001fd0:	402a      	ands	r2, r5
 8001fd2:	4322      	orrs	r2, r4
 8001fd4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001fd6:	2280      	movs	r2, #128	; 0x80
 8001fd8:	0352      	lsls	r2, r2, #13
 8001fda:	4294      	cmp	r4, r2
 8001fdc:	d105      	bne.n	8001fea <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001fde:	684a      	ldr	r2, [r1, #4]
 8001fe0:	4c0e      	ldr	r4, [pc, #56]	; (800201c <UART_AdvFeatureConfig+0xc8>)
 8001fe2:	4022      	ands	r2, r4
 8001fe4:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001fe6:	4322      	orrs	r2, r4
 8001fe8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001fea:	061b      	lsls	r3, r3, #24
 8001fec:	d506      	bpl.n	8001ffc <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001fee:	6802      	ldr	r2, [r0, #0]
 8001ff0:	490b      	ldr	r1, [pc, #44]	; (8002020 <UART_AdvFeatureConfig+0xcc>)
 8001ff2:	6853      	ldr	r3, [r2, #4]
 8001ff4:	400b      	ands	r3, r1
 8001ff6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001ff8:	430b      	orrs	r3, r1
 8001ffa:	6053      	str	r3, [r2, #4]
}
 8001ffc:	bd30      	pop	{r4, r5, pc}
 8001ffe:	46c0      	nop			; (mov r8, r8)
 8002000:	fffdffff 	.word	0xfffdffff
 8002004:	fffeffff 	.word	0xfffeffff
 8002008:	fffbffff 	.word	0xfffbffff
 800200c:	ffff7fff 	.word	0xffff7fff
 8002010:	ffffefff 	.word	0xffffefff
 8002014:	ffffdfff 	.word	0xffffdfff
 8002018:	ffefffff 	.word	0xffefffff
 800201c:	ff9fffff 	.word	0xff9fffff
 8002020:	fff7ffff 	.word	0xfff7ffff

08002024 <UART_WaitOnFlagUntilTimeout>:
{
 8002024:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002026:	0004      	movs	r4, r0
 8002028:	000d      	movs	r5, r1
 800202a:	0017      	movs	r7, r2
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800202c:	2608      	movs	r6, #8
{
 800202e:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002030:	6822      	ldr	r2, [r4, #0]
 8002032:	69d3      	ldr	r3, [r2, #28]
 8002034:	402b      	ands	r3, r5
 8002036:	1b5b      	subs	r3, r3, r5
 8002038:	4259      	negs	r1, r3
 800203a:	414b      	adcs	r3, r1
 800203c:	42bb      	cmp	r3, r7
 800203e:	d001      	beq.n	8002044 <UART_WaitOnFlagUntilTimeout+0x20>
  return HAL_OK;
 8002040:	2000      	movs	r0, #0
 8002042:	e021      	b.n	8002088 <UART_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 8002044:	9b08      	ldr	r3, [sp, #32]
 8002046:	3301      	adds	r3, #1
 8002048:	d0f3      	beq.n	8002032 <UART_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800204a:	f7fe fb53 	bl	80006f4 <HAL_GetTick>
 800204e:	9b00      	ldr	r3, [sp, #0]
 8002050:	1ac0      	subs	r0, r0, r3
 8002052:	9b08      	ldr	r3, [sp, #32]
 8002054:	4298      	cmp	r0, r3
 8002056:	d828      	bhi.n	80020aa <UART_WaitOnFlagUntilTimeout+0x86>
 8002058:	2b00      	cmp	r3, #0
 800205a:	d026      	beq.n	80020aa <UART_WaitOnFlagUntilTimeout+0x86>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800205c:	2104      	movs	r1, #4
 800205e:	6823      	ldr	r3, [r4, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	420a      	tst	r2, r1
 8002064:	d0e4      	beq.n	8002030 <UART_WaitOnFlagUntilTimeout+0xc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002066:	69da      	ldr	r2, [r3, #28]
 8002068:	0011      	movs	r1, r2
 800206a:	4031      	ands	r1, r6
 800206c:	9101      	str	r1, [sp, #4]
 800206e:	4232      	tst	r2, r6
 8002070:	d00b      	beq.n	800208a <UART_WaitOnFlagUntilTimeout+0x66>
           UART_EndRxTransfer(huart);
 8002072:	0020      	movs	r0, r4
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002074:	621e      	str	r6, [r3, #32]
           UART_EndRxTransfer(huart);
 8002076:	f7ff fea7 	bl	8001dc8 <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800207a:	0023      	movs	r3, r4
 800207c:	3308      	adds	r3, #8
 800207e:	67de      	str	r6, [r3, #124]	; 0x7c
           __HAL_UNLOCK(huart);
 8002080:	2300      	movs	r3, #0
           return HAL_ERROR;
 8002082:	2001      	movs	r0, #1
           __HAL_UNLOCK(huart);
 8002084:	3478      	adds	r4, #120	; 0x78
 8002086:	7023      	strb	r3, [r4, #0]
}
 8002088:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800208a:	2280      	movs	r2, #128	; 0x80
 800208c:	69d9      	ldr	r1, [r3, #28]
 800208e:	0112      	lsls	r2, r2, #4
 8002090:	4211      	tst	r1, r2
 8002092:	d0cd      	beq.n	8002030 <UART_WaitOnFlagUntilTimeout+0xc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002094:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8002096:	0020      	movs	r0, r4
 8002098:	f7ff fe96 	bl	8001dc8 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800209c:	0023      	movs	r3, r4
 800209e:	2220      	movs	r2, #32
 80020a0:	3308      	adds	r3, #8
 80020a2:	67da      	str	r2, [r3, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 80020a4:	9b01      	ldr	r3, [sp, #4]
 80020a6:	3478      	adds	r4, #120	; 0x78
 80020a8:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 80020aa:	2003      	movs	r0, #3
 80020ac:	e7ec      	b.n	8002088 <UART_WaitOnFlagUntilTimeout+0x64>
	...

080020b0 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020b0:	0003      	movs	r3, r0
{
 80020b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020b4:	2500      	movs	r5, #0
{
 80020b6:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020b8:	3308      	adds	r3, #8
 80020ba:	67dd      	str	r5, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80020bc:	f7fe fb1a 	bl	80006f4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80020c0:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80020c2:	0006      	movs	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	071b      	lsls	r3, r3, #28
 80020c8:	d51d      	bpl.n	8002106 <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80020ca:	2180      	movs	r1, #128	; 0x80
 80020cc:	4b26      	ldr	r3, [pc, #152]	; (8002168 <UART_CheckIdleState+0xb8>)
 80020ce:	002a      	movs	r2, r5
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	0389      	lsls	r1, r1, #14
 80020d4:	0003      	movs	r3, r0
 80020d6:	0020      	movs	r0, r4
 80020d8:	f7ff ffa4 	bl	8002024 <UART_WaitOnFlagUntilTimeout>
 80020dc:	42a8      	cmp	r0, r5
 80020de:	d012      	beq.n	8002106 <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020e0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020e4:	2301      	movs	r3, #1
 80020e6:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80020ea:	2080      	movs	r0, #128	; 0x80
 80020ec:	6822      	ldr	r2, [r4, #0]
 80020ee:	6813      	ldr	r3, [r2, #0]
 80020f0:	4383      	bics	r3, r0
 80020f2:	6013      	str	r3, [r2, #0]
 80020f4:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 80020f8:	2320      	movs	r3, #32
 80020fa:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 80020fc:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 80020fe:	2300      	movs	r3, #0
 8002100:	3478      	adds	r4, #120	; 0x78
 8002102:	7023      	strb	r3, [r4, #0]
}
 8002104:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002106:	0025      	movs	r5, r4
 8002108:	cd08      	ldmia	r5!, {r3}
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	075b      	lsls	r3, r3, #29
 800210e:	d523      	bpl.n	8002158 <UART_CheckIdleState+0xa8>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002110:	2180      	movs	r1, #128	; 0x80
 8002112:	4b15      	ldr	r3, [pc, #84]	; (8002168 <UART_CheckIdleState+0xb8>)
 8002114:	2200      	movs	r2, #0
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	0020      	movs	r0, r4
 800211a:	0033      	movs	r3, r6
 800211c:	03c9      	lsls	r1, r1, #15
 800211e:	f7ff ff81 	bl	8002024 <UART_WaitOnFlagUntilTimeout>
 8002122:	2800      	cmp	r0, #0
 8002124:	d018      	beq.n	8002158 <UART_CheckIdleState+0xa8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002126:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800212a:	2201      	movs	r2, #1
 800212c:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002130:	6821      	ldr	r1, [r4, #0]
 8002132:	4e0e      	ldr	r6, [pc, #56]	; (800216c <UART_CheckIdleState+0xbc>)
 8002134:	680b      	ldr	r3, [r1, #0]
 8002136:	4033      	ands	r3, r6
 8002138:	600b      	str	r3, [r1, #0]
 800213a:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800213e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002142:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002146:	6821      	ldr	r1, [r4, #0]
 8002148:	688b      	ldr	r3, [r1, #8]
 800214a:	4393      	bics	r3, r2
 800214c:	608b      	str	r3, [r1, #8]
 800214e:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8002152:	2320      	movs	r3, #32
 8002154:	67eb      	str	r3, [r5, #124]	; 0x7c
 8002156:	e7d1      	b.n	80020fc <UART_CheckIdleState+0x4c>
  huart->gState = HAL_UART_STATE_READY;
 8002158:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800215a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800215c:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800215e:	67eb      	str	r3, [r5, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002160:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002162:	6660      	str	r0, [r4, #100]	; 0x64
  return HAL_OK;
 8002164:	e7cb      	b.n	80020fe <UART_CheckIdleState+0x4e>
 8002166:	46c0      	nop			; (mov r8, r8)
 8002168:	01ffffff 	.word	0x01ffffff
 800216c:	fffffedf 	.word	0xfffffedf

08002170 <HAL_UART_Init>:
{
 8002170:	b510      	push	{r4, lr}
 8002172:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002174:	d101      	bne.n	800217a <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8002176:	2001      	movs	r0, #1
}
 8002178:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800217a:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800217c:	2b00      	cmp	r3, #0
 800217e:	d104      	bne.n	800218a <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8002180:	0002      	movs	r2, r0
 8002182:	3278      	adds	r2, #120	; 0x78
 8002184:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8002186:	f7fe fa01 	bl	800058c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800218a:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800218c:	2101      	movs	r1, #1
 800218e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002190:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8002192:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002194:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8002196:	438b      	bics	r3, r1
 8002198:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800219a:	f7ff fe43 	bl	8001e24 <UART_SetConfig>
 800219e:	2801      	cmp	r0, #1
 80021a0:	d0e9      	beq.n	8002176 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80021a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d002      	beq.n	80021ae <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 80021a8:	0020      	movs	r0, r4
 80021aa:	f7ff fed3 	bl	8001f54 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021ae:	6823      	ldr	r3, [r4, #0]
 80021b0:	4907      	ldr	r1, [pc, #28]	; (80021d0 <HAL_UART_Init+0x60>)
 80021b2:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80021b4:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021b6:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021b8:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	438a      	bics	r2, r1
 80021c0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80021c2:	2201      	movs	r2, #1
 80021c4:	6819      	ldr	r1, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80021ca:	f7ff ff71 	bl	80020b0 <UART_CheckIdleState>
 80021ce:	e7d3      	b.n	8002178 <HAL_UART_Init+0x8>
 80021d0:	ffffb7ff 	.word	0xffffb7ff

080021d4 <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80021d4:	1d82      	adds	r2, r0, #6
{
 80021d6:	0003      	movs	r3, r0
  USBx->ISTR = 0U;
 80021d8:	2000      	movs	r0, #0
 80021da:	87d0      	strh	r0, [r2, #62]	; 0x3e
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80021dc:	4a01      	ldr	r2, [pc, #4]	; (80021e4 <USB_EnableGlobalInt+0x10>)
 80021de:	3302      	adds	r3, #2
 80021e0:	87da      	strh	r2, [r3, #62]	; 0x3e

  return HAL_OK;
}
 80021e2:	4770      	bx	lr
 80021e4:	ffffbf80 	.word	0xffffbf80

080021e8 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80021e8:	3002      	adds	r0, #2
 80021ea:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80021ec:	4a02      	ldr	r2, [pc, #8]	; (80021f8 <USB_DisableGlobalInt+0x10>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	87c3      	strh	r3, [r0, #62]	; 0x3e

  return HAL_OK;
}
 80021f2:	2000      	movs	r0, #0
 80021f4:	4770      	bx	lr
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	0000407f 	.word	0x0000407f

080021fc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80021fc:	b084      	sub	sp, #16
 80021fe:	b510      	push	{r4, lr}
 8002200:	0004      	movs	r4, r0
 8002202:	9204      	str	r2, [sp, #16]
 8002204:	9305      	str	r3, [sp, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002206:	2201      	movs	r2, #1
 8002208:	1c83      	adds	r3, r0, #2

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800220a:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800220c:	87da      	strh	r2, [r3, #62]	; 0x3e
  USBx->CNTR = 0U;
 800220e:	87d8      	strh	r0, [r3, #62]	; 0x3e

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002210:	1da3      	adds	r3, r4, #6

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002212:	3450      	adds	r4, #80	; 0x50
  USBx->ISTR = 0U;
 8002214:	87d8      	strh	r0, [r3, #62]	; 0x3e
{
 8002216:	9103      	str	r1, [sp, #12]
  USBx->BTABLE = BTABLE_ADDRESS;
 8002218:	8020      	strh	r0, [r4, #0]

  return HAL_OK;
}
 800221a:	bc10      	pop	{r4}
 800221c:	bc08      	pop	{r3}
 800221e:	b004      	add	sp, #16
 8002220:	4718      	bx	r3
	...

08002224 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002226:	780e      	ldrb	r6, [r1, #0]
 8002228:	4a79      	ldr	r2, [pc, #484]	; (8002410 <USB_ActivateEndpoint+0x1ec>)
 800222a:	00b3      	lsls	r3, r6, #2
 800222c:	18c3      	adds	r3, r0, r3
 800222e:	881c      	ldrh	r4, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8002230:	78cf      	ldrb	r7, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002232:	4014      	ands	r4, r2
  switch (ep->type)
 8002234:	2201      	movs	r2, #1
{
 8002236:	0005      	movs	r5, r0
  switch (ep->type)
 8002238:	9200      	str	r2, [sp, #0]
 800223a:	2f03      	cmp	r7, #3
 800223c:	d808      	bhi.n	8002250 <USB_ActivateEndpoint+0x2c>
 800223e:	0038      	movs	r0, r7
 8002240:	f7fd ff6a 	bl	8000118 <__gnu_thumb1_case_uqi>
 8002244:	3c3f4202 	.word	0x3c3f4202
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002248:	2280      	movs	r2, #128	; 0x80
 800224a:	0092      	lsls	r2, r2, #2
 800224c:	4314      	orrs	r4, r2
  HAL_StatusTypeDef ret = HAL_OK;
 800224e:	9700      	str	r7, [sp, #0]
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002250:	4a70      	ldr	r2, [pc, #448]	; (8002414 <USB_ActivateEndpoint+0x1f0>)
 8002252:	4314      	orrs	r4, r2
 8002254:	b2a4      	uxth	r4, r4
 8002256:	801c      	strh	r4, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002258:	8818      	ldrh	r0, [r3, #0]
 800225a:	4c6f      	ldr	r4, [pc, #444]	; (8002418 <USB_ActivateEndpoint+0x1f4>)
 800225c:	4020      	ands	r0, r4
 800225e:	4330      	orrs	r0, r6
 8002260:	4310      	orrs	r0, r2
 8002262:	b280      	uxth	r0, r0
 8002264:	8018      	strh	r0, [r3, #0]
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002266:	00f0      	lsls	r0, r6, #3
 8002268:	4684      	mov	ip, r0
  if (ep->doublebuffer == 0U)
 800226a:	7b08      	ldrb	r0, [r1, #12]
 800226c:	44ac      	add	ip, r5
 800226e:	3550      	adds	r5, #80	; 0x50
 8002270:	9501      	str	r5, [sp, #4]
 8002272:	2800      	cmp	r0, #0
 8002274:	d000      	beq.n	8002278 <USB_ActivateEndpoint+0x54>
 8002276:	e068      	b.n	800234a <USB_ActivateEndpoint+0x126>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002278:	88cd      	ldrh	r5, [r1, #6]
    if (ep->is_in != 0U)
 800227a:	7848      	ldrb	r0, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800227c:	086d      	lsrs	r5, r5, #1
 800227e:	006d      	lsls	r5, r5, #1
    if (ep->is_in != 0U)
 8002280:	2800      	cmp	r0, #0
 8002282:	d023      	beq.n	80022cc <USB_ActivateEndpoint+0xa8>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002284:	2080      	movs	r0, #128	; 0x80
 8002286:	9901      	ldr	r1, [sp, #4]
 8002288:	00c0      	lsls	r0, r0, #3
 800228a:	8809      	ldrh	r1, [r1, #0]
 800228c:	4461      	add	r1, ip
 800228e:	1809      	adds	r1, r1, r0
 8002290:	800d      	strh	r5, [r1, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002292:	8819      	ldrh	r1, [r3, #0]
 8002294:	0649      	lsls	r1, r1, #25
 8002296:	d504      	bpl.n	80022a2 <USB_ActivateEndpoint+0x7e>
 8002298:	8819      	ldrh	r1, [r3, #0]
 800229a:	4021      	ands	r1, r4
 800229c:	4c5f      	ldr	r4, [pc, #380]	; (800241c <USB_ActivateEndpoint+0x1f8>)
 800229e:	4321      	orrs	r1, r4
 80022a0:	8019      	strh	r1, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80022a2:	4d5f      	ldr	r5, [pc, #380]	; (8002420 <USB_ActivateEndpoint+0x1fc>)
 80022a4:	2f01      	cmp	r7, #1
 80022a6:	d100      	bne.n	80022aa <USB_ActivateEndpoint+0x86>
 80022a8:	e0ab      	b.n	8002402 <USB_ActivateEndpoint+0x1de>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80022aa:	2120      	movs	r1, #32
 80022ac:	881c      	ldrh	r4, [r3, #0]
 80022ae:	402c      	ands	r4, r5
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80022b0:	4061      	eors	r1, r4
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80022b2:	430a      	orrs	r2, r1
 80022b4:	b292      	uxth	r2, r2
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 80022b6:	9800      	ldr	r0, [sp, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80022b8:	801a      	strh	r2, [r3, #0]
}
 80022ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_INTERRUPT;
 80022bc:	22c0      	movs	r2, #192	; 0xc0
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80022be:	00d2      	lsls	r2, r2, #3
 80022c0:	4314      	orrs	r4, r2
  HAL_StatusTypeDef ret = HAL_OK;
 80022c2:	2200      	movs	r2, #0
 80022c4:	9200      	str	r2, [sp, #0]
      break;
 80022c6:	e7c3      	b.n	8002250 <USB_ActivateEndpoint+0x2c>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80022c8:	2280      	movs	r2, #128	; 0x80
 80022ca:	e7f8      	b.n	80022be <USB_ActivateEndpoint+0x9a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80022cc:	9801      	ldr	r0, [sp, #4]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80022ce:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80022d0:	8807      	ldrh	r7, [r0, #0]
 80022d2:	4854      	ldr	r0, [pc, #336]	; (8002424 <USB_ActivateEndpoint+0x200>)
 80022d4:	4467      	add	r7, ip
 80022d6:	183f      	adds	r7, r7, r0
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80022d8:	9801      	ldr	r0, [sp, #4]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80022da:	803d      	strh	r5, [r7, #0]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80022dc:	8805      	ldrh	r5, [r0, #0]
 80022de:	4852      	ldr	r0, [pc, #328]	; (8002428 <USB_ActivateEndpoint+0x204>)
 80022e0:	4465      	add	r5, ip
 80022e2:	182d      	adds	r5, r5, r0
 80022e4:	882f      	ldrh	r7, [r5, #0]
 80022e6:	05bf      	lsls	r7, r7, #22
 80022e8:	0dbf      	lsrs	r7, r7, #22
 80022ea:	802f      	strh	r7, [r5, #0]
 80022ec:	293e      	cmp	r1, #62	; 0x3e
 80022ee:	d90d      	bls.n	800230c <USB_ActivateEndpoint+0xe8>
 80022f0:	201f      	movs	r0, #31
 80022f2:	094f      	lsrs	r7, r1, #5
 80022f4:	4001      	ands	r1, r0
 80022f6:	0008      	movs	r0, r1
 80022f8:	4241      	negs	r1, r0
 80022fa:	4141      	adcs	r1, r0
 80022fc:	1a7f      	subs	r7, r7, r1
 80022fe:	8829      	ldrh	r1, [r5, #0]
 8002300:	02bf      	lsls	r7, r7, #10
 8002302:	430f      	orrs	r7, r1
 8002304:	4949      	ldr	r1, [pc, #292]	; (800242c <USB_ActivateEndpoint+0x208>)
 8002306:	4339      	orrs	r1, r7
 8002308:	b289      	uxth	r1, r1
 800230a:	e005      	b.n	8002318 <USB_ActivateEndpoint+0xf4>
 800230c:	2900      	cmp	r1, #0
 800230e:	d115      	bne.n	800233c <USB_ActivateEndpoint+0x118>
 8002310:	2780      	movs	r7, #128	; 0x80
 8002312:	8829      	ldrh	r1, [r5, #0]
 8002314:	023f      	lsls	r7, r7, #8
 8002316:	4339      	orrs	r1, r7
 8002318:	8029      	strh	r1, [r5, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800231a:	8819      	ldrh	r1, [r3, #0]
 800231c:	0449      	lsls	r1, r1, #17
 800231e:	d504      	bpl.n	800232a <USB_ActivateEndpoint+0x106>
 8002320:	8819      	ldrh	r1, [r3, #0]
 8002322:	4021      	ands	r1, r4
 8002324:	4c42      	ldr	r4, [pc, #264]	; (8002430 <USB_ActivateEndpoint+0x20c>)
 8002326:	4321      	orrs	r1, r4
 8002328:	8019      	strh	r1, [r3, #0]
      if (ep->num == 0U)
 800232a:	4942      	ldr	r1, [pc, #264]	; (8002434 <USB_ActivateEndpoint+0x210>)
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800232c:	881c      	ldrh	r4, [r3, #0]
 800232e:	400c      	ands	r4, r1
 8002330:	21c0      	movs	r1, #192	; 0xc0
      if (ep->num == 0U)
 8002332:	2e00      	cmp	r6, #0
 8002334:	d000      	beq.n	8002338 <USB_ActivateEndpoint+0x114>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8002336:	2180      	movs	r1, #128	; 0x80
 8002338:	0189      	lsls	r1, r1, #6
 800233a:	e7b9      	b.n	80022b0 <USB_ActivateEndpoint+0x8c>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800233c:	2001      	movs	r0, #1
 800233e:	084f      	lsrs	r7, r1, #1
 8002340:	4001      	ands	r1, r0
 8002342:	187f      	adds	r7, r7, r1
 8002344:	02bf      	lsls	r7, r7, #10
 8002346:	8829      	ldrh	r1, [r5, #0]
 8002348:	e7dd      	b.n	8002306 <USB_ActivateEndpoint+0xe2>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800234a:	881d      	ldrh	r5, [r3, #0]
    if (ep->type == EP_TYPE_BULK)
 800234c:	2f02      	cmp	r7, #2
 800234e:	d13a      	bne.n	80023c6 <USB_ActivateEndpoint+0x1a2>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002350:	4e39      	ldr	r6, [pc, #228]	; (8002438 <USB_ActivateEndpoint+0x214>)
 8002352:	4025      	ands	r5, r4
 8002354:	4335      	orrs	r5, r6
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002356:	9801      	ldr	r0, [sp, #4]
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8002358:	801d      	strh	r5, [r3, #0]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800235a:	8805      	ldrh	r5, [r0, #0]
 800235c:	2080      	movs	r0, #128	; 0x80
 800235e:	890e      	ldrh	r6, [r1, #8]
 8002360:	4465      	add	r5, ip
 8002362:	00c0      	lsls	r0, r0, #3
 8002364:	0876      	lsrs	r6, r6, #1
 8002366:	182d      	adds	r5, r5, r0
 8002368:	0076      	lsls	r6, r6, #1
 800236a:	9801      	ldr	r0, [sp, #4]
 800236c:	802e      	strh	r6, [r5, #0]
 800236e:	8805      	ldrh	r5, [r0, #0]
 8002370:	894e      	ldrh	r6, [r1, #10]
 8002372:	482c      	ldr	r0, [pc, #176]	; (8002424 <USB_ActivateEndpoint+0x200>)
 8002374:	4465      	add	r5, ip
 8002376:	0876      	lsrs	r6, r6, #1
 8002378:	182d      	adds	r5, r5, r0
 800237a:	0076      	lsls	r6, r6, #1
 800237c:	802e      	strh	r6, [r5, #0]
    if (ep->is_in == 0U)
 800237e:	7849      	ldrb	r1, [r1, #1]
 8002380:	4e27      	ldr	r6, [pc, #156]	; (8002420 <USB_ActivateEndpoint+0x1fc>)
 8002382:	468c      	mov	ip, r1
 8002384:	2180      	movs	r1, #128	; 0x80
 8002386:	4660      	mov	r0, ip
 8002388:	4d2a      	ldr	r5, [pc, #168]	; (8002434 <USB_ActivateEndpoint+0x210>)
 800238a:	01c9      	lsls	r1, r1, #7
 800238c:	2800      	cmp	r0, #0
 800238e:	d11f      	bne.n	80023d0 <USB_ActivateEndpoint+0x1ac>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002390:	881f      	ldrh	r7, [r3, #0]
 8002392:	420f      	tst	r7, r1
 8002394:	d004      	beq.n	80023a0 <USB_ActivateEndpoint+0x17c>
 8002396:	8819      	ldrh	r1, [r3, #0]
 8002398:	4f25      	ldr	r7, [pc, #148]	; (8002430 <USB_ActivateEndpoint+0x20c>)
 800239a:	4021      	ands	r1, r4
 800239c:	4339      	orrs	r1, r7
 800239e:	8019      	strh	r1, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80023a0:	8819      	ldrh	r1, [r3, #0]
 80023a2:	0649      	lsls	r1, r1, #25
 80023a4:	d504      	bpl.n	80023b0 <USB_ActivateEndpoint+0x18c>
 80023a6:	8819      	ldrh	r1, [r3, #0]
 80023a8:	4021      	ands	r1, r4
 80023aa:	4c1c      	ldr	r4, [pc, #112]	; (800241c <USB_ActivateEndpoint+0x1f8>)
 80023ac:	4321      	orrs	r1, r4
 80023ae:	8019      	strh	r1, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80023b0:	21c0      	movs	r1, #192	; 0xc0
 80023b2:	881c      	ldrh	r4, [r3, #0]
 80023b4:	0189      	lsls	r1, r1, #6
 80023b6:	402c      	ands	r4, r5
 80023b8:	4061      	eors	r1, r4
 80023ba:	4311      	orrs	r1, r2
 80023bc:	b289      	uxth	r1, r1
 80023be:	8019      	strh	r1, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80023c0:	8819      	ldrh	r1, [r3, #0]
 80023c2:	4031      	ands	r1, r6
 80023c4:	e775      	b.n	80022b2 <USB_ActivateEndpoint+0x8e>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80023c6:	4e1d      	ldr	r6, [pc, #116]	; (800243c <USB_ActivateEndpoint+0x218>)
 80023c8:	4035      	ands	r5, r6
 80023ca:	4315      	orrs	r5, r2
 80023cc:	b2ad      	uxth	r5, r5
 80023ce:	e7c2      	b.n	8002356 <USB_ActivateEndpoint+0x132>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80023d0:	8818      	ldrh	r0, [r3, #0]
 80023d2:	4208      	tst	r0, r1
 80023d4:	d004      	beq.n	80023e0 <USB_ActivateEndpoint+0x1bc>
 80023d6:	8819      	ldrh	r1, [r3, #0]
 80023d8:	4815      	ldr	r0, [pc, #84]	; (8002430 <USB_ActivateEndpoint+0x20c>)
 80023da:	4021      	ands	r1, r4
 80023dc:	4301      	orrs	r1, r0
 80023de:	8019      	strh	r1, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80023e0:	8819      	ldrh	r1, [r3, #0]
 80023e2:	0649      	lsls	r1, r1, #25
 80023e4:	d504      	bpl.n	80023f0 <USB_ActivateEndpoint+0x1cc>
 80023e6:	8819      	ldrh	r1, [r3, #0]
 80023e8:	4021      	ands	r1, r4
 80023ea:	4c0c      	ldr	r4, [pc, #48]	; (800241c <USB_ActivateEndpoint+0x1f8>)
 80023ec:	4321      	orrs	r1, r4
 80023ee:	8019      	strh	r1, [r3, #0]
      if (ep->type != EP_TYPE_ISOC)
 80023f0:	2f01      	cmp	r7, #1
 80023f2:	d009      	beq.n	8002408 <USB_ActivateEndpoint+0x1e4>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80023f4:	2120      	movs	r1, #32
 80023f6:	881c      	ldrh	r4, [r3, #0]
 80023f8:	4034      	ands	r4, r6
 80023fa:	4061      	eors	r1, r4
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80023fc:	4311      	orrs	r1, r2
 80023fe:	b289      	uxth	r1, r1
 8002400:	8019      	strh	r1, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002402:	8819      	ldrh	r1, [r3, #0]
 8002404:	4029      	ands	r1, r5
 8002406:	e754      	b.n	80022b2 <USB_ActivateEndpoint+0x8e>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002408:	8819      	ldrh	r1, [r3, #0]
 800240a:	4031      	ands	r1, r6
 800240c:	e7f6      	b.n	80023fc <USB_ActivateEndpoint+0x1d8>
 800240e:	46c0      	nop			; (mov r8, r8)
 8002410:	ffff898f 	.word	0xffff898f
 8002414:	ffff8080 	.word	0xffff8080
 8002418:	ffff8f8f 	.word	0xffff8f8f
 800241c:	000080c0 	.word	0x000080c0
 8002420:	ffff8fbf 	.word	0xffff8fbf
 8002424:	00000404 	.word	0x00000404
 8002428:	00000406 	.word	0x00000406
 800242c:	ffff8000 	.word	0xffff8000
 8002430:	0000c080 	.word	0x0000c080
 8002434:	ffffbf8f 	.word	0xffffbf8f
 8002438:	00008180 	.word	0x00008180
 800243c:	ffff8e8f 	.word	0xffff8e8f

08002440 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002440:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002442:	780b      	ldrb	r3, [r1, #0]
    if (ep->is_in != 0U)
 8002444:	784a      	ldrb	r2, [r1, #1]
  if (ep->doublebuffer == 0U)
 8002446:	7b09      	ldrb	r1, [r1, #12]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	18c0      	adds	r0, r0, r3
 800244c:	4b31      	ldr	r3, [pc, #196]	; (8002514 <USB_DeactivateEndpoint+0xd4>)
  if (ep->doublebuffer == 0U)
 800244e:	2900      	cmp	r1, #0
 8002450:	d11a      	bne.n	8002488 <USB_DeactivateEndpoint+0x48>
    if (ep->is_in != 0U)
 8002452:	2a00      	cmp	r2, #0
 8002454:	d00c      	beq.n	8002470 <USB_DeactivateEndpoint+0x30>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002456:	8802      	ldrh	r2, [r0, #0]
 8002458:	0652      	lsls	r2, r2, #25
 800245a:	d505      	bpl.n	8002468 <USB_DeactivateEndpoint+0x28>
 800245c:	8802      	ldrh	r2, [r0, #0]
 800245e:	492e      	ldr	r1, [pc, #184]	; (8002518 <USB_DeactivateEndpoint+0xd8>)
 8002460:	400a      	ands	r2, r1
 8002462:	492e      	ldr	r1, [pc, #184]	; (800251c <USB_DeactivateEndpoint+0xdc>)
 8002464:	430a      	orrs	r2, r1
 8002466:	8002      	strh	r2, [r0, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002468:	8802      	ldrh	r2, [r0, #0]
 800246a:	492d      	ldr	r1, [pc, #180]	; (8002520 <USB_DeactivateEndpoint+0xe0>)
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800246c:	400a      	ands	r2, r1
 800246e:	e02f      	b.n	80024d0 <USB_DeactivateEndpoint+0x90>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002470:	8802      	ldrh	r2, [r0, #0]
 8002472:	0452      	lsls	r2, r2, #17
 8002474:	d505      	bpl.n	8002482 <USB_DeactivateEndpoint+0x42>
 8002476:	8802      	ldrh	r2, [r0, #0]
 8002478:	4927      	ldr	r1, [pc, #156]	; (8002518 <USB_DeactivateEndpoint+0xd8>)
 800247a:	400a      	ands	r2, r1
 800247c:	4929      	ldr	r1, [pc, #164]	; (8002524 <USB_DeactivateEndpoint+0xe4>)
 800247e:	430a      	orrs	r2, r1
 8002480:	8002      	strh	r2, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002482:	8802      	ldrh	r2, [r0, #0]
 8002484:	4928      	ldr	r1, [pc, #160]	; (8002528 <USB_DeactivateEndpoint+0xe8>)
 8002486:	e7f1      	b.n	800246c <USB_DeactivateEndpoint+0x2c>
    if (ep->is_in == 0U)
 8002488:	2780      	movs	r7, #128	; 0x80
 800248a:	4e23      	ldr	r6, [pc, #140]	; (8002518 <USB_DeactivateEndpoint+0xd8>)
 800248c:	4d24      	ldr	r5, [pc, #144]	; (8002520 <USB_DeactivateEndpoint+0xe0>)
 800248e:	4926      	ldr	r1, [pc, #152]	; (8002528 <USB_DeactivateEndpoint+0xe8>)
 8002490:	01ff      	lsls	r7, r7, #7
 8002492:	2a00      	cmp	r2, #0
 8002494:	d121      	bne.n	80024da <USB_DeactivateEndpoint+0x9a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002496:	8802      	ldrh	r2, [r0, #0]
 8002498:	423a      	tst	r2, r7
 800249a:	d004      	beq.n	80024a6 <USB_DeactivateEndpoint+0x66>
 800249c:	8802      	ldrh	r2, [r0, #0]
 800249e:	4c21      	ldr	r4, [pc, #132]	; (8002524 <USB_DeactivateEndpoint+0xe4>)
 80024a0:	4032      	ands	r2, r6
 80024a2:	4322      	orrs	r2, r4
 80024a4:	8002      	strh	r2, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80024a6:	8802      	ldrh	r2, [r0, #0]
 80024a8:	4c20      	ldr	r4, [pc, #128]	; (800252c <USB_DeactivateEndpoint+0xec>)
 80024aa:	0652      	lsls	r2, r2, #25
 80024ac:	d504      	bpl.n	80024b8 <USB_DeactivateEndpoint+0x78>
 80024ae:	8802      	ldrh	r2, [r0, #0]
 80024b0:	4032      	ands	r2, r6
 80024b2:	4322      	orrs	r2, r4
 80024b4:	b292      	uxth	r2, r2
 80024b6:	8002      	strh	r2, [r0, #0]
      PCD_TX_DTOG(USBx, ep->num);
 80024b8:	8802      	ldrh	r2, [r0, #0]
 80024ba:	4032      	ands	r2, r6
 80024bc:	4314      	orrs	r4, r2
 80024be:	b2a4      	uxth	r4, r4
 80024c0:	8004      	strh	r4, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80024c2:	8802      	ldrh	r2, [r0, #0]
 80024c4:	400a      	ands	r2, r1
 80024c6:	431a      	orrs	r2, r3
 80024c8:	b292      	uxth	r2, r2
 80024ca:	8002      	strh	r2, [r0, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80024cc:	8802      	ldrh	r2, [r0, #0]
 80024ce:	402a      	ands	r2, r5
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80024d0:	4313      	orrs	r3, r2
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	8003      	strh	r3, [r0, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 80024d6:	2000      	movs	r0, #0
 80024d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80024da:	8802      	ldrh	r2, [r0, #0]
 80024dc:	4c14      	ldr	r4, [pc, #80]	; (8002530 <USB_DeactivateEndpoint+0xf0>)
 80024de:	423a      	tst	r2, r7
 80024e0:	d004      	beq.n	80024ec <USB_DeactivateEndpoint+0xac>
 80024e2:	8802      	ldrh	r2, [r0, #0]
 80024e4:	4032      	ands	r2, r6
 80024e6:	4322      	orrs	r2, r4
 80024e8:	b292      	uxth	r2, r2
 80024ea:	8002      	strh	r2, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80024ec:	8802      	ldrh	r2, [r0, #0]
 80024ee:	0652      	lsls	r2, r2, #25
 80024f0:	d504      	bpl.n	80024fc <USB_DeactivateEndpoint+0xbc>
 80024f2:	8802      	ldrh	r2, [r0, #0]
 80024f4:	4f09      	ldr	r7, [pc, #36]	; (800251c <USB_DeactivateEndpoint+0xdc>)
 80024f6:	4032      	ands	r2, r6
 80024f8:	433a      	orrs	r2, r7
 80024fa:	8002      	strh	r2, [r0, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80024fc:	8802      	ldrh	r2, [r0, #0]
 80024fe:	4032      	ands	r2, r6
 8002500:	4314      	orrs	r4, r2
 8002502:	b2a4      	uxth	r4, r4
 8002504:	8004      	strh	r4, [r0, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002506:	8802      	ldrh	r2, [r0, #0]
 8002508:	402a      	ands	r2, r5
 800250a:	431a      	orrs	r2, r3
 800250c:	b292      	uxth	r2, r2
 800250e:	8002      	strh	r2, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002510:	8802      	ldrh	r2, [r0, #0]
 8002512:	e7ab      	b.n	800246c <USB_DeactivateEndpoint+0x2c>
 8002514:	ffff8080 	.word	0xffff8080
 8002518:	ffff8f8f 	.word	0xffff8f8f
 800251c:	000080c0 	.word	0x000080c0
 8002520:	ffff8fbf 	.word	0xffff8fbf
 8002524:	0000c080 	.word	0x0000c080
 8002528:	ffffbf8f 	.word	0xffffbf8f
 800252c:	ffff80c0 	.word	0xffff80c0
 8002530:	ffffc080 	.word	0xffffc080

08002534 <USB_EPSetStall>:
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8002534:	780b      	ldrb	r3, [r1, #0]
 8002536:	4a0c      	ldr	r2, [pc, #48]	; (8002568 <USB_EPSetStall+0x34>)
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	18c0      	adds	r0, r0, r3
  if (ep->is_in != 0U)
 800253c:	784b      	ldrb	r3, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800253e:	8801      	ldrh	r1, [r0, #0]
  if (ep->is_in != 0U)
 8002540:	2b00      	cmp	r3, #0
 8002542:	d008      	beq.n	8002556 <USB_EPSetStall+0x22>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8002544:	4b09      	ldr	r3, [pc, #36]	; (800256c <USB_EPSetStall+0x38>)
 8002546:	4019      	ands	r1, r3
 8002548:	2310      	movs	r3, #16
 800254a:	404b      	eors	r3, r1
 800254c:	4313      	orrs	r3, r2
 800254e:	b29b      	uxth	r3, r3
 8002550:	8003      	strh	r3, [r0, #0]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 8002552:	2000      	movs	r0, #0
 8002554:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8002556:	4b06      	ldr	r3, [pc, #24]	; (8002570 <USB_EPSetStall+0x3c>)
 8002558:	4019      	ands	r1, r3
 800255a:	2380      	movs	r3, #128	; 0x80
 800255c:	015b      	lsls	r3, r3, #5
 800255e:	404b      	eors	r3, r1
 8002560:	431a      	orrs	r2, r3
 8002562:	b292      	uxth	r2, r2
 8002564:	8002      	strh	r2, [r0, #0]
 8002566:	e7f4      	b.n	8002552 <USB_EPSetStall+0x1e>
 8002568:	ffff8080 	.word	0xffff8080
 800256c:	ffff8fbf 	.word	0xffff8fbf
 8002570:	ffffbf8f 	.word	0xffffbf8f

08002574 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8002574:	7b0b      	ldrb	r3, [r1, #12]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d119      	bne.n	80025ae <USB_EPClearStall+0x3a>
  {
    if (ep->is_in != 0U)
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800257a:	780b      	ldrb	r3, [r1, #0]
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	18c0      	adds	r0, r0, r3
    if (ep->is_in != 0U)
 8002580:	784b      	ldrb	r3, [r1, #1]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d015      	beq.n	80025b2 <USB_EPClearStall+0x3e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002586:	8803      	ldrh	r3, [r0, #0]
 8002588:	065b      	lsls	r3, r3, #25
 800258a:	d505      	bpl.n	8002598 <USB_EPClearStall+0x24>
 800258c:	8803      	ldrh	r3, [r0, #0]
 800258e:	4a10      	ldr	r2, [pc, #64]	; (80025d0 <USB_EPClearStall+0x5c>)
 8002590:	4013      	ands	r3, r2
 8002592:	4a10      	ldr	r2, [pc, #64]	; (80025d4 <USB_EPClearStall+0x60>)
 8002594:	4313      	orrs	r3, r2
 8002596:	8003      	strh	r3, [r0, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002598:	78cb      	ldrb	r3, [r1, #3]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d007      	beq.n	80025ae <USB_EPClearStall+0x3a>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800259e:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <USB_EPClearStall+0x64>)
 80025a0:	8802      	ldrh	r2, [r0, #0]
 80025a2:	401a      	ands	r2, r3
 80025a4:	2320      	movs	r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80025a6:	4053      	eors	r3, r2
 80025a8:	4a0c      	ldr	r2, [pc, #48]	; (80025dc <USB_EPClearStall+0x68>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	8003      	strh	r3, [r0, #0]
    }
  }

  return HAL_OK;
}
 80025ae:	2000      	movs	r0, #0
 80025b0:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80025b2:	8803      	ldrh	r3, [r0, #0]
 80025b4:	045b      	lsls	r3, r3, #17
 80025b6:	d505      	bpl.n	80025c4 <USB_EPClearStall+0x50>
 80025b8:	8803      	ldrh	r3, [r0, #0]
 80025ba:	4a05      	ldr	r2, [pc, #20]	; (80025d0 <USB_EPClearStall+0x5c>)
 80025bc:	4013      	ands	r3, r2
 80025be:	4a08      	ldr	r2, [pc, #32]	; (80025e0 <USB_EPClearStall+0x6c>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	8003      	strh	r3, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80025c4:	4b07      	ldr	r3, [pc, #28]	; (80025e4 <USB_EPClearStall+0x70>)
 80025c6:	8802      	ldrh	r2, [r0, #0]
 80025c8:	401a      	ands	r2, r3
 80025ca:	23c0      	movs	r3, #192	; 0xc0
 80025cc:	019b      	lsls	r3, r3, #6
 80025ce:	e7ea      	b.n	80025a6 <USB_EPClearStall+0x32>
 80025d0:	ffff8f8f 	.word	0xffff8f8f
 80025d4:	000080c0 	.word	0x000080c0
 80025d8:	ffff8fbf 	.word	0xffff8fbf
 80025dc:	00008080 	.word	0x00008080
 80025e0:	0000c080 	.word	0x0000c080
 80025e4:	ffffbf8f 	.word	0xffffbf8f

080025e8 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 80025e8:	2900      	cmp	r1, #0
 80025ea:	d102      	bne.n	80025f2 <USB_SetDevAddress+0xa>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80025ec:	2380      	movs	r3, #128	; 0x80
 80025ee:	304c      	adds	r0, #76	; 0x4c
 80025f0:	8003      	strh	r3, [r0, #0]
  }

  return HAL_OK;
}
 80025f2:	2000      	movs	r0, #0
 80025f4:	4770      	bx	lr

080025f6 <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80025f6:	2280      	movs	r2, #128	; 0x80
 80025f8:	3058      	adds	r0, #88	; 0x58
 80025fa:	8803      	ldrh	r3, [r0, #0]
 80025fc:	0212      	lsls	r2, r2, #8
 80025fe:	4313      	orrs	r3, r2
 8002600:	8003      	strh	r3, [r0, #0]

  return HAL_OK;
}
 8002602:	2000      	movs	r0, #0
 8002604:	4770      	bx	lr

08002606 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8002606:	3006      	adds	r0, #6
 8002608:	8fc0      	ldrh	r0, [r0, #62]	; 0x3e
 800260a:	b280      	uxth	r0, r0
  return tmpreg;
}
 800260c:	4770      	bx	lr

0800260e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800260e:	b530      	push	{r4, r5, lr}
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002610:	2480      	movs	r4, #128	; 0x80
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8002612:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002614:	00e4      	lsls	r4, r4, #3
 8002616:	1912      	adds	r2, r2, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8002618:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800261a:	1880      	adds	r0, r0, r2

  for (count = n; count != 0U; count--)
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	18cb      	adds	r3, r1, r3
 8002620:	1a40      	subs	r0, r0, r1
 8002622:	1844      	adds	r4, r0, r1
 8002624:	428b      	cmp	r3, r1
 8002626:	d100      	bne.n	800262a <USB_WritePMA+0x1c>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 8002628:	bd30      	pop	{r4, r5, pc}
    WrVal |= (uint16_t)pBuf[1] << 8;
 800262a:	784a      	ldrb	r2, [r1, #1]
 800262c:	780d      	ldrb	r5, [r1, #0]
 800262e:	0212      	lsls	r2, r2, #8
 8002630:	432a      	orrs	r2, r5
    *pdwVal = (WrVal & 0xFFFFU);
 8002632:	8022      	strh	r2, [r4, #0]
    pBuf++;
 8002634:	3102      	adds	r1, #2
  for (count = n; count != 0U; count--)
 8002636:	e7f4      	b.n	8002622 <USB_WritePMA+0x14>

08002638 <USB_EPStartXfer>:
{
 8002638:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 800263a:	784a      	ldrb	r2, [r1, #1]
{
 800263c:	0005      	movs	r5, r0
 800263e:	000c      	movs	r4, r1
    if (ep->doublebuffer == 0U)
 8002640:	7b0b      	ldrb	r3, [r1, #12]
{
 8002642:	b087      	sub	sp, #28
  if (ep->is_in == 1U)
 8002644:	2a01      	cmp	r2, #1
 8002646:	d000      	beq.n	800264a <USB_EPStartXfer+0x12>
 8002648:	e11b      	b.n	8002882 <USB_EPStartXfer+0x24a>
    if (ep->xfer_len > ep->maxpacket)
 800264a:	690a      	ldr	r2, [r1, #16]
 800264c:	698f      	ldr	r7, [r1, #24]
 800264e:	9202      	str	r2, [sp, #8]
 8002650:	4297      	cmp	r7, r2
 8002652:	d900      	bls.n	8002656 <USB_EPStartXfer+0x1e>
 8002654:	0017      	movs	r7, r2
    if (ep->doublebuffer == 0U)
 8002656:	002a      	movs	r2, r5
 8002658:	3250      	adds	r2, #80	; 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800265a:	6961      	ldr	r1, [r4, #20]
 800265c:	9201      	str	r2, [sp, #4]
    if (ep->doublebuffer == 0U)
 800265e:	2b00      	cmp	r3, #0
 8002660:	d11d      	bne.n	800269e <USB_EPStartXfer+0x66>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002662:	b2bf      	uxth	r7, r7
 8002664:	003b      	movs	r3, r7
 8002666:	88e2      	ldrh	r2, [r4, #6]
 8002668:	0028      	movs	r0, r5
 800266a:	f7ff ffd0 	bl	800260e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800266e:	9b01      	ldr	r3, [sp, #4]
 8002670:	4ab5      	ldr	r2, [pc, #724]	; (8002948 <USB_EPStartXfer+0x310>)
 8002672:	8819      	ldrh	r1, [r3, #0]
 8002674:	7823      	ldrb	r3, [r4, #0]
 8002676:	18aa      	adds	r2, r5, r2
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	1852      	adds	r2, r2, r1
 800267c:	189b      	adds	r3, r3, r2
 800267e:	801f      	strh	r7, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002680:	7823      	ldrb	r3, [r4, #0]
 8002682:	4ab2      	ldr	r2, [pc, #712]	; (800294c <USB_EPStartXfer+0x314>)
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	18eb      	adds	r3, r5, r3
 8002688:	8819      	ldrh	r1, [r3, #0]
 800268a:	4011      	ands	r1, r2
 800268c:	2230      	movs	r2, #48	; 0x30
 800268e:	404a      	eors	r2, r1
 8002690:	49af      	ldr	r1, [pc, #700]	; (8002950 <USB_EPStartXfer+0x318>)
 8002692:	430a      	orrs	r2, r1
 8002694:	b292      	uxth	r2, r2
  return HAL_OK;
 8002696:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002698:	801a      	strh	r2, [r3, #0]
}
 800269a:	b007      	add	sp, #28
 800269c:	bdf0      	pop	{r4, r5, r6, r7, pc}
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800269e:	7822      	ldrb	r2, [r4, #0]
      if (ep->type == EP_TYPE_BULK)
 80026a0:	78e0      	ldrb	r0, [r4, #3]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80026a2:	0093      	lsls	r3, r2, #2
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80026a4:	00d2      	lsls	r2, r2, #3
        if (ep->xfer_len_db > ep->maxpacket)
 80026a6:	6a26      	ldr	r6, [r4, #32]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80026a8:	18eb      	adds	r3, r5, r3
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80026aa:	9203      	str	r2, [sp, #12]
      if (ep->type == EP_TYPE_BULK)
 80026ac:	2802      	cmp	r0, #2
 80026ae:	d000      	beq.n	80026b2 <USB_EPStartXfer+0x7a>
 80026b0:	e0d1      	b.n	8002856 <USB_EPStartXfer+0x21e>
        if (ep->xfer_len_db > ep->maxpacket)
 80026b2:	9a02      	ldr	r2, [sp, #8]
 80026b4:	42b2      	cmp	r2, r6
 80026b6:	d300      	bcc.n	80026ba <USB_EPStartXfer+0x82>
 80026b8:	e0bb      	b.n	8002832 <USB_EPStartXfer+0x1fa>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80026ba:	881a      	ldrh	r2, [r3, #0]
 80026bc:	48a5      	ldr	r0, [pc, #660]	; (8002954 <USB_EPStartXfer+0x31c>)
          ep->xfer_len_db -= len;
 80026be:	1bf6      	subs	r6, r6, r7
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80026c0:	4010      	ands	r0, r2
 80026c2:	4aa5      	ldr	r2, [pc, #660]	; (8002958 <USB_EPStartXfer+0x320>)
 80026c4:	4310      	orrs	r0, r2
 80026c6:	8018      	strh	r0, [r3, #0]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	2040      	movs	r0, #64	; 0x40
 80026cc:	469c      	mov	ip, r3
 80026ce:	4662      	mov	r2, ip
 80026d0:	4002      	ands	r2, r0
 80026d2:	9205      	str	r2, [sp, #20]
 80026d4:	4662      	mov	r2, ip
            ep->xfer_buff += len;
 80026d6:	19cb      	adds	r3, r1, r7
 80026d8:	9304      	str	r3, [sp, #16]
          ep->xfer_len_db -= len;
 80026da:	6226      	str	r6, [r4, #32]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80026dc:	b2bb      	uxth	r3, r7
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80026de:	4202      	tst	r2, r0
 80026e0:	d055      	beq.n	800278e <USB_EPStartXfer+0x156>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80026e2:	9a01      	ldr	r2, [sp, #4]
 80026e4:	8812      	ldrh	r2, [r2, #0]
 80026e6:	4694      	mov	ip, r2
 80026e8:	4a9c      	ldr	r2, [pc, #624]	; (800295c <USB_EPStartXfer+0x324>)
 80026ea:	18a8      	adds	r0, r5, r2
 80026ec:	9a03      	ldr	r2, [sp, #12]
 80026ee:	4460      	add	r0, ip
 80026f0:	1882      	adds	r2, r0, r2
 80026f2:	8013      	strh	r3, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80026f4:	8962      	ldrh	r2, [r4, #10]
 80026f6:	0028      	movs	r0, r5
 80026f8:	f7ff ff89 	bl	800260e <USB_WritePMA>
            ep->xfer_buff += len;
 80026fc:	9b04      	ldr	r3, [sp, #16]
            if (ep->xfer_len_db > ep->maxpacket)
 80026fe:	9a02      	ldr	r2, [sp, #8]
            ep->xfer_buff += len;
 8002700:	6163      	str	r3, [r4, #20]
              ep->xfer_len_db = 0U;
 8002702:	2300      	movs	r3, #0
            if (ep->xfer_len_db > ep->maxpacket)
 8002704:	42b2      	cmp	r2, r6
 8002706:	d201      	bcs.n	800270c <USB_EPStartXfer+0xd4>
              ep->xfer_len_db -= len;
 8002708:	1bf3      	subs	r3, r6, r7
 800270a:	003e      	movs	r6, r7
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800270c:	7862      	ldrb	r2, [r4, #1]
 800270e:	6223      	str	r3, [r4, #32]
 8002710:	b2b3      	uxth	r3, r6
 8002712:	2a00      	cmp	r2, #0
 8002714:	d12e      	bne.n	8002774 <USB_EPStartXfer+0x13c>
 8002716:	9a01      	ldr	r2, [sp, #4]
 8002718:	498b      	ldr	r1, [pc, #556]	; (8002948 <USB_EPStartXfer+0x310>)
 800271a:	8810      	ldrh	r0, [r2, #0]
 800271c:	7822      	ldrb	r2, [r4, #0]
 800271e:	1869      	adds	r1, r5, r1
 8002720:	1809      	adds	r1, r1, r0
 8002722:	00d2      	lsls	r2, r2, #3
 8002724:	1852      	adds	r2, r2, r1
 8002726:	8811      	ldrh	r1, [r2, #0]
 8002728:	0589      	lsls	r1, r1, #22
 800272a:	0d89      	lsrs	r1, r1, #22
 800272c:	8011      	strh	r1, [r2, #0]
 800272e:	2e3e      	cmp	r6, #62	; 0x3e
 8002730:	d90c      	bls.n	800274c <USB_EPStartXfer+0x114>
 8002732:	201f      	movs	r0, #31
 8002734:	4030      	ands	r0, r6
 8002736:	0971      	lsrs	r1, r6, #5
 8002738:	4246      	negs	r6, r0
 800273a:	4170      	adcs	r0, r6
 800273c:	1a09      	subs	r1, r1, r0
 800273e:	8810      	ldrh	r0, [r2, #0]
 8002740:	0289      	lsls	r1, r1, #10
 8002742:	4308      	orrs	r0, r1
 8002744:	4986      	ldr	r1, [pc, #536]	; (8002960 <USB_EPStartXfer+0x328>)
 8002746:	4301      	orrs	r1, r0
 8002748:	b289      	uxth	r1, r1
 800274a:	e005      	b.n	8002758 <USB_EPStartXfer+0x120>
 800274c:	2e00      	cmp	r6, #0
 800274e:	d10a      	bne.n	8002766 <USB_EPStartXfer+0x12e>
 8002750:	2080      	movs	r0, #128	; 0x80
 8002752:	8811      	ldrh	r1, [r2, #0]
 8002754:	0200      	lsls	r0, r0, #8
 8002756:	4301      	orrs	r1, r0
 8002758:	8011      	strh	r1, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800275a:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800275c:	9904      	ldr	r1, [sp, #16]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800275e:	0028      	movs	r0, r5
 8002760:	f7ff ff55 	bl	800260e <USB_WritePMA>
 8002764:	e78c      	b.n	8002680 <USB_EPStartXfer+0x48>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002766:	2101      	movs	r1, #1
 8002768:	0870      	lsrs	r0, r6, #1
 800276a:	4031      	ands	r1, r6
 800276c:	1840      	adds	r0, r0, r1
 800276e:	0280      	lsls	r0, r0, #10
 8002770:	8811      	ldrh	r1, [r2, #0]
 8002772:	e7e8      	b.n	8002746 <USB_EPStartXfer+0x10e>
 8002774:	2a01      	cmp	r2, #1
 8002776:	d1f0      	bne.n	800275a <USB_EPStartXfer+0x122>
 8002778:	002a      	movs	r2, r5
 800277a:	4973      	ldr	r1, [pc, #460]	; (8002948 <USB_EPStartXfer+0x310>)
 800277c:	3250      	adds	r2, #80	; 0x50
 800277e:	8810      	ldrh	r0, [r2, #0]
 8002780:	7822      	ldrb	r2, [r4, #0]
 8002782:	1869      	adds	r1, r5, r1
 8002784:	00d2      	lsls	r2, r2, #3
 8002786:	1809      	adds	r1, r1, r0
 8002788:	1852      	adds	r2, r2, r1
 800278a:	8013      	strh	r3, [r2, #0]
 800278c:	e7e5      	b.n	800275a <USB_EPStartXfer+0x122>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800278e:	9a01      	ldr	r2, [sp, #4]
 8002790:	8812      	ldrh	r2, [r2, #0]
 8002792:	4694      	mov	ip, r2
 8002794:	4a6c      	ldr	r2, [pc, #432]	; (8002948 <USB_EPStartXfer+0x310>)
 8002796:	18a8      	adds	r0, r5, r2
 8002798:	9a03      	ldr	r2, [sp, #12]
 800279a:	4460      	add	r0, ip
 800279c:	1882      	adds	r2, r0, r2
 800279e:	8013      	strh	r3, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80027a0:	8922      	ldrh	r2, [r4, #8]
 80027a2:	0028      	movs	r0, r5
 80027a4:	f7ff ff33 	bl	800260e <USB_WritePMA>
            ep->xfer_buff += len;
 80027a8:	9b04      	ldr	r3, [sp, #16]
            if (ep->xfer_len_db > ep->maxpacket)
 80027aa:	9a02      	ldr	r2, [sp, #8]
            ep->xfer_buff += len;
 80027ac:	6163      	str	r3, [r4, #20]
              ep->xfer_len_db = 0U;
 80027ae:	9b05      	ldr	r3, [sp, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80027b0:	42b2      	cmp	r2, r6
 80027b2:	d201      	bcs.n	80027b8 <USB_EPStartXfer+0x180>
              ep->xfer_len_db -= len;
 80027b4:	1bf3      	subs	r3, r6, r7
 80027b6:	003e      	movs	r6, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80027b8:	7862      	ldrb	r2, [r4, #1]
 80027ba:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80027bc:	b2b3      	uxth	r3, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80027be:	2a00      	cmp	r2, #0
 80027c0:	d12a      	bne.n	8002818 <USB_EPStartXfer+0x1e0>
 80027c2:	9a01      	ldr	r2, [sp, #4]
 80027c4:	4965      	ldr	r1, [pc, #404]	; (800295c <USB_EPStartXfer+0x324>)
 80027c6:	8810      	ldrh	r0, [r2, #0]
 80027c8:	7822      	ldrb	r2, [r4, #0]
 80027ca:	1869      	adds	r1, r5, r1
 80027cc:	1809      	adds	r1, r1, r0
 80027ce:	00d2      	lsls	r2, r2, #3
 80027d0:	1852      	adds	r2, r2, r1
 80027d2:	8811      	ldrh	r1, [r2, #0]
 80027d4:	0589      	lsls	r1, r1, #22
 80027d6:	0d89      	lsrs	r1, r1, #22
 80027d8:	8011      	strh	r1, [r2, #0]
 80027da:	2e3e      	cmp	r6, #62	; 0x3e
 80027dc:	d90c      	bls.n	80027f8 <USB_EPStartXfer+0x1c0>
 80027de:	201f      	movs	r0, #31
 80027e0:	4030      	ands	r0, r6
 80027e2:	0971      	lsrs	r1, r6, #5
 80027e4:	4246      	negs	r6, r0
 80027e6:	4170      	adcs	r0, r6
 80027e8:	1a09      	subs	r1, r1, r0
 80027ea:	8810      	ldrh	r0, [r2, #0]
 80027ec:	0289      	lsls	r1, r1, #10
 80027ee:	4308      	orrs	r0, r1
 80027f0:	495b      	ldr	r1, [pc, #364]	; (8002960 <USB_EPStartXfer+0x328>)
 80027f2:	4301      	orrs	r1, r0
 80027f4:	b289      	uxth	r1, r1
 80027f6:	e005      	b.n	8002804 <USB_EPStartXfer+0x1cc>
 80027f8:	2e00      	cmp	r6, #0
 80027fa:	d106      	bne.n	800280a <USB_EPStartXfer+0x1d2>
 80027fc:	2080      	movs	r0, #128	; 0x80
 80027fe:	8811      	ldrh	r1, [r2, #0]
 8002800:	0200      	lsls	r0, r0, #8
 8002802:	4301      	orrs	r1, r0
 8002804:	8011      	strh	r1, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002806:	8962      	ldrh	r2, [r4, #10]
 8002808:	e7a8      	b.n	800275c <USB_EPStartXfer+0x124>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800280a:	2101      	movs	r1, #1
 800280c:	0870      	lsrs	r0, r6, #1
 800280e:	400e      	ands	r6, r1
 8002810:	1980      	adds	r0, r0, r6
 8002812:	8811      	ldrh	r1, [r2, #0]
 8002814:	0280      	lsls	r0, r0, #10
 8002816:	e7ec      	b.n	80027f2 <USB_EPStartXfer+0x1ba>
 8002818:	2a01      	cmp	r2, #1
 800281a:	d1f4      	bne.n	8002806 <USB_EPStartXfer+0x1ce>
 800281c:	002a      	movs	r2, r5
 800281e:	494f      	ldr	r1, [pc, #316]	; (800295c <USB_EPStartXfer+0x324>)
 8002820:	3250      	adds	r2, #80	; 0x50
 8002822:	8810      	ldrh	r0, [r2, #0]
 8002824:	7822      	ldrb	r2, [r4, #0]
 8002826:	1869      	adds	r1, r5, r1
 8002828:	00d2      	lsls	r2, r2, #3
 800282a:	1809      	adds	r1, r1, r0
 800282c:	1852      	adds	r2, r2, r1
 800282e:	8013      	strh	r3, [r2, #0]
 8002830:	e7e9      	b.n	8002806 <USB_EPStartXfer+0x1ce>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8002832:	8818      	ldrh	r0, [r3, #0]
 8002834:	4f4b      	ldr	r7, [pc, #300]	; (8002964 <USB_EPStartXfer+0x32c>)
 8002836:	4a46      	ldr	r2, [pc, #280]	; (8002950 <USB_EPStartXfer+0x318>)
 8002838:	4038      	ands	r0, r7
 800283a:	4310      	orrs	r0, r2
 800283c:	b280      	uxth	r0, r0
 800283e:	8018      	strh	r0, [r3, #0]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002840:	9b01      	ldr	r3, [sp, #4]
 8002842:	9a03      	ldr	r2, [sp, #12]
 8002844:	8818      	ldrh	r0, [r3, #0]
 8002846:	4b40      	ldr	r3, [pc, #256]	; (8002948 <USB_EPStartXfer+0x310>)
 8002848:	18eb      	adds	r3, r5, r3
 800284a:	181b      	adds	r3, r3, r0
 800284c:	189a      	adds	r2, r3, r2
 800284e:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002850:	8013      	strh	r3, [r2, #0]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002852:	8922      	ldrh	r2, [r4, #8]
 8002854:	e783      	b.n	800275e <USB_EPStartXfer+0x126>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002856:	8818      	ldrh	r0, [r3, #0]
        ep->xfer_len_db -= len;
 8002858:	1bf6      	subs	r6, r6, r7
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800285a:	9a01      	ldr	r2, [sp, #4]
        ep->xfer_len_db -= len;
 800285c:	6226      	str	r6, [r4, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800285e:	8816      	ldrh	r6, [r2, #0]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002860:	b2bb      	uxth	r3, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002862:	0640      	lsls	r0, r0, #25
 8002864:	d507      	bpl.n	8002876 <USB_EPStartXfer+0x23e>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002866:	4a3d      	ldr	r2, [pc, #244]	; (800295c <USB_EPStartXfer+0x324>)
 8002868:	18a8      	adds	r0, r5, r2
 800286a:	9a03      	ldr	r2, [sp, #12]
 800286c:	1980      	adds	r0, r0, r6
 800286e:	1882      	adds	r2, r0, r2
 8002870:	8013      	strh	r3, [r2, #0]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002872:	8962      	ldrh	r2, [r4, #10]
 8002874:	e773      	b.n	800275e <USB_EPStartXfer+0x126>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002876:	4a34      	ldr	r2, [pc, #208]	; (8002948 <USB_EPStartXfer+0x310>)
 8002878:	18a8      	adds	r0, r5, r2
 800287a:	9a03      	ldr	r2, [sp, #12]
 800287c:	1980      	adds	r0, r0, r6
 800287e:	1882      	adds	r2, r0, r2
 8002880:	e7e6      	b.n	8002850 <USB_EPStartXfer+0x218>
    if (ep->doublebuffer == 0U)
 8002882:	2b00      	cmp	r3, #0
 8002884:	d13c      	bne.n	8002900 <USB_EPStartXfer+0x2c8>
      if (ep->xfer_len > ep->maxpacket)
 8002886:	698a      	ldr	r2, [r1, #24]
 8002888:	6909      	ldr	r1, [r1, #16]
 800288a:	428a      	cmp	r2, r1
 800288c:	d901      	bls.n	8002892 <USB_EPStartXfer+0x25a>
        ep->xfer_len -= len;
 800288e:	1a53      	subs	r3, r2, r1
 8002890:	000a      	movs	r2, r1
 8002892:	61a3      	str	r3, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002894:	002b      	movs	r3, r5
 8002896:	4931      	ldr	r1, [pc, #196]	; (800295c <USB_EPStartXfer+0x324>)
 8002898:	3350      	adds	r3, #80	; 0x50
 800289a:	8818      	ldrh	r0, [r3, #0]
 800289c:	7823      	ldrb	r3, [r4, #0]
 800289e:	1869      	adds	r1, r5, r1
 80028a0:	1809      	adds	r1, r1, r0
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	185b      	adds	r3, r3, r1
 80028a6:	8819      	ldrh	r1, [r3, #0]
 80028a8:	0589      	lsls	r1, r1, #22
 80028aa:	0d89      	lsrs	r1, r1, #22
 80028ac:	8019      	strh	r1, [r3, #0]
 80028ae:	2a3e      	cmp	r2, #62	; 0x3e
 80028b0:	d918      	bls.n	80028e4 <USB_EPStartXfer+0x2ac>
 80028b2:	201f      	movs	r0, #31
 80028b4:	0951      	lsrs	r1, r2, #5
 80028b6:	4002      	ands	r2, r0
 80028b8:	4250      	negs	r0, r2
 80028ba:	4142      	adcs	r2, r0
 80028bc:	1a89      	subs	r1, r1, r2
 80028be:	881a      	ldrh	r2, [r3, #0]
 80028c0:	0289      	lsls	r1, r1, #10
 80028c2:	4311      	orrs	r1, r2
 80028c4:	4a26      	ldr	r2, [pc, #152]	; (8002960 <USB_EPStartXfer+0x328>)
 80028c6:	430a      	orrs	r2, r1
 80028c8:	b292      	uxth	r2, r2
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80028ca:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80028cc:	7823      	ldrb	r3, [r4, #0]
 80028ce:	4a26      	ldr	r2, [pc, #152]	; (8002968 <USB_EPStartXfer+0x330>)
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	18eb      	adds	r3, r5, r3
 80028d4:	8819      	ldrh	r1, [r3, #0]
 80028d6:	4011      	ands	r1, r2
 80028d8:	22c0      	movs	r2, #192	; 0xc0
 80028da:	0192      	lsls	r2, r2, #6
 80028dc:	404a      	eors	r2, r1
 80028de:	4923      	ldr	r1, [pc, #140]	; (800296c <USB_EPStartXfer+0x334>)
 80028e0:	430a      	orrs	r2, r1
 80028e2:	e6d8      	b.n	8002696 <USB_EPStartXfer+0x5e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80028e4:	2a00      	cmp	r2, #0
 80028e6:	d104      	bne.n	80028f2 <USB_EPStartXfer+0x2ba>
 80028e8:	2180      	movs	r1, #128	; 0x80
 80028ea:	881a      	ldrh	r2, [r3, #0]
 80028ec:	0209      	lsls	r1, r1, #8
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80028ee:	430a      	orrs	r2, r1
 80028f0:	e7eb      	b.n	80028ca <USB_EPStartXfer+0x292>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80028f2:	2001      	movs	r0, #1
 80028f4:	0851      	lsrs	r1, r2, #1
 80028f6:	4002      	ands	r2, r0
 80028f8:	1889      	adds	r1, r1, r2
 80028fa:	0289      	lsls	r1, r1, #10
 80028fc:	881a      	ldrh	r2, [r3, #0]
 80028fe:	e7e2      	b.n	80028c6 <USB_EPStartXfer+0x28e>
      if (ep->type == EP_TYPE_BULK)
 8002900:	78cb      	ldrb	r3, [r1, #3]
 8002902:	2b02      	cmp	r3, #2
 8002904:	d000      	beq.n	8002908 <USB_EPStartXfer+0x2d0>
 8002906:	e07c      	b.n	8002a02 <USB_EPStartXfer+0x3ca>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8002908:	2a00      	cmp	r2, #0
 800290a:	d14c      	bne.n	80029a6 <USB_EPStartXfer+0x36e>
 800290c:	0006      	movs	r6, r0
 800290e:	4b0e      	ldr	r3, [pc, #56]	; (8002948 <USB_EPStartXfer+0x310>)
 8002910:	3650      	adds	r6, #80	; 0x50
 8002912:	8831      	ldrh	r1, [r6, #0]
 8002914:	7822      	ldrb	r2, [r4, #0]
 8002916:	18c3      	adds	r3, r0, r3
 8002918:	185b      	adds	r3, r3, r1
 800291a:	00d2      	lsls	r2, r2, #3
 800291c:	18d2      	adds	r2, r2, r3
 800291e:	8813      	ldrh	r3, [r2, #0]
 8002920:	059b      	lsls	r3, r3, #22
 8002922:	0d9b      	lsrs	r3, r3, #22
 8002924:	8013      	strh	r3, [r2, #0]
 8002926:	6923      	ldr	r3, [r4, #16]
 8002928:	2b3e      	cmp	r3, #62	; 0x3e
 800292a:	d921      	bls.n	8002970 <USB_EPStartXfer+0x338>
 800292c:	201f      	movs	r0, #31
 800292e:	4018      	ands	r0, r3
 8002930:	4247      	negs	r7, r0
 8002932:	4178      	adcs	r0, r7
 8002934:	0959      	lsrs	r1, r3, #5
 8002936:	1a09      	subs	r1, r1, r0
 8002938:	8810      	ldrh	r0, [r2, #0]
 800293a:	0289      	lsls	r1, r1, #10
 800293c:	4308      	orrs	r0, r1
 800293e:	4908      	ldr	r1, [pc, #32]	; (8002960 <USB_EPStartXfer+0x328>)
 8002940:	4301      	orrs	r1, r0
 8002942:	b289      	uxth	r1, r1
 8002944:	e01a      	b.n	800297c <USB_EPStartXfer+0x344>
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	00000402 	.word	0x00000402
 800294c:	ffff8fbf 	.word	0xffff8fbf
 8002950:	ffff8080 	.word	0xffff8080
 8002954:	ffff8f8f 	.word	0xffff8f8f
 8002958:	00008180 	.word	0x00008180
 800295c:	00000406 	.word	0x00000406
 8002960:	ffff8000 	.word	0xffff8000
 8002964:	ffff8e8f 	.word	0xffff8e8f
 8002968:	ffffbf8f 	.word	0xffffbf8f
 800296c:	00008080 	.word	0x00008080
 8002970:	2b00      	cmp	r3, #0
 8002972:	d12b      	bne.n	80029cc <USB_EPStartXfer+0x394>
 8002974:	2080      	movs	r0, #128	; 0x80
 8002976:	8811      	ldrh	r1, [r2, #0]
 8002978:	0200      	lsls	r0, r0, #8
 800297a:	4301      	orrs	r1, r0
 800297c:	8011      	strh	r1, [r2, #0]
 800297e:	4952      	ldr	r1, [pc, #328]	; (8002ac8 <USB_EPStartXfer+0x490>)
 8002980:	8830      	ldrh	r0, [r6, #0]
 8002982:	7822      	ldrb	r2, [r4, #0]
 8002984:	1869      	adds	r1, r5, r1
 8002986:	1809      	adds	r1, r1, r0
 8002988:	00d2      	lsls	r2, r2, #3
 800298a:	1852      	adds	r2, r2, r1
 800298c:	8811      	ldrh	r1, [r2, #0]
 800298e:	0589      	lsls	r1, r1, #22
 8002990:	0d89      	lsrs	r1, r1, #22
 8002992:	8011      	strh	r1, [r2, #0]
 8002994:	2b3e      	cmp	r3, #62	; 0x3e
 8002996:	d820      	bhi.n	80029da <USB_EPStartXfer+0x3a2>
 8002998:	2b00      	cmp	r3, #0
 800299a:	d12b      	bne.n	80029f4 <USB_EPStartXfer+0x3bc>
 800299c:	2180      	movs	r1, #128	; 0x80
 800299e:	8813      	ldrh	r3, [r2, #0]
 80029a0:	0209      	lsls	r1, r1, #8
 80029a2:	430b      	orrs	r3, r1
 80029a4:	8013      	strh	r3, [r2, #0]
        if (ep->xfer_count != 0U)
 80029a6:	69e3      	ldr	r3, [r4, #28]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d08f      	beq.n	80028cc <USB_EPStartXfer+0x294>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80029ac:	7823      	ldrb	r3, [r4, #0]
 80029ae:	4947      	ldr	r1, [pc, #284]	; (8002acc <USB_EPStartXfer+0x494>)
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	18eb      	adds	r3, r5, r3
 80029b4:	881a      	ldrh	r2, [r3, #0]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80029b6:	400a      	ands	r2, r1
 80029b8:	428a      	cmp	r2, r1
 80029ba:	d002      	beq.n	80029c2 <USB_EPStartXfer+0x38a>
 80029bc:	2a00      	cmp	r2, #0
 80029be:	d000      	beq.n	80029c2 <USB_EPStartXfer+0x38a>
 80029c0:	e784      	b.n	80028cc <USB_EPStartXfer+0x294>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80029c2:	4943      	ldr	r1, [pc, #268]	; (8002ad0 <USB_EPStartXfer+0x498>)
 80029c4:	881a      	ldrh	r2, [r3, #0]
 80029c6:	400a      	ands	r2, r1
 80029c8:	4942      	ldr	r1, [pc, #264]	; (8002ad4 <USB_EPStartXfer+0x49c>)
 80029ca:	e790      	b.n	80028ee <USB_EPStartXfer+0x2b6>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80029cc:	2101      	movs	r1, #1
 80029ce:	0858      	lsrs	r0, r3, #1
 80029d0:	4019      	ands	r1, r3
 80029d2:	1840      	adds	r0, r0, r1
 80029d4:	0280      	lsls	r0, r0, #10
 80029d6:	8811      	ldrh	r1, [r2, #0]
 80029d8:	e7b2      	b.n	8002940 <USB_EPStartXfer+0x308>
 80029da:	201f      	movs	r0, #31
 80029dc:	0959      	lsrs	r1, r3, #5
 80029de:	4003      	ands	r3, r0
 80029e0:	4258      	negs	r0, r3
 80029e2:	4143      	adcs	r3, r0
 80029e4:	1ac9      	subs	r1, r1, r3
 80029e6:	8813      	ldrh	r3, [r2, #0]
 80029e8:	0289      	lsls	r1, r1, #10
 80029ea:	4319      	orrs	r1, r3
 80029ec:	4b3a      	ldr	r3, [pc, #232]	; (8002ad8 <USB_EPStartXfer+0x4a0>)
 80029ee:	430b      	orrs	r3, r1
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	e7d7      	b.n	80029a4 <USB_EPStartXfer+0x36c>
 80029f4:	2001      	movs	r0, #1
 80029f6:	0859      	lsrs	r1, r3, #1
 80029f8:	4003      	ands	r3, r0
 80029fa:	18c9      	adds	r1, r1, r3
 80029fc:	0289      	lsls	r1, r1, #10
 80029fe:	8813      	ldrh	r3, [r2, #0]
 8002a00:	e7f5      	b.n	80029ee <USB_EPStartXfer+0x3b6>
        return HAL_ERROR;
 8002a02:	2001      	movs	r0, #1
      else if (ep->type == EP_TYPE_ISOC)
 8002a04:	4283      	cmp	r3, r0
 8002a06:	d000      	beq.n	8002a0a <USB_EPStartXfer+0x3d2>
 8002a08:	e647      	b.n	800269a <USB_EPStartXfer+0x62>
        if (ep->xfer_len > ep->maxpacket)
 8002a0a:	698b      	ldr	r3, [r1, #24]
 8002a0c:	6909      	ldr	r1, [r1, #16]
          ep->xfer_len = 0U;
 8002a0e:	2000      	movs	r0, #0
        if (ep->xfer_len > ep->maxpacket)
 8002a10:	428b      	cmp	r3, r1
 8002a12:	d901      	bls.n	8002a18 <USB_EPStartXfer+0x3e0>
          ep->xfer_len -= len;
 8002a14:	1a58      	subs	r0, r3, r1
 8002a16:	000b      	movs	r3, r1
 8002a18:	61a0      	str	r0, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002a1a:	2a00      	cmp	r2, #0
 8002a1c:	d000      	beq.n	8002a20 <USB_EPStartXfer+0x3e8>
 8002a1e:	e755      	b.n	80028cc <USB_EPStartXfer+0x294>
 8002a20:	002e      	movs	r6, r5
 8002a22:	492e      	ldr	r1, [pc, #184]	; (8002adc <USB_EPStartXfer+0x4a4>)
 8002a24:	3650      	adds	r6, #80	; 0x50
 8002a26:	8830      	ldrh	r0, [r6, #0]
 8002a28:	7822      	ldrb	r2, [r4, #0]
 8002a2a:	1869      	adds	r1, r5, r1
 8002a2c:	1809      	adds	r1, r1, r0
 8002a2e:	00d2      	lsls	r2, r2, #3
 8002a30:	1852      	adds	r2, r2, r1
 8002a32:	8811      	ldrh	r1, [r2, #0]
 8002a34:	0589      	lsls	r1, r1, #22
 8002a36:	0d89      	lsrs	r1, r1, #22
 8002a38:	8011      	strh	r1, [r2, #0]
 8002a3a:	2b3e      	cmp	r3, #62	; 0x3e
 8002a3c:	d90c      	bls.n	8002a58 <USB_EPStartXfer+0x420>
 8002a3e:	201f      	movs	r0, #31
 8002a40:	4018      	ands	r0, r3
 8002a42:	4247      	negs	r7, r0
 8002a44:	4178      	adcs	r0, r7
 8002a46:	0959      	lsrs	r1, r3, #5
 8002a48:	1a09      	subs	r1, r1, r0
 8002a4a:	8810      	ldrh	r0, [r2, #0]
 8002a4c:	0289      	lsls	r1, r1, #10
 8002a4e:	4308      	orrs	r0, r1
 8002a50:	4921      	ldr	r1, [pc, #132]	; (8002ad8 <USB_EPStartXfer+0x4a0>)
 8002a52:	4301      	orrs	r1, r0
 8002a54:	b289      	uxth	r1, r1
 8002a56:	e005      	b.n	8002a64 <USB_EPStartXfer+0x42c>
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d119      	bne.n	8002a90 <USB_EPStartXfer+0x458>
 8002a5c:	2080      	movs	r0, #128	; 0x80
 8002a5e:	8811      	ldrh	r1, [r2, #0]
 8002a60:	0200      	lsls	r0, r0, #8
 8002a62:	4301      	orrs	r1, r0
 8002a64:	8011      	strh	r1, [r2, #0]
 8002a66:	4918      	ldr	r1, [pc, #96]	; (8002ac8 <USB_EPStartXfer+0x490>)
 8002a68:	8830      	ldrh	r0, [r6, #0]
 8002a6a:	7822      	ldrb	r2, [r4, #0]
 8002a6c:	1869      	adds	r1, r5, r1
 8002a6e:	1809      	adds	r1, r1, r0
 8002a70:	00d2      	lsls	r2, r2, #3
 8002a72:	1852      	adds	r2, r2, r1
 8002a74:	8811      	ldrh	r1, [r2, #0]
 8002a76:	0589      	lsls	r1, r1, #22
 8002a78:	0d89      	lsrs	r1, r1, #22
 8002a7a:	8011      	strh	r1, [r2, #0]
 8002a7c:	2b3e      	cmp	r3, #62	; 0x3e
 8002a7e:	d80e      	bhi.n	8002a9e <USB_EPStartXfer+0x466>
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d119      	bne.n	8002ab8 <USB_EPStartXfer+0x480>
 8002a84:	2180      	movs	r1, #128	; 0x80
 8002a86:	8813      	ldrh	r3, [r2, #0]
 8002a88:	0209      	lsls	r1, r1, #8
 8002a8a:	430b      	orrs	r3, r1
 8002a8c:	8013      	strh	r3, [r2, #0]
 8002a8e:	e71d      	b.n	80028cc <USB_EPStartXfer+0x294>
 8002a90:	2101      	movs	r1, #1
 8002a92:	0858      	lsrs	r0, r3, #1
 8002a94:	4019      	ands	r1, r3
 8002a96:	1840      	adds	r0, r0, r1
 8002a98:	0280      	lsls	r0, r0, #10
 8002a9a:	8811      	ldrh	r1, [r2, #0]
 8002a9c:	e7d9      	b.n	8002a52 <USB_EPStartXfer+0x41a>
 8002a9e:	201f      	movs	r0, #31
 8002aa0:	0959      	lsrs	r1, r3, #5
 8002aa2:	4003      	ands	r3, r0
 8002aa4:	4258      	negs	r0, r3
 8002aa6:	4143      	adcs	r3, r0
 8002aa8:	1ac9      	subs	r1, r1, r3
 8002aaa:	8813      	ldrh	r3, [r2, #0]
 8002aac:	0289      	lsls	r1, r1, #10
 8002aae:	4319      	orrs	r1, r3
 8002ab0:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <USB_EPStartXfer+0x4a0>)
 8002ab2:	430b      	orrs	r3, r1
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	e7e9      	b.n	8002a8c <USB_EPStartXfer+0x454>
 8002ab8:	2001      	movs	r0, #1
 8002aba:	0859      	lsrs	r1, r3, #1
 8002abc:	4003      	ands	r3, r0
 8002abe:	18c9      	adds	r1, r1, r3
 8002ac0:	0289      	lsls	r1, r1, #10
 8002ac2:	8813      	ldrh	r3, [r2, #0]
 8002ac4:	e7f5      	b.n	8002ab2 <USB_EPStartXfer+0x47a>
 8002ac6:	46c0      	nop			; (mov r8, r8)
 8002ac8:	00000406 	.word	0x00000406
 8002acc:	00004040 	.word	0x00004040
 8002ad0:	ffff8f8f 	.word	0xffff8f8f
 8002ad4:	000080c0 	.word	0x000080c0
 8002ad8:	ffff8000 	.word	0xffff8000
 8002adc:	00000402 	.word	0x00000402

08002ae0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002ae2:	2580      	movs	r5, #128	; 0x80
  uint32_t n = (uint32_t)wNBytes >> 1;
 8002ae4:	085c      	lsrs	r4, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002ae6:	00ed      	lsls	r5, r5, #3
 8002ae8:	1952      	adds	r2, r2, r5

  for (count = n; count != 0U; count--)
 8002aea:	0026      	movs	r6, r4
  uint8_t *pBuf = pbUsrBuf;
 8002aec:	000d      	movs	r5, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002aee:	1880      	adds	r0, r0, r2
  for (count = n; count != 0U; count--)
 8002af0:	1a47      	subs	r7, r0, r1
 8002af2:	197a      	adds	r2, r7, r5
 8002af4:	2e00      	cmp	r6, #0
 8002af6:	d107      	bne.n	8002b08 <USB_ReadPMA+0x28>
 8002af8:	0064      	lsls	r4, r4, #1
 8002afa:	1900      	adds	r0, r0, r4
 8002afc:	1909      	adds	r1, r1, r4
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8002afe:	07db      	lsls	r3, r3, #31
 8002b00:	d501      	bpl.n	8002b06 <USB_ReadPMA+0x26>
  {
    RdVal = *pdwVal;
 8002b02:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8002b04:	700b      	strb	r3, [r1, #0]
  }
}
 8002b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 8002b08:	8812      	ldrh	r2, [r2, #0]
  for (count = n; count != 0U; count--)
 8002b0a:	3e01      	subs	r6, #1
    RdVal = *(__IO uint16_t *)pdwVal;
 8002b0c:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8002b0e:	702a      	strb	r2, [r5, #0]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8002b10:	0a12      	lsrs	r2, r2, #8
 8002b12:	706a      	strb	r2, [r5, #1]
    pBuf++;
 8002b14:	3502      	adds	r5, #2
  for (count = n; count != 0U; count--)
 8002b16:	e7ec      	b.n	8002af2 <USB_ReadPMA+0x12>

08002b18 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8002b18:	2329      	movs	r3, #41	; 0x29
 8002b1a:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 8002b1c:	4800      	ldr	r0, [pc, #0]	; (8002b20 <USBD_CUSTOM_HID_GetFSCfgDesc+0x8>)
}
 8002b1e:	4770      	bx	lr
 8002b20:	200000c8 	.word	0x200000c8

08002b24 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8002b24:	2329      	movs	r3, #41	; 0x29
 8002b26:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 8002b28:	4800      	ldr	r0, [pc, #0]	; (8002b2c <USBD_CUSTOM_HID_GetHSCfgDesc+0x8>)
}
 8002b2a:	4770      	bx	lr
 8002b2c:	200000f4 	.word	0x200000f4

08002b30 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8002b30:	2329      	movs	r3, #41	; 0x29
 8002b32:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8002b34:	4800      	ldr	r0, [pc, #0]	; (8002b38 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x8>)
}
 8002b36:	4770      	bx	lr
 8002b38:	20000138 	.word	0x20000138

08002b3c <USBD_CUSTOM_HID_DataIn>:
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8002b3c:	23ae      	movs	r3, #174	; 0xae
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	58c3      	ldr	r3, [r0, r3]
 8002b42:	2000      	movs	r0, #0
 8002b44:	3301      	adds	r3, #1
 8002b46:	77d8      	strb	r0, [r3, #31]

  return USBD_OK;
}
 8002b48:	4770      	bx	lr

08002b4a <USBD_CUSTOM_HID_EP0_RxReady>:
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8002b4a:	22ae      	movs	r2, #174	; 0xae
 8002b4c:	0092      	lsls	r2, r2, #2
{
 8002b4e:	b510      	push	{r4, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8002b50:	5884      	ldr	r4, [r0, r2]
{
 8002b52:	0003      	movs	r3, r0

  if (hhid->IsReportAvailable == 1U)
 8002b54:	69e2      	ldr	r2, [r4, #28]
 8002b56:	2a01      	cmp	r2, #1
 8002b58:	d108      	bne.n	8002b6c <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8002b5a:	22af      	movs	r2, #175	; 0xaf
 8002b5c:	0092      	lsls	r2, r2, #2
 8002b5e:	589b      	ldr	r3, [r3, r2]
 8002b60:	7861      	ldrb	r1, [r4, #1]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	7820      	ldrb	r0, [r4, #0]
 8002b66:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	61e3      	str	r3, [r4, #28]
  }

  return USBD_OK;
}
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	bd10      	pop	{r4, pc}

08002b70 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8002b70:	230a      	movs	r3, #10
 8002b72:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8002b74:	4800      	ldr	r0, [pc, #0]	; (8002b78 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x8>)
}
 8002b76:	4770      	bx	lr
 8002b78:	2000012c 	.word	0x2000012c

08002b7c <USBD_CUSTOM_HID_DataOut>:
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8002b7c:	23ae      	movs	r3, #174	; 0xae
{
 8002b7e:	b570      	push	{r4, r5, r6, lr}
 8002b80:	0004      	movs	r4, r0
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	58c5      	ldr	r5, [r0, r3]
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8002b86:	3304      	adds	r3, #4
 8002b88:	58e3      	ldr	r3, [r4, r3]
 8002b8a:	7869      	ldrb	r1, [r5, #1]
 8002b8c:	7828      	ldrb	r0, [r5, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	4798      	blx	r3
  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8002b92:	002a      	movs	r2, r5
 8002b94:	230f      	movs	r3, #15
 8002b96:	2101      	movs	r1, #1
 8002b98:	0020      	movs	r0, r4
 8002b9a:	f000 feac 	bl	80038f6 <USBD_LL_PrepareReceive>
}
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	bd70      	pop	{r4, r5, r6, pc}
	...

08002ba4 <USBD_CUSTOM_HID_Setup>:
{
 8002ba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8002ba6:	22ae      	movs	r2, #174	; 0xae
 8002ba8:	0092      	lsls	r2, r2, #2
 8002baa:	5884      	ldr	r4, [r0, r2]
  uint16_t status_info = 0U;
 8002bac:	466a      	mov	r2, sp
{
 8002bae:	0003      	movs	r3, r0
 8002bb0:	7808      	ldrb	r0, [r1, #0]
  uint16_t status_info = 0U;
 8002bb2:	1d97      	adds	r7, r2, #6
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	0005      	movs	r5, r0
 8002bb8:	803a      	strh	r2, [r7, #0]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002bba:	3260      	adds	r2, #96	; 0x60
 8002bbc:	4015      	ands	r5, r2
 8002bbe:	4210      	tst	r0, r2
 8002bc0:	d027      	beq.n	8002c12 <USBD_CUSTOM_HID_Setup+0x6e>
 8002bc2:	2d20      	cmp	r5, #32
 8002bc4:	d13d      	bne.n	8002c42 <USBD_CUSTOM_HID_Setup+0x9e>
      switch (req->bRequest)
 8002bc6:	7848      	ldrb	r0, [r1, #1]
 8002bc8:	3802      	subs	r0, #2
 8002bca:	2809      	cmp	r0, #9
 8002bcc:	d839      	bhi.n	8002c42 <USBD_CUSTOM_HID_Setup+0x9e>
 8002bce:	f7fd faa3 	bl	8000118 <__gnu_thumb1_case_uqi>
 8002bd2:	0a15      	.short	0x0a15
 8002bd4:	38383838 	.word	0x38383838
 8002bd8:	05111838 	.word	0x05111838
          hhid->Protocol = (uint8_t)(req->wValue);
 8002bdc:	788b      	ldrb	r3, [r1, #2]
 8002bde:	6123      	str	r3, [r4, #16]
  uint8_t ret = USBD_OK;
 8002be0:	2500      	movs	r5, #0
}
 8002be2:	0028      	movs	r0, r5
 8002be4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8002be6:	0021      	movs	r1, r4
 8002be8:	3110      	adds	r1, #16
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8002bea:	2201      	movs	r2, #1
 8002bec:	0018      	movs	r0, r3
 8002bee:	f000 fc6f 	bl	80034d0 <USBD_CtlSendData>
          break;
 8002bf2:	e7f5      	b.n	8002be0 <USBD_CUSTOM_HID_Setup+0x3c>
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8002bf4:	884b      	ldrh	r3, [r1, #2]
 8002bf6:	0a1b      	lsrs	r3, r3, #8
 8002bf8:	6163      	str	r3, [r4, #20]
          break;
 8002bfa:	e7f1      	b.n	8002be0 <USBD_CUSTOM_HID_Setup+0x3c>
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8002bfc:	0021      	movs	r1, r4
 8002bfe:	3114      	adds	r1, #20
 8002c00:	e7f3      	b.n	8002bea <USBD_CUSTOM_HID_Setup+0x46>
          hhid->IsReportAvailable = 1U;
 8002c02:	2201      	movs	r2, #1
 8002c04:	61e2      	str	r2, [r4, #28]
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8002c06:	88ca      	ldrh	r2, [r1, #6]
 8002c08:	0018      	movs	r0, r3
 8002c0a:	0021      	movs	r1, r4
 8002c0c:	f000 fc76 	bl	80034fc <USBD_CtlPrepareRx>
 8002c10:	e7e6      	b.n	8002be0 <USBD_CUSTOM_HID_Setup+0x3c>
      switch (req->bRequest)
 8002c12:	784e      	ldrb	r6, [r1, #1]
 8002c14:	2e0b      	cmp	r6, #11
 8002c16:	d814      	bhi.n	8002c42 <USBD_CUSTOM_HID_Setup+0x9e>
 8002c18:	0030      	movs	r0, r6
 8002c1a:	f7fd fa7d 	bl	8000118 <__gnu_thumb1_case_uqi>
 8002c1e:	1206      	.short	0x1206
 8002c20:	12121212 	.word	0x12121212
 8002c24:	12121217 	.word	0x12121217
 8002c28:	3f36      	.short	0x3f36
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002c2a:	22a7      	movs	r2, #167	; 0xa7
 8002c2c:	0092      	lsls	r2, r2, #2
 8002c2e:	5c9a      	ldrb	r2, [r3, r2]
 8002c30:	2a03      	cmp	r2, #3
 8002c32:	d106      	bne.n	8002c42 <USBD_CUSTOM_HID_Setup+0x9e>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8002c34:	0039      	movs	r1, r7
 8002c36:	0018      	movs	r0, r3
 8002c38:	3a01      	subs	r2, #1
 8002c3a:	f000 fc49 	bl	80034d0 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8002c3e:	0035      	movs	r5, r6
 8002c40:	e7cf      	b.n	8002be2 <USBD_CUSTOM_HID_Setup+0x3e>
            USBD_CtlError(pdev, req);
 8002c42:	0018      	movs	r0, r3
 8002c44:	f000 fc1c 	bl	8003480 <USBD_CtlError>
            ret = USBD_FAIL;
 8002c48:	2502      	movs	r5, #2
 8002c4a:	e7ca      	b.n	8002be2 <USBD_CUSTOM_HID_Setup+0x3e>
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8002c4c:	884c      	ldrh	r4, [r1, #2]
 8002c4e:	0a24      	lsrs	r4, r4, #8
 8002c50:	2c22      	cmp	r4, #34	; 0x22
 8002c52:	d10e      	bne.n	8002c72 <USBD_CUSTOM_HID_Setup+0xce>
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8002c54:	88c9      	ldrh	r1, [r1, #6]
 8002c56:	1c0a      	adds	r2, r1, #0
 8002c58:	2949      	cmp	r1, #73	; 0x49
 8002c5a:	d900      	bls.n	8002c5e <USBD_CUSTOM_HID_Setup+0xba>
 8002c5c:	2249      	movs	r2, #73	; 0x49
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8002c5e:	21af      	movs	r1, #175	; 0xaf
 8002c60:	0089      	lsls	r1, r1, #2
 8002c62:	5859      	ldr	r1, [r3, r1]
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8002c64:	b292      	uxth	r2, r2
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8002c66:	6808      	ldr	r0, [r1, #0]
          USBD_CtlSendData(pdev, pbuf, len);
 8002c68:	0001      	movs	r1, r0
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	f000 fc30 	bl	80034d0 <USBD_CtlSendData>
 8002c70:	e7b7      	b.n	8002be2 <USBD_CUSTOM_HID_Setup+0x3e>
  uint8_t  *pbuf = NULL;
 8002c72:	2000      	movs	r0, #0
  uint16_t len = 0U;
 8002c74:	0002      	movs	r2, r0
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8002c76:	2c21      	cmp	r4, #33	; 0x21
 8002c78:	d1f6      	bne.n	8002c68 <USBD_CUSTOM_HID_Setup+0xc4>
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8002c7a:	88c9      	ldrh	r1, [r1, #6]
 8002c7c:	1c0a      	adds	r2, r1, #0
 8002c7e:	2909      	cmp	r1, #9
 8002c80:	d900      	bls.n	8002c84 <USBD_CUSTOM_HID_Setup+0xe0>
 8002c82:	2209      	movs	r2, #9
              pbuf = USBD_CUSTOM_HID_Desc;
 8002c84:	4809      	ldr	r0, [pc, #36]	; (8002cac <USBD_CUSTOM_HID_Setup+0x108>)
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8002c86:	b292      	uxth	r2, r2
 8002c88:	e7ee      	b.n	8002c68 <USBD_CUSTOM_HID_Setup+0xc4>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002c8a:	22a7      	movs	r2, #167	; 0xa7
 8002c8c:	0092      	lsls	r2, r2, #2
 8002c8e:	5c9a      	ldrb	r2, [r3, r2]
 8002c90:	2a03      	cmp	r2, #3
 8002c92:	d1d6      	bne.n	8002c42 <USBD_CUSTOM_HID_Setup+0x9e>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8002c94:	0021      	movs	r1, r4
 8002c96:	3a02      	subs	r2, #2
 8002c98:	3118      	adds	r1, #24
 8002c9a:	e7e6      	b.n	8002c6a <USBD_CUSTOM_HID_Setup+0xc6>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002c9c:	22a7      	movs	r2, #167	; 0xa7
 8002c9e:	0092      	lsls	r2, r2, #2
 8002ca0:	5c9a      	ldrb	r2, [r3, r2]
 8002ca2:	2a03      	cmp	r2, #3
 8002ca4:	d1cd      	bne.n	8002c42 <USBD_CUSTOM_HID_Setup+0x9e>
            hhid->AltSetting = (uint8_t)(req->wValue);
 8002ca6:	788b      	ldrb	r3, [r1, #2]
 8002ca8:	61a3      	str	r3, [r4, #24]
 8002caa:	e79a      	b.n	8002be2 <USBD_CUSTOM_HID_Setup+0x3e>
 8002cac:	20000120 	.word	0x20000120

08002cb0 <USBD_CUSTOM_HID_DeInit>:
{
 8002cb0:	b570      	push	{r4, r5, r6, lr}
 8002cb2:	0004      	movs	r4, r0
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8002cb4:	2600      	movs	r6, #0
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8002cb6:	2181      	movs	r1, #129	; 0x81
 8002cb8:	f000 fddb 	bl	8003872 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	0020      	movs	r0, r4
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8002cc0:	62e6      	str	r6, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8002cc2:	f000 fdd6 	bl	8003872 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8002cc6:	25ae      	movs	r5, #174	; 0xae
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8002cc8:	0023      	movs	r3, r4
  if (pdev->pClassData != NULL)
 8002cca:	00ad      	lsls	r5, r5, #2
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8002ccc:	33fc      	adds	r3, #252	; 0xfc
 8002cce:	671e      	str	r6, [r3, #112]	; 0x70
  if (pdev->pClassData != NULL)
 8002cd0:	5963      	ldr	r3, [r4, r5]
 8002cd2:	42b3      	cmp	r3, r6
 8002cd4:	d008      	beq.n	8002ce8 <USBD_CUSTOM_HID_DeInit+0x38>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8002cd6:	23af      	movs	r3, #175	; 0xaf
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	58e3      	ldr	r3, [r4, r3]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8002ce0:	5960      	ldr	r0, [r4, r5]
 8002ce2:	f000 fe15 	bl	8003910 <USBD_static_free>
    pdev->pClassData = NULL;
 8002ce6:	5166      	str	r6, [r4, r5]
}
 8002ce8:	2000      	movs	r0, #0
 8002cea:	bd70      	pop	{r4, r5, r6, pc}

08002cec <USBD_CUSTOM_HID_Init>:
{
 8002cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cee:	0004      	movs	r4, r0
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8002cf0:	2701      	movs	r7, #1
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	2203      	movs	r2, #3
 8002cf6:	2181      	movs	r1, #129	; 0x81
 8002cf8:	f000 fdaf 	bl	800385a <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	2203      	movs	r2, #3
 8002d00:	0039      	movs	r1, r7
 8002d02:	0020      	movs	r0, r4
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8002d04:	62e7      	str	r7, [r4, #44]	; 0x2c
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8002d06:	f000 fda8 	bl	800385a <USBD_LL_OpenEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8002d0a:	0023      	movs	r3, r4
 8002d0c:	33fc      	adds	r3, #252	; 0xfc
 8002d0e:	671f      	str	r7, [r3, #112]	; 0x70
  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8002d10:	2024      	movs	r0, #36	; 0x24
 8002d12:	f000 fdf9 	bl	8003908 <USBD_static_malloc>
 8002d16:	23ae      	movs	r3, #174	; 0xae
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	0005      	movs	r5, r0
 8002d1c:	50e0      	str	r0, [r4, r3]
    ret = 1U;
 8002d1e:	0038      	movs	r0, r7
  if (pdev->pClassData == NULL)
 8002d20:	2d00      	cmp	r5, #0
 8002d22:	d00e      	beq.n	8002d42 <USBD_CUSTOM_HID_Init+0x56>
    hhid->state = CUSTOM_HID_IDLE;
 8002d24:	2600      	movs	r6, #0
 8002d26:	19eb      	adds	r3, r5, r7
 8002d28:	77de      	strb	r6, [r3, #31]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8002d2a:	23af      	movs	r3, #175	; 0xaf
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	58e3      	ldr	r3, [r4, r3]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	4798      	blx	r3
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8002d34:	230f      	movs	r3, #15
 8002d36:	002a      	movs	r2, r5
 8002d38:	0039      	movs	r1, r7
 8002d3a:	0020      	movs	r0, r4
 8002d3c:	f000 fddb 	bl	80038f6 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8002d40:	0030      	movs	r0, r6
}
 8002d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002d44 <USBD_CUSTOM_HID_SendReport>:
{
 8002d44:	0013      	movs	r3, r2
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002d46:	22a7      	movs	r2, #167	; 0xa7
{
 8002d48:	b570      	push	{r4, r5, r6, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002d4a:	0092      	lsls	r2, r2, #2
 8002d4c:	5c82      	ldrb	r2, [r0, r2]
  return USBD_OK;
 8002d4e:	2400      	movs	r4, #0
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002d50:	2a03      	cmp	r2, #3
 8002d52:	d10c      	bne.n	8002d6e <USBD_CUSTOM_HID_SendReport+0x2a>
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8002d54:	22ae      	movs	r2, #174	; 0xae
 8002d56:	0092      	lsls	r2, r2, #2
 8002d58:	5885      	ldr	r5, [r0, r2]
    if (hhid->state == CUSTOM_HID_IDLE)
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	3501      	adds	r5, #1
 8002d5e:	7fec      	ldrb	r4, [r5, #31]
 8002d60:	2c00      	cmp	r4, #0
 8002d62:	d106      	bne.n	8002d72 <USBD_CUSTOM_HID_SendReport+0x2e>
      hhid->state = CUSTOM_HID_BUSY;
 8002d64:	77ea      	strb	r2, [r5, #31]
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8002d66:	000a      	movs	r2, r1
 8002d68:	2181      	movs	r1, #129	; 0x81
 8002d6a:	f000 fdbb 	bl	80038e4 <USBD_LL_Transmit>
}
 8002d6e:	0020      	movs	r0, r4
 8002d70:	bd70      	pop	{r4, r5, r6, pc}
      return USBD_BUSY;
 8002d72:	0014      	movs	r4, r2
 8002d74:	e7fb      	b.n	8002d6e <USBD_CUSTOM_HID_SendReport+0x2a>

08002d76 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8002d76:	0003      	movs	r3, r0
  uint8_t  ret = USBD_FAIL;
 8002d78:	2002      	movs	r0, #2

  if (fops != NULL)
 8002d7a:	2900      	cmp	r1, #0
 8002d7c:	d003      	beq.n	8002d86 <USBD_CUSTOM_HID_RegisterInterface+0x10>
  {
    pdev->pUserData = fops;
 8002d7e:	22af      	movs	r2, #175	; 0xaf
    ret = USBD_OK;
 8002d80:	2000      	movs	r0, #0
    pdev->pUserData = fops;
 8002d82:	0092      	lsls	r2, r2, #2
 8002d84:	5099      	str	r1, [r3, r2]
  }

  return ret;
}
 8002d86:	4770      	bx	lr

08002d88 <USBD_Init>:
  if (pdev == NULL)
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8002d88:	2302      	movs	r3, #2
{
 8002d8a:	b510      	push	{r4, lr}
  if (pdev == NULL)
 8002d8c:	2800      	cmp	r0, #0
 8002d8e:	d013      	beq.n	8002db8 <USBD_Init+0x30>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8002d90:	23ad      	movs	r3, #173	; 0xad
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	58c4      	ldr	r4, [r0, r3]
 8002d96:	2c00      	cmp	r4, #0
 8002d98:	d001      	beq.n	8002d9e <USBD_Init+0x16>
  {
    pdev->pClass = NULL;
 8002d9a:	2400      	movs	r4, #0
 8002d9c:	50c4      	str	r4, [r0, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8002d9e:	2900      	cmp	r1, #0
 8002da0:	d002      	beq.n	8002da8 <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 8002da2:	23ac      	movs	r3, #172	; 0xac
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	50c1      	str	r1, [r0, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002da8:	23a7      	movs	r3, #167	; 0xa7
 8002daa:	2101      	movs	r1, #1
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	54c1      	strb	r1, [r0, r3]
  pdev->id = id;
 8002db0:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002db2:	f000 fd11 	bl	80037d8 <USBD_LL_Init>

  return USBD_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	0018      	movs	r0, r3
 8002dba:	bd10      	pop	{r4, pc}

08002dbc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8002dbc:	0003      	movs	r3, r0
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8002dbe:	2002      	movs	r0, #2
  if (pclass != NULL)
 8002dc0:	2900      	cmp	r1, #0
 8002dc2:	d003      	beq.n	8002dcc <USBD_RegisterClass+0x10>
    pdev->pClass = pclass;
 8002dc4:	22ad      	movs	r2, #173	; 0xad
    status = USBD_OK;
 8002dc6:	2000      	movs	r0, #0
    pdev->pClass = pclass;
 8002dc8:	0092      	lsls	r2, r2, #2
 8002dca:	5099      	str	r1, [r3, r2]
  }

  return status;
}
 8002dcc:	4770      	bx	lr

08002dce <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8002dce:	b510      	push	{r4, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8002dd0:	f000 fd3a 	bl	8003848 <USBD_LL_Start>

  return USBD_OK;
}
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	bd10      	pop	{r4, pc}

08002dd8 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8002dd8:	23ad      	movs	r3, #173	; 0xad
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	58c2      	ldr	r2, [r0, r3]
{
 8002dde:	b510      	push	{r4, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8002de0:	2302      	movs	r3, #2
  if (pdev->pClass != NULL)
 8002de2:	2a00      	cmp	r2, #0
 8002de4:	d004      	beq.n	8002df0 <USBD_SetClassConfig+0x18>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8002de6:	6813      	ldr	r3, [r2, #0]
 8002de8:	4798      	blx	r3
 8002dea:	1e43      	subs	r3, r0, #1
 8002dec:	4198      	sbcs	r0, r3
 8002dee:	0043      	lsls	r3, r0, #1
      ret = USBD_OK;
    }
  }

  return ret;
}
 8002df0:	0018      	movs	r0, r3
 8002df2:	bd10      	pop	{r4, pc}

08002df4 <USBD_ClrClassConfig>:
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8002df4:	23ad      	movs	r3, #173	; 0xad
{
 8002df6:	b510      	push	{r4, lr}
  pdev->pClass->DeInit(pdev, cfgidx);
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	58c3      	ldr	r3, [r0, r3]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	4798      	blx	r3

  return USBD_OK;
}
 8002e00:	2000      	movs	r0, #0
 8002e02:	bd10      	pop	{r4, pc}

08002e04 <USBD_LL_SetupStage>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002e04:	23aa      	movs	r3, #170	; 0xaa
 8002e06:	009b      	lsls	r3, r3, #2
{
 8002e08:	b570      	push	{r4, r5, r6, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002e0a:	18c5      	adds	r5, r0, r3
{
 8002e0c:	0004      	movs	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002e0e:	0028      	movs	r0, r5
 8002e10:	f000 fb22 	bl	8003458 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8002e14:	23a5      	movs	r3, #165	; 0xa5
 8002e16:	2201      	movs	r2, #1
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	50e2      	str	r2, [r4, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8002e1c:	4b11      	ldr	r3, [pc, #68]	; (8002e64 <USBD_LL_SetupStage+0x60>)
 8002e1e:	5ae2      	ldrh	r2, [r4, r3]
 8002e20:	3b16      	subs	r3, #22
 8002e22:	50e2      	str	r2, [r4, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8002e24:	3310      	adds	r3, #16
 8002e26:	5ce1      	ldrb	r1, [r4, r3]
 8002e28:	231f      	movs	r3, #31
 8002e2a:	400b      	ands	r3, r1
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d009      	beq.n	8002e44 <USBD_LL_SetupStage+0x40>
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d00c      	beq.n	8002e4e <USBD_LL_SetupStage+0x4a>
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10f      	bne.n	8002e58 <USBD_LL_SetupStage+0x54>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8002e38:	0029      	movs	r1, r5
 8002e3a:	0020      	movs	r0, r4
 8002e3c:	f000 f91e 	bl	800307c <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 8002e40:	2000      	movs	r0, #0
 8002e42:	bd70      	pop	{r4, r5, r6, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8002e44:	0029      	movs	r1, r5
 8002e46:	0020      	movs	r0, r4
 8002e48:	f000 fa4e 	bl	80032e8 <USBD_StdItfReq>
      break;
 8002e4c:	e7f8      	b.n	8002e40 <USBD_LL_SetupStage+0x3c>
      USBD_StdEPReq(pdev, &pdev->request);
 8002e4e:	0029      	movs	r1, r5
 8002e50:	0020      	movs	r0, r4
 8002e52:	f000 fa71 	bl	8003338 <USBD_StdEPReq>
      break;
 8002e56:	e7f3      	b.n	8002e40 <USBD_LL_SetupStage+0x3c>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8002e58:	237f      	movs	r3, #127	; 0x7f
 8002e5a:	0020      	movs	r0, r4
 8002e5c:	4399      	bics	r1, r3
 8002e5e:	f000 fd11 	bl	8003884 <USBD_LL_StallEP>
      break;
 8002e62:	e7ed      	b.n	8002e40 <USBD_LL_SetupStage+0x3c>
 8002e64:	000002ae 	.word	0x000002ae

08002e68 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8002e68:	b570      	push	{r4, r5, r6, lr}
 8002e6a:	000d      	movs	r5, r1
 8002e6c:	0004      	movs	r4, r0
 8002e6e:	0011      	movs	r1, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8002e70:	2d00      	cmp	r5, #0
 8002e72:	d12e      	bne.n	8002ed2 <USBD_LL_DataOutStage+0x6a>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002e74:	23a5      	movs	r3, #165	; 0xa5
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	58c2      	ldr	r2, [r0, r3]
 8002e7a:	2a03      	cmp	r2, #3
 8002e7c:	d122      	bne.n	8002ec4 <USBD_LL_DataOutStage+0x5c>
    {
      if (pep->rem_length > pep->maxpacket)
 8002e7e:	0002      	movs	r2, r0
 8002e80:	3255      	adds	r2, #85	; 0x55
 8002e82:	32ff      	adds	r2, #255	; 0xff
 8002e84:	68d3      	ldr	r3, [r2, #12]
 8002e86:	6910      	ldr	r0, [r2, #16]
 8002e88:	4283      	cmp	r3, r0
 8002e8a:	d90a      	bls.n	8002ea2 <USBD_LL_DataOutStage+0x3a>
      {
        pep->rem_length -= pep->maxpacket;
 8002e8c:	1a1b      	subs	r3, r3, r0
 8002e8e:	60d3      	str	r3, [r2, #12]

        USBD_CtlContinueRx(pdev, pdata,
 8002e90:	b282      	uxth	r2, r0
 8002e92:	4298      	cmp	r0, r3
 8002e94:	d900      	bls.n	8002e98 <USBD_LL_DataOutStage+0x30>
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	0020      	movs	r0, r4
 8002e9a:	f000 fb3f 	bl	800351c <USBD_CtlContinueRx>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8002e9e:	0028      	movs	r0, r5
 8002ea0:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8002ea2:	23ad      	movs	r3, #173	; 0xad
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	58e3      	ldr	r3, [r4, r3]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d006      	beq.n	8002ebc <USBD_LL_DataOutStage+0x54>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8002eae:	22a7      	movs	r2, #167	; 0xa7
 8002eb0:	0092      	lsls	r2, r2, #2
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8002eb2:	5ca2      	ldrb	r2, [r4, r2]
 8002eb4:	2a03      	cmp	r2, #3
 8002eb6:	d101      	bne.n	8002ebc <USBD_LL_DataOutStage+0x54>
          pdev->pClass->EP0_RxReady(pdev);
 8002eb8:	0020      	movs	r0, r4
 8002eba:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002ebc:	0020      	movs	r0, r4
 8002ebe:	f000 fb35 	bl	800352c <USBD_CtlSendStatus>
 8002ec2:	e7ec      	b.n	8002e9e <USBD_LL_DataOutStage+0x36>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8002ec4:	2a05      	cmp	r2, #5
 8002ec6:	d1ea      	bne.n	8002e9e <USBD_LL_DataOutStage+0x36>
        USBD_LL_StallEP(pdev, 0U);
 8002ec8:	0029      	movs	r1, r5
        pdev->ep0_state = USBD_EP0_IDLE;
 8002eca:	50c5      	str	r5, [r0, r3]
        USBD_LL_StallEP(pdev, 0U);
 8002ecc:	f000 fcda 	bl	8003884 <USBD_LL_StallEP>
 8002ed0:	e7e5      	b.n	8002e9e <USBD_LL_DataOutStage+0x36>
  else if ((pdev->pClass->DataOut != NULL) &&
 8002ed2:	23ad      	movs	r3, #173	; 0xad
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	58c3      	ldr	r3, [r0, r3]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d008      	beq.n	8002ef0 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8002ede:	22a7      	movs	r2, #167	; 0xa7
 8002ee0:	0092      	lsls	r2, r2, #2
  else if ((pdev->pClass->DataOut != NULL) &&
 8002ee2:	5c82      	ldrb	r2, [r0, r2]
 8002ee4:	2a03      	cmp	r2, #3
 8002ee6:	d103      	bne.n	8002ef0 <USBD_LL_DataOutStage+0x88>
    pdev->pClass->DataOut(pdev, epnum);
 8002ee8:	0029      	movs	r1, r5
 8002eea:	4798      	blx	r3
  return USBD_OK;
 8002eec:	2500      	movs	r5, #0
    pdev->pClass->DataOut(pdev, epnum);
 8002eee:	e7d6      	b.n	8002e9e <USBD_LL_DataOutStage+0x36>
    return USBD_FAIL;
 8002ef0:	2502      	movs	r5, #2
 8002ef2:	e7d4      	b.n	8002e9e <USBD_LL_DataOutStage+0x36>

08002ef4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8002ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ef6:	000d      	movs	r5, r1
 8002ef8:	0004      	movs	r4, r0
 8002efa:	0011      	movs	r1, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8002efc:	2d00      	cmp	r5, #0
 8002efe:	d14d      	bne.n	8002f9c <USBD_LL_DataInStage+0xa8>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8002f00:	23a5      	movs	r3, #165	; 0xa5
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	58c3      	ldr	r3, [r0, r3]
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d141      	bne.n	8002f8e <USBD_LL_DataInStage+0x9a>
    {
      if (pep->rem_length > pep->maxpacket)
 8002f0a:	6a03      	ldr	r3, [r0, #32]
 8002f0c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8002f0e:	42b3      	cmp	r3, r6
 8002f10:	d913      	bls.n	8002f3a <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 8002f12:	1b9b      	subs	r3, r3, r6
 8002f14:	6203      	str	r3, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	f000 fae8 	bl	80034ec <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8002f1c:	002b      	movs	r3, r5
 8002f1e:	002a      	movs	r2, r5
 8002f20:	0029      	movs	r1, r5
 8002f22:	0020      	movs	r0, r4
 8002f24:	f000 fce7 	bl	80038f6 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8002f28:	23a8      	movs	r3, #168	; 0xa8
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	5ce2      	ldrb	r2, [r4, r3]
 8002f2e:	2a01      	cmp	r2, #1
 8002f30:	d101      	bne.n	8002f36 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8002f32:	2200      	movs	r2, #0
 8002f34:	54e2      	strb	r2, [r4, r3]
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8002f36:	0028      	movs	r0, r5
 8002f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8002f3a:	69c7      	ldr	r7, [r0, #28]
 8002f3c:	0031      	movs	r1, r6
 8002f3e:	0038      	movs	r0, r7
 8002f40:	f7fd f984 	bl	800024c <__aeabi_uidivmod>
 8002f44:	2900      	cmp	r1, #0
 8002f46:	d10d      	bne.n	8002f64 <USBD_LL_DataInStage+0x70>
 8002f48:	42be      	cmp	r6, r7
 8002f4a:	d80b      	bhi.n	8002f64 <USBD_LL_DataInStage+0x70>
            (pep->total_length < pdev->ep0_data_len))
 8002f4c:	26a6      	movs	r6, #166	; 0xa6
 8002f4e:	00b6      	lsls	r6, r6, #2
            (pep->total_length >= pep->maxpacket) &&
 8002f50:	59a3      	ldr	r3, [r4, r6]
 8002f52:	429f      	cmp	r7, r3
 8002f54:	d206      	bcs.n	8002f64 <USBD_LL_DataInStage+0x70>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8002f56:	002a      	movs	r2, r5
 8002f58:	0029      	movs	r1, r5
 8002f5a:	0020      	movs	r0, r4
 8002f5c:	f000 fac6 	bl	80034ec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8002f60:	51a5      	str	r5, [r4, r6]
 8002f62:	e7db      	b.n	8002f1c <USBD_LL_DataInStage+0x28>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8002f64:	23ad      	movs	r3, #173	; 0xad
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	58e3      	ldr	r3, [r4, r3]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d006      	beq.n	8002f7e <USBD_LL_DataInStage+0x8a>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8002f70:	22a7      	movs	r2, #167	; 0xa7
 8002f72:	0092      	lsls	r2, r2, #2
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8002f74:	5ca2      	ldrb	r2, [r4, r2]
 8002f76:	2a03      	cmp	r2, #3
 8002f78:	d101      	bne.n	8002f7e <USBD_LL_DataInStage+0x8a>
            pdev->pClass->EP0_TxSent(pdev);
 8002f7a:	0020      	movs	r0, r4
 8002f7c:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8002f7e:	2180      	movs	r1, #128	; 0x80
 8002f80:	0020      	movs	r0, r4
 8002f82:	f000 fc7f 	bl	8003884 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8002f86:	0020      	movs	r0, r4
 8002f88:	f000 fadc 	bl	8003544 <USBD_CtlReceiveStatus>
 8002f8c:	e7cc      	b.n	8002f28 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8002f8e:	2204      	movs	r2, #4
 8002f90:	4393      	bics	r3, r2
 8002f92:	d1c9      	bne.n	8002f28 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8002f94:	2180      	movs	r1, #128	; 0x80
 8002f96:	f000 fc75 	bl	8003884 <USBD_LL_StallEP>
 8002f9a:	e7c5      	b.n	8002f28 <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 8002f9c:	23ad      	movs	r3, #173	; 0xad
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	58c3      	ldr	r3, [r0, r3]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d008      	beq.n	8002fba <USBD_LL_DataInStage+0xc6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8002fa8:	22a7      	movs	r2, #167	; 0xa7
 8002faa:	0092      	lsls	r2, r2, #2
  else if ((pdev->pClass->DataIn != NULL) &&
 8002fac:	5c82      	ldrb	r2, [r0, r2]
 8002fae:	2a03      	cmp	r2, #3
 8002fb0:	d103      	bne.n	8002fba <USBD_LL_DataInStage+0xc6>
    pdev->pClass->DataIn(pdev, epnum);
 8002fb2:	0029      	movs	r1, r5
 8002fb4:	4798      	blx	r3
  return USBD_OK;
 8002fb6:	2500      	movs	r5, #0
    pdev->pClass->DataIn(pdev, epnum);
 8002fb8:	e7bd      	b.n	8002f36 <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 8002fba:	2502      	movs	r5, #2
 8002fbc:	e7bb      	b.n	8002f36 <USBD_LL_DataInStage+0x42>

08002fbe <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002fbe:	2200      	movs	r2, #0
{
 8002fc0:	b570      	push	{r4, r5, r6, lr}
 8002fc2:	0004      	movs	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002fc4:	0011      	movs	r1, r2
 8002fc6:	2340      	movs	r3, #64	; 0x40
 8002fc8:	f000 fc47 	bl	800385a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8002fcc:	0023      	movs	r3, r4
 8002fce:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002fd0:	2640      	movs	r6, #64	; 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8002fd2:	33fc      	adds	r3, #252	; 0xfc

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002fd4:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8002fd6:	65dd      	str	r5, [r3, #92]	; 0x5c
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002fd8:	669e      	str	r6, [r3, #104]	; 0x68
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002fda:	2200      	movs	r2, #0
 8002fdc:	0033      	movs	r3, r6
 8002fde:	0020      	movs	r0, r4
 8002fe0:	f000 fc3b 	bl	800385a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002fe4:	23a7      	movs	r3, #167	; 0xa7
  pdev->ep0_state = USBD_EP0_IDLE;
 8002fe6:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002fe8:	009b      	lsls	r3, r3, #2
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8002fea:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8002fec:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002fee:	54e5      	strb	r5, [r4, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8002ff0:	3b08      	subs	r3, #8
 8002ff2:	50e1      	str	r1, [r4, r3]
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;
 8002ff4:	3310      	adds	r3, #16
  pdev->dev_config = 0U;
 8002ff6:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8002ff8:	50e1      	str	r1, [r4, r3]

  if (pdev->pClassData)
 8002ffa:	3314      	adds	r3, #20
 8002ffc:	58e3      	ldr	r3, [r4, r3]
 8002ffe:	428b      	cmp	r3, r1
 8003000:	d005      	beq.n	800300e <USBD_LL_Reset+0x50>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003002:	23ad      	movs	r3, #173	; 0xad
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	58e3      	ldr	r3, [r4, r3]
 8003008:	0020      	movs	r0, r4
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	4798      	blx	r3
  }

  return USBD_OK;
}
 800300e:	2000      	movs	r0, #0
 8003010:	bd70      	pop	{r4, r5, r6, pc}

08003012 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8003012:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8003014:	2000      	movs	r0, #0
 8003016:	4770      	bx	lr

08003018 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8003018:	23a7      	movs	r3, #167	; 0xa7
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	5cc1      	ldrb	r1, [r0, r3]
 800301e:	4a03      	ldr	r2, [pc, #12]	; (800302c <USBD_LL_Suspend+0x14>)
 8003020:	5481      	strb	r1, [r0, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8003022:	2204      	movs	r2, #4
 8003024:	54c2      	strb	r2, [r0, r3]

  return USBD_OK;
}
 8003026:	2000      	movs	r0, #0
 8003028:	4770      	bx	lr
 800302a:	46c0      	nop			; (mov r8, r8)
 800302c:	0000029d 	.word	0x0000029d

08003030 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8003030:	23a7      	movs	r3, #167	; 0xa7
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	5cc2      	ldrb	r2, [r0, r3]
 8003036:	2a04      	cmp	r2, #4
 8003038:	d102      	bne.n	8003040 <USBD_LL_Resume+0x10>
  {
    pdev->dev_state = pdev->dev_old_state;
 800303a:	4a02      	ldr	r2, [pc, #8]	; (8003044 <USBD_LL_Resume+0x14>)
 800303c:	5c82      	ldrb	r2, [r0, r2]
 800303e:	54c2      	strb	r2, [r0, r3]
  }

  return USBD_OK;
}
 8003040:	2000      	movs	r0, #0
 8003042:	4770      	bx	lr
 8003044:	0000029d 	.word	0x0000029d

08003048 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003048:	23a7      	movs	r3, #167	; 0xa7
{
 800304a:	b510      	push	{r4, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	5cc3      	ldrb	r3, [r0, r3]
 8003050:	2b03      	cmp	r3, #3
 8003052:	d106      	bne.n	8003062 <USBD_LL_SOF+0x1a>
  {
    if (pdev->pClass->SOF != NULL)
 8003054:	23ad      	movs	r3, #173	; 0xad
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	58c3      	ldr	r3, [r0, r3]
 800305a:	69db      	ldr	r3, [r3, #28]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d000      	beq.n	8003062 <USBD_LL_SOF+0x1a>
    {
      pdev->pClass->SOF(pdev);
 8003060:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8003062:	2000      	movs	r0, #0
 8003064:	bd10      	pop	{r4, pc}

08003066 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8003066:	b510      	push	{r4, lr}
 8003068:	0004      	movs	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 800306a:	2180      	movs	r1, #128	; 0x80
 800306c:	f000 fc0a 	bl	8003884 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8003070:	2100      	movs	r1, #0
 8003072:	0020      	movs	r0, r4
 8003074:	f000 fc06 	bl	8003884 <USBD_LL_StallEP>
}
 8003078:	bd10      	pop	{r4, pc}
	...

0800307c <USBD_StdDevReq>:
{
 800307c:	2260      	movs	r2, #96	; 0x60
 800307e:	780b      	ldrb	r3, [r1, #0]
 8003080:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003082:	4013      	ands	r3, r2
 8003084:	000d      	movs	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003086:	0019      	movs	r1, r3
 8003088:	1892      	adds	r2, r2, r2
 800308a:	3920      	subs	r1, #32
{
 800308c:	0004      	movs	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800308e:	4211      	tst	r1, r2
 8003090:	d012      	beq.n	80030b8 <USBD_StdDevReq+0x3c>
 8003092:	2b00      	cmp	r3, #0
 8003094:	d000      	beq.n	8003098 <USBD_StdDevReq+0x1c>
 8003096:	e096      	b.n	80031c6 <USBD_StdDevReq+0x14a>
      switch (req->bRequest)
 8003098:	7868      	ldrb	r0, [r5, #1]
 800309a:	2809      	cmp	r0, #9
 800309c:	d900      	bls.n	80030a0 <USBD_StdDevReq+0x24>
 800309e:	e092      	b.n	80031c6 <USBD_StdDevReq+0x14a>
 80030a0:	f7fd f844 	bl	800012c <__gnu_thumb1_case_uhi>
 80030a4:	010d00f0 	.word	0x010d00f0
 80030a8:	01050091 	.word	0x01050091
 80030ac:	00830091 	.word	0x00830091
 80030b0:	00910012 	.word	0x00910012
 80030b4:	00a400da 	.word	0x00a400da
      pdev->pClass->Setup(pdev, req);
 80030b8:	23ad      	movs	r3, #173	; 0xad
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	58c3      	ldr	r3, [r0, r3]
 80030be:	0029      	movs	r1, r5
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	4798      	blx	r3
}
 80030c4:	2000      	movs	r0, #0
 80030c6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  uint16_t len = 0U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	466a      	mov	r2, sp
 80030cc:	80d3      	strh	r3, [r2, #6]
  switch (req->wValue >> 8)
 80030ce:	886b      	ldrh	r3, [r5, #2]
 80030d0:	0a18      	lsrs	r0, r3, #8
 80030d2:	3801      	subs	r0, #1
 80030d4:	2806      	cmp	r0, #6
 80030d6:	d876      	bhi.n	80031c6 <USBD_StdDevReq+0x14a>
 80030d8:	f7fd f81e 	bl	8000118 <__gnu_thumb1_case_uqi>
 80030dc:	75261704 	.word	0x75261704
 80030e0:	4075      	.short	0x4075
 80030e2:	4b          	.byte	0x4b
 80030e3:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80030e4:	23ac      	movs	r3, #172	; 0xac
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	58e3      	ldr	r3, [r4, r3]
 80030ea:	7c20      	ldrb	r0, [r4, #16]
 80030ec:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80030ee:	466a      	mov	r2, sp
 80030f0:	1d91      	adds	r1, r2, #6
 80030f2:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 80030f4:	466b      	mov	r3, sp
 80030f6:	88d9      	ldrh	r1, [r3, #6]
 80030f8:	88ea      	ldrh	r2, [r5, #6]
 80030fa:	2900      	cmp	r1, #0
 80030fc:	d050      	beq.n	80031a0 <USBD_StdDevReq+0x124>
 80030fe:	2a00      	cmp	r2, #0
 8003100:	d143      	bne.n	800318a <USBD_StdDevReq+0x10e>
        USBD_CtlSendStatus(pdev);
 8003102:	0020      	movs	r0, r4
 8003104:	f000 fa12 	bl	800352c <USBD_CtlSendStatus>
 8003108:	e7dc      	b.n	80030c4 <USBD_StdDevReq+0x48>
      pdev->pClass->Setup(pdev, req);
 800310a:	23ad      	movs	r3, #173	; 0xad
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800310c:	7c22      	ldrb	r2, [r4, #16]
      pdev->pClass->Setup(pdev, req);
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	58e3      	ldr	r3, [r4, r3]
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003112:	2a00      	cmp	r2, #0
 8003114:	d106      	bne.n	8003124 <USBD_StdDevReq+0xa8>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8003116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8003118:	466a      	mov	r2, sp
 800311a:	1d90      	adds	r0, r2, #6
 800311c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800311e:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003120:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8003122:	e7e7      	b.n	80030f4 <USBD_StdDevReq+0x78>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8003124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003126:	e7f7      	b.n	8003118 <USBD_StdDevReq+0x9c>
      switch ((uint8_t)(req->wValue))
 8003128:	b2d8      	uxtb	r0, r3
 800312a:	2805      	cmp	r0, #5
 800312c:	d84b      	bhi.n	80031c6 <USBD_StdDevReq+0x14a>
 800312e:	23ac      	movs	r3, #172	; 0xac
 8003130:	009b      	lsls	r3, r3, #2
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003132:	58e3      	ldr	r3, [r4, r3]
 8003134:	f7fc fff0 	bl	8000118 <__gnu_thumb1_case_uqi>
 8003138:	0c0a0803 	.word	0x0c0a0803
 800313c:	100e      	.short	0x100e
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d040      	beq.n	80031c6 <USBD_StdDevReq+0x14a>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8003144:	7c20      	ldrb	r0, [r4, #16]
 8003146:	e7d2      	b.n	80030ee <USBD_StdDevReq+0x72>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	e7f9      	b.n	8003140 <USBD_StdDevReq+0xc4>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	e7f7      	b.n	8003140 <USBD_StdDevReq+0xc4>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	e7f5      	b.n	8003140 <USBD_StdDevReq+0xc4>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	e7f3      	b.n	8003140 <USBD_StdDevReq+0xc4>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	e7f1      	b.n	8003140 <USBD_StdDevReq+0xc4>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800315c:	7c23      	ldrb	r3, [r4, #16]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d131      	bne.n	80031c6 <USBD_StdDevReq+0x14a>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003162:	23ad      	movs	r3, #173	; 0xad
 8003164:	466a      	mov	r2, sp
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	58e3      	ldr	r3, [r4, r3]
 800316a:	1d90      	adds	r0, r2, #6
 800316c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800316e:	4798      	blx	r3
  if (err != 0U)
 8003170:	e7c0      	b.n	80030f4 <USBD_StdDevReq+0x78>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003172:	7c23      	ldrb	r3, [r4, #16]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d126      	bne.n	80031c6 <USBD_StdDevReq+0x14a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003178:	23ad      	movs	r3, #173	; 0xad
 800317a:	466a      	mov	r2, sp
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	58e3      	ldr	r3, [r4, r3]
 8003180:	1d90      	adds	r0, r2, #6
 8003182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003184:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003186:	2307      	movs	r3, #7
 8003188:	e7ca      	b.n	8003120 <USBD_StdDevReq+0xa4>
      len = MIN(len, req->wLength);
 800318a:	1c0b      	adds	r3, r1, #0
 800318c:	4291      	cmp	r1, r2
 800318e:	d900      	bls.n	8003192 <USBD_StdDevReq+0x116>
 8003190:	1c13      	adds	r3, r2, #0
 8003192:	4669      	mov	r1, sp
 8003194:	b29a      	uxth	r2, r3
 8003196:	80cb      	strh	r3, [r1, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8003198:	0001      	movs	r1, r0
 800319a:	0020      	movs	r0, r4
 800319c:	f000 f998 	bl	80034d0 <USBD_CtlSendData>
    if (req->wLength == 0U)
 80031a0:	88eb      	ldrh	r3, [r5, #6]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d000      	beq.n	80031a8 <USBD_StdDevReq+0x12c>
 80031a6:	e78d      	b.n	80030c4 <USBD_StdDevReq+0x48>
 80031a8:	e7ab      	b.n	8003102 <USBD_StdDevReq+0x86>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80031aa:	88ab      	ldrh	r3, [r5, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10a      	bne.n	80031c6 <USBD_StdDevReq+0x14a>
 80031b0:	88eb      	ldrh	r3, [r5, #6]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d107      	bne.n	80031c6 <USBD_StdDevReq+0x14a>
 80031b6:	886e      	ldrh	r6, [r5, #2]
 80031b8:	2e7f      	cmp	r6, #127	; 0x7f
 80031ba:	d804      	bhi.n	80031c6 <USBD_StdDevReq+0x14a>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80031bc:	25a7      	movs	r5, #167	; 0xa7
 80031be:	00ad      	lsls	r5, r5, #2
 80031c0:	5d63      	ldrb	r3, [r4, r5]
 80031c2:	2b03      	cmp	r3, #3
 80031c4:	d103      	bne.n	80031ce <USBD_StdDevReq+0x152>
        USBD_CtlError(pdev, req);
 80031c6:	0020      	movs	r0, r4
 80031c8:	f7ff ff4d 	bl	8003066 <USBD_CtlError.constprop.0>
        break;
 80031cc:	e77a      	b.n	80030c4 <USBD_StdDevReq+0x48>
      pdev->dev_address = dev_addr;
 80031ce:	4b44      	ldr	r3, [pc, #272]	; (80032e0 <USBD_StdDevReq+0x264>)
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80031d0:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 80031d2:	54e1      	strb	r1, [r4, r3]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80031d4:	0020      	movs	r0, r4
 80031d6:	f000 fb7c 	bl	80038d2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80031da:	0020      	movs	r0, r4
 80031dc:	f000 f9a6 	bl	800352c <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80031e0:	2302      	movs	r3, #2
      if (dev_addr != 0U)
 80031e2:	2e00      	cmp	r6, #0
 80031e4:	d100      	bne.n	80031e8 <USBD_StdDevReq+0x16c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80031e6:	2301      	movs	r3, #1
 80031e8:	5563      	strb	r3, [r4, r5]
 80031ea:	e76b      	b.n	80030c4 <USBD_StdDevReq+0x48>
  cfgidx = (uint8_t)(req->wValue);
 80031ec:	78a9      	ldrb	r1, [r5, #2]
 80031ee:	4d3d      	ldr	r5, [pc, #244]	; (80032e4 <USBD_StdDevReq+0x268>)
 80031f0:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80031f2:	2901      	cmp	r1, #1
 80031f4:	d8e7      	bhi.n	80031c6 <USBD_StdDevReq+0x14a>
    switch (pdev->dev_state)
 80031f6:	23a7      	movs	r3, #167	; 0xa7
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	5ce2      	ldrb	r2, [r4, r3]
 80031fc:	2a02      	cmp	r2, #2
 80031fe:	d009      	beq.n	8003214 <USBD_StdDevReq+0x198>
 8003200:	2a03      	cmp	r2, #3
 8003202:	d015      	beq.n	8003230 <USBD_StdDevReq+0x1b4>
        USBD_CtlError(pdev, req);
 8003204:	0020      	movs	r0, r4
 8003206:	f7ff ff2e 	bl	8003066 <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 800320a:	0020      	movs	r0, r4
 800320c:	7829      	ldrb	r1, [r5, #0]
 800320e:	f7ff fdf1 	bl	8002df4 <USBD_ClrClassConfig>
        break;
 8003212:	e757      	b.n	80030c4 <USBD_StdDevReq+0x48>
        if (cfgidx)
 8003214:	2900      	cmp	r1, #0
 8003216:	d100      	bne.n	800321a <USBD_StdDevReq+0x19e>
 8003218:	e773      	b.n	8003102 <USBD_StdDevReq+0x86>
          pdev->dev_config = cfgidx;
 800321a:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800321c:	2203      	movs	r2, #3
          pdev->dev_config = cfgidx;
 800321e:	6061      	str	r1, [r4, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8003220:	54e2      	strb	r2, [r4, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8003222:	0020      	movs	r0, r4
 8003224:	f7ff fdd8 	bl	8002dd8 <USBD_SetClassConfig>
 8003228:	2802      	cmp	r0, #2
 800322a:	d000      	beq.n	800322e <USBD_StdDevReq+0x1b2>
 800322c:	e769      	b.n	8003102 <USBD_StdDevReq+0x86>
 800322e:	e7ca      	b.n	80031c6 <USBD_StdDevReq+0x14a>
        if (cfgidx == 0U)
 8003230:	2900      	cmp	r1, #0
 8003232:	d106      	bne.n	8003242 <USBD_StdDevReq+0x1c6>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003234:	2202      	movs	r2, #2
          USBD_ClrClassConfig(pdev, cfgidx);
 8003236:	0020      	movs	r0, r4
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003238:	54e2      	strb	r2, [r4, r3]
          pdev->dev_config = cfgidx;
 800323a:	6061      	str	r1, [r4, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800323c:	f7ff fdda 	bl	8002df4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8003240:	e75f      	b.n	8003102 <USBD_StdDevReq+0x86>
        else if (cfgidx != pdev->dev_config)
 8003242:	6861      	ldr	r1, [r4, #4]
 8003244:	2901      	cmp	r1, #1
 8003246:	d100      	bne.n	800324a <USBD_StdDevReq+0x1ce>
 8003248:	e75b      	b.n	8003102 <USBD_StdDevReq+0x86>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800324a:	b2c9      	uxtb	r1, r1
 800324c:	0020      	movs	r0, r4
 800324e:	f7ff fdd1 	bl	8002df4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8003252:	7829      	ldrb	r1, [r5, #0]
 8003254:	6061      	str	r1, [r4, #4]
 8003256:	e7e4      	b.n	8003222 <USBD_StdDevReq+0x1a6>
  if (req->wLength != 1U)
 8003258:	88ea      	ldrh	r2, [r5, #6]
 800325a:	2a01      	cmp	r2, #1
 800325c:	d1b3      	bne.n	80031c6 <USBD_StdDevReq+0x14a>
    switch (pdev->dev_state)
 800325e:	23a7      	movs	r3, #167	; 0xa7
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	5ce3      	ldrb	r3, [r4, r3]
 8003264:	2b02      	cmp	r3, #2
 8003266:	d806      	bhi.n	8003276 <USBD_StdDevReq+0x1fa>
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0ac      	beq.n	80031c6 <USBD_StdDevReq+0x14a>
        pdev->dev_default_config = 0U;
 800326c:	2300      	movs	r3, #0
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800326e:	0021      	movs	r1, r4
        pdev->dev_default_config = 0U;
 8003270:	60a3      	str	r3, [r4, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8003272:	3108      	adds	r1, #8
 8003274:	e002      	b.n	800327c <USBD_StdDevReq+0x200>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8003276:	1d21      	adds	r1, r4, #4
    switch (pdev->dev_state)
 8003278:	2b03      	cmp	r3, #3
 800327a:	d1a4      	bne.n	80031c6 <USBD_StdDevReq+0x14a>
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800327c:	0020      	movs	r0, r4
 800327e:	f000 f927 	bl	80034d0 <USBD_CtlSendData>
      break;
 8003282:	e71f      	b.n	80030c4 <USBD_StdDevReq+0x48>
  switch (pdev->dev_state)
 8003284:	23a7      	movs	r3, #167	; 0xa7
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	5ce3      	ldrb	r3, [r4, r3]
 800328a:	3b01      	subs	r3, #1
 800328c:	2b02      	cmp	r3, #2
 800328e:	d89a      	bhi.n	80031c6 <USBD_StdDevReq+0x14a>
      if (req->wLength != 0x2U)
 8003290:	88eb      	ldrh	r3, [r5, #6]
 8003292:	2b02      	cmp	r3, #2
 8003294:	d197      	bne.n	80031c6 <USBD_StdDevReq+0x14a>
      if (pdev->dev_remote_wakeup)
 8003296:	23a9      	movs	r3, #169	; 0xa9
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	58e2      	ldr	r2, [r4, r3]
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800329c:	2303      	movs	r3, #3
      if (pdev->dev_remote_wakeup)
 800329e:	2a00      	cmp	r2, #0
 80032a0:	d100      	bne.n	80032a4 <USBD_StdDevReq+0x228>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80032a2:	3b02      	subs	r3, #2
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80032a4:	0021      	movs	r1, r4
 80032a6:	2202      	movs	r2, #2
 80032a8:	60e3      	str	r3, [r4, #12]
 80032aa:	310c      	adds	r1, #12
 80032ac:	e7e6      	b.n	800327c <USBD_StdDevReq+0x200>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80032ae:	886b      	ldrh	r3, [r5, #2]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d000      	beq.n	80032b6 <USBD_StdDevReq+0x23a>
 80032b4:	e706      	b.n	80030c4 <USBD_StdDevReq+0x48>
    pdev->dev_remote_wakeup = 1U;
 80032b6:	22a9      	movs	r2, #169	; 0xa9
 80032b8:	0092      	lsls	r2, r2, #2
 80032ba:	50a3      	str	r3, [r4, r2]
    USBD_CtlSendStatus(pdev);
 80032bc:	e721      	b.n	8003102 <USBD_StdDevReq+0x86>
  switch (pdev->dev_state)
 80032be:	23a7      	movs	r3, #167	; 0xa7
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	5ce3      	ldrb	r3, [r4, r3]
 80032c4:	3b01      	subs	r3, #1
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d900      	bls.n	80032cc <USBD_StdDevReq+0x250>
 80032ca:	e77c      	b.n	80031c6 <USBD_StdDevReq+0x14a>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80032cc:	886b      	ldrh	r3, [r5, #2]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d000      	beq.n	80032d4 <USBD_StdDevReq+0x258>
 80032d2:	e6f7      	b.n	80030c4 <USBD_StdDevReq+0x48>
        pdev->dev_remote_wakeup = 0U;
 80032d4:	23a9      	movs	r3, #169	; 0xa9
 80032d6:	2200      	movs	r2, #0
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	50e2      	str	r2, [r4, r3]
 80032dc:	e711      	b.n	8003102 <USBD_StdDevReq+0x86>
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	0000029e 	.word	0x0000029e
 80032e4:	200002c8 	.word	0x200002c8

080032e8 <USBD_StdItfReq>:
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80032e8:	2260      	movs	r2, #96	; 0x60
 80032ea:	780b      	ldrb	r3, [r1, #0]
{
 80032ec:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80032ee:	401a      	ands	r2, r3
{
 80032f0:	0004      	movs	r4, r0
 80032f2:	000d      	movs	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80032f4:	2a40      	cmp	r2, #64	; 0x40
 80032f6:	d001      	beq.n	80032fc <USBD_StdItfReq+0x14>
 80032f8:	065b      	lsls	r3, r3, #25
 80032fa:	d419      	bmi.n	8003330 <USBD_StdItfReq+0x48>
      switch (pdev->dev_state)
 80032fc:	23a7      	movs	r3, #167	; 0xa7
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	5ce3      	ldrb	r3, [r4, r3]
 8003302:	3b01      	subs	r3, #1
 8003304:	2b02      	cmp	r3, #2
 8003306:	d813      	bhi.n	8003330 <USBD_StdItfReq+0x48>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8003308:	792b      	ldrb	r3, [r5, #4]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d810      	bhi.n	8003330 <USBD_StdItfReq+0x48>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800330e:	23ad      	movs	r3, #173	; 0xad
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	58e3      	ldr	r3, [r4, r3]
 8003314:	0029      	movs	r1, r5
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	0020      	movs	r0, r4
 800331a:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800331c:	88eb      	ldrh	r3, [r5, #6]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d104      	bne.n	800332c <USBD_StdItfReq+0x44>
 8003322:	2800      	cmp	r0, #0
 8003324:	d102      	bne.n	800332c <USBD_StdItfReq+0x44>
              USBD_CtlSendStatus(pdev);
 8003326:	0020      	movs	r0, r4
 8003328:	f000 f900 	bl	800352c <USBD_CtlSendStatus>
}
 800332c:	2000      	movs	r0, #0
 800332e:	bd70      	pop	{r4, r5, r6, pc}
          USBD_CtlError(pdev, req);
 8003330:	0020      	movs	r0, r4
 8003332:	f7ff fe98 	bl	8003066 <USBD_CtlError.constprop.0>
          break;
 8003336:	e7f9      	b.n	800332c <USBD_StdItfReq+0x44>

08003338 <USBD_StdEPReq>:
{
 8003338:	b570      	push	{r4, r5, r6, lr}
 800333a:	780a      	ldrb	r2, [r1, #0]
 800333c:	0004      	movs	r4, r0
 800333e:	000b      	movs	r3, r1
  ep_addr  = LOBYTE(req->wIndex);
 8003340:	8888      	ldrh	r0, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003342:	2160      	movs	r1, #96	; 0x60
 8003344:	400a      	ands	r2, r1
 8003346:	0015      	movs	r5, r2
 8003348:	1849      	adds	r1, r1, r1
 800334a:	3d20      	subs	r5, #32
 800334c:	420d      	tst	r5, r1
 800334e:	d02b      	beq.n	80033a8 <USBD_StdEPReq+0x70>
 8003350:	2a00      	cmp	r2, #0
 8003352:	d139      	bne.n	80033c8 <USBD_StdEPReq+0x90>
      switch (req->bRequest)
 8003354:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8003356:	b2c1      	uxtb	r1, r0
      switch (req->bRequest)
 8003358:	2a01      	cmp	r2, #1
 800335a:	d048      	beq.n	80033ee <USBD_StdEPReq+0xb6>
 800335c:	2a03      	cmp	r2, #3
 800335e:	d02c      	beq.n	80033ba <USBD_StdEPReq+0x82>
 8003360:	2a00      	cmp	r2, #0
 8003362:	d131      	bne.n	80033c8 <USBD_StdEPReq+0x90>
          switch (pdev->dev_state)
 8003364:	23a7      	movs	r3, #167	; 0xa7
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	5ce3      	ldrb	r3, [r4, r3]
 800336a:	2b02      	cmp	r3, #2
 800336c:	d059      	beq.n	8003422 <USBD_StdEPReq+0xea>
 800336e:	2b03      	cmp	r3, #3
 8003370:	d12a      	bne.n	80033c8 <USBD_StdEPReq+0x90>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003372:	230f      	movs	r3, #15
 8003374:	2214      	movs	r2, #20
 8003376:	400b      	ands	r3, r1
 8003378:	4353      	muls	r3, r2
 800337a:	18e3      	adds	r3, r4, r3
              if ((ep_addr & 0x80U) == 0x80U)
 800337c:	0600      	lsls	r0, r0, #24
 800337e:	d560      	bpl.n	8003442 <USBD_StdEPReq+0x10a>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d020      	beq.n	80033c8 <USBD_StdEPReq+0x90>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003386:	237f      	movs	r3, #127	; 0x7f
 8003388:	400b      	ands	r3, r1
 800338a:	3301      	adds	r3, #1
 800338c:	4353      	muls	r3, r2
 800338e:	18e5      	adds	r5, r4, r3
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8003390:	2000      	movs	r0, #0
 8003392:	064b      	lsls	r3, r1, #25
 8003394:	d004      	beq.n	80033a0 <USBD_StdEPReq+0x68>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8003396:	0020      	movs	r0, r4
 8003398:	f000 fa86 	bl	80038a8 <USBD_LL_IsStallEP>
 800339c:	1e43      	subs	r3, r0, #1
 800339e:	4198      	sbcs	r0, r3
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80033a0:	2202      	movs	r2, #2
 80033a2:	0029      	movs	r1, r5
                pep->status = 0x0000U;
 80033a4:	6028      	str	r0, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80033a6:	e048      	b.n	800343a <USBD_StdEPReq+0x102>
      pdev->pClass->Setup(pdev, req);
 80033a8:	22ad      	movs	r2, #173	; 0xad
 80033aa:	0092      	lsls	r2, r2, #2
 80033ac:	58a2      	ldr	r2, [r4, r2]
 80033ae:	0019      	movs	r1, r3
 80033b0:	0020      	movs	r0, r4
 80033b2:	6892      	ldr	r2, [r2, #8]
 80033b4:	4790      	blx	r2
}
 80033b6:	2000      	movs	r0, #0
 80033b8:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 80033ba:	22a7      	movs	r2, #167	; 0xa7
 80033bc:	0092      	lsls	r2, r2, #2
 80033be:	5ca2      	ldrb	r2, [r4, r2]
 80033c0:	2a02      	cmp	r2, #2
 80033c2:	d024      	beq.n	800340e <USBD_StdEPReq+0xd6>
 80033c4:	2a03      	cmp	r2, #3
 80033c6:	d003      	beq.n	80033d0 <USBD_StdEPReq+0x98>
              USBD_CtlError(pdev, req);
 80033c8:	0020      	movs	r0, r4
 80033ca:	f7ff fe4c 	bl	8003066 <USBD_CtlError.constprop.0>
              break;
 80033ce:	e7f2      	b.n	80033b6 <USBD_StdEPReq+0x7e>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80033d0:	885a      	ldrh	r2, [r3, #2]
 80033d2:	2a00      	cmp	r2, #0
 80033d4:	d107      	bne.n	80033e6 <USBD_StdEPReq+0xae>
                if ((ep_addr != 0x00U) &&
 80033d6:	064a      	lsls	r2, r1, #25
 80033d8:	d005      	beq.n	80033e6 <USBD_StdEPReq+0xae>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80033da:	88db      	ldrh	r3, [r3, #6]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d102      	bne.n	80033e6 <USBD_StdEPReq+0xae>
                  USBD_LL_StallEP(pdev, ep_addr);
 80033e0:	0020      	movs	r0, r4
 80033e2:	f000 fa4f 	bl	8003884 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 80033e6:	0020      	movs	r0, r4
 80033e8:	f000 f8a0 	bl	800352c <USBD_CtlSendStatus>
              break;
 80033ec:	e7e3      	b.n	80033b6 <USBD_StdEPReq+0x7e>
          switch (pdev->dev_state)
 80033ee:	22a7      	movs	r2, #167	; 0xa7
 80033f0:	0092      	lsls	r2, r2, #2
 80033f2:	5ca2      	ldrb	r2, [r4, r2]
 80033f4:	2a02      	cmp	r2, #2
 80033f6:	d00a      	beq.n	800340e <USBD_StdEPReq+0xd6>
 80033f8:	2a03      	cmp	r2, #3
 80033fa:	d1e5      	bne.n	80033c8 <USBD_StdEPReq+0x90>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80033fc:	885b      	ldrh	r3, [r3, #2]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1d9      	bne.n	80033b6 <USBD_StdEPReq+0x7e>
                if ((ep_addr & 0x7FU) != 0x00U)
 8003402:	064b      	lsls	r3, r1, #25
 8003404:	d0ef      	beq.n	80033e6 <USBD_StdEPReq+0xae>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8003406:	0020      	movs	r0, r4
 8003408:	f000 fa45 	bl	8003896 <USBD_LL_ClearStallEP>
 800340c:	e7eb      	b.n	80033e6 <USBD_StdEPReq+0xae>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800340e:	064b      	lsls	r3, r1, #25
 8003410:	d0da      	beq.n	80033c8 <USBD_StdEPReq+0x90>
                USBD_LL_StallEP(pdev, ep_addr);
 8003412:	0020      	movs	r0, r4
 8003414:	f000 fa36 	bl	8003884 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8003418:	2180      	movs	r1, #128	; 0x80
 800341a:	0020      	movs	r0, r4
 800341c:	f000 fa32 	bl	8003884 <USBD_LL_StallEP>
 8003420:	e7c9      	b.n	80033b6 <USBD_StdEPReq+0x7e>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003422:	0649      	lsls	r1, r1, #25
 8003424:	d1d0      	bne.n	80033c8 <USBD_StdEPReq+0x90>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003426:	0021      	movs	r1, r4
 8003428:	3155      	adds	r1, #85	; 0x55
 800342a:	31ff      	adds	r1, #255	; 0xff
 800342c:	0600      	lsls	r0, r0, #24
 800342e:	d501      	bpl.n	8003434 <USBD_StdEPReq+0xfc>
 8003430:	3941      	subs	r1, #65	; 0x41
 8003432:	39ff      	subs	r1, #255	; 0xff
              pep->status = 0x0000U;
 8003434:	2300      	movs	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003436:	2202      	movs	r2, #2
              pep->status = 0x0000U;
 8003438:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800343a:	0020      	movs	r0, r4
 800343c:	f000 f848 	bl	80034d0 <USBD_CtlSendData>
              break;
 8003440:	e7b9      	b.n	80033b6 <USBD_StdEPReq+0x7e>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8003442:	33fc      	adds	r3, #252	; 0xfc
 8003444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0be      	beq.n	80033c8 <USBD_StdEPReq+0x90>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800344a:	237f      	movs	r3, #127	; 0x7f
 800344c:	400b      	ands	r3, r1
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800344e:	435a      	muls	r2, r3
 8003450:	3255      	adds	r2, #85	; 0x55
 8003452:	32ff      	adds	r2, #255	; 0xff
 8003454:	18a5      	adds	r5, r4, r2
 8003456:	e79b      	b.n	8003390 <USBD_StdEPReq+0x58>

08003458 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8003458:	780b      	ldrb	r3, [r1, #0]
 800345a:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800345c:	784b      	ldrb	r3, [r1, #1]
 800345e:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8003460:	78ca      	ldrb	r2, [r1, #3]
 8003462:	788b      	ldrb	r3, [r1, #2]
 8003464:	0212      	lsls	r2, r2, #8
 8003466:	189b      	adds	r3, r3, r2
 8003468:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800346a:	794a      	ldrb	r2, [r1, #5]
 800346c:	790b      	ldrb	r3, [r1, #4]
 800346e:	0212      	lsls	r2, r2, #8
 8003470:	189b      	adds	r3, r3, r2
 8003472:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8003474:	79ca      	ldrb	r2, [r1, #7]
 8003476:	798b      	ldrb	r3, [r1, #6]
 8003478:	0212      	lsls	r2, r2, #8
 800347a:	189b      	adds	r3, r3, r2
 800347c:	80c3      	strh	r3, [r0, #6]
}
 800347e:	4770      	bx	lr

08003480 <USBD_CtlError>:
{
 8003480:	b510      	push	{r4, lr}
 8003482:	0004      	movs	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8003484:	2180      	movs	r1, #128	; 0x80
 8003486:	f000 f9fd 	bl	8003884 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800348a:	2100      	movs	r1, #0
 800348c:	0020      	movs	r0, r4
 800348e:	f000 f9f9 	bl	8003884 <USBD_LL_StallEP>
}
 8003492:	bd10      	pop	{r4, pc}

08003494 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8003494:	b570      	push	{r4, r5, r6, lr}
 8003496:	2500      	movs	r5, #0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8003498:	1e46      	subs	r6, r0, #1
  if (desc != NULL)
 800349a:	42a8      	cmp	r0, r5
 800349c:	d00f      	beq.n	80034be <USBD_GetString+0x2a>
  while (*buf != '\0')
 800349e:	002b      	movs	r3, r5
 80034a0:	3501      	adds	r5, #1
 80034a2:	5d74      	ldrb	r4, [r6, r5]
 80034a4:	2c00      	cmp	r4, #0
 80034a6:	d1fa      	bne.n	800349e <USBD_GetString+0xa>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	3301      	adds	r3, #1
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80034b0:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80034b2:	2303      	movs	r3, #3
 80034b4:	704b      	strb	r3, [r1, #1]
 80034b6:	3b01      	subs	r3, #1
    while (*desc != '\0')
 80034b8:	7805      	ldrb	r5, [r0, #0]
 80034ba:	2d00      	cmp	r5, #0
 80034bc:	d100      	bne.n	80034c0 <USBD_GetString+0x2c>
}
 80034be:	bd70      	pop	{r4, r5, r6, pc}
      unicode[idx++] = *desc++;
 80034c0:	1c5a      	adds	r2, r3, #1
 80034c2:	54cd      	strb	r5, [r1, r3]
 80034c4:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 80034c6:	3302      	adds	r3, #2
      unicode[idx++] = *desc++;
 80034c8:	3001      	adds	r0, #1
      unicode[idx++] =  0U;
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	548c      	strb	r4, [r1, r2]
 80034ce:	e7f3      	b.n	80034b8 <USBD_GetString+0x24>

080034d0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80034d0:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80034d2:	22a5      	movs	r2, #165	; 0xa5
{
 80034d4:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80034d6:	2402      	movs	r4, #2
 80034d8:	0092      	lsls	r2, r2, #2
 80034da:	5084      	str	r4, [r0, r2]
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80034dc:	000a      	movs	r2, r1
  pdev->ep_in[0].total_length = len;
 80034de:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80034e0:	2100      	movs	r1, #0
  pdev->ep_in[0].rem_length   = len;
 80034e2:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80034e4:	f000 f9fe 	bl	80038e4 <USBD_LL_Transmit>

  return USBD_OK;
}
 80034e8:	2000      	movs	r0, #0
 80034ea:	bd10      	pop	{r4, pc}

080034ec <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80034ec:	b510      	push	{r4, lr}
 80034ee:	0013      	movs	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80034f0:	000a      	movs	r2, r1
 80034f2:	2100      	movs	r1, #0
 80034f4:	f000 f9f6 	bl	80038e4 <USBD_LL_Transmit>

  return USBD_OK;
}
 80034f8:	2000      	movs	r0, #0
 80034fa:	bd10      	pop	{r4, pc}

080034fc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80034fc:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80034fe:	22a5      	movs	r2, #165	; 0xa5
{
 8003500:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8003502:	2403      	movs	r4, #3
 8003504:	0092      	lsls	r2, r2, #2
 8003506:	5084      	str	r4, [r0, r2]
  pdev->ep_out[0].total_length = len;
 8003508:	0002      	movs	r2, r0
 800350a:	32fc      	adds	r2, #252	; 0xfc
 800350c:	6613      	str	r3, [r2, #96]	; 0x60
  pdev->ep_out[0].rem_length   = len;
 800350e:	6653      	str	r3, [r2, #100]	; 0x64

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8003510:	000a      	movs	r2, r1
 8003512:	2100      	movs	r1, #0
 8003514:	f000 f9ef 	bl	80038f6 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003518:	2000      	movs	r0, #0
 800351a:	bd10      	pop	{r4, pc}

0800351c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800351c:	b510      	push	{r4, lr}
 800351e:	0013      	movs	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8003520:	000a      	movs	r2, r1
 8003522:	2100      	movs	r1, #0
 8003524:	f000 f9e7 	bl	80038f6 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003528:	2000      	movs	r0, #0
 800352a:	bd10      	pop	{r4, pc}

0800352c <USBD_CtlSendStatus>:
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800352c:	23a5      	movs	r3, #165	; 0xa5
 800352e:	2204      	movs	r2, #4
 8003530:	009b      	lsls	r3, r3, #2
{
 8003532:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003534:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8003536:	2300      	movs	r3, #0
 8003538:	001a      	movs	r2, r3
 800353a:	0019      	movs	r1, r3
 800353c:	f000 f9d2 	bl	80038e4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003540:	2000      	movs	r0, #0
 8003542:	bd10      	pop	{r4, pc}

08003544 <USBD_CtlReceiveStatus>:
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8003544:	23a5      	movs	r3, #165	; 0xa5
 8003546:	2205      	movs	r2, #5
 8003548:	009b      	lsls	r3, r3, #2
{
 800354a:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800354c:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800354e:	2300      	movs	r3, #0
 8003550:	001a      	movs	r2, r3
 8003552:	0019      	movs	r1, r3
 8003554:	f000 f9cf 	bl	80038f6 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003558:	2000      	movs	r0, #0
 800355a:	bd10      	pop	{r4, pc}

0800355c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800355c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800355e:	4c11      	ldr	r4, [pc, #68]	; (80035a4 <MX_USB_DEVICE_Init+0x48>)
 8003560:	2200      	movs	r2, #0
 8003562:	0020      	movs	r0, r4
 8003564:	4910      	ldr	r1, [pc, #64]	; (80035a8 <MX_USB_DEVICE_Init+0x4c>)
 8003566:	f7ff fc0f 	bl	8002d88 <USBD_Init>
 800356a:	2800      	cmp	r0, #0
 800356c:	d001      	beq.n	8003572 <MX_USB_DEVICE_Init+0x16>
  {
    Error_Handler();
 800356e:	f7fc ffbf 	bl	80004f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8003572:	0020      	movs	r0, r4
 8003574:	490d      	ldr	r1, [pc, #52]	; (80035ac <MX_USB_DEVICE_Init+0x50>)
 8003576:	f7ff fc21 	bl	8002dbc <USBD_RegisterClass>
 800357a:	2800      	cmp	r0, #0
 800357c:	d001      	beq.n	8003582 <MX_USB_DEVICE_Init+0x26>
  {
    Error_Handler();
 800357e:	f7fc ffb7 	bl	80004f0 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8003582:	0020      	movs	r0, r4
 8003584:	490a      	ldr	r1, [pc, #40]	; (80035b0 <MX_USB_DEVICE_Init+0x54>)
 8003586:	f7ff fbf6 	bl	8002d76 <USBD_CUSTOM_HID_RegisterInterface>
 800358a:	2800      	cmp	r0, #0
 800358c:	d001      	beq.n	8003592 <MX_USB_DEVICE_Init+0x36>
  {
    Error_Handler();
 800358e:	f7fc ffaf 	bl	80004f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8003592:	0020      	movs	r0, r4
 8003594:	f7ff fc1b 	bl	8002dce <USBD_Start>
 8003598:	2800      	cmp	r0, #0
 800359a:	d001      	beq.n	80035a0 <MX_USB_DEVICE_Init+0x44>
  {
    Error_Handler();
 800359c:	f7fc ffa8 	bl	80004f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80035a0:	bd10      	pop	{r4, pc}
 80035a2:	46c0      	nop			; (mov r8, r8)
 80035a4:	200002cc 	.word	0x200002cc
 80035a8:	200001c0 	.word	0x200001c0
 80035ac:	20000090 	.word	0x20000090
 80035b0:	200001b0 	.word	0x200001b0

080035b4 <CUSTOM_HID_Init_FS>:
static int8_t CUSTOM_HID_Init_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80035b4:	2000      	movs	r0, #0
 80035b6:	4770      	bx	lr

080035b8 <CUSTOM_HID_OutEvent_FS>:
	USBD_CUSTOM_HID_HandleTypeDef *hhid;
	//Obtain the storage address for USB receiving data
	hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;

	for(int i = 0; i < USBD_CUSTOMHID_INREPORT_BUF_SIZE; i++)
		recv_buffer[i] = hhid->Report_buf[i];
 80035b8:	22ae      	movs	r2, #174	; 0xae
	hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80035ba:	4b04      	ldr	r3, [pc, #16]	; (80035cc <CUSTOM_HID_OutEvent_FS+0x14>)
		recv_buffer[i] = hhid->Report_buf[i];
 80035bc:	0092      	lsls	r2, r2, #2
 80035be:	589b      	ldr	r3, [r3, r2]
	return (USBD_OK);
  /* USER CODE END 6 */
}
 80035c0:	2000      	movs	r0, #0
		recv_buffer[i] = hhid->Report_buf[i];
 80035c2:	781a      	ldrb	r2, [r3, #0]
 80035c4:	4b02      	ldr	r3, [pc, #8]	; (80035d0 <CUSTOM_HID_OutEvent_FS+0x18>)
 80035c6:	701a      	strb	r2, [r3, #0]
}
 80035c8:	4770      	bx	lr
 80035ca:	46c0      	nop			; (mov r8, r8)
 80035cc:	200002cc 	.word	0x200002cc
 80035d0:	2000022c 	.word	0x2000022c

080035d4 <CUSTOM_HID_DeInit_FS>:
 80035d4:	2000      	movs	r0, #0
 80035d6:	4770      	bx	lr

080035d8 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80035d8:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
 80035da:	4801      	ldr	r0, [pc, #4]	; (80035e0 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 80035dc:	800b      	strh	r3, [r1, #0]
}
 80035de:	4770      	bx	lr
 80035e0:	200001dc 	.word	0x200001dc

080035e4 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80035e4:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
 80035e6:	4801      	ldr	r0, [pc, #4]	; (80035ec <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 80035e8:	800b      	strh	r3, [r1, #0]
}
 80035ea:	4770      	bx	lr
 80035ec:	200001f0 	.word	0x200001f0

080035f0 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 80035f0:	2300      	movs	r3, #0
{
 80035f2:	b5f0      	push	{r4, r5, r6, r7, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 80035f4:	001f      	movs	r7, r3
    if (((value >> 28)) < 0xA)
 80035f6:	0f06      	lsrs	r6, r0, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 80035f8:	b2f5      	uxtb	r5, r6
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80035fa:	002c      	movs	r4, r5
 80035fc:	3437      	adds	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 80035fe:	2e09      	cmp	r6, #9
 8003600:	d800      	bhi.n	8003604 <IntToUnicode+0x14>
      pbuf[2 * idx] = (value >> 28) + '0';
 8003602:	3c07      	subs	r4, #7
  for (idx = 0; idx < len; idx++)
 8003604:	3301      	adds	r3, #1
 8003606:	b2db      	uxtb	r3, r3
      pbuf[2 * idx] = (value >> 28) + '0';
 8003608:	700c      	strb	r4, [r1, #0]
    pbuf[2 * idx + 1] = 0;
 800360a:	704f      	strb	r7, [r1, #1]
    value = value << 4;
 800360c:	0100      	lsls	r0, r0, #4
  for (idx = 0; idx < len; idx++)
 800360e:	3102      	adds	r1, #2
 8003610:	429a      	cmp	r2, r3
 8003612:	d1f0      	bne.n	80035f6 <IntToUnicode+0x6>
  }
}
 8003614:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003618 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8003618:	231a      	movs	r3, #26
{
 800361a:	b570      	push	{r4, r5, r6, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800361c:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800361e:	4b0b      	ldr	r3, [pc, #44]	; (800364c <USBD_FS_SerialStrDescriptor+0x34>)
 8003620:	4c0b      	ldr	r4, [pc, #44]	; (8003650 <USBD_FS_SerialStrDescriptor+0x38>)
 8003622:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8003624:	4b0b      	ldr	r3, [pc, #44]	; (8003654 <USBD_FS_SerialStrDescriptor+0x3c>)
  deviceserial0 += deviceserial2;
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	18c0      	adds	r0, r0, r3
  if (deviceserial0 != 0)
 800362a:	2800      	cmp	r0, #0
 800362c:	d00b      	beq.n	8003646 <USBD_FS_SerialStrDescriptor+0x2e>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800362e:	4b0a      	ldr	r3, [pc, #40]	; (8003658 <USBD_FS_SerialStrDescriptor+0x40>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003630:	2208      	movs	r2, #8
 8003632:	1ca1      	adds	r1, r4, #2
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003634:	681d      	ldr	r5, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003636:	f7ff ffdb 	bl	80035f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800363a:	0021      	movs	r1, r4
 800363c:	2204      	movs	r2, #4
 800363e:	0028      	movs	r0, r5
 8003640:	3112      	adds	r1, #18
 8003642:	f7ff ffd5 	bl	80035f0 <IntToUnicode>
}
 8003646:	0020      	movs	r0, r4
 8003648:	bd70      	pop	{r4, r5, r6, pc}
 800364a:	46c0      	nop			; (mov r8, r8)
 800364c:	1ffff7ac 	.word	0x1ffff7ac
 8003650:	200001f4 	.word	0x200001f4
 8003654:	1ffff7b4 	.word	0x1ffff7b4
 8003658:	1ffff7b0 	.word	0x1ffff7b0

0800365c <USBD_FS_ManufacturerStrDescriptor>:
{
 800365c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800365e:	4c04      	ldr	r4, [pc, #16]	; (8003670 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8003660:	000a      	movs	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003662:	0021      	movs	r1, r4
 8003664:	4803      	ldr	r0, [pc, #12]	; (8003674 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8003666:	f7ff ff15 	bl	8003494 <USBD_GetString>
}
 800366a:	0020      	movs	r0, r4
 800366c:	bd10      	pop	{r4, pc}
 800366e:	46c0      	nop			; (mov r8, r8)
 8003670:	20000590 	.word	0x20000590
 8003674:	08003a1d 	.word	0x08003a1d

08003678 <USBD_FS_ProductStrDescriptor>:
{
 8003678:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800367a:	4c04      	ldr	r4, [pc, #16]	; (800368c <USBD_FS_ProductStrDescriptor+0x14>)
{
 800367c:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800367e:	0021      	movs	r1, r4
 8003680:	4803      	ldr	r0, [pc, #12]	; (8003690 <USBD_FS_ProductStrDescriptor+0x18>)
 8003682:	f7ff ff07 	bl	8003494 <USBD_GetString>
}
 8003686:	0020      	movs	r0, r4
 8003688:	bd10      	pop	{r4, pc}
 800368a:	46c0      	nop			; (mov r8, r8)
 800368c:	20000590 	.word	0x20000590
 8003690:	08003a21 	.word	0x08003a21

08003694 <USBD_FS_ConfigStrDescriptor>:
{
 8003694:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003696:	4c04      	ldr	r4, [pc, #16]	; (80036a8 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8003698:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800369a:	0021      	movs	r1, r4
 800369c:	4803      	ldr	r0, [pc, #12]	; (80036ac <USBD_FS_ConfigStrDescriptor+0x18>)
 800369e:	f7ff fef9 	bl	8003494 <USBD_GetString>
}
 80036a2:	0020      	movs	r0, r4
 80036a4:	bd10      	pop	{r4, pc}
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	20000590 	.word	0x20000590
 80036ac:	08003a3e 	.word	0x08003a3e

080036b0 <USBD_FS_InterfaceStrDescriptor>:
{
 80036b0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80036b2:	4c04      	ldr	r4, [pc, #16]	; (80036c4 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 80036b4:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80036b6:	0021      	movs	r1, r4
 80036b8:	4803      	ldr	r0, [pc, #12]	; (80036c8 <USBD_FS_InterfaceStrDescriptor+0x18>)
 80036ba:	f7ff feeb 	bl	8003494 <USBD_GetString>
}
 80036be:	0020      	movs	r0, r4
 80036c0:	bd10      	pop	{r4, pc}
 80036c2:	46c0      	nop			; (mov r8, r8)
 80036c4:	20000590 	.word	0x20000590
 80036c8:	08003a50 	.word	0x08003a50

080036cc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80036cc:	0003      	movs	r3, r0
 80036ce:	2002      	movs	r0, #2
 80036d0:	2b03      	cmp	r3, #3
 80036d2:	d801      	bhi.n	80036d8 <USBD_Get_USB_Status+0xc>
 80036d4:	4a01      	ldr	r2, [pc, #4]	; (80036dc <USBD_Get_USB_Status+0x10>)
 80036d6:	5cd0      	ldrb	r0, [r2, r3]
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80036d8:	4770      	bx	lr
 80036da:	46c0      	nop			; (mov r8, r8)
 80036dc:	08003a65 	.word	0x08003a65

080036e0 <HAL_PCD_MspInit>:
{
 80036e0:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 80036e2:	4b0b      	ldr	r3, [pc, #44]	; (8003710 <HAL_PCD_MspInit+0x30>)
 80036e4:	6802      	ldr	r2, [r0, #0]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d111      	bne.n	800370e <HAL_PCD_MspInit+0x2e>
    __HAL_RCC_USB_CLK_ENABLE();
 80036ea:	2180      	movs	r1, #128	; 0x80
 80036ec:	4b09      	ldr	r3, [pc, #36]	; (8003714 <HAL_PCD_MspInit+0x34>)
 80036ee:	0409      	lsls	r1, r1, #16
 80036f0:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80036f2:	201f      	movs	r0, #31
    __HAL_RCC_USB_CLK_ENABLE();
 80036f4:	430a      	orrs	r2, r1
 80036f6:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80036f8:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 80036fa:	69db      	ldr	r3, [r3, #28]
 80036fc:	400b      	ands	r3, r1
 80036fe:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8003700:	0011      	movs	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8003702:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8003704:	f7fd f80e 	bl	8000724 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8003708:	201f      	movs	r0, #31
 800370a:	f7fd f835 	bl	8000778 <HAL_NVIC_EnableIRQ>
}
 800370e:	bd07      	pop	{r0, r1, r2, pc}
 8003710:	40005c00 	.word	0x40005c00
 8003714:	40021000 	.word	0x40021000

08003718 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003718:	23ac      	movs	r3, #172	; 0xac
{
 800371a:	b510      	push	{r4, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	18c1      	adds	r1, r0, r3
 8003720:	3340      	adds	r3, #64	; 0x40
 8003722:	58c0      	ldr	r0, [r0, r3]
 8003724:	f7ff fb6e 	bl	8002e04 <USBD_LL_SetupStage>
}
 8003728:	bd10      	pop	{r4, pc}

0800372a <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800372a:	2328      	movs	r3, #40	; 0x28
 800372c:	434b      	muls	r3, r1
 800372e:	18c3      	adds	r3, r0, r3
 8003730:	337d      	adds	r3, #125	; 0x7d
 8003732:	33ff      	adds	r3, #255	; 0xff
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	23bc      	movs	r3, #188	; 0xbc
{
 8003738:	b510      	push	{r4, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	58c0      	ldr	r0, [r0, r3]
 800373e:	f7ff fb93 	bl	8002e68 <USBD_LL_DataOutStage>
}
 8003742:	bd10      	pop	{r4, pc}

08003744 <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003744:	2328      	movs	r3, #40	; 0x28
 8003746:	434b      	muls	r3, r1
 8003748:	18c3      	adds	r3, r0, r3
 800374a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800374c:	23bc      	movs	r3, #188	; 0xbc
{
 800374e:	b510      	push	{r4, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	58c0      	ldr	r0, [r0, r3]
 8003754:	f7ff fbce 	bl	8002ef4 <USBD_LL_DataInStage>
}
 8003758:	bd10      	pop	{r4, pc}

0800375a <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800375a:	23bc      	movs	r3, #188	; 0xbc
{
 800375c:	b510      	push	{r4, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	58c0      	ldr	r0, [r0, r3]
 8003762:	f7ff fc71 	bl	8003048 <USBD_LL_SOF>
}
 8003766:	bd10      	pop	{r4, pc}

08003768 <HAL_PCD_ResetCallback>:
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8003768:	6883      	ldr	r3, [r0, #8]
{
 800376a:	b570      	push	{r4, r5, r6, lr}
 800376c:	0004      	movs	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800376e:	2b02      	cmp	r3, #2
 8003770:	d001      	beq.n	8003776 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 8003772:	f7fc febd 	bl	80004f0 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8003776:	25bc      	movs	r5, #188	; 0xbc
 8003778:	00ad      	lsls	r5, r5, #2
 800377a:	2101      	movs	r1, #1
 800377c:	5960      	ldr	r0, [r4, r5]
 800377e:	f7ff fc48 	bl	8003012 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003782:	5960      	ldr	r0, [r4, r5]
 8003784:	f7ff fc1b 	bl	8002fbe <USBD_LL_Reset>
}
 8003788:	bd70      	pop	{r4, r5, r6, pc}
	...

0800378c <HAL_PCD_SuspendCallback>:
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800378c:	23bc      	movs	r3, #188	; 0xbc
{
 800378e:	b510      	push	{r4, lr}
 8003790:	0004      	movs	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	58c0      	ldr	r0, [r0, r3]
 8003796:	f7ff fc3f 	bl	8003018 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800379a:	69a3      	ldr	r3, [r4, #24]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d004      	beq.n	80037aa <HAL_PCD_SuspendCallback+0x1e>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80037a0:	2306      	movs	r3, #6
 80037a2:	4a02      	ldr	r2, [pc, #8]	; (80037ac <HAL_PCD_SuspendCallback+0x20>)
 80037a4:	6911      	ldr	r1, [r2, #16]
 80037a6:	430b      	orrs	r3, r1
 80037a8:	6113      	str	r3, [r2, #16]
}
 80037aa:	bd10      	pop	{r4, pc}
 80037ac:	e000ed00 	.word	0xe000ed00

080037b0 <HAL_PCD_ResumeCallback>:
  if (hpcd->Init.low_power_enable)
 80037b0:	6983      	ldr	r3, [r0, #24]
{
 80037b2:	b510      	push	{r4, lr}
 80037b4:	0004      	movs	r4, r0
  if (hpcd->Init.low_power_enable)
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d006      	beq.n	80037c8 <HAL_PCD_ResumeCallback+0x18>
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80037ba:	2106      	movs	r1, #6
 80037bc:	4a05      	ldr	r2, [pc, #20]	; (80037d4 <HAL_PCD_ResumeCallback+0x24>)
 80037be:	6913      	ldr	r3, [r2, #16]
 80037c0:	438b      	bics	r3, r1
 80037c2:	6113      	str	r3, [r2, #16]
  SystemClock_Config();
 80037c4:	f7fc fd96 	bl	80002f4 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80037c8:	23bc      	movs	r3, #188	; 0xbc
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	58e0      	ldr	r0, [r4, r3]
 80037ce:	f7ff fc2f 	bl	8003030 <USBD_LL_Resume>
}
 80037d2:	bd10      	pop	{r4, pc}
 80037d4:	e000ed00 	.word	0xe000ed00

080037d8 <USBD_LL_Init>:
  hpcd_USB_FS.pData = pdev;
 80037d8:	23bc      	movs	r3, #188	; 0xbc
{
 80037da:	b570      	push	{r4, r5, r6, lr}
 80037dc:	0004      	movs	r4, r0
  hpcd_USB_FS.pData = pdev;
 80037de:	4818      	ldr	r0, [pc, #96]	; (8003840 <USBD_LL_Init+0x68>)
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	50c4      	str	r4, [r0, r3]
  hpcd_USB_FS.Instance = USB;
 80037e4:	4b17      	ldr	r3, [pc, #92]	; (8003844 <USBD_LL_Init+0x6c>)
  pdev->pData = &hpcd_USB_FS;
 80037e6:	25b0      	movs	r5, #176	; 0xb0
  hpcd_USB_FS.Instance = USB;
 80037e8:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80037ea:	2308      	movs	r3, #8
 80037ec:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80037ee:	3b06      	subs	r3, #6
 80037f0:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80037f2:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80037f4:	2300      	movs	r3, #0
  pdev->pData = &hpcd_USB_FS;
 80037f6:	00ad      	lsls	r5, r5, #2
 80037f8:	5160      	str	r0, [r4, r5]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80037fa:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80037fc:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80037fe:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003800:	f7fd f8aa 	bl	8000958 <HAL_PCD_Init>
 8003804:	2800      	cmp	r0, #0
 8003806:	d001      	beq.n	800380c <USBD_LL_Init+0x34>
    Error_Handler( );
 8003808:	f7fc fe72 	bl	80004f0 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800380c:	2200      	movs	r2, #0
 800380e:	5960      	ldr	r0, [r4, r5]
 8003810:	0011      	movs	r1, r2
 8003812:	2318      	movs	r3, #24
 8003814:	f7fd fef0 	bl	80015f8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8003818:	5960      	ldr	r0, [r4, r5]
 800381a:	2358      	movs	r3, #88	; 0x58
 800381c:	2200      	movs	r2, #0
 800381e:	2180      	movs	r1, #128	; 0x80
 8003820:	f7fd feea 	bl	80015f8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8003824:	5960      	ldr	r0, [r4, r5]
 8003826:	2398      	movs	r3, #152	; 0x98
 8003828:	2200      	movs	r2, #0
 800382a:	2181      	movs	r1, #129	; 0x81
 800382c:	f7fd fee4 	bl	80015f8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8003830:	5960      	ldr	r0, [r4, r5]
 8003832:	23d8      	movs	r3, #216	; 0xd8
 8003834:	2200      	movs	r2, #0
 8003836:	2101      	movs	r1, #1
 8003838:	f7fd fede 	bl	80015f8 <HAL_PCDEx_PMAConfig>
}
 800383c:	2000      	movs	r0, #0
 800383e:	bd70      	pop	{r4, r5, r6, pc}
 8003840:	20000790 	.word	0x20000790
 8003844:	40005c00 	.word	0x40005c00

08003848 <USBD_LL_Start>:
  hal_status = HAL_PCD_Start(pdev->pData);
 8003848:	23b0      	movs	r3, #176	; 0xb0
{
 800384a:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	58c0      	ldr	r0, [r0, r3]
 8003850:	f7fd f8ec 	bl	8000a2c <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003854:	f7ff ff3a 	bl	80036cc <USBD_Get_USB_Status>
}
 8003858:	bd10      	pop	{r4, pc}

0800385a <USBD_LL_OpenEP>:
{
 800385a:	b510      	push	{r4, lr}
 800385c:	0014      	movs	r4, r2
 800385e:	001a      	movs	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003860:	0023      	movs	r3, r4
 8003862:	24b0      	movs	r4, #176	; 0xb0
 8003864:	00a4      	lsls	r4, r4, #2
 8003866:	5900      	ldr	r0, [r0, r4]
 8003868:	f7fd fdda 	bl	8001420 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800386c:	f7ff ff2e 	bl	80036cc <USBD_Get_USB_Status>
}
 8003870:	bd10      	pop	{r4, pc}

08003872 <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003872:	23b0      	movs	r3, #176	; 0xb0
{
 8003874:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	58c0      	ldr	r0, [r0, r3]
 800387a:	f7fd fdfe 	bl	800147a <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800387e:	f7ff ff25 	bl	80036cc <USBD_Get_USB_Status>
}
 8003882:	bd10      	pop	{r4, pc}

08003884 <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003884:	23b0      	movs	r3, #176	; 0xb0
{
 8003886:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	58c0      	ldr	r0, [r0, r3]
 800388c:	f7fd fe5a 	bl	8001544 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003890:	f7ff ff1c 	bl	80036cc <USBD_Get_USB_Status>
}
 8003894:	bd10      	pop	{r4, pc}

08003896 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8003896:	23b0      	movs	r3, #176	; 0xb0
{
 8003898:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	58c0      	ldr	r0, [r0, r3]
 800389e:	f7fd fe7d 	bl	800159c <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80038a2:	f7ff ff13 	bl	80036cc <USBD_Get_USB_Status>
}
 80038a6:	bd10      	pop	{r4, pc}

080038a8 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80038a8:	23b0      	movs	r3, #176	; 0xb0
  if((ep_addr & 0x80) == 0x80)
 80038aa:	b24a      	sxtb	r2, r1
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	58c3      	ldr	r3, [r0, r3]
  if((ep_addr & 0x80) == 0x80)
 80038b0:	2a00      	cmp	r2, #0
 80038b2:	da07      	bge.n	80038c4 <USBD_LL_IsStallEP+0x1c>
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80038b4:	227f      	movs	r2, #127	; 0x7f
 80038b6:	4011      	ands	r1, r2
 80038b8:	3101      	adds	r1, #1
 80038ba:	3a57      	subs	r2, #87	; 0x57
 80038bc:	434a      	muls	r2, r1
 80038be:	189b      	adds	r3, r3, r2
 80038c0:	7898      	ldrb	r0, [r3, #2]
}
 80038c2:	4770      	bx	lr
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80038c4:	2228      	movs	r2, #40	; 0x28
 80038c6:	434a      	muls	r2, r1
 80038c8:	189b      	adds	r3, r3, r2
 80038ca:	336b      	adds	r3, #107	; 0x6b
 80038cc:	33ff      	adds	r3, #255	; 0xff
 80038ce:	7818      	ldrb	r0, [r3, #0]
 80038d0:	e7f7      	b.n	80038c2 <USBD_LL_IsStallEP+0x1a>

080038d2 <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80038d2:	23b0      	movs	r3, #176	; 0xb0
{
 80038d4:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	58c0      	ldr	r0, [r0, r3]
 80038da:	f7fd f8ba 	bl	8000a52 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80038de:	f7ff fef5 	bl	80036cc <USBD_Get_USB_Status>
}
 80038e2:	bd10      	pop	{r4, pc}

080038e4 <USBD_LL_Transmit>:
{
 80038e4:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80038e6:	24b0      	movs	r4, #176	; 0xb0
 80038e8:	00a4      	lsls	r4, r4, #2
 80038ea:	5900      	ldr	r0, [r0, r4]
 80038ec:	f7fd fe0d 	bl	800150a <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80038f0:	f7ff feec 	bl	80036cc <USBD_Get_USB_Status>
}
 80038f4:	bd10      	pop	{r4, pc}

080038f6 <USBD_LL_PrepareReceive>:
{
 80038f6:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80038f8:	24b0      	movs	r4, #176	; 0xb0
 80038fa:	00a4      	lsls	r4, r4, #2
 80038fc:	5900      	ldr	r0, [r0, r4]
 80038fe:	f7fd fde3 	bl	80014c8 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003902:	f7ff fee3 	bl	80036cc <USBD_Get_USB_Status>
}
 8003906:	bd10      	pop	{r4, pc}

08003908 <USBD_static_malloc>:
  return mem;
 8003908:	4800      	ldr	r0, [pc, #0]	; (800390c <USBD_static_malloc+0x4>)
}
 800390a:	4770      	bx	lr
 800390c:	20000a84 	.word	0x20000a84

08003910 <USBD_static_free>:
}
 8003910:	4770      	bx	lr

08003912 <memset>:
 8003912:	0003      	movs	r3, r0
 8003914:	1882      	adds	r2, r0, r2
 8003916:	4293      	cmp	r3, r2
 8003918:	d100      	bne.n	800391c <memset+0xa>
 800391a:	4770      	bx	lr
 800391c:	7019      	strb	r1, [r3, #0]
 800391e:	3301      	adds	r3, #1
 8003920:	e7f9      	b.n	8003916 <memset+0x4>
	...

08003924 <__libc_init_array>:
 8003924:	b570      	push	{r4, r5, r6, lr}
 8003926:	2600      	movs	r6, #0
 8003928:	4c0c      	ldr	r4, [pc, #48]	; (800395c <__libc_init_array+0x38>)
 800392a:	4d0d      	ldr	r5, [pc, #52]	; (8003960 <__libc_init_array+0x3c>)
 800392c:	1b64      	subs	r4, r4, r5
 800392e:	10a4      	asrs	r4, r4, #2
 8003930:	42a6      	cmp	r6, r4
 8003932:	d109      	bne.n	8003948 <__libc_init_array+0x24>
 8003934:	2600      	movs	r6, #0
 8003936:	f000 f821 	bl	800397c <_init>
 800393a:	4c0a      	ldr	r4, [pc, #40]	; (8003964 <__libc_init_array+0x40>)
 800393c:	4d0a      	ldr	r5, [pc, #40]	; (8003968 <__libc_init_array+0x44>)
 800393e:	1b64      	subs	r4, r4, r5
 8003940:	10a4      	asrs	r4, r4, #2
 8003942:	42a6      	cmp	r6, r4
 8003944:	d105      	bne.n	8003952 <__libc_init_array+0x2e>
 8003946:	bd70      	pop	{r4, r5, r6, pc}
 8003948:	00b3      	lsls	r3, r6, #2
 800394a:	58eb      	ldr	r3, [r5, r3]
 800394c:	4798      	blx	r3
 800394e:	3601      	adds	r6, #1
 8003950:	e7ee      	b.n	8003930 <__libc_init_array+0xc>
 8003952:	00b3      	lsls	r3, r6, #2
 8003954:	58eb      	ldr	r3, [r5, r3]
 8003956:	4798      	blx	r3
 8003958:	3601      	adds	r6, #1
 800395a:	e7f2      	b.n	8003942 <__libc_init_array+0x1e>
 800395c:	08003a6c 	.word	0x08003a6c
 8003960:	08003a6c 	.word	0x08003a6c
 8003964:	08003a70 	.word	0x08003a70
 8003968:	08003a6c 	.word	0x08003a6c

0800396c <strcpy>:
 800396c:	0003      	movs	r3, r0
 800396e:	780a      	ldrb	r2, [r1, #0]
 8003970:	3101      	adds	r1, #1
 8003972:	701a      	strb	r2, [r3, #0]
 8003974:	3301      	adds	r3, #1
 8003976:	2a00      	cmp	r2, #0
 8003978:	d1f9      	bne.n	800396e <strcpy+0x2>
 800397a:	4770      	bx	lr

0800397c <_init>:
 800397c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003982:	bc08      	pop	{r3}
 8003984:	469e      	mov	lr, r3
 8003986:	4770      	bx	lr

08003988 <_fini>:
 8003988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800398a:	46c0      	nop			; (mov r8, r8)
 800398c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800398e:	bc08      	pop	{r3}
 8003990:	469e      	mov	lr, r3
 8003992:	4770      	bx	lr
